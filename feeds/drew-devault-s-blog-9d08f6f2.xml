<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>Drew DeVault&apos;s blog</title><link>https://raw.githubusercontent.com/xavwe/rss-aggregator/refs/heads/main/feeds/drew-devault-s-blog-9d08f6f2.xml</link><description>Archived feed from https://drewdevault.com/blog/index.xml</description><item><title>What&apos;s up with FUTO?</title><link>https://drewdevault.com/2025/10/22/2025-10-22-Whats-up-with-FUTO.html</link><description><![CDATA[<p>Some time ago, I noticed some new organization called <a href="https://futo.org/">FUTO</a> popping up here and
there. I&rsquo;m always interested in seeing new organizations that fund open source
popping up, and seeing as they claim several notable projects on their roster, I
explored their website with interest and gratitude. I was first confused, and
then annoyed by what I found. Confused, because their website is littered with
<a href="https://futo.org/about/what-is-futo/">bizzare manifestos</a>,<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and ultimately annoyed because they
were playing fast and loose with the term &ldquo;open source&rdquo;, using it to describe
commercial source-available software.</p>
<p>FUTO eventually clarified their stance on &ldquo;open source&rdquo;, first through
<a href="https://futo.org/open-source-definition/">satire</a> and then <a href="https://futo.org/about/futo-statement-on-opensource/">somewhat more soberly</a>, perpetuating the <a href="https://drewdevault.com/2022/09/16/Open-source-matters.html">self-serving
myth</a> that <a href="https://drewdevault.com/2021/01/20/FOSS-is-to-surrender-your-monopoly.html">&ldquo;open source&rdquo; software can privilege one party over anyone
else</a> and <a href="https://drewdevault.com/2022/03/01/Open-source-is-defined-by-the-OSD.html">still be called open source</a>. I mentally categorized them as
problematic but hoped that their donations or grants for genuinely open source
projects would do more good than the harm done by this nonsense.</p>
<p>By now I&rsquo;ve learned better. <strong>tl;dr</strong>: FUTO is not being honest about their
&ldquo;grant program&rdquo;, they don&rsquo;t have permission to pass off these logos or project
names as endorsements, and they collaborate with and promote mask-off,
self-proclaimed fascists.</p>
<p>An early sign that something is off with FUTO is in that &ldquo;sober&rdquo; explanation of
their &ldquo;disdain for OSI approved licenses&rdquo;, where they make a point of
criticizing the Open Source Initiative for banning Eric S. Raymond (aka ESR)
from their mailing lists, citing right-wing reactionary conspiracy theorist
Bryan Lunduke&rsquo;s blog post on the incident. Raymond is, as you may know, one of
the founders of OSI and a bigoted asshole. He was banned from the mailing lists,
not because he&rsquo;s a bigoted asshole, but because <a href="https://lists.opensource.org/pipermail/license-discuss_lists.opensource.org/2020-February/021328.html">he was being a toxic jerk</a>
<em>on the mailing list in question</em>. Healthy institutions outgrow their founders.
That said, FUTO&rsquo;s citation and perspective on the ESR incident could be
generously explained as a simple mistake, and we should probably match
generosity with generosity given their prolific portfolio of open source grants.</p>
<p>I visited FUTO again quite recently as part of my research on <a href="https://drewdevault.com/2025/09/24/2025-09-24-Cloudflare-and-fascists.html">Cloudflare&rsquo;s
donations to fascists</a>, and was pleased to discover that this
portfolio of grants had grown immensely since my last visit, and included a
number of respectable projects that I admire and depend on (and some projects I
don&rsquo;t especially admire, hence arriving there during my research on FOSS
projects run by fascists). But something felt fishy about this list &ndash; surely I
would have heard about it if someone was going around giving big grants to
projects like ffmpeg, VLC, musl libc, Tor, Managarm, Blender, NeoVim &ndash; these
projects have a lot of overlap with my social group and I hadn&rsquo;t heard a peep
about it.</p>
<p>So I asked Rich Felker, the maintainer of <a href="https://musl.libc.org/">musl libc</a>, about the FUTO grant, and
<strong>he didn&rsquo;t know anything about it</strong>. Rich and I spoke about this for a while
and eventually Rich uncovered a transaction in his <a href="https://github.com/sponsors/richfelker">GitHub sponsors</a> account from FUTO: a one-time donation of $1,000. This payment
circumvents musl&rsquo;s established process for donations from institutional
sponsors. The donation page that FUTO used includes this explanation: &ldquo;This
offer is for individuals, and may be available to small organizations on
request. Commercial entities wishing to be listed as sponsors should inquire by
email.&rdquo; It&rsquo;s pretty clear that there are special instructions for institutional
donors who wish to receive musl&rsquo;s endorsement as thanks for their contribution.</p>
<p>The extent of the FUTO &ldquo;grant program&rdquo;, at least in the case of musl libc,
involved ignoring musl&rsquo;s established process for institutional sponsors, quietly
sending a modest one-time donation to one maintainer, and then plastering the
logo of a well-respected open source project on a list of &ldquo;grant recipients&rdquo; on
their home page. Rich eventually <a href="https://hachyderm.io/@dalias/115259232020176340">posted on Mastodon</a> to clarify that
the use of the musl name and logo here was unauthorized.</p>
<p>I also asked someone I know on the ffmpeg project about the grant that they had
received from FUTO and she didn&rsquo;t know anything about it, either. Here&rsquo;s what
she said:</p>
<blockquote>
<p>I&rsquo;m sure we did not get a grant from them, since we tear each other to pieces
over everything, and that would be enough to start a flame war. Unless some
dev independently got money from them to do something, but I&rsquo;m sure that we as
a project got nothing. The only grant we&rsquo;ve received is from the <a href="https://www.sovereign.tech/">STF</a> last
year.</p></blockquote>
<p>Neovim is another project FUTO lists as a grant recipient, and they also have a
<a href="https://neovim.io/sponsors/">separate process for institutional sponsors</a>. I
didn&rsquo;t reach out to anyone to confirm, but FUTO does not appear on the sponsor
list so presumably the M.O. is the same. This is also the case for
<a href="https://www.wireshark.org/members">Wireshark</a>,
<a href="https://conduit.rs/#donate">Conduit</a>, and
<a href="https://www.kicad.org/sponsors/sponsors/">KiCad</a>. GrapheneOS is listed
prominently as well, but <a href="https://grapheneos.social/@GrapheneOS/113443396794247106">that doesn&rsquo;t seem to have worked
out very well for them</a>.</p>
<p>So, it seems like FUTO is doing some shady stuff and putting a bunch of notable
FOSS projects on their home page without good reason to justify their
endorsement. Who&rsquo;s behind all of this?</p>
<p>As far as I can tell, the important figures are Eron Wolf<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and Louis
Rossmann.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> Wolf is the founder of FUTO &ndash; a bunch of money fell into
his lap from founding Yahoo Games before the bottom fell out of Yahoo, and he
made some smart investments to grow his wealth, which he presumably used to fund
FUTO. Rossmann is a notable figure in the right to repair movement, with a large
following on YouTube, who joined FUTO a year later and ultimately moved to
Austin to work more closely with them. His established audience and reputation
provides a marketable face for FUTO. I had heard of Rossmann prior to learning
about FUTO and held him in generally good regard, despite little specific
knowledge of his work, simply because we have a common cause in right to repair.</p>
<p>I hadn&rsquo;t heard of Wolf before looking into FUTO. However, in the course of my
research, several people tipped me off to his association with Curtis Yarvin
(aka moldbug), and in particular to the use of FUTO&rsquo;s platform and the
credentials of Wolf and Rossman to platform and promote Yarvin. Curtis Yarvin is
a full-blown, mask-off, self-proclaimed fascist. A negligible amount of due
diligence is required to verify this, but here&rsquo;s one source from Politico in
January 2025:</p>
<blockquote>
<p>I’ve interacted with Vance once since the election. I bumped into him at a
party. He said, &ldquo;Yarvin, you reactionary fascist.&rdquo; I was like, &ldquo;Thank you, Mr.
Vice President, and I’m glad I didn’t stop you from getting elected.&rdquo;</p></blockquote>
<p>&ndash; <a href="https://www.politico.com/news/magazine/2025/01/30/curtis-yarvins-ideas-00201552">Ian Ward for Politico</a></p>
<p>Vice President Vance and numerous other figures in the American right have cited
Yarvin as a friend and source of inspiration in shaping policy.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>
Among his many political positions, Yarvin has has proclaimed that black people
are genetically predisposed to a lower IQ than white people, and moreover
suggests that black people are inherently suitable for
enslavement.<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p>
<p>Yarvin has appeared on FUTO&rsquo;s social media channels, in particular in an
interview published on
<a href="https://peertube.futo.org/w/eSzKtjupL928QzxPXC5k2R">PeerTube</a> and
<a href="https://odysee.com/@FUTO:e/curtisyarvin:2">Odysee</a>, the latter a platform
controversial for its role in spreading hate speech and
misinformation.<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> Yarvin <a href="https://www.youtube.com/watch?v=iFn5t4etqNg">also appeared on stage</a> to &ldquo;debate&rdquo; Louis Rossmann in June 2022, in which Yarvin is permitted
to speak at length with minimal interruptions or rebuttals to argue for an
authoritarian techno-monarchy to replace democracy.</p>
<p>Rossmann caught some flack for this &ldquo;debate&rdquo; and gave a milquetoast response in
<a href="https://www.youtube.com/watch?v=iFn5t4etqNg&amp;lc=Ugx7ba2sI30CGEylY_R4AaABAg">a YouTube comment</a>
on this video, explaining that he agreed to this on very short notice as a favor
to Eron, who had donated &ldquo;a million&rdquo; to Rossmann&rsquo;s non-profit prior to bringing
Rossmann into the fold at FUTO. Rossmann does rebuke Yarvin&rsquo;s thesis, albeit
buried in this YouTube comment rather than when he had the opportunity to do so
on-stage during the debate. Don&rsquo;t argue with fascists, Louis &ndash; they aren&rsquo;t
arguing with <em>you</em>, they are pitching their ideas<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> to <em>the
audience</em>. Smart fascists are experts at misdirection and bad-faith debate
tactics and as a consequence Rossmann just becomes a vehicle for fascist
propaganda &ndash; consult the YouTube comments to see who this video resonates with
the most.</p>
<p>In the end, Rossmann seems to regret agreeing to this debate. I don&rsquo;t think that
Eron Wolf regrets it, though &ndash; based on his facilitation of this debate and his
own interview with Yarvin on the FUTO channel a month later, I can only assume
that Wolf considers Yarvin a close associate. No surprise given that Wolf is
precisely the kind of insecure silicon valley techbro Yarvin&rsquo;s rhetoric is
designed to appeal to &ndash; moderately wealthy but unknown, and according to
Yarvin, fit to be a king. Rossmann probably needs to reflect on why he
associates with and lends his reputation to an organization that openly and
unapologetically platforms its founder&rsquo;s fascist friends.</p>
<p>In summary, FUTO is not just the product of some eccentric who founded a
grant-making institution that funds open source at the cost of making us read
his weird manifestos on free markets and oligopoly. It&rsquo;s a private, for-profit
company that associates with and uses their brand to promote fascists. They push
an open-washing narrative and they portray themselves as a grant-making
institution when, in truth, they&rsquo;re passing off a handful of small donations as
if they were endorsements from dozens of respectable, high-profile open source
projects, in an attempt to legitimize themselves, and, indirectly, legitimize
people they platform like Curtis Yarvin.</p>
<p>So, if you read this and discover that <em>your</em> project&rsquo;s name and logo is being
proudly displayed <a href="https://futo.org">on the front page</a> of a fascist-adjacent,
washed-up millionaire&rsquo;s scummy vanity company, and you don&rsquo;t like that, maybe
you should ask them to knock it off? Eron, Louis &ndash; you know that a lot of these
logos are trademarked, right?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Here&rsquo;s a quote from <a href="https://futo.org/about/what-does-futo-believe/">another one</a>: &ldquo;While the vast majority of elite coders have been neutralized by the Oligopoly, the vast majority of those remaining have become preoccupied with cryptocurrency money-making schemes.&rdquo;&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Source: <a href="https://futo.org/about/what-is-futo/">What is FUTO?</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Source: <a href="https://www.youtube.com/watch?v=tca6xsBEuGw">Announcing the Newest Member of FUTO: Louis Rossmann!</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Source: <a href="https://www.politico.com/news/magazine/2024/07/18/jd-vance-world-view-sources-00168984">Politico: The Seven Thinkers and Groups That Have Shaped JD Vance’s Unusual Worldview</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Source: <a href="https://www.inc.com/tess-townsend/why-it-matters-that-an-obscure-programming-conference-is-hosting-mencius-moldbug.html">Inc.: Controversy Rages Over ‘Pro-Slavery’ Tech Speaker Curtis Yarvin</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Source: <a href="https://www.theguardian.com/world/2021/may/14/odysee-video-platform-nazi-content-not-grounds-for-removal">The Guardian: Video platform chief says Nazi posts on white superiority do not merit removal</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>You know, authoritarianism, anti-democracy, genocide, etc.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 22 Oct 2025 00:00:00 +0000</pubDate></item><item><title>Cloudflare bankrolls fascists</title><link>https://drewdevault.com/2025/09/24/2025-09-24-Cloudflare-and-fascists.html</link><description><![CDATA[<p>US politics has been pretty fascist lately. The state is filling up
concentration camps, engaging in mass state violence against people on the basis
of racialized traits, deporting them to random countries without any respect for
habeas corpus, exerting state pressure on the free press to censor speech
critical of the current administration, and Trump is openly floating the idea of
an unconstitutional third term.</p>
<p>Fascism is clearly on the rise, and they&rsquo;re winning more and more power.
None of this is far removed from us in the FOSS community &ndash; there are a number
of fascists working in FOSS, same as the rest of society. I don&rsquo;t call them
fascists baselessly &ndash; someone who speaks out in support of and expresses
solidarity with fascists, or who uses fascists dog-whistles or promotes fascist
ideology and talking points, or boosts fascist conspiracy theories &ndash; well,
they&rsquo;re a fascist.</p>
<p>If one consistently speaks in support of a certain political position and
against the opponents of that position then it is correct to identify them with
this political position. Facts, as it were, don&rsquo;t care about feelings, namely
the feelings that get hurt when someone is called a fascist. Fascists naturally
do not want to be identified as such and will reject the label, but we shouldn&rsquo;t
take their word for it. People should be much more afraid of being called out as
fascist than they are afraid of calling someone a fascist. If someone doesn&rsquo;t
want to be called a fascist, they shouldn&rsquo;t act like one.</p>
<p>It&rsquo;s in this disturbing political context that I saw an odd post from the
Cloudflare blog pop up in my circles this week: <a href="https://blog.cloudflare.com/supporting-the-future-of-the-open-web/">Supporting the future of the
open web: Cloudflare is sponsoring Ladybird and Omarchy</a>. Based on
<a href="https://ladybird.org/#faq">Ladybird&rsquo;s sponsorship terms</a> we can assume that these
projects received on the order of $100,000 USD from Cloudflare. I find this odd
for a few reasons, in particular because one thing that I know these two
projects have in common is that they are both run by fascists.</p>
<p>Even at face value this is an unusual pair of projects to fund. I&rsquo;m all for FOSS
projects getting funded, of course, and I won&rsquo;t complain about a project&rsquo;s
funding on the solitary basis that it&rsquo;s an odd choice. I will point out that
these are odd choices, though, especially Omarchy.</p>
<p>Ladybird makes some sense, given that it&rsquo;s aligned in principle with
Cloudflare&rsquo;s stated objective to &ldquo;support the open web&rdquo;, though I remain bearish
that new web browser engines are even <a href="https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html">possible to make</a>.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Omarchy is a
bizarre choice, though &ndash; do we really need another pre-customized Arch Linux
distribution? And if we do, do we really need a big corporation like Cloudflare
to bankroll it? Everyone on /r/unixporn manages to make Arch Linux look pretty
for free.</p>
<p>Omarchy is a <em>very</em> weird project to fund, come to think of it. Making an Arch
Linux spin technically requires <em>some</em> work, and work is work, I won&rsquo;t deny it,
but most of the work done here is from Arch Linux and Hyprland. Why not fund
those, instead? Well, don&rsquo;t fund Hyprland, since it&rsquo;s also <a href="https://drewdevault.com/2023/09/17/Hyprland-toxicity.html">run by</a> a <a href="https://drewdevault.com/2024/04/09/2024-04-09-FDO-conduct-enforcement.html">bunch
of fascists</a>, but you get my point.</p>
<p>Anyway, Omarchy and Ladybird are both run by fascists. Omarchy makes this pretty
obvious from the outset &ndash; on <a href="https://omarchy.org/">the home page</a> the big YouTube poster image
<a href="https://redacted.moe/f/ba0d7a6b.png">prominently features</a> SuperGrok, which is
a pathetically transparent dog-whistle to signal alliance with Elon Musk&rsquo;s
fascist politics. Omarchy is the pet project of David Heinemeier Hansson, aka
DHH, who is well known as a rich <a href="https://davidcel.is/articles/rails-needs-new-governance">fascist</a> <a href="https://tekin.co.uk/2025/09/the-ruby-community-has-a-dhh-problem">weirdo</a>.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> One need only consult <a href="https://world.hey.com/dhh">his blog</a> to browse his <a href="https://world.hey.com/dhh/as-i-remember-london-e7d38e64">weird, racist views
on immigration</a>, <a href="https://world.hey.com/dhh/the-beauty-of-ideals-b3dccf72">fat-shaming objections to diverse representation</a>,
<a href="https://world.hey.com/dhh/the-parental-dead-end-of-consent-morality-e4e8a8ee">vaguely anti-feminist/homophobic/rapey rants on consent</a>, and, recently,
<a href="https://world.hey.com/dhh/words-are-not-violence-c751f14f">tone-policing antifascists</a> who celebrate the death of notable fascist
Charlie Kirk.</p>
<p>Speaking of tributes to Charlie Kirk, that brings us to Andreas Kling, the
project lead for Ladybird, who tweeted on the occasion of his assassination:</p>
<blockquote>
<p>RIP Charlie Kirk</p>
<p>I hope many more debate nerds carry on his quest to engage young people with
words, not fists.</p></blockquote>
<p>&ndash; <a href="https://nitter.net/awesomekling/status/1966456391146606806">@awesomekling</a></p>
<p>Kling has had a few things to say about Kirk on Twitter lately. <a href="https://nitter.net/awesomekling/status/1967178708852097278">Here&rsquo;s another
one</a> &ndash; give you
three guesses as to which &ldquo;[group]&rdquo; he objects to punching. You may also recall
that Kling achieved some notoriety for his obnoxious response as the maintainer
of SerenityOS when someone proposed gender-neutral language for the
documentation:</p>
<p><a href="https://github.com/SerenityOS/serenity/pull/6814"><img src="https://redacted.moe/f/d57df43b.png" alt="Screenshot of the interaction on GitHub. Kling responds &ldquo;This project is not an appropriate arena to advertise your personal politics.&rdquo;"></a></p>
<p>Replacing &ldquo;he&rdquo; with &ldquo;they&rdquo; in one sentence of the documentation is the kind of
&ldquo;ideologically motivated change&rdquo; that Serenity&rsquo;s <a href="https://github.com/SerenityOS/serenity/blob/master/CONTRIBUTING.md#on-ideologically-motivated-changes">CONTRIBUTING.md</a> apparently
aims to prevent, a classic case of the sexist &ldquo;identities that are not men are
inherently political&rdquo; nonsense. Ladybird has a <a href="https://github.com/LadybirdBrowser/ladybird/blob/master/CONTRIBUTING.md#on-neutrality">similar, weirdly defensive
policy</a> on &ldquo;neutrality&rdquo;, and a milquetoast <a href="https://github.com/LadybirdBrowser/ladybird/blob/master/CODE_OF_CONDUCT.md">code of
conduct</a>, which is based on the Ruby Community Conduct Guideline,
which has been itself the subject of many controversies due to its inadequacy
leading to real-world incidents of harassment and abuse.</p>
<p>Here&rsquo;s another one &ndash; Kling endorsing white replacement theory in June:</p>
<blockquote>
<blockquote>
<p>White males are actively discriminated against in tech.</p>
<p>It’s an open secret of Silicon Valley.</p></blockquote>
<p>One of the last meetings I attended before leaving Apple (in 2017) was
management asking us to &ldquo;keep the corporate diversity targets in mind&rdquo; when
interviewing potential new hires.</p>
<p>The phrasing was careful, but the implication was pretty clear.</p>
<p>I knew in my heart this wasn&rsquo;t wholesome, but I was too scared to rock the
boat at the time.</p></blockquote>
<p>&ndash; <a href="https://nitter.net/awesomekling/status/1874518295350837401">@awesomekling</a> replying to @danheld<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>And in a moment of poetic irony, a few days ago Kling <a href="https://nitter.net/awesomekling/status/1969350008538370216">spoke in
solidarity</a> with DHH over his &ldquo;persecution&rdquo; for &ldquo;banal, mainstream
positions&rdquo; on Twitter just a few days ago, in response to DHH&rsquo;s tweet
signal-boosting another <a href="https://www.youtube.com/watch?v=mhqeuO9RKKk">notable reactionary tech fascist</a>, Bryan
Lunduke.</p>
<p>So, to sum it up, Kling wears his mask a bit better than DHH, but as far as I&rsquo;m
concerned it seems clear that both projects are run by fascists. If it walks
like a fascist and quacks like a fascist&hellip; then why is Cloudflare giving them
hundreds of thousands of dollars?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I did think it was cute that Kling used a screenshot of Ladybird rendering
my blog post <a href="https://awesomekling.substack.com/p/how-were-building-a-browser-when">back in 2023</a>
to headline one of his articles on Ladybird, though.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>And a multi-millionaire who can fund his &ldquo;Arch Linux for Obnoxious
Reactionary Assholes&rdquo; project his own damn self, in my opinion. He also
<a href="https://world.hey.com/dhh/the-spells-are-spent-beaa675b">does not want</a> to be called a fascist, in which case he should probably
stop being so fucking faschy.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Who is ultimately responding to @shaunmmaguire&rsquo;s tweet <a href="https://nitter.net/shaunmmaguire/status/1872479474157252767#m">lying about
being told he wouldn&rsquo;t be promoted at Google for being white</a>.
Shaun also posts about <a href="https://nitter.net/shaunmmaguire/status/1970195581797826769">the threat</a> of
&ldquo;Radical Islamist&rdquo; &ldquo;Marxists&rdquo; to whom Europe &ldquo;will be lost&rdquo;,
<a href="https://www.yahoo.com/news/articles/doj-deletes-own-study-website-032537612.html">falsely</a>
<a href="https://nitter.net/shaunmmaguire/status/1969615941282775120">accuse</a> the
&ldquo;far left&rdquo; of committing &ldquo;almost all mass murders and political violence&rdquo; in
the last few years, and <a href="https://nitter.net/shaunmmaguire/status/1968476676603732293">praise</a>
Trump for classifying antifascists as terrorists.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate></item><item><title>A better future for JavaScript that won&apos;t happen</title><link>https://drewdevault.com/2025/09/17/2025-09-17-An-impossible-future-for-JS.html</link><description><![CDATA[<p>In the wake of <a href="https://www.ox.security/blog/npm-2-0-hack-40-npm-packages-hit-in-major-supply-chain-attack/">the largest supply-chain attack in history</a>, the JavaScript
community could have a moment of reckoning and decide: never again. As the panic
and shame subsides, after compromised developers finish re-provisioning their
workstations and rotating their keys, the ecosystem might re-orient itself
towards solving the fundamental flaws that allowed this to happen.</p>
<p>After all, people have been sounding the alarm <a href="https://drewdevault.com/2019/12/09/Developers-shouldnt-distribute.html">for years</a> that this approach
to dependency management is <a href="https://drewdevault.com/2021/09/27/Let-distros-do-their-job.html">reckless</a> and <a href="https://drewdevault.com/2022/05/12/Supply-chain-when-will-we-learn.html">dangerous</a> and broken by
design. Maybe this is the moment when the JavaScript ecosystem begins to
understand the importance and urgency of this problem, and begins its course
correction. It could leave behind its sprawling dependency trees full of
micro-libraries, establish software distribution based on relationships of
trust, and incorporate the decades of research and innovation established by
more serious dependency management systems.</p>
<p>Perhaps Google and Mozilla, leaders in JavaScript standards and implementations,
will start developing a real standard library for JavaScript, which makes
micro-dependencies like left-pad a thing of the past. This could be combined
with a consolidation of efforts, merging micro-libraries into larger packages
with a more coherent and holistic scope and purpose, which prune their own
dependency trees in turn.</p>
<p>This could be the moment where npm comes to terms with its broken design, and
with a well-funded effort (recall that, ultimately, npm is GitHub is Microsoft,
market cap $3 trillion USD), will develop and roll out the next generation of
package management for JavaScript. It could incorporate the practices developed
and proven in Linux distributions, which rarely suffer from these sorts of
attacks, by de-coupling development from packaging and distribution,
establishing package maintainers who assemble and distribute curated collections
of software libraries. By introducing universal signatures for packages of
executable code, smaller channels and webs of trust, reproducible builds, and
the many other straightforward, obvious techniques used by responsible package
managers.</p>
<p>Maybe other languages that depend on this broken dependency management model,
like Cargo, PyPI, RubyGems, and many more, are watching this incident and know
that the very same crisis looms in their future. Maybe they will change course,
too, before the inevitable.</p>
<p>Imagine if other large corporations who depend on and profit from this massive
pile of recklessly organized software committed their money and resources to it,
through putting their engineers to the task of fixing these problems, through
coming together to establish and implement new standards, through direct funding
of their dependencies and by distributing money through institutions like NLNet,
ushering in an era of responsible, sustainable, and secure software development.</p>
<p>This would be a good future, but it&rsquo;s not the future that lies in wait for us.
The future will be more of the same. Expect symbolic gestures &ndash; mandatory 2FA
will be rolled out in more places, certainly, and the big players will write off
meager donations in the name of &ldquo;OSS security and resilience&rdquo; in their marketing
budgets.</p>
<p>No one will learn their lesson. This has been happening for decades and no one
has learned anything from it yet. This is the defining hubris of this generation
of software development.</p>]]></description><pubDate>Wed, 17 Sep 2025 00:00:00 +0000</pubDate></item><item><title>Embedding Wren in Hare</title><link>https://drewdevault.com/2025/08/20/2025-08-20-Hare-and-Wren.html</link><description><![CDATA[<p>I&rsquo;ve been on the lookout for a scripting language which can be neatly embedded
into Hare programs. Perhaps the obvious candidate is <a href="https://www.lua.org/">Lua</a> &ndash; but I&rsquo;m not
particularly enthusiastic about it. When I was evaluating the landscape of tools
which are &ldquo;like Lua, but not Lua&rdquo;, I found an interesting contender: <a href="https://wren.io/">Wren</a>.</p>
<p>I found that Wren punches far above its weight for such a simple language. It&rsquo;s
object oriented, which, you know, take it or leave it depending on your
use-case, but it&rsquo;s very straightforwardly interesting for what it is. I found a
few things to complain about, of course &ndash; its scope rules are silly, the C API
has some odd limitations here and there, and in my opinion the &ldquo;standard
library&rdquo; provided by wren CLI is poorly designed. But, surprisingly, my list of
complaints more or less ends there, and I was excited to build a nice interface
to it from Hare.</p>
<p>The result is <a href="https://wren.builtwithhare.org">hare-wren</a>. Check it out!</p>
<p>The basic Wren C API is relatively straightforwardly exposed to Hare via the
wren module, though I elected to mold it into a more idiomatic Hare interface
rather than expose the C API directly to Hare. You can use it something like
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">wren</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">vm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wren</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">wren</span><span class="o">::</span><span class="n">stdio_config</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">wren</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">vm</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">wren</span><span class="o">::</span><span class="n">interpret</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;main&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">		System.print(&#34;Hello world!&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s">	`</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><hr>
<pre tabindex="0"><code>$ hare run -lc main.ha
Hello world!
</code></pre><p>Calling Hare from Wren and vice-versa is also possible with hare-wren, of
course. Here&rsquo;s another example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">wren</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="n">wren</span><span class="o">::</span><span class="n">stdio_config</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">config</span><span class="p">.</span><span class="n">bind_foreign_method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">bind_foreign_method</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">vm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wren</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">wren</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">vm</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">wren</span><span class="o">::</span><span class="n">interpret</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;main&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">	class Example {
</span></span></span><span class="line"><span class="cl"><span class="s">		foreign static greet(user)
</span></span></span><span class="line"><span class="cl"><span class="s">	}
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">	System.print(Example.greet(&#34;Harriet&#34;))
</span></span></span><span class="line"><span class="cl"><span class="s">	`</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">bind_foreign_method</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">vm</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">wren</span><span class="o">::</span><span class="n">vm</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">module</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">class_name</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">is_static</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">signature</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">wren</span><span class="o">::</span><span class="n">foreign_method_fn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">is_valid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">class_name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;Example&#34;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">signature</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;greet(_)&#34;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">is_static</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">is_valid</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="kt">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="o">&amp;</span><span class="n">greet_user</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">greet_user</span><span class="p">(</span><span class="n">vm</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">wren</span><span class="o">::</span><span class="n">vm</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wren</span><span class="o">::</span><span class="n">get_string</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">greeting</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">asprintf</span><span class="p">(</span><span class="s">&#34;Hello, {}!&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">greeting</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">wren</span><span class="o">::</span><span class="n">set_string</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">greeting</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><hr>
<pre tabindex="0"><code>$ hare run -lc main.ha
Hello, Harriet!
</code></pre><p>In addition to exposing the basic Wren virtual machine to Hare, hare-wren has an
optional submodule, wren::api, which implements a simple async runtime based on
<a href="https://sr.ht/~sircmpwn/hare-ev">hare-ev</a> and a modest &ldquo;standard&rdquo; library, much like <a href="https://wren.io/cli/">Wren CLI</a>. I felt that the
Wren CLI libraries had a lot of room for improvement, so I made the call to
implement a standard library which is only somewhat compatible with Wren CLI.</p>
<p>On top of the async runtime, Hare&rsquo;s wren::api runtime provides some basic
features for reading and writing files, querying the process arguments and
environment, etc. It&rsquo;s not much but it is, perhaps, an interesting place to
begin building out something a bit more interesting. A simple module loader is
also included, which introduces some conventions for installing third-party Wren
modules that may be of use for future projects to add new libraries and such.</p>
<p>Much like wren-cli, hare-wren also provides the <code>hwren</code> command, which makes
this runtime, standard library, and module loader conveniently available from
the command line. It does not, however, support a REPL at the moment.</p>
<p>I hope you find it interesting! I have a few projects down the line which might
take advantage of hare-wren, and it would be nice to expand the wren::api
library a bit more as well. If you have a Hare project which would benefit from
embedding Wren, please let me know &ndash; and consider sending some patches to
improve it!</p>]]></description><pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate></item><item><title>What&apos;s new with Himitsu 0.9?</title><link>https://drewdevault.com/2025/08/08/2025-08-08-Whats-new-with-himitsu.html</link><description><![CDATA[<p>Last week, Armin and I worked together on the latest release of <a href="https://himitsustore.org/">Himitsu</a>, a
&ldquo;secret storage manager&rdquo; for Linux. I haven&rsquo;t blogged about Himitsu since I
announced it <a href="https://drewdevault.com/2022/06/20/Himitsu.html">three years ago</a>, and I thought it would be nice to give you a
closer look at the latest release, both for users eager to see the latest
features and for those who haven&rsquo;t been following along.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<hr>
<p><em>A brief introduction: Himitsu is like a password manager, but more general: it
stores any kind of secret in its database, including passwords but also SSH
keys, credit card numbers, your full disk encryption key, answers to those
annoying &ldquo;security questions&rdquo; your bank obliged you to fill in, and so on. It
can also enrich your secrets with arbitrary metadata, so instead of just
storing, say, your IMAP password, it can also store the host, port, TLS
configuration, and username, storing the complete information necessary to
establish an IMAP session.</em></p>
<p><em>Another important detail: Himitsu is written in Hare and depends on Hare&rsquo;s
native implementations of cryptographic primitives &ndash; neither Himitsu nor the
cryptography implementation it depends on have been independently audited.</em></p>
<hr>
<p>So, what new and exciting features does Himitsu 0.9 bring to the table? Let me
summarize the highlights for you.</p>
<h2 id="a-new-prompter">A new prompter</h2>
<p>The face of Himitsu is the prompter. The core Himitsu daemon has no user
interface and only communicates with the outside world through its IPC
protocols. One of those protocols is the &ldquo;prompter&rdquo;, which Himitsu uses to
communicate with the user, to ask you for consent to use your secret keys, to
enter the master password, and so on. The prompter is decoupled from the daemon
so that it is easy to substitute with different versions which accommodate
different use-cases, for example by integrating the prompter more deeply into a
desktop environment or to build one that fits better on a touch screen UI like a
phone.</p>
<p>But, in practice, given Himitsu&rsquo;s still-narrow adoption, most people use the
GTK+ prompter developed upstream. Until recently, the prompter was written in
Python for GTK+ 3, and it was a bit janky and stale. The new <a href="https://git.sr.ht/~sircmpwn/hiprompt-gtk">hiprompt-gtk</a>
changes that, replacing it with a new GTK4 prompter implemented in Hare.</p>
<p><video src="https://redacted.moe/f/176df4cc.webm" autoplay muted controls loop></video></p>
<p>I&rsquo;m excited to share this one with you &ndash; it was personally my main contribution
to this release. The prompter is based on Alexey Yerin&rsquo;s <a href="https://git.sr.ht/~yerinalexey/hare-gi">hare-gi</a>, which is a
(currently only prototype-quality) code generator which processes GObject
Introspection documents into Hare modules that bind to libraries like GTK+. The
prompter uses <a href="https://gnome.pages.gitlab.gnome.org/libadwaita/doc/1-latest/">Adwaita</a> for its aesthetic and controls and <a href="https://github.com/wmww/gtk4-layer-shell">GTK layer shell</a> for
smoother integration on supported Wayland compositors like Sway.</p>
<h2 id="secret-service-integration">Secret service integration</h2>
<p>Armin has been hard at work on a new package, <a href="https://git.sr.ht/~apreiml/himitsu-secret-service">himitsu-secret-service</a>, which
provides the long-awaited support for integrating Himitsu with the dbus Secret
Service API used by many Linux applications to manage secret keys. This makes it
possible for Himitsu to be used as a secure replacement for, say, gnome-keyring.</p>
<h2 id="editing-secret-keys">Editing secret keys</h2>
<p>Prior to this release, the only way to edit a secret key was to remove it and
re-add it with the desired edits applied manually. This was a tedious and
error-prone process, especially when bulk-editing keys. This release includes
some work from Armin to improve the process, by adding a &ldquo;change&rdquo; request to the
IPC protocol and implementing it in the command line hiq client.</p>
<p>For example, if you changed your email address, you could update all of your
logins like so:</p>
<pre tabindex="0"><code>$ hiq -c email=newemail@example.org email=oldemail@example.org
</code></pre><p>Don&rsquo;t worry about typos or mistakes &ndash; the new prompter will give you a summary
of the changes for your approval before the changes are applied.</p>
<p>You can also do more complex edits with the -e flag &ndash; check out the hiq(1) man
page for details.</p>
<h2 id="secret-reuse-notifications">Secret reuse notifications</h2>
<p>Since version 0.8, Himitsu has supported &ldquo;remembering&rdquo; your choice, for
supported clients, to consent to the use of your secrets. This allows you, for
example, to remember that you agreed for the <a href="https://git.sr.ht/~sircmpwn/himitsu-ssh">SSH agent</a> to use your SSH keys
for an hour, or for the duration or your login session, etc. Version 0.9 adds a
minor improvement to this feature &ndash; you can add a command to himitsu.ini, such
as notify-send, which will be executed whenever a client takes advantage of this
&ldquo;remembered&rdquo; consent, so that you can be notified whenever your secrets are used
again, ensuring that any unexpected use of your secrets will get your attention.</p>
<h2 id="himitsu-firefox-improvements">himitsu-firefox improvements</h2>
<p>There are also some minor improvements landed for <a href="https://git.sr.ht/~sircmpwn/himitsu-firefox">himitsu-firefox</a> that I&rsquo;d
like to note. tiosgz sent us a nice patch which makes the identification of
login fields in forms more reliable &ndash; thanks! And I&rsquo;ve added a couple of useful
programs, himitsu-firefox-import and himitsu-firefox-export, which will help you
move logins between Himitsu and Firefox&rsquo;s native password manager, should that
be useful to you.</p>
<h2 id="and-the-rest">And the rest</h2>
<p>Check out the <a href="https://git.sr.ht/~sircmpwn/himitsu/refs/0.9">changelog</a> for the rest of the improvements. Enjoy!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Tip for early adopters &ndash; if you didn&rsquo;t notice, Himitsu 0.4 included a
fix for a bug with Hare&rsquo;s argon2 implementation, which is used to store your
master key. If you installed Himitsu prior to 0.4 and hadn&rsquo;t done so yet,
you might want to upgrade your key store with <code>himitsu-store -r</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 8 Aug 2025 00:00:00 +0000</pubDate></item><item><title>Just speak the truth</title><link>https://drewdevault.com/2025/06/30/Speak-the-truth.html</link><description><![CDATA[<p>Today, we&rsquo;re looking at two case studies in how to respond when reactionaries
appear in your free software community.</p>
<h2 id="exhibit-a">Exhibit A</h2>
<blockquote>
<p>It is a technical decision.</p>
<p>The technical reason is that the security team does not have the bandwidth to
provide lifecycle maintenance for multiple X server implementations. Part of
the reason for moving X from main to community was to reduce the burden on the
security team for long-term maintenance of X. Additionally, nobody so far on
the security team has expressed any interest in collaborating with
<span class="redacted">xxxxxx</span> on security concerns.</p>
<p>We have a working relationship with Freedesktop already, while we would have
to start from the beginning with <span class="redacted">xxxxxx</span>.</p>
<p>Why does nobody on the security team have any interest in collaboration with
<span class="redacted">xxxxxx</span>? Well, speaking for myself only here &ndash;
when I looked at their official chat linked in their README, I was immediately
greeted with alt-right propaganda rather than tactically useful information
about <span class="redacted">xxxxxx</span> development. At least for me, I
don&rsquo;t have any interest in filtering through hyperbolic political discussions
to find out about CVEs and other relevant data for managing the security
lifecycle of X.</p>
<p>Without relevant security data products from
<span class="redacted">xxxxxx</span>, as well as a professionally-behaving
security contact, it is unlikely for <span class="redacted">xxxxxx</span> to
gain traction in any serious distribution, because X is literally one of the
more complex stacks of software for a security team to manage already.</p>
<p>At the same time, I sympathize with the need to keep X alive and in good
shape, and agree that there hasn&rsquo;t been much movement from freedesktop in
maintaining X in the past few years. There are many desktop environments which
will never get ported to Wayland and we do need a viable solution to keep
those desktop environments working.</p></blockquote>
<style>
.redacted {
  color: black;
  background: black;
}
</style>
<p>I know the person who wrote this, and I know that she&rsquo;s a smart cookie, and
therefore I know that she probably understood at a glance that the community
behind this &ldquo;project&rdquo; literally wants to lynch her. In response, she takes the
high road, avoids confronting the truth directly, and gives the trolls a bunch
of talking points to latch on for counter-arguments. Leaves plenty of room for
them to bog everyone down in concern trolling and provides ample material to
fuel their attention-driven hate machine.</p>
<p>There&rsquo;s room for improvement here.</p>
<h2 id="exhibit-b">Exhibit B</h2>
<p><img src="https://redacted.moe/f/d9dd3368.png" alt="Screenshot of a post by Chimera Linux which reads &ldquo;any effort to put (redacted) in chimera will be rejected on the technical basis of the maintainers being reactionary dipshits&rdquo;"></p>
<p>Concise, speaks the truth, answers ridiculous proposals with ridicule, does not
afford the aforementioned reactionary dipshits an opportunity to propose a
counter-argument. A+.</p>
<p>Extra credit for the follow-up:</p>
<p><img src="https://redacted.moe/f/965aa15b.png" alt="Screenshot of a follow-up post that reads &ldquo;just to be clear, given the coverage of the most recent post, we don&rsquo;t want to be subject to any conspiracy theories arising from that. so i&rsquo;ll just use this opportunity to declare that we are definitely here to further woke agenda by turning free software gay&rdquo;"></p>
<hr>
<p>The requirement for a passing grade in this class is a polite but summary
dismissal, but additional credit is awarded for anyone who does not indulge
far-right agitators as if they were equal partners in maintaining a sense of
professional decorum.</p>
<p>If you are a community leader in FOSS, you are not obligated to waste your time
coming up with a long-winded technical answer to keep nazis out of your
community. They want you to argue with them and give them attention and feed
them material for their reactionary blog or whatever. Don&rsquo;t fall into their
trap. Do not answer bad faith with good faith. This is a skill you need to learn
in order to be an effective community leader.</p>
<p>If you see nazis 👏👏 you ban nazis 👏👏 &mdash; it&rsquo;s as simple as that.</p>
<hr>
<p><em>The name of the project is censored not because it&rsquo;s particularly hard for you
to find, but because all they really want is attention, and you and me are going
to do each other a solid by not giving them any of that directly.</em></p>
<p><em>To preclude the sorts of reply guys who are going to insist on name-dropping
the project and having a thread about the underlying drama in the comments, the
short introduction is as follows:</em></p>
<p><em>For a few years now, a handful of reactionary trolls have been stoking division
in the community by driving a wedge between X11 and Wayland users, pushing a
conspiracy theory that paints RedHat as the DEI boogeyman of FOSS and assigning
reactionary values to X11 and woke (pejorative) values to Wayland. Recently,
reactionary opportunists &ldquo;forked&rdquo; Xorg, replaced all of the literature with
political manifestos and
<abbr title="Coded language that signals in-group status between reactionaries and hate groups while appearing benign to outsiders who don't recognize their dialect. 'DEI' is an example of a dog-whistle: it appears overtly benign, but reactionaries use it when they want to say the N-word in polite company.">dog-whistles</abbr>,
then used it as a platform to start shit
with downstream Linux distros by petitioning for inclusion and sending
<abbr title="People who argue in bad faith to disrupt discussions by tactically dwelling on tone, rhetoric, philosophy, or procedural issues. Often they have no prior affiliation with the community and show up just to cause trouble, taking advantage of the better nature of hapless moderators and bystanders to further the aim of helping trolls fly under the radar and shifting the Overton window of a community to the right.">concern trolls</abbr>
to waste everyone&rsquo;s time.</em></p>
<p><em>The project itself is of little consequence; they serve our purposes today by
providing us with case-studies in dealing with reactionary idiots starting shit
in your community.</em></p>]]></description><pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate></item><item><title>Unionize or die</title><link>https://drewdevault.com/2025/06/09/2025-06-09-Unionize-or-die.html</link><description><![CDATA[<p>Tech workers have long resisted the suggestion that we should be organized into
unions. The topic is consistently met with a cold reception by tech workers when
it is raised, and no big tech workforce is meaningfully organized. This is a
fatal mistake &ndash; and I don&rsquo;t mean &ldquo;fatal&rdquo; in the figurative sense. Tech workers,
it&rsquo;s time for you to unionize, and strike, or you and your loved ones are
literally going to die.</p>
<p>In this article I will justify this statement and show that it is clearly not
hyperbolic. I will explain exactly what you need to do, and how organized labor
can and will save your life.</p>
<p><em>Hey &ndash; if you want to get involved in labor organizing in the tech sector you
should consider joining the new <a href="https://unitelabor.dev">unitelabor.dev</a> forum.
Adding a head&rsquo;s up here in case you don&rsquo;t make it to the end of this very long
blog post.</em></p>
<h2 id="the-imperative-to-organize-is-your-economic-self-interest">The imperative to organize is your economic self-interest</h2>
<p>Before I talk about the threats to your life and liberty that you must confront
through organized labor, let me re-iterate the economic position for unionizing
your workplace. It is important to revisit this now, because the power politics
of the tech sector has been rapidly changing over the past few years, and those
changes are not in your favor.</p>
<p>The tech industry bourgeoisie has been waging a prolonged war on labor for at
least a decade. Far from mounting any kind of resistance, most of tech labor
doesn&rsquo;t even understand that this is happening to them. Your boss is obsessed
with making you powerless and replaceable. You may not realize how much leverage
you have over your boss, but your boss certainly does &ndash; and has been doing
everything in their power to undermine you before you wizen up. Don&rsquo;t let
yourself believe you&rsquo;re a part of their club &ndash; if your income depends on your
salary, you are part of the working class.</p>
<p>Payroll &ndash; that&rsquo;s you &ndash; is the single biggest expense for every tech company.
When tech capitalists look at their balance sheet and start thinking of
strategies for increasing profits, they see an awful lot of pesky zeroes stacked
up next to the line item for payroll and benefits. Long-term, what&rsquo;s their best
play?</p>
<p>It starts with funneling cash and influence into educating a bigger, cheaper
generation of compsci graduates to flood the labor market &ndash; &ldquo;everyone can
code&rdquo;. Think about strategic investments in cheap(ish), broadly available
courses, online schools and coding &ldquo;bootcamps&rdquo; &ndash; dangling your high salary as
the carrot in front of wannabe coders fleeing dwindling prospects in other
industries, certain that the carrot won&rsquo;t be nearly as big when they all
eventually step into a crowded labor market.</p>
<p>The next step is rolling, industry-wide mass layoffs &ndash; often obscured under the
guise of &ldquo;stack ranking&rdquo; or some similar nonsense. Big tech has been callously
cutting jobs everywhere, leaving workers out in the cold in batches of thousands
or tens of thousands. If you don&rsquo;t count yourself among them yet, maybe you will
soon. What are your prospects for re-hire going to look like if this looming
recession materializes in the next few years?</p>
<p>Consider what&rsquo;s happening now &ndash; why do you think tech is driving AI mandates
down from the top? Have you been ordered to use an LLM assistant to &ldquo;help&rdquo; with
your programming? Have you even thought about why the executives would push this
crap on you? You&rsquo;re &ldquo;training&rdquo; your replacement. Do you really think that, if
LLMs really are going to change the way we code, they <em>aren&rsquo;t</em> going to change
the way we&rsquo;re paid for it? Do you think your boss doesn&rsquo;t see AI as a chance to
take $100M off of their payroll expenses?</p>
<p>Aren&rsquo;t you worried you could get laid off and this junior compsci grad or an H1B
takes your place for half your salary? You should be &ndash; it&rsquo;s happening
everywhere. What are you going to do about it? Resent the younger generation of
programmers just entering the tech workforce? Or the immigrant whose family
pooled their resources to send them abroad to study and work? Or maybe you
weren&rsquo;t laid off yet, and you fancy yourself better than the poor saps down the
hall who were. Don&rsquo;t be a sucker &ndash; your enemy isn&rsquo;t in the cubicle next to you,
or on the other side of the open office. Your enemy has an office with a door on
it.</p>
<p>Listen: a tech union isn&rsquo;t just about negotiating higher wages and benefits,
although that&rsquo;s definitely on the table. It&rsquo;s about protecting yourself, and
your colleagues, from the relentless campaign against labor that the tech
leadership is waging against us. And more than that, it&rsquo;s about seizing some of
the awesome, society-bending power of the tech giants. Look around you and see
what destructive ends this power is being applied to. You have your hands at the
levers of this power if only you rise together with your peers and make demands.</p>
<p>And if you don&rsquo;t, you are responsible for what&rsquo;s going to happen next.</p>
<h2 id="the-imperative-to-organize-is-existential">The imperative to organize is existential</h2>
<p>If global warming is limited to 2°C, here&rsquo;s what Palo Alto looks like in
2100:<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p><img src="https://drewdevault.com/palo-alto-1ft.png" alt="Map of Palo Alto showing flooding near the coast"></p>
<p>Limiting warming to 2° C requires us to cut global emissions <em>in half</em> by
2030 &ndash; in 5 years &ndash; but emissions haven&rsquo;t even peaked yet. Present-day climate
policies are only expected to limit warming to 2.5° to 2.9° C by
2100.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> Here&rsquo;s Palo Alto in 75 years if we stay our current
course:</p>
<p><img src="https://drewdevault.com/palo-alto-3ft.png" alt="Map of Palo Alto showing much more extreme flooding"></p>
<p>Here&rsquo;s the Gulf of Mexico in 75 years:</p>
<p><img src="https://drewdevault.com/gulf-of-mexico.png" alt="Gulf of Mexico showing"></p>
<p>This is what will happen if things don&rsquo;t improve. Things aren&rsquo;t improving &ndash;
they&rsquo;re getting worse. The US elected an anti-science president who backed out
of the Paris agreement, for a start. Your boss is pouring all of our freshwater
into datacenters to train these fucking LLMs and <em>expanding</em> into this exciting
new market with millions of tons of emissions as the price of investment.
Cryptocurrencies <em>still</em> account for a full 1% of global emissions. Datacenters
as a whole account for 2%. That&rsquo;s on us &ndash; tech workers. That is our fucking
responsibility.</p>
<p>Climate change is accelerating, and faster than we thought, and the rich and
powerful are making it happen <em>faster</em>. Climate catastrophe is not in the far
future, it&rsquo;s not our children or our children&rsquo;s children, it&rsquo;s <em>us</em>, it&rsquo;s
<em>already happening</em>. You and I will live to see dozens of global catastrophes
playing out in our lifetimes, with horrifying results. Even if we started a
revolution tomorrow and overthrew the ruling class and implemented aggressive
climate policies right now we will still watch tens or hundreds of millions die.</p>
<p>Let&rsquo;s say you are comfortably living outside of these blue areas, and you&rsquo;ll be
sitting pretty when Louisiana or Bruges or Fiji are flooded. Well, 13 million
Americans are expected to have to migrate out of flooded areas &ndash; and 216
million globally<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> &ndash; within 25 to 30 years. That&rsquo;s just from the
direct causes of climate change &ndash; as many as 1 billion could be displaced if we
account for the ensuing global conflict and civil unrest.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> What
do you think will happen to non-coastal cities and states when 4% of the
American population is forced to flee their homes? You think you won&rsquo;t be
affected by that? What happens when anywhere from 2.5% to 12% of the Earth&rsquo;s
population becomes refugees?</p>
<p>What are you going to eat? Climate change is going to impact fresh water
supplies and reduce the world&rsquo;s agriculturally productive land. Livestock is
expected to be reduced by 7-10% in just 25 years.<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> Food prices will
skyrocket and people will starve. 7% of all species on Earth may already be
extinct because of human activities.<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> You think that&rsquo;s not going to
affect you?</p>
<p>The overwhelming majority of the population supports climate action.<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>
The reason it&rsquo;s not happening is because, under capitalism, capital is power,
and the few have it and the many don&rsquo;t. We live in a global
<abbr title="Rule by the wealthy">plutocracy</abbr>.</p>
<p>The plutocracy has an answer to climate change: fascism. When 12% of the world&rsquo;s
population is knocking at the doors of the global north, their answer will be
concentration camps and mass murder. <a href="https://en.wikipedia.org/wiki/U.S._Immigration_and_Customs_Enforcement#ERO_detention_centers">They are already working on it today</a>. When the problem is capitalism, the capitalists will go to
any lengths necessary to preserve the institutions that give them power &ndash; <a href="https://www.youtube.com/watch?v=URABscYOjRE">they
always have</a>. They have no moral compass or reason besides profit, wealth,
and power. The 1% will burn and pillage and murder the 99% without blinking.</p>
<p>They are <em>already</em> murdering us. 1.2 million Americans are rationing their
insulin.<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup> The healthcare industry, organized around the
profit motive, murders 68,000 Americans per year.<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup> To the Europeans
among my readership, don&rsquo;t get too comfortable, because I assure you that our
leaders are working on destroying our healthcare systems, too.</p>
<p>Someone you love will be laid off, get sick, and die because they can&rsquo;t afford
healthcare. Someone you know, probably many people that you know, will be killed
by climate change. It might be someone you love. It might be you.</p>
<p>When you do get laid off mid-recession, your employer replaces you and three of
your peers with a fresh bootcamp &ldquo;graduate&rdquo; and a GitHub Copilot subscription,
and all of the companies you might apply to have done the same&hellip; how long can
you keep paying rent? What about your friends and family, those who don&rsquo;t have a
cushy tech job or tech worker prospects, what happens when they get laid off or
automated away or just priced out of the cost of living? Homelessness is at an
all time high and it&rsquo;s only going to get higher. Being homeless takes 30 years
off of your life expectancy.<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> In the United States, there are 28
vacant homes for every homeless person.<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup></p>
<p>Capitalism is going to murder the people you love. Capitalism is going to murder
<em>you</em>.</p>
<p>We need a different answer to the crises that we face. Fortunately, the working
class can offer a better solution &ndash; one with a long history of success.</p>
<h2 id="organizing-is-the-only-answer-and-it-will-work">Organizing is the only answer and it will work</h2>
<p>The rich are literally going to kill you and everyone you know and love just
because it will make them richer. Because it <em>is</em> making them richer.</p>
<p>Do you want to do something about any of the real, urgent problems you face? Do
you want to make meaningful, rapid progress on climate change, take the
catastrophic consequences we are already guaranteed to face in stride, and keep
your friends and family safe?</p>
<p>Well, tough shit &ndash; you can&rsquo;t. Don&rsquo;t tell me you&rsquo;ll refuse the work, or that
it&rsquo;ll get done anyway without you, or that you can just find another job.
They&rsquo;ll replace you, you won&rsquo;t find another job, and the world will still burn.
You can&rsquo;t vote your way to a solution, either: elections don&rsquo;t matter, your vote
doesn&rsquo;t matter, and your voice is worthless to politicians.<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup> Martin
Gilens and Benjamin Page demonstrated this most clearly in their 2014 study,
&ldquo;Testing Theories of American Politics: Elites, Interest Groups, and Average
Citizens&rdquo;.<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup></p>
<p>Gilens and Page plotted a line chart which shows us the relationship between the
odds of a policy proposal being adopted (Y axis) charted against public support
for the policy (X axis). If policy adoption was entirely driven by public
opinion, we would expect a 45° line (Y=X), where broad public support guarantees
adoption and broad public opposition prevents adoption. We could also substitute
&ldquo;public opinion&rdquo; for the opinions of different subsets of the public to see
their relative impact on policy. Here&rsquo;s what they got:</p>
<p><img src="https://drewdevault.com/policy-vs-opinion.png" alt="Two graphs, the first labelled &ldquo;Average Citizens&rsquo; Preferences&rdquo; and the second
&ldquo;Economic Elites&rsquo; Preferences&rdquo;, showing that the former has little to no
correlation with the odds of a policy being adopted, and the latter has a
significant impact"></p>
<p>For most of us, we get a flat line: Y, policy adoption, is completely unrelated
to X, public support. Our opinion has no influence whatsoever on policy
adoption. Public condemnation or widespread support has the same effect on a
policy proposal, i.e. none. But for the wealthy, it&rsquo;s a different story entirely.
I&rsquo;ve never seen it stated so plainly and clearly: the only thing that matters is
money, wealth, and capital. Money is power, and the rich have it and you don&rsquo;t.</p>
<p>Nevertheless, <strong>you</strong> must solve these problems. <strong>You</strong> must participate in
finding and implementing solutions. <strong>You</strong> will be <em>fucked</em> if you don&rsquo;t. But
it is an unassailable fact that you <em>can&rsquo;t</em> solve these problems, because you
have no power &ndash; at least, not alone.</p>
<p>Together, we <em>do</em> have power. In fact, we <em>can</em> fuck with those bastards&rsquo; money
and they <em>will</em> step in line if, and only if, we organize. It is the only
solution, and it will work.</p>
<p>The ultra-rich possess no morals or ideology or passion or reason. They align
with fascists because the fascists promise what they want, namely tax cuts,
subsidies, favorable regulation, and cracking the skulls of socialists against
the pavement. The rich hoard and pillage and murder with abandon for one reason
and one reason only: it&rsquo;s profitable. The rich always do what makes them richer,
and <em>only</em> what makes them richer. Consequently, you need to make this a losing
strategy. You need to make it more profitable to do what you want. To control
the rich, you must threaten the only thing they care about.</p>
<p>Strikes are so costly for companies that they will do anything to prevent them
&ndash; and if they fail to prevent them, then shareholders will pressure them to
capitulate if only to stop the hemorrhaging of profit. This threat is so
powerful that it doesn&rsquo;t have to stop at negotiating your salary and benefits.
You could demand your employer participate in boycotting Israel. You could
demand that your employer stops anti-social lobbying efforts, or even adopts a
pro-social lobbying program. You could demand that your CEO cannot support
causes that threaten the lives and dignity of their queer or PoC employees. You
could demand that they don&rsquo;t bend the knee to fascists. If you get them where it
hurts &ndash; their wallet &ndash; they will fall in line. They are more afraid of you
than we are afraid of them. They are <em>terrified</em> of us, and it&rsquo;s time we used
that to our advantage.</p>
<p>We know it works because it has always worked. In 2023, United Auto Workers went
on strike and most workers won a 25% raise. In February, teachers in Los Angeles
went on strike for just 8 days and secured a 19% raise. Nurses in Oregon won a
22% raise, better working schedules, and more this year &ndash; and Hawaiian nurses
secured an agreement to improve worker/patient ratios in September. Tech workers
could take a page out of the Writer&rsquo;s Guild&rsquo;s book &ndash; in 2023 they secured a
prohibition against the use of their work to train AI models and the use of AI
to suppress their wages.</p>
<p>Organized labor is powerful and consistently gets concessions from the rich and
powerful in a way that no other strategy has ever been able to. It works, and we
have a moral obligation to do it. Unions gets results.</p>
<h2 id="how-to-organize-step-by-step">How to organize step by step</h2>
<p>I will give you a step-by-step plan for exactly what you need to do to start
moving the needle here. The process is as follows:</p>
<ol>
<li>Building solidarity and community with your peers</li>
<li>Understanding your rights and how to organize safely</li>
<li>Establishing the consensus to unionize, and do it</li>
<li>Promoting solidarity with across tech workplaces and labor as a whole</li>
</ol>
<p>Remember that you will not have to do this alone &ndash; in fact, that&rsquo;s the whole
point. Step one is building community with your colleagues. Get to know them
personally, establish new friendships and grow the friendships you already have.
Learn about each other&rsquo;s wants, needs, passions, and so on, and find ways to
support each other. If someone takes a sick day, organize someone to check on
them and make them dinner or pick up their kids from school. Organize a board
game night at your home with your colleagues, outside of work hours. Make it a
regular event!</p>
<p>Talk to your colleagues about work, and your workplace. Tell each other about
your salaries and benefits. When you get a raise, don&rsquo;t be shy, tell your
colleagues how much you got and how you negotiated it. Speak positively about
each other at performance reviews and save critical feedback for their ears
only. Offer each other advice about how to approach their boss to get their
needs met, and be each other&rsquo;s advocate.</p>
<p>Talk about the power you have to work together to accomplish bigger things. Talk
about the advantage of collective action. It can start small &ndash; perhaps your
team collectively refuses to incorporate LLMs into your workflow. Soon enough
you and your colleagues will be thinking about unionizing.</p>
<p><em>Disclaimer: Knowledge about specific processes and legal considerations in this
article is US-specific. Your local laws are likely similar, but you should
research the differences with your colleagues.</em></p>
<p>The process of organizing a union in the US is explained step-by-step at
<a href="https://www.workcenter.gov/step-by-step-guide/">workcenter.gov</a>. More detailed
resources, including access to union organizers in your neighborhood, are
available from the <a href="https://aflcio.org/formaunion">American Federation of Labor and Congress of Industrial
Organizations (AFL-CIO)</a>. But your biggest resources will be people
already organizing in the tech sector: in particular you should consult
<a href="https://code-cwa.org/">CODE-CWA</a>, which works with tech workers to provide mentoring and resources on
organizing tech workplaces &ndash; and has already helped several tech workplaces
organize their unions and start making a difference. They&rsquo;ve got your back.</p>
<p>This is a good time to make sure that you and your colleagues <a href="https://www.ufcw.org/union-101/know-your-rights/">understand your
rights</a>. First of all, you
would be wise to pool your resources and hire the attention of a lawyer
specializing in labor &ndash; consult your local bar association to find one (it&rsquo;s
easy, just google it and they&rsquo;ll have a web thing). Definitely reach out to
AFL-CIO and CODE-CWA to meet experienced union organizers who can help you.</p>
<p>You cannot be lawfully fired or punished for discussing unions, workplace
conditions, or your compensation and benefits, with your colleagues. You cannot
be punished for distributing literature in support of your cause, especially if
you do it off-site (even just outside of the front door). Be careful not to make
careless remarks about your boss&rsquo;s appearance, complain about the quality of
your company&rsquo;s products, make disparaging comments about clients or customers,
etc &ndash; don&rsquo;t give them an easy excuse. Hold meetings and discussions outside of
work if necessary, and perform your duties as you normally would while
organizing.</p>
<p>Once you start getting serious about organizing, your boss will start to work
against you, but know that they cannot stop you. Nevertheless, you and/or some
of your colleagues may run the risk of unlawful retaliation or termination for
organizing &ndash; this is why you should have a lawyer on retainer. This is also why
it&rsquo;s important to establish systems of mutual aid, so that if one of your
colleagues gets into trouble you can lean on each other to keep supporting your
families. And, importantly, remember that HR works for the company, not for you.
HR are the front lines that are going to execute the unionbusting mandates from
above.</p>
<p>Once you have a consensus among your colleagues to organize &ndash; which you will
know because they will have signed union cards &ndash; you can approach your employer
to ask them to voluntarily recognize the union. If they agree to opening an
organized dialogue amicably, you do so. If not, you will reach out to the
National Labor Relations Board (<a href="https://www.nlrb.gov/">NLRB</a>) to organize a vote to unionize. Only
organize a vote that you know you will win. Once your workplace votes to
unionize, your employer is obligated to negotiate with you in good faith. Start
making collective decisions about what you want from your employer and bring
them to the table.</p>
<p>In this process, you will have established a relationship with more experienced
union organizers who will continue to help you with conducting your union&rsquo;s
affairs and start getting results. The next step is to make yourself available
for this purpose to the next tech workplace that wants to unionize: to share
what you&rsquo;ve learned and support the rest of the industry in solidarity. Talk to
your friends across the industry and build solidarity and power in mass.</p>
<h3 id="prepare-for-the-general-strike-on-may-1st-2028">Prepare for the general strike on May 1st, 2028</h3>
<p>The call has gone out: on Labor Day, 2028 &ndash; just under three years from now &ndash;
<a href="https://www.thenation.com/article/activism/general-strike-2028-unions-labor-movement/">there will be a general strike</a> in the United States. The
United Auto Workers union, one of the largest in the United States, has arranged
for their collective bargaining agreements to end on this date, and has called
for other unions to do the same across all industries. The American Federation
of Teachers and its 1.2 million members are on board, and other unions are sure
to follow. Your new union should be among them.</p>
<p>This is how we collectively challenge not just our own employers, but our
political institutions as a whole. This is how we turn this nightmare around.</p>
<p>A mass strike is a difficult thing to organize. It is certain to be met with
large-scale, coordinated, and well-funded propaganda and retaliation from the
business and political spheres. Moreover, a mass strike depends on careful
planning and mass mutual aid. We need to be prepared to support each other to
get it done, and to plan and organize seriously. When you and your colleagues
get organized, discuss this strike amongst yourselves and be prepared to join in
solidarity with the rest of the 99% around the country and the world at large.</p>
<p>To commit yourselves to participate or get involved in the planning of the
grassroots movement, see <a href="https://generalstrikeus.com/">generalstrikeus.com</a>.</p>
<h2 id="join-unitelabordev">Join unitelabor.dev</h2>
<p>I&rsquo;ve set up a <a href="https://www.discourse.org/">Discourse</a> instance for discussion,
organizing, Q&amp;A, and solidarity among tech workers at
<a href="https://unitelabor.dev">unitelabor.dev</a>. Please check it out!</p>
<p>If you have any questions or feedback on this article, please post about it
there.</p>
<h2 id="unionize-or-die">Unionize or die</h2>
<p>You must organize, and you must start now, or the worst will come to pass. Fight
like your life depends on it, beause it does. It has never been more urgent. The
tech industry needs to stop fucking around and get organized.</p>
<p>We are powerful together. We can change things, and we must. Spread the word, in
your workplace and with your friends and online. On the latter, be ready to
fight just to speak &ndash; especially in our online spaces owned and controlled by
the rich (<em>ahem</em> &ndash; YCombinator, Reddit, Twitter &ndash; etc). But fight all the
same, and don&rsquo;t stop fighting until we&rsquo;re done.</p>
<p>We can do it, together.</p>
<h3 id="resources">Resources</h3>
<p>Tech-specific:</p>
<ul>
<li><a href="https://unitelabor.dev">unitelabor.dev</a> (new)</li>
<li><a href="https://techworkerscoalition.org/">Tech Workers Coalition</a> (Global)</li>
<li><a href="https://code-cwa.org/">CODE-CWA</a> (US)</li>
<li><a href="https://utaw.tech/">UTAW</a> (UK)</li>
<li><a href="https://prospect.org.uk/tech-workers/">Prospect</a> (UK)</li>
<li><a href="https://www.alphabetworkersunion.org/">Alphabet Workers Union</a> (Google)</li>
</ul>
<p>General:</p>
<ul>
<li><a href="https://www.iww.org/">Industrial Workers of the World</a> (Global)</li>
<li><a href="https://www.iclcit.org/">International Confederation of Labor</a> (Global)</li>
<li><a href="https://aflcio.org/formaunion">AFL-CIO</a> (US)</li>
<li><a href="https://www.workcenter.gov/step-by-step-guide/">workcenter.gov</a> (US)</li>
<li><a href="https://generalstrikeus.com/">generalstrikeus.com</a> (US)</li>
<li><a href="https://workerorganizing.org/">Emergency Workplace Organizing Committee</a> (US)</li>
<li><a href="https://www.labornotes.org/">Labor Notes</a> (US)</li>
<li><a href="https://www.organisenow.org.uk/">Organize Now!</a> (UK)</li>
</ul>
<p><a href="mailto:drew@ddevault.org">Send me more</a> resources to add here!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://coast.noaa.gov/slr/#/layer/slr/1/-13595891.118595265/4504691.76653881/14.944/streets/80/0.8/2050/interHigh/noAccretion/NOS_Minor">Map provided by NOAA.gov</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://ourworldindata.org/co2-and-greenhouse-gas-emissions?insight=current-climate-policies-will-reduce-emissions-but-not-enough-to-keep-temperature-rise-below-2c#key-insights">Key Insights on CO₂ and Greenhouse Gas Emissions &ndash; Our world in data</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://www.worldbank.org/en/news/press-release/2021/09/13/climate-change-could-force-216-million-people-to-migrate-within-their-own-countries-by-2050">World Bank &ndash; Climate Change Could Force 216 Million People to Migrate Within Their Own Countries by 2050 (2021)</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://www.economicsandpeace.org/wp-content/uploads/2020/09/Ecological-Threat-Register-Press-Release-27.08-FINAL.pdf">Institute for Economics &amp; Peace &ndash; Over one billion people at threat of being displaced by 2050 due to environmental change, conflict and civil unrest (2020)</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://www.ipcc.ch/report/ar6/wg2/downloads/report/IPCC_AR6_WGII_Chapter05.pdf">Bezner Kerr, R.; Hasegawa, T.; Lasco, R.; Bhatt, I.; Deryng, D.; Farrell, A.; Gurney-Smith, H.; Ju, H.; Lluch-Cota, S.; Meza, F.; Nelson, G.; Neufeldt, H.; Thornton, P. (2022). &ldquo;Food, Fibre and Other Ecosystem Products&rdquo;</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4485135/">Régnier C, Achaz G, Lambert A, Cowie RH, Bouchet P, Fontaine B. Mass extinction in poorly known taxa. Proc Natl Acad Sci U S A. 2015 Jun 23;112(25):7761-6. doi: 10.1073/pnas.1502350112. Epub 2015 Jun 8</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://www.nature.com/articles/s41558-024-01925-3">Andre, P., Boneva, T., Chopra, F. et al. Globally representative evidence on the actual and perceived support for climate action. Nat. Clim. Chang.</a>, 2024&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p><a href="https://www.acpjournals.org/doi/10.7326/M22-2477">Prevalence and Correlates of Patient Rationing of Insulin in the United States: A National Survey, Adam Gaffney, MD, MPH, David U. Himmelstein, MD, and Steffie Woolhandler, MD, MPH (2022)</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p><a href="https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(19)33019-3/abstract">Improving the prognosis of health care in the USA Galvani, Alison P et al. The Lancet, Volume 395, Issue 10223, 524 - 533</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p><a href="https://england.shelter.org.uk/media/press_release/two_people_died_homeless_every_day_last_year_">Shelter England &ndash; Two people died homeless every day last year (2022)</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p><a href="https://unitedwaynca.org/blog/vacant-homes-vs-homelessness-by-city/">United Way NCA &ndash; How Many Houses Are in the US? Homelessness vs Housing Availability (2024)</a>&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>Caveat: you should probably still vote to minimize the damage of right-wing policies, but across the world Western &ldquo;democracies&rdquo; are almost universally pro-capital regardless of how you vote.&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p><a href="https://www.cambridge.org/core/journals/perspectives-on-politics/article/testing-theories-of-american-politics-elites-interest-groups-and-average-citizens/62327F513959D0A304D4893B382B992B">Gilens M, Page BI. Testing Theories of American Politics: Elites, Interest Groups, and Average Citizens. Perspectives on Politics. 2014</a>&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 9 Jun 2025 00:00:00 +0000</pubDate></item><item><title>The British Airways position on various border disputes</title><link>https://drewdevault.com/2025/05/05/2025-05-05-BA-on-border-disputes.html</link><description><![CDATA[<p>My spouse and I are on vacation in Japan, spending half our time seeing the
sights and the other half working remotely and enjoying the experience of living
in a different place for a while. To get here, we flew on British Airways from
London to Tokyo, and I entertained myself on the long flight by browsing the
interactive flight map on the back of my neighbor&rsquo;s seat and trying to figure
out how the poor developer who implemented this map solved the thorny problems
that displaying a world map implies.</p>
<p>I began my survey by poking through the whole interface of this little in-seat
entertainment system<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> to see if I can find out anything about who
made it or how it works &ndash; I was particularly curious to find a screen listing
open source licenses that such such devices often disclose. To my dismay I found
nothing at all &ndash; no information about who made it or what&rsquo;s inside. I imagine
that there <em>must</em> be some open source software in that thing, but I didn&rsquo;t find
any licenses or copyright statements.</p>
<p>When I turned my attention to the map itself, I did find one copyright
statement, the only one I could find in the whole UI. If you zoom in enough, it
switches from a satellite view to a street view showing the OpenStreetMap
copyright line:</p>
<p><img src="https://drewdevault.com/ba-map-osm-copyright.jpg" alt="Picture of the display showing &ldquo;Street Maps: (c) OpenStreetMap contributors&rdquo;"></p>
<div class="text-center">
<small>Note that all of the pictures in this article were taken by
pointing my smartphone camera at the screen from an awkward angle and fine-tune
your expectations accordingly. I don't have pictures to support every border
claim documented in this article, but I did take notes during the flight.</small>
</div>
<p>Given that British Airways is the proud flag carrier of the United Kingdom I
assume that this is indeed the only off-the-shelf copyrighted material included
in this display, and everything else was developed in-house without relying on
any open source software that might require a disclosure of license and
copyright details. For similar reasons I am going to assume that all of the
borders shown in this map are reflective of the official opinion of British
Airways on various international disputes.</p>
<p>As I briefly mentioned a moment ago, this map has two views: satellite
photography and a very basic street view. Your plane and its route are shown in
real-time, and you can touch the screen to pan and zoom the map anywhere you
like. You can also rotate the map and change the angle in &ldquo;3D&rdquo; if you have
enough patience to use complex multitouch gestures on the cheapest touch panel
they could find.</p>
<p>The street view is very sparse and only appears when you&rsquo;re pretty far zoomed
in, so it was mostly useless for this investigation. The satellite map,
thankfully, includes labels: cities, country names, points of interest, and,
importantly, national borders. The latter are very faint, however. Here&rsquo;s an
illustrative example:</p>
<p><img src="https://drewdevault.com/ba-borders-illustration.jpg" alt="A picture of the screen showing the area near the Caucasus mountains with the plane overflying the Caspian sea"></p>
<p>We also have our first peek at a border dispute here: look closely between the
&ldquo;Georgia&rdquo; and &ldquo;Caucasus Mountains&rdquo; labels. This ever-so-faint dotted line shows
what I believe is the Russian-occupied territory of South Ossetia in Georgia.
Disputes implicating Russia are not universally denoted as such &ndash; I took a peek
at the border with Ukraine and found that Ukraine is shown as whole and
undisputed, with its (undotted) border showing Donetsk, Luhansk, and Crimea
entirely within Ukraine&rsquo;s borders.</p>
<p>Of course, I didn&rsquo;t start at Russian border disputes when I went looking for
trouble. I went directly to Palestine. Or rather, I went to Israel, because
Palestine doesn&rsquo;t exist on this map:</p>
<p><img src="https://drewdevault.com/ba-israel-palestine.jpg" alt="Picture of the screen showing Israel"></p>
<p>I squinted and looked very closely at the screen and I&rsquo;m <em>fairly</em> certain that
both the West Bank and Gaza are outlined in these dotted lines using the borders
defined by the 1949 armistice. If you zoom in a bit more to the street view, you
can see labels like &ldquo;West Bank&rdquo; and the &ldquo;Area A&rdquo;, &ldquo;Area B&rdquo; labels of the Oslo
Accords:</p>
<p><img src="https://drewdevault.com/ba-west-bank.jpg" alt="Picture of the street map zoomed in on Ramallah"></p>
<p>Given that this is British Airways, part of me was surprised not to see the
whole area simply labelled Mandatory Palestine, but it is interesting to know
that British Airways officially supports the Oslo Accords.</p>
<p>Heading south, let&rsquo;s take a look at the situation in Sudan:</p>
<p><img src="https://drewdevault.com/ba-sudan.jpg" alt="Picture of the satellite map over Sudan"></p>
<p>This one is interesting &ndash; three areas within South Sudan&rsquo;s claimed borders are
disputed, and the map only shows two with these dotted lines. The border dispute
with Sudan in the northeast is resolved in South Sudan&rsquo;s favor. Another case
where BA takes a stand is Guyana, which has an ongoing dispute with Venezuela &ndash;
but the map <em>only</em> shows Guyana&rsquo;s claim, albeit with a dotted line, rather than
the usual approach of drawing both claims with dotted lines.</p>
<p>Next, I turned my attention to Taiwan:</p>
<p><img src="https://drewdevault.com/ba-taiwan.jpg" alt="Picture of the satellite map over eastern China and Taiwan"></p>
<p>The cities of Taipei and Kaohsiung are labelled, but the island as a whole was
not labelled &ldquo;Taiwan&rdquo;. I zoomed and panned and 3D-zoomed the map all over the
place but was unable to get a &ldquo;Taiwan&rdquo; label to appear. I also zoomed into the
OSM-provided street map and panned that around but couldn&rsquo;t find &ldquo;Taiwan&rdquo;
anywhere, either.</p>
<p>The last picture I took is of the Kashmir area:</p>
<p><img src="https://drewdevault.com/ba-kashmir.jpg" alt="Picture of the satellite map showing the Kashmir region"></p>
<p>I find these faint borders difficult to interpret and I admit to not being very
familiar with this conflict, but perhaps someone in the know with the patience
to look more closely will <a href="mailto:drew@ddevault.org">email me</a> their
understanding of the official British Airways position on the Kashmir conflict
(here&rsquo;s the <a href="https://redacted.moe/f/70bc3338.jpg">full sized picture</a>).</p>
<p>Here are some other details I noted as I browsed the map:</p>
<ul>
<li>The Hala&rsquo;ib Triangle and Bir Tawil are shown with dotted lines</li>
<li>The Gulf of Mexico is labelled as such</li>
<li>Antarctica has no labelled borders or settlements</li>
</ul>
<p>After this thrilling survey of the official political positions of British
Airways, I spent the rest of the flight reading books or trying to sleep.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I believe the industry term is &ldquo;infotainment system&rdquo;, but if you ever catch me saying that with a straight face then I have been replaced with an imposter and you should contact the authorities.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 5 May 2025 00:00:00 +0000</pubDate></item><item><title>Resistance from the tech sector</title><link>https://drewdevault.com/2025/04/20/2025-04-20-Tech-sector-restistance.html</link><description><![CDATA[<p>As of late, most of us have been reading the news with a sense of anxious
trepidation. At least, those of us who read from a position of relative comfort
and privilege. Many more read the news with fear. Some of us are already no
longer in a position to read the news at all, having become the unfortunate
subjects of the news. Fascism is on the rise worldwide and in the United States
the news is particularly alarming. The time has arrived to act.</p>
<p>The enemy wants you to be overwhelmed and depressed, to feel like the situation
is out of your control. Propaganda is as effective on me as it is on you, and in
my own home the despair and helplessness the enemy aims to engineer in us often
prevails in my own life. <a href="https://archive.org/details/0022_Dont_Be_a_Sucker_22_33_53_00">We mustn&rsquo;t fall for this gambit</a>.</p>
<p>When it comes to resistance, I don&rsquo;t have all of the answers, and I cannot
present a holistic strategy for effective resistance.  Nevertheless, I have put
some thought towards how someone in my position, or in my community, can
effectively apply ourselves towards resistance.</p>
<p>The fact of the matter is that the tech sector is extraordinarily important in
enabling and facilitating the destructive tide of contemporary fascism&rsquo;s ascent
to power. The United States is embracing a technocratic fascism at the hands of
Elon Musk and his techno-fetishist &ldquo;Department of Government Efficiency&rdquo;. Using
memes to mobilize the terminally online neo-right, and &ldquo;digitizing&rdquo; and
&ldquo;modernizing&rdquo; government institutions with the dazzling miracles of modern
technology, the strategy puts tech, in its mythologized form &ndash; prophesied,
even, through the medium of science fiction &ndash; at the center of a revolution of
authoritarian hate.</p>
<p>And still, this glitz and razzle dazzle act obscures the more profound and
dangerous applications of tech hegemony to fascism. Allow me to introduce public
enemy number one: Palantir. Under the direction of neo-fascist Peter Thiel and
in collaboration with <abbr title="Immigrations and Customs Enforcement">ICE</abbr>,
Palantir is applying the innovations of the last few decades of surveillance
capitalism to implementing a <a href="https://www.404media.co/ice-plans-central-database-of-health-labor-housing-agency-data-to-find-targets/">database of undesirables</a> the Nazis
could have never dreamed of. Where DOGE is hilariously tragic, Palantir is
nightmarishly effective.</p>
<p>It&rsquo;s clear that the regime will be digital. The through line is tech &ndash; and the
tech sector depends on tech workers. That&rsquo;s us. This puts us in a position to
act, and compels us to act. But then, what should we do?</p>
<p>If there&rsquo;s one thing I want you to take away from this article, something to
write on your mirror and repeat aloud to yourself every day, it&rsquo;s this: there&rsquo;s
safety in numbers. It is of the utmost importance that we dispense with American
individualism and join hands with our allies to resist as one. Find your people
in your local community, and especially in your workplace, who you can trust and
who believe in what&rsquo;s right and that you can depend on for support. It&rsquo;s easier
if you&rsquo;re not going it alone. Talk to your colleagues about your worries and
lean on them to ease your fears, and allow them to lean on you in turn.</p>
<p>One of the most important actions you can take is to unionize your workplace. We
are long overdue for a tech workers union. If tech workers unionize then we can
compel our employers &ndash; this regime&rsquo;s instruments of fascist power &ndash; to resist
also. If you&rsquo;re at the bottom looking up at your boss&rsquo;s boss&rsquo;s boss cozying up
with fascists, know that with a union you can pull the foundations of his power
out from beneath him.</p>
<p><a href="https://www.gutenberg.org/ebooks/26184">More direct means</a> of resistance are also possible, especially for
the privileged and highly paid employees of big tech. Maneuver yourself towards
the levers of power. At your current job, find your way onto the teams
implementing the technology that enables authoritarianism, and fuck it up. Drop
the database by &ldquo;mistake&rdquo;. Overlook bugs. Be confidently wrong in code reviews
and meetings. Apply for a job at Palantir, and be incompetent at it. Make
yourself a single point of failure, then fail. Remember too that plausible
deniability is key &ndash; make them work to figure out that <em>you</em> are the problem.</p>
<p>This sort of action is scary and much riskier than you&rsquo;re probably immediately
comfortable with. Inaction carries risks also. Only you are able to decide what
your tolerance for risk is, and what kind of action that calls for. If your
appetite for risk doesn&rsquo;t permit sabotage, you could simply refuse to work on
projects that aren&rsquo;t right. Supporting others is essential resistance, too &ndash; be
there for your friends, especially those more vulnerable than yourself, and
support the people who engage in direct resistance. You didn&rsquo;t see nuffin,
right? If your allies get fired for fucking up an important digital surveillance
project &ndash; you&rsquo;ll have a glowing reference for them when they apply for
Palantir, right?</p>
<p>Big tech has become the problem, and it&rsquo;s time for tech workers to be a part of
the solution. If this scares you &ndash; and it should &ndash; I get it. I&rsquo;m scared, too.
It&rsquo;s okay for it to be scary. It&rsquo;s okay for you not to do anything about it
right now. All you have to do right now is be there for your friends and loved
ones, and answer this question: where will you draw the line?</p>
<p>Remember your answer, and if and when it comes to pass&hellip; you will know when to
act. Don&rsquo;t let them shift your private goalposts until the frog is well and
truly boiled to death.</p>
<p>Hang in there.</p>]]></description><pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate></item><item><title>A Firefox addon for putting prices into perspective</title><link>https://drewdevault.com/2025/04/04/2025-04-04-Price-perspective.html</link><description><![CDATA[<p>I had a fun idea for a small project this weekend, and so I quickly put it
together over the couple of days. The result is <a href="https://addons.mozilla.org/en-US/firefox/addon/price-perspective/">Price Perspective</a>.</p>
<p>Humor me: have you ever bought something, considered the price, and wondered how
that price would look to someone else? Someone in the developing world, or a
billionaire, or just your friend in Australia? In other words, can we develop an
intuition for <a href="https://en.wikipedia.org/wiki/Purchasing_power">purchasing power</a>?</p>
<p>The Price Perspective add-on answers these questions. Let&rsquo;s consider an example:
my income is sufficient to buy myself a delivery pizza for dinner without a
second thought. How much work does it take for someone in Afghanistan to buy the
same pizza? I can fire up Price Perspective to check:</p>
<p><img src="https://redacted.moe/f/7e13a09b.png" alt=""></p>
<p>The results are pretty shocking.</p>
<p>How about another example: say I&rsquo;m looking to buy a house in the Netherlands. I
fire up funda.nl and look at a few places in Amsterdam. After a few minutes
wondering if I&rsquo;ll ever be in an economic position to actually <em>afford</em> any of
these homes (and speculating on if that day will come before or after I have
spent this much money on rent over my lifetime), I wonder what these prices look
like from the other side. Let&rsquo;s see what it&rsquo;d take for the Zuck to buy this
apartment I fancy:</p>
<p><img src="https://redacted.moe/f/37ddbe71.png" alt=""></p>
<p>Well&hellip; that&rsquo;s depressing. Let&rsquo;s experiment with Price Perspective to see what
it would take to make a dent in Zuck&rsquo;s wallet. Let&rsquo;s add some zeroes.</p>
<p><video src="https://redacted.moe/f/2752d5bc.webm" autoplay loop muted controls></video></p>
<p>So, Zuckerberg over-bidding this apartment to the tune of €6.5B would cost him a
proportion of his annual income which is comparable to me buying it for €5,000.</p>
<p>How about the reverse? How long would I have to work to buy, say, Jeff Bezos&rsquo;s
new mansion?</p>
<p><img src="https://redacted.moe/f/608ace06.png" alt=""></p>
<p>Yep. That level of wealth inequality is a sign of a totally normal, healthy,
well-functioning society.</p>
<p>Curious to try it out for yourself? Get Price Perspective from
<a href="https://addons.mozilla.org/en-US/firefox/addon/price-perspective/">addons.mozilla.org</a>, tell it where you live and how much money you make in
a year, and develop your own sense of perspective.</p>]]></description><pubDate>Fri, 4 Apr 2025 00:00:00 +0000</pubDate></item><item><title>Using linkhut to signal-boost my bookmarks</title><link>https://drewdevault.com/2025/03/27/2025-03-27-Using-linkhut.html</link><description><![CDATA[<p>It must have been at least a year ago that I first noticed <a href="https://linkhut.org/">linkhut</a>, and its
flagship instance at <a href="https://ln.ht">ln.ht</a>, appear on SourceHut, where it immediately caught
my attention for its good taste in inspirations. Once upon a time, I had a
<a href="https://pinboard.in/">Pinboard</a> account, which is a similar concept, but I never used it for anything
in the end. When I saw linkhut I had a similar experience: I signed up and
played with it for a few minutes before moving on.</p>
<p>I&rsquo;ve been rethinking my relationship social media lately, as some may have
inferred from my unannounced disappearance from Mastodon.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> While reflecting
on this again recently, in a stroke of belated inspiration I suddenly
appreciated the appeal of tools like linkhut, especially alongside RSS feeds &ndash;
signal-boosting stuff I read and found interesting.</p>
<p>The appeal of this reminds me of one of the major appeals of SoundCloud to me,
back when I used it circa&hellip; 2013? That is: I could listen to the music that
artists I liked were listening to, and that was <em>amazing</em> for discovering new
music. Similarly, for those of you who enjoy my blog posts, and want to read the
stuff I like reading, check out my <a href="https://ln.ht/~ddevault">linkhut feed</a>. You can even <a href="https://ln.ht/_/feed/~ddevault">subscribe to
its RSS feed</a> if you like. There isn&rsquo;t much there today, but I will be
filling it up with interesting articles I see and projects I find online.</p>
<p>I want to read <em>your</em> linkhut feed, too, but it&rsquo;s pretty quiet there at the
moment. If you find the idea interesting, sign up for an account or set up your
own instance and start bookmarking stuff &ndash; and <a href="mailto:sir@cmpwn.com">email me</a> your feed so I can
find some good stuff to subscribe to in my own feed reader.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>And simultaneous disappearance from BlueSky, though I imagine hardly
anyone noticed given that I had only used it for a couple of weeks. When I
set out to evaluate BlueSky for its merits from an OSS framing (findings:
both surprisingly open and not open enough), I also took a moment to
evaluate the social experience &ndash; and found it wanting. Then I realized that
I also felt that way about Mastodon, and that was the end of that.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate></item><item><title>Please stop externalizing your costs directly into my face</title><link>https://drewdevault.com/2025/03/17/2025-03-17-Stop-externalizing-your-costs-on-me.html</link><description><![CDATA[<p><em>This blog post is expressing personal experiences and opinions and doesn&rsquo;t
reflect any official policies of SourceHut.</em></p>
<p>Over the past few months, instead of working on our priorities at SourceHut, I
have spent anywhere from 20-100% of my time in any given week mitigating
hyper-aggressive LLM crawlers at scale. This isn&rsquo;t the first time SourceHut has
been at the wrong end of some malicious bullshit or paid someone else&rsquo;s
externalized costs &ndash; every couple of years someone invents a new way of ruining
my day.</p>
<p>Four years ago, we decided to <a href="https://man.sr.ht/ops/builds.sr.ht-migration.md">require payment to use our CI services</a>
because it was being abused to mine cryptocurrency. We alternated between
periods of designing and deploying tools to curb this abuse and periods of
near-complete outage when they adapted to our mitigations and saturated all of
our compute with miners seeking a profit. It was bad enough having to beg my
friends and family to avoid &ldquo;investing&rdquo; in the scam without having the scam
break into my business and trash the place every day.</p>
<p>Two years ago, we threatened to <a href="https://sourcehut.org/blog/2023-01-09-gomodulemirror/">blacklist the Go module mirror</a> because for
some reason the Go team thinks that running terabytes of git clones all day,
every day for every Go project on git.sr.ht is cheaper than maintaining any
state or using webhooks or coordinating the work between instances or even just
designing a module system that doesn&rsquo;t require Google to DoS git forges whose
entire annual budgets are considerably smaller than a single Google engineer&rsquo;s
salary.</p>
<p>Now it&rsquo;s LLMs. If you think these crawlers respect robots.txt then you are
several assumptions of good faith removed from reality. These bots crawl
everything they can find, robots.txt be damned, including expensive endpoints
like git blame, every page of every git log, and every commit in every repo, and
they do so using random User-Agents that overlap with end-users and come from
tens of thousands of IP addresses &ndash; mostly residential, in unrelated subnets,
each one making no more than one HTTP request over any time period we tried to
measure &ndash; actively and maliciously adapting and blending in with end-user
traffic and avoiding attempts to characterize their behavior or block their
traffic.</p>
<p>We are experiencing dozens of brief outages per week, and I have to review our
mitigations several times per day to keep that number from getting any higher.
When I do have time to work on something else, often I have to drop it when all
of our alarms go off because our current set of mitigations stopped working.
Several high-priority tasks at SourceHut have been delayed weeks or even months
because we keep being interrupted to deal with these bots, and many users have
been negatively affected because our mitigations can&rsquo;t always reliably
distinguish users from bots.</p>
<p>All of my sysadmin friends are dealing with the same problems. I was asking one
of them for feedback on a draft of this article and our discussion was
interrupted to go deal with a new wave of LLM bots on their own server. Every
time I sit down for beers or dinner or to socialize with my sysadmin friends
it&rsquo;s not long before we&rsquo;re complaining about the bots and asking if the other
has cracked the code to getting rid of them once and for all. The desperation in
these conversations is palpable.</p>
<p>Whether it&rsquo;s cryptocurrency scammers mining with FOSS compute resources or
Google engineers too lazy to design their software properly or Silicon Valley
ripping off all the data they can get their hands on at everyone else&rsquo;s expense…
I am sick and tired of having all of these costs externalized directly into my
fucking face. Do something productive for society or get the hell away from my
servers. Put all of those billions and billions of dollars towards the common
good before sysadmins collectively start a revolution to do it for you.</p>
<p>Please stop legitimizing LLMs or AI image generators or GitHub Copilot or any of
this garbage. I am begging you to stop using them, stop talking about them, stop
making new ones, just <em>stop</em>. If blasting CO<sub>2</sub> into the air and
ruining all of our freshwater and traumatizing cheap laborers and making every
sysadmin you know miserable and ripping off code and books and art at scale and
ruining our fucking democracy isn&rsquo;t enough for you to leave this shit alone,
what is?</p>
<p>If you personally work on developing LLMs et al, know this: I will never work
with you again, and I will remember which side you picked when the bubble
bursts.</p>]]></description><pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate></item><item><title>A holistic perspective on intellectual property, part 1</title><link>https://drewdevault.com/2025/02/13/2025-02-13-On-intellectual-property.html</link><description><![CDATA[<p>I&rsquo;d like to write about intellectual property in depth, in this first of a
series of blog posts on the subject. I&rsquo;m not a philosopher, but philosophy is
the basis of reasonable politics so buckle up for a healthy Friday afternoon
serving of it.</p>
<p>To understand intellectual property, we must first establish at least a shallow
understanding of property generally. What is property?<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> An incomplete
answer might state that a material object I have power over is my property. An
apple I have held in my hand is mine, insofar as nothing prevents me from using
it (and, in the process, destroying it), or giving it away, or planting it in
the ground. However, you might not agree that this apple is necessarily <em>mine</em>
if I took it from a fruit stand without permission. This act is called &ldquo;theft&rdquo;
&mdash; one of many possible transgressions upon property.</p>
<p>It is important to note that the very possibility that one could illicitly
assume possession of an object is a strong indication that &ldquo;property&rdquo; is a
social convention, rather than a law of nature; one cannot defy the law of
gravity in the same way as one can defy property. And, given that, we could try
to imagine other social conventions to govern the use of <em>things</em> in a society.
If we come up with an idea we like, and we&rsquo;re in a radical mood, we could even
challenge the notion of property in society at large and seek to implement a
different social convention.</p>
<p>As it stands today, the social convention tells us property is a <em>thing</em> which
has an &ldquo;owner&rdquo;, or owners, to whom society confers certain rights with respect
to the thing in question. That may include, for example, the right to use it, to
destroy it, to exclude others from using it, to sell it, or give it away, and so
on. Property is this special idea society uses to grant you the authority to use
a bunch of verbs with respect to a thing. However, being a social convention,
nothing prevents me from using any of these verbs on something society does not
recognize as my property, e.g. by
<abbr title='"I have a bridge to sell you" is an English-language idiom that refers to selling something you do not own to a gullible person.'>
selling you this bridge</abbr>. This is why the social convention must be
<strong>enforced</strong>.</p>
<p>And how is it enforced? We could enforce property rights with shame: stealing
can put a stain on one&rsquo;s reputation, and this shame may pose an impediment to
one&rsquo;s social needs and desires, and as such theft is discouraged. We can also
use guilt: if you steal something, but don&rsquo;t get caught, you could end up
remorseful without anyone to shame you for it, particularly with respect to the
harm done to the person who suffered a loss of property as a result. Ultimately,
in modern society the social convention of property is enforced with, well,
force. If you steal something, society has appointed someone with a gun to track
you down, restrain you, and eventually lock you up in a miserable room with bars
on the windows.</p>
<hr>
<p><em>I&rsquo;d like to take a moment here to acknowledge the hubris of property: we see the
bounty of the natural world and impose upon it these imagined rights and
privileges, divvy it up and hand it out and hoard it, and resort to cruelty if
anyone steps out of line. Indeed this may be justifiable if the system of
private property is sufficiently beneficial to society, and the notion of
property is so deeply ingrained into our system that it feels normal and
unremarkable. It&rsquo;s worth remembering that it has trade-offs, that we made the
whole thing up, and that we can make up something else with different
trade-offs. That being said, I&rsquo;m personally fond of most of my personal property
and I&rsquo;d like to keep enjoying most of my property rights as such, so take from
that what you will.</em><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<hr>
<p>One way we can justify property rights is by using them as a tool for managing
<em>scarcity</em>. If demand for coffee exceeds the supply of coffee beans, a scarcity
exists, meaning that not everyone who wants to have coffee gets to have some.
But, we still want to enjoy scarce things. Perhaps someone who foregoes coffee
will enjoy some other scarce resource, such as tea &mdash; then everyone can benefit
in some part from some access to scarce resources. I suppose that the social
convention of property can derive some natural legitimacy from the fact that
some resources are scarce.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> In this sense, private property relates
to the problem of distribution.</p>
<p>But a naive solution to distribution has flaws. For example, what of hoarding?
Are property rights legitimate when someone takes more than they need or intend
to use? This behavior could be motivated by an antagonistic relationship with
society at large, such as as a means of driving up prices for private profit;
such behavior could be considered anti-social and thus a violation of the social
convention as such.</p>
<p>Moreover, property which is destroyed by its use, such as coffee, is one matter,
but further questions are raised when we consider durable goods, such as a
screwdriver. The screwdriver in my shed spends the vast majority of its time out
of use. Is it just for me to assert property rights over my screwdriver when I
am not using it? To what extent is the scarcity of screwdrivers <em>necessary</em>?
Screwdrivers are not fundamentally scarce, given that the supply of idle
screwdrivers far outpaces the demand for screwdriver use, but our modern
conception of property has the unintended consequence of creating scarcity where
there is none by denying the use of idle screwdrivers where they are needed.</p>
<p>Let&rsquo;s try to generalize our understanding of property, working our way towards
&ldquo;intellectual property&rdquo; one step at a time. To begin with, what happens if we
expand our understanding of property to include immaterial things? Consider
domain names as a kind of property. In theory, domain names are abundant, but
some names are more desirable than others. We assert property rights over them,
in particular the right to use a name and exclude others from using it, or to
derive a profit from exclusive use of a desirable name.</p>
<p>But a domain name doesn&rsquo;t really exist per-se: it&rsquo;s just an entry in a ledger.
The electric charge on the hard drives in your nearest DNS server&rsquo;s database
exist, but the domain name it represents doesn&rsquo;t exist in quite the same sense
as the electrons do: it&rsquo;s immaterial. Is applying our conception of property to
these immaterial things justifiable?</p>
<p>We can start answering this question by acknowledging that property rights are
<em>useful</em> for domain names, in that this gives domain names desirable properties
that serve productive ends in society. For example, exclusive control over a
domain name allows a sense of authenticity to emerge from its use, so that you
understand that pointing your browser to drewdevault.com will return the content
that the person, Drew DeVault, wrote for you. We should also acknowledge that
there are negative side-effects of asserting property rights over domains, such
as domain squatting, extortionate pricing for &ldquo;premium&rdquo; domain names, and the
advantage one party has over another if they possess a desirable name by mere
fact of that possession, irrespective of merit.</p>
<p>On the balance of things, if we concede the legitimacy of personal
property<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> I find it relatively easy to concede the
legitimacy of this sort of property, too.</p>
<p>The next step is to consider if we can generalize property rights to govern
immaterial, non-finite things, like a story. A book, its paper and bindings and
ink, is a material, finite resource, and can be thought of in terms that apply
to material property. But what of the words formed by the ink? They can be
trivially copied with a pen and paper, or transformed into a new medium by
reading it aloud to an audience, and these processes do not infringe on the
material property rights associated with the book. This process cannot be
thought of as stealing, as the person who possesses a copy of the book is not
asserting property rights over the original. In our current intellectual
property regime, this person is transgressing via use of the <em>idea</em>, the
<em>intellectual</em> property &mdash; the <em>thing</em> in the abstract space occupied by the
story itself. Is that, too, a just extension of our notion of property?</p>
<p>Imagine with me the relationship one has with one&rsquo;s property, independent of the
social constructs around property. With respect to material property, a
relationship of possession exists: I physically possess a thing, and I have the
ability to make use of it through my possession of it. If someone else were to
deny me access to this thing, they would have to resort to force, and I would
have to resort to force should I resist their efforts.</p>
<p>Our relationship with intellectual property is much different. An idea cannot be
withheld or seized by force. Instead, our relationship to intellectual property
is defined by our <em>history</em> with respect to an idea. In the case of material
property, the ground truth is that I keep it locked in my home to deny others
access to it, and the social construct formalizes this relationship. With
respect to intellectual property, such as the story in a book, the ground truth
is that, sometime in the past, I imagined it and wrote it down. The social
construct of intellectual property invents an imagined relationship of
possession, modelled after our relationship with material property.</p>
<p>Why?</p>
<p>The resource with the greatest and most fundamental scarcity is our time,<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>
and as a consequence the labor which goes into making something is of profound
importance. Marx famously argued for a &ldquo;labor theory of value&rdquo;, which tells us
that the value inherent in a good or service is in the labor which is required
to provide it. I think he was on to something!<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> Intellectual property is
not scarce, nor can it be possessed, but it does have <em>value</em>, and that value
could ultimately be derived from the labor which produced it.</p>
<p>The social justification for intellectual property as a legal concept is rooted
in the value of this labor. We recognize that intellectual labor is valuable,
and produces an artifact &mdash; e.g. a story &mdash; which is valuable, but is not
scarce. A capitalist society fundamentally depends on scarcity to function, and
so through intellectual property norms we create an artificial scarcity to
reward (and incentivize) intellectual labor without questioning our fundamental
assumptions about capitalism and value.<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> But, I digress &mdash; let&rsquo;s
revisit the subject in part two.</p>
<p>In part two of this series on intellectual property, I will explain the modern
intellectual property regime as I understand it, as well as its history and
justification. So equipped with the philosophical and legal background, part
three will constitute the bulk of my critique of intellectual property, and my
ideals for reform. Part four will examine how these ideas altogether apply in
practice to open source, as well as the hairy questions of intellectual property
as applied to modern problems in this space, such as the use of LLMs to file the
serial numbers off of open source software.</p>
<hr>
<p><em>If you want to dive deeper into the philosophy here, a great resource is the
Stanford Encyclopedia of Philosophy. Check out their articles on <a href="https://plato.stanford.edu/entries/property/">Property and
Ownership</a> and <a href="https://plato.stanford.edu/entries/redistribution/">Redistribution</a> for a start, which expand on some of the
ideas I&rsquo;ve drawn on here and possess a wealth of citations catalogued with a
discipline I can never seem to muster for my blog posts. I am a programmer, not
a philosopher, so if you want to learn more about this you should go read from
the hundreds of years of philosophers who have worked on this with rigor and
written down a bunch of interesting ideas.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In today&rsquo;s article I will focus mainly on personal property (e.g. your
shoes), private property (e.g. a house or a business), and intellectual
property (e.g. a patent or a copyright). There are other kinds: public
property, collective property, and so on, but to simplify this article we
will use the layman&rsquo;s understanding of &ldquo;property&rdquo; as commonly referring to
personal property or private property, whichever is best supported by
context, unless otherwise specified. In general terms all of these kinds of
property refer to the rules with which society governs the use of <em>things</em>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Marx, among others, distinguishes between personal property and private
property. The distinction is drawn in that personal property can be moved &ndash;
you can pick up a T-Shirt and take it somewhere else. Private property
cannot, such as land or a house. Anyway, I&rsquo;m not a Marxist but I do draw
from Marxist ideas for some of my analysis of intellectual property, such as
the labor theory of value. We&rsquo;ll talk more about these ideas later on.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>It occurred to me after writing this section that the selected
examples of property and scarcity as applied to coffee and tea are begging
for an analysis of the subject through the lens of colonialism, but I think
my readers are not quite ready for that yet.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Not that I do, at least not entirely. I personally
envision a system in which wealth is capped, hoarding is illegal, and
everyone has an unconditional right to food, shelter, healthcare, and so on,
and I&rsquo;ll support reforming property rights in a heartbeat if that&rsquo;s what it
takes to get all of those things done. And, as the saying goes: if you see
someone stealing groceries, you didn&rsquo;t see anything. My willingness to
accept property as a legitimate social convention is conditional on it not
producing antisocial outcomes like homelessness or food insecurity. A system
like this is considered a form of &ldquo;distributive justice&rdquo;, if you want to
learn more.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>And you&rsquo;re spending some of it to read my silly blog, which I really
feel is an honor. Thank you.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Marx loses me at historical determinism and the dominance of man over
nature through dogmatic industrialization, among other things, but the labor
theory of value is good shit.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Another tangent on the labor theory of value seems appropriate
here. Our capitalist system is largely based on a competing theory, the
&ldquo;subjective theory of value&rdquo;, which states that value is defined not by the
labor required to provide a product or service, but by market forces, or
more concretely by the subjective value negotiated between a buyer and
seller. I admit this theory is compelling when applied to some examples,
for example when explaining the value of a Pokemon card. When it comes to
intellectual property, however, I find it very unsatisfying, given that a
laissez-faire free market would presumably evolve a very different approach
to intellectual property. As such I think that intellectual property as a
concept depends at least a little bit on Marx for its legitimacy, which I
find very funny.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate></item><item><title>Join us to discuss transparency and governance at FOSDEM &apos;25</title><link>https://drewdevault.com/2025/01/23/2025-01-23-Transparency-and-governance-FOSDEM.html</link><description><![CDATA[<p>Good news: it appears that Jack Dorsey&rsquo;s FOSDEM talk has been cancelled!</p>
<p><em>This is a follow up to two earlier posts, which you can read here: <a href="https://drewdevault.com/2025/01/16/2025-01-16-No-Billionares-at-FOSDEM-please.html">one</a> and
<a href="https://drewdevault.com/2025/01/20/2025-01-20-FOSDEM-protest.html">two</a></em>.</p>
<p>I say it &ldquo;appears&rdquo; so, because there has been no official statement from anyone
to that effect. There has also been no communication from staff to the protest
organizers, including to our email reaching out <a href="https://fosdem.org/2025/news/2025-01-16-protests/">as requested</a> to discuss fire
safety and crowd control concerns with the staff. The situation is a bit
unclear, but… we&rsquo;ll extend FOSDEM the benefit of the doubt, and with it our
gratitude. From all of the volunteers who have been organizing this protest
action, we extend our heartfelt thanks to the staff for reconsidering the
decision to platform Dorsey and Block, Inc. at FOSDEM. All of us &ndash; long-time
FOSDEM volunteers, speakers, devroom organizers, and attendees &ndash; are relieved
to know that FOSDEM stands for our community&rsquo;s interests.</p>
<p>More importantly: what comes next?</p>
<p>The frustration the community felt at learning that Block was sponsoring FOSDEM
and one of the keynote slots<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> had been given to Dorsey and his
colleagues uncovered some deeper frustrations with the way FOSDEM is run these
days. This year is FOSDEM&rsquo;s 25th anniversary, and it seems sorely overdue for
graduating from the &ldquo;trust us, it&rsquo;s crazy behind the scenes&rdquo; governance model to
something more aligned with the spirit of open source.</p>
<p>We trust the FOSDEM organizers &mdash; we can extend them the benefit of the doubt
when they tell us that talk selection is independent of sponsorships. But it
strains our presumption of good faith when the talk proposal was <a href="https://chaos.social/@phoenix/113849512507355397">rejected by 3
of the 4</a> independent reviewers and went through anyway. And it&rsquo;s
kind of weird that we have to take them at their word &mdash; that the talk
selection process isn&rsquo;t documented anywhere publicly, nor the conflict of
interest policy, nor the sponsorship terms, nor almost anything at all about how
FOSDEM operates or is governed internally. Who makes decisions? How? We don&rsquo;t
know, and that&rsquo;s kind of weird for something so important in the open source
space.</p>
<p>Esther Payne, a speaker at FOSDEM 2020, <a href="https://www.onepict.com/20250122-mirror.html">summed up these concerns</a>:</p>
<blockquote>
<p>Why do we have so little information on the FOSDEM site about the budget and
just how incorporated is FOSDEM as an organisation? How do the laws of Belgium
affect the legalities of the organisation? How is the bank account
administrated? How much money goes into the costs of this year, and how much
of the budget goes into startup costs for the next year?</p></blockquote>
<p>Peter Zaitsev, a long-time devroom organizer and FOSDEM speaker for many years,
<a href="https://www.percona.com/blog/in-search-of-transparency-at-fosdem/">asked similar questions last year</a>. I&rsquo;ve spoken to the volunteers who
signed up for the protest &ndash; we&rsquo;re relieved that Dorsey&rsquo;s talk has been
cancelled, but we&rsquo;re still left with big questions about transparency and
governance at FOSDEM.</p>
<p>So, what&rsquo;s next?</p>
<p><del>Let&rsquo;s do something useful with that now-empty time slot in Janson. Anyone who
planned to attend the protest is encouraged to come anyway on Sunday at 12:00
PM, where we&rsquo;re going to talk amongst ourselves and anyone else who shows up
about what we want from FOSDEM in the future, and what a transparent and
participatory model of governance would look like. We would be thrilled if
anyone on the FOSDEM staff wants to join the conversation as well, assuming
their busy schedule permits. We&rsquo;ll prepare a summary of our discussion and our
findings to submit to the staff and the FOSDEM community for consideration after
the event.</del></p>
<p>Until then &ndash; I&rsquo;ll see you there!</p>
<p><strong>NOTICE</strong>: The discussion session has been cancelled. After meeting with many
of the protest volunteers and discussing the matter among the organizers, we
have agreed that de-platforming Dorsey is mission success and improvising
further action isn&rsquo;t worth the trouble. We&rsquo;ll be moving for reforms at FOSDEM
after the event &ndash; I&rsquo;ll keep you posted.</p>
<hr>
<p>P.S. It&rsquo;s a shame we won&rsquo;t end up handing out our pamphlets. The volunteers
working on that came up with this amazing flyer and I think it doesn&rsquo;t deserve
to go unseen:</p>
<style>
.flyers {
  display: flex;
  justify-content: space-around;
}

.flyers a {
  max-width: 45%;
}
</style>
<div class="flyers">
  <a href="https://redacted.moe/f/abaeed07.pdf">
    <img
      alt="Front face of the flyer: 'No billionares at FOSDEM' over a picture of Jack Dorsey with the 'X' logo over his mouth."
      src="https://redacted.moe/f/261d03ea.jpeg" />
  </a>
  <a href="https://redacted.moe/f/abaeed07.pdf">
    <img
      alt="Reverse face of the flyer, detailing Dorsey and Block, Inc's numerous misdeeds"
      src="https://redacted.moe/f/adab02ce.jpeg" />
    </a>
</div>
<p>We will be doing a modest print run for posterity &mdash; find one of us at FOSDEM
if you want one.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Later moved to the main track, same time, same room, before it was ultimately cancelled.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate></item><item><title>FOSDEM &apos;25 protest</title><link>https://drewdevault.com/2025/01/20/2025-01-20-FOSDEM-protest.html</link><description><![CDATA[<p><em>Update: Dorsey&rsquo;s talk was cancelled! <a href="https://drewdevault.com/2025/01/23/2025-01-23-Transparency-and-governance-FOSDEM.html">See the update here</a>.</em></p>
<p><a href="https://drewdevault.com/2025/01/16/2025-01-16-No-Billionares-at-FOSDEM-please.html">Last week</a>, I wrote to object to Jack Dorsey and his company, Block,
Inc., being accepted as main track speakers at FOSDEM, and proposed a protest
action in response. <a href="https://fosdem.org/2025/news/2025-01-16-protests/">FOSDEM issued a statement about our plans</a> on
Thursday.</p>
<p>Today, I have some updates for you regarding the planned action.</p>
<p>I would like to emphasize that we are not protesting FOSDEM or its organizers.
We are protesting Jack Dorsey and his company, first and foremost, from
promoting their business at FOSDEM. We are members of the FOSDEM community. We
have variously been speakers, devroom organizers, volunteers, and attendees for
years &mdash; in other words, we are not activism tourists. We have a deep
appreciation for the organizers and all of the work that they have done over the
years to make FOSDEM such a success.</p>
<p>That we are taking action demonstrates that we value FOSDEM, that we believe it
represents our community, and that we want to defend its &mdash; our &mdash; ethos.
Insofar as we have a message to the FOSDEM organizers, it is one of gratitude,
and an appeal to build a more open and participatory process, in the spirit of
open source, and especially to improve the transparency of the talk selection
process, sponsorship terms, and conflict of interest policies, so protests like
ours are not necessary in the future. To be clear, we do not object to the need
for sponsors generally at FOSDEM &mdash; we understand that FOSDEM is a free,
volunteer driven event, many of us having volunteered for years &mdash; but we do
object specifically to Jack Dorsey and Block, Inc. being selected as sponsors
and especially as speakers.</p>
<p>As for the planned action, I have some more information for anyone who wishes to
participate. Our purpose is to peacefully disrupt Dorsey&rsquo;s talk, and <em>only</em>
Dorsey&rsquo;s talk, which is scheduled to take place between 12:00 and 12:30 on
Sunday, February 2nd in Janson. If you intend to participate, we will be meeting
outside of the <em>upper</em> entrance to Janson at 11:45 AM. We will be occupying the
stage for the duration of the scheduled time slot in order to prevent the talk
from proceeding as planned.</p>
<p>To maintain the peaceful nature of our protest and minimize the disruption to
FOSDEM generally, we ask participants to strictly adhere to the following
instructions:</p>
<ol>
<li>Do not touch anyone else, or anyone else&rsquo;s property, for any reason.</li>
<li>Do not engage in intimidation.</li>
<li>Remain quiet and peaceful throughout the demonstration.</li>
<li>When the protest ends, disperse peacefully and in a timely manner.</li>
<li>Leave the room the way you found it.</li>
</ol>
<p>Dorsey&rsquo;s time slot is scheduled to end at 12:30, but we may end up staying as
late as 14:00 to hand the room over to the next scheduled talk.</p>
<p>I&rsquo;ve been pleased by the response from volunteers (some of whom helped with this
update &mdash; thanks!), but we still need a few more! I have set up a mailing list
for planning the action. If you plan to join, and especially if you&rsquo;re willing
and able to help with additional tasks that need to be organized, please
<a href="mailto:sir@cmpwn.com">contact me directly</a> to receive an invitation to the
mailing list.</p>
<p>Finally, I have some corrections to issue regarding last week&rsquo;s blog post.</p>
<p>In the days since I wrote my earlier blog post, Dorsey&rsquo;s talk has been removed
from the list of keynotes and moved to the main track, where it will occupy the
same time slot in the same room but not necessarily be categorized as a
&ldquo;keynote&rdquo;.</p>
<p>It has also been pointed out that Dorsey does not bear sole responsibility for
Twitter&rsquo;s sale. However, he is complicit and he profited handsomely from the
sale and all of its harmful consequences. The sale left the platform at the
disposal of the far right, causing a sharp rise in hate speech and harassment
and the layoffs of 3,700 of the Twitter employees that made it worth so much in
the first place.</p>
<p>His complicity, along with his present-day activities at Block, Inc. and the
priorities of the company that he represents as CEO &mdash; its irresponsible
climate policy, $120M in fines for enabling consumer fraud, and the layoffs of
another 1,000 employees in 2024 despite posting record profits on $5B in revenue
&mdash; are enough of a threat to our community and its ethos to raise alarm at his
participation in FOSDEM. We find this compelling enough to take action to
prevent him and his colleagues from using FOSDEM&rsquo;s platform to present
themselves as good actors in our community and sell us their new &ldquo;AI agentic
framework&rdquo;.</p>
<p>The open source community and FOSDEM itself would not exist without collective
action. Our protest to defend its principles is in that spirit. Together we can,
and will, de-platform Jack Dorsey.</p>
<p>I&rsquo;ll see you there!</p>]]></description><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate></item><item><title>No billionaires at FOSDEM</title><link>https://drewdevault.com/2025/01/16/2025-01-16-No-Billionares-at-FOSDEM-please.html</link><description><![CDATA[<p><em>Update: Dorsey&rsquo;s talk was cancelled! <a href="https://drewdevault.com/2025/01/23/2025-01-23-Transparency-and-governance-FOSDEM.html">See the update here</a>.</em></p>
<p>Jack Dorsey, former CEO of Twitter, ousted board member of BlueSky, and grifter
extraordinaire to the tune of a $5.6B net worth, is <a href="https://fosdem.org/2025/schedule/event/fosdem-2025-4507-infusing-open-source-culture-into-company-dna-a-conversation-with-jack-dorsey-and-manik-surtani-block-s-head-of-open-source/">giving a keynote at
FOSDEM</a>.</p>
<p>The FOSDEM keynote stage is one of the biggest platforms in the free software
community. Janson is the biggest venue in the event &ndash; its huge auditorium
can accommodate over 1,500 of FOSDEM&rsquo;s 8,000 odd attendees, and it is live
streamed to a worldwide audience as the face of one of the free and open source
software community&rsquo;s biggest events of the year. We&rsquo;ve platformed Red Hat, the
NLNet Foundation, NASA, numerous illustrious community leaders, and many smaller
projects that embody our values and spirit at this location to talk about their
work or important challenges our community faces.</p>
<p>Some of these challenges, as a matter of fact, are Jack Dorsey&rsquo;s fault. In 2023
this stage <a href="https://archive.fosdem.org/2023/schedule/event/hachyderm/">hosted Hachyderm&rsquo;s Kris Nóva</a> to discuss an exodus of Twitter
refugees to the fediverse. After Dorsey sold Twitter to Elon Musk, selling the
platform out to the far right for a crisp billion-with-a-&ldquo;B&rdquo; dollar payout, the
FOSS community shouldered the burden &ndash; both with our labor and our wallets &ndash;
of a massive exodus onto our volunteer-operated servers, especially from victims
fleeing the hate speech and harassment left in the wake of the sale. Two years
later one of the principal architects of, and beneficiaries of, that disaster
will step onto the same stage. Even if our community hadn&rsquo;t been directly harmed
by Dorsey&rsquo;s actions, I don&rsquo;t think that we owe this honor to someone who took a
billion dollars to ruin their project, ostracize their users, and destroy the
livelihoods of almost everyone who worked on it.</p>
<p>Dorsey is presumably being platformed in Janson because his blockchain bullshit
company is a <a href="https://fosdem.org/2025/about/sponsors/">main sponsor of FOSDEM</a> this year. Dorsey and his
colleagues want to get us up to speed on what Block is working on these days.
Allow me to give you a preview: in addition to posting $5B in revenue and a 21%
increase in YoY profit in 2024, Jack Dorsey laid off 1,000 employees, ordering
them not to publicly discuss board member Jay-Z&rsquo;s contemporary sexual assault
allegations on their way out, and announced a new bitcoin mining ASIC in
collaboration with Core Scientific, who presumably installed them into <a href="https://investors.corescientific.com/news-events/press-releases/detail/99/core-scientific-and-port-muskogee-break-ground-on-100-mw-hpc-data-center">their
new 100MW Muskogee, OK bitcoin mining installation</a>, proudly served by the
<a href="https://www.gem.wiki/Muskogee_Generating_Station">Muskogee Generating Station</a> fossil fuel power plant and its <a href="https://www.gem.wiki/Muskogee_Generating_Station#Emissions_Data">11 million
tons</a> of annual CO<sub>2</sub> emissions and <a href="https://www.gem.wiki/Muskogee_Generating_Station#Death_and_disease_attributable_to_fine_particle_pollution_from_Muskogee_Generating_Station">an estimated 62 excess
deaths</a> in the local area due to pollution associated with the power plant.
Nice.</p>
<p>In my view, billionaires are not welcome at FOSDEM. If billionaires want to
participate in FOSS, I&rsquo;m going to ask them to refrain from using our platforms
to talk about their AI/blockchain/bitcoin/climate-disaster-as-a-service grifty
business ventures, and instead buy our respect by, say, donating 250 million
dollars to <a href="https://nlnet.nl/">NLNet</a> or the <a href="https://www.sovereign.tech/">Sovereign Tech Fund</a>. That figure, as a
percentage of Dorsey&rsquo;s wealth, is proportional to the amount of money I donate
to FOSS every year, by the way. That kind of money would keep the FOSS community
running for decades.</p>
<p>I do not want to platform Jack Dorsey on this stage. To that end, I am
organizing a sit-in, in which I and anyone who will join me are going to sit
ourselves down on the Janson stage during his allocated time slot and peacefully
prevent the talk from proceeding as scheduled. We will be meeting at 11:45 AM
outside of Janson, 15 minutes prior to Dorsey&rsquo;s scheduled time slot. Once the
stage is free from the previous speaker, we will sit on the stage until 12:30
PM. Bring a good book. If you want to help organize this sit-in, or just let me
know that you intend to participate, please contact me via
<a href="mailto:sir@cmpwn.com">email</a>; I&rsquo;ll set up a mailing list if there&rsquo;s enough
interest in organizing things like printing out pamphlets to this effect, or
even preparing an alternative talk to &ldquo;schedule&rdquo; in his slot.</p>
<hr>
<p><a href="https://drewdevault.com/2025/01/20/2025-01-20-FOSDEM-protest.html">Follow-up: FOSDEM &lsquo;25 protest</a></p>]]></description><pubDate>Thu, 16 Jan 2025 00:00:00 +0000</pubDate></item><item><title>Neurodivergence and accountability in free software</title><link>https://drewdevault.com/2024/09/25/2024-09-25-Neurodivergence-and-accountability-in-free-software.html</link><description><![CDATA[<p>In November of last year, I wrote <a href="https://drewdevault.com/2023/11/25/2023-11-26-RMS-on-sex.html">Richard Stallman&rsquo;s political discourse on
sex</a>, which argues that Richard Stallman, the founder of and present-day
voting member of the board of directors of the Free Software Foundation (FSF),
endorses and advocates for a harmful political agenda which legitimizes
adult attraction to minors, consistently defends adults accused of and
convicted of sexual crimes with respect to minors, and more generally
erodes norms of consent and manipulates language regarding sexual harassment and
sexual assault in his broader political program.</p>
<p>In response to this article, and on many occasions when I have re-iterated my
position on Stallman in other contexts, a common response is to assert that my
calls to censure Stallman are ableist, on the basis that Stallman is
neurodivergent (ND). This line of reasoning suggests that Stallman&rsquo;s awkward and
zealous views on sex are in line with his awkward and zealous positions on other
matters (such as his insistence on &ldquo;GNU/Linux&rdquo; terminology rather than &ldquo;Linux&rdquo;),
and that together this illustrates a pattern which suggests neurodivergence is
at play. This argumentation is flawed, but I think it presents us with a good
opportunity to talk about how neurodivergence and sexism presents in our
community.</p>
<p>Neurodivergence (antonymous with &ldquo;neurotypical&rdquo;) is an umbrella term that
encompasses a wide variety of human experiences, including autism, ADHD,
personality disorders, bipolar disorder, and others. The particular claims I&rsquo;ve
heard about Stallman suggest that he is &ldquo;obviously&rdquo; autistic, or has <a href="https://en.wikipedia.org/wiki/Asperger_syndrome">Asperger
syndrome</a>.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> The allegation of ableism in my criticisms of Stallman
are rooted in this presumption of neurodivergence in Stallman: the argument goes
that I am putting his awkwardness on display and mocking him for it, that
calling for the expulsion of someone on the basis of being awkward is ableist,
and that this has a chilling effect on our community, which is generally thought
to have a high incidence of neurodivergence. I will respond to this defense of
Stallman today.</p>
<p>A defense of problematic behavior that cites neurodivergence to not only
explain, but excuse, said behavior, is ableist and harms neurodivergent people,
rather than standing up for them as these arguments portray themselves as doing.
To illustrate this, I opened a discussion on the Fediverse asking neurodivergent
people to chime in and reached out directly to some ND friends in my social
circle.</p>
<hr>
<h3 id="aside-is-stallman-neurodivergent">Aside: Is Stallman neurodivergent?</h3>
<p>Stallman&rsquo;s neurodivergence is an unsolicited armchair diagnosis with no
supporting evidence besides &ldquo;vibes&rdquo;. <a href="https://www.computerworld.com/article/1683286/asperger-s-oxymoron.html">This 2008 article</a> summarizes his
public statements on the subject:</p>
<blockquote>
<p>“During a 2000 profile for the Toronto Star, Stallman described himself to an
interviewer as ‘borderline autistic,’ a description that goes a long way
toward explaining a lifelong tendency toward social and emotional isolation
and the equally lifelong effort to overcome it,” Williams wrote.</p>
<p>When I cited that excerpt from the book during the interview, Stallman said
that assessment was “exaggerated.”</p>
<p>“I wonder about it, but that’s as far as it goes,” he said. “Now, it’s clear I
do not have [Asperger’s] — I don’t have most of the characteristics of that.
For instance, one of those characteristics is having trouble with rhythm. I
love the most complicated, fascinating rhythms.” But Stallman did acknowledge
that he has “a few of the characteristics” and that he “might have what some
people call a ‘shadow’ version of it.”</p></blockquote>
<p>The theory that Stallman is neurodivergent is usually cited to explain his
various off-putting behaviors, but there is no tangible evidence to support the
theory. This alone raises some alarms, in that off-putting behavior is
sufficient evidence to presume neurodivergence. I agree that some of his
behavior, off-putting or otherwise, appears consistent, to my untrained eye,
with some of the symptoms of autism. Nevertheless I am not going to forward an
armchair diagnosis in either direction. However, because a defense of Stallman
on the basis of neurodivergence is contingent on him being neurodivergent, this
rest of this article will presume that it is true for the purpose of rebuttal.</p>
<p><strong>tl;dr</strong>: we don&rsquo;t know and the assumption that he is is ableist.</p>
<hr>
<p>This defense of Stallman is ableist because it infantalizes and denies agency
to neurodivergent people. Consider what&rsquo;s being said here: it only follows
that Stallman&rsquo;s repugnant behavior is excusable because he&rsquo;s neurodivergent if
neurodivergent people cannot help but be repugnant. An autistic person I spoke
to, who wishes to remain anonymous, had the following to say:</p>
<blockquote>
<p>As an autistic person, I find these statements deeply offensive, because they
build on and perpetuate damaging stereotypes.</p>
<p>Research has repeatedly proved that, on average, autistic folks have high
empathy and a higher sense of values than the general population. We are not
the emotionless robots that the popular imagination believes we are.</p>
<p>But we are not a monolith, and some autistic folks are absolute assholes who
should be called out (and held accountable) for the harm that they cause.
Autism is context, not an excuse: it can explain why someone might struggle in
some situations and need additional support, but it should never be an excuse
to harm others. We can all learn and improve.</p>
<p>I have witnessed people pulling the autism card to avoid consequences for CoC
violations, then calling out the organization for &ldquo;not supporting true
diversity&rdquo; when they&rsquo;re shown the door. This is manipulative and insulting to
the other neurodivergent members of the community, and should never be
tolerated.</p></blockquote>
<p>Bram Dingelstad, a neurodivergent person who participated in the discussion, had
this to say:</p>
<blockquote>
<p>Problematic behaviour is what it is: problematic.</p>
<p>There are a lot of neurodivergent people out there that are able to carry
themselves in a way that doesn&rsquo;t make anyone unsafe or harm victims of sexual
assault by dismissing or downplaying their lived experience. In my opinion,
using neurodivergence as an excuse for this behaviour only worsens the
perception of neurodiversity.</p>
<p>Richard Stallman should be held accountable for his speech and his actions.</p></blockquote>
<p>Another commenter put it more concisely, if not as eloquently:</p>
<blockquote>
<p>It&rsquo;s fucking ableist to say neurodiversity disposes you towards problematic
behaviors. It&rsquo;s disgusting trying to hide behind it and really quite
insulting.</p></blockquote>
<p>I came away from these discussions with the following understanding:
neurodivergence, in particular autism, causes people to struggle to understand
unstated social norms and conventions, sometimes with embarrassing or harmful
consequences, such as with respect to interpersonal relationships. The people
I&rsquo;ve spoken to call for empathy and understanding in the mistakes which can be
made in light of this, but also call for accountability &ndash; to be shown
what&rsquo;s right (and, importantly, <em>why</em> it&rsquo;s so), and then to be expected to
behave accordingly, no different from anyone else.</p>
<p>Being neurodivergent doesn&rsquo;t make someone sexist, but it can make it harder for
them to hide sexist views. To associate Stallman&rsquo;s sexism with his perceived
neurodivergence is ableist, and to hold Stallman accountable for his behavior is
not. One commenter puts it this way:</p>
<blockquote>
<p>I&rsquo;ve said quite a few times is that sexism is not a symptom of autism. Writing
this sort of behaviour off as &ldquo;caused by&rdquo; neurodivergence is itself ableist,
I&rsquo;m not a huge fan of the narrative that I have &ldquo;the neurodevelopmental
disorder that makes you a bigot&rdquo;.</p>
<p>I fundamentally disagree with the idea that the pervasive sexism in tech
is because of the high incidence of neurodiversity. It&rsquo;s because tech has
broadly operated as a boys club for decades, and those norms persist.</p></blockquote>
<p>Using neurodivergence as a cover for sexism and problematic behavior in our
communities is a toxic, ableist, and, of course, sexist attitude that serves to
provide problematic men with space to be problematic. Note also how
intersections between neurodiversity and identity play out: white men tend to be
excused on the basis of neurodivergence, whereas for women, transgender people,
people of color, etc &ndash; the excuse does not apply. Consider the differences in
how bipolar disorder is perceived in women &ndash; &ldquo;she&rsquo;s crazy&rdquo; &ndash; versus how men
with autism are accommodated &ndash; &ldquo;he can&rsquo;t help it&rdquo;.</p>
<p>So, I reject the notion that it is ableist to criticize problematic behavior
that can be explained by neurodivergence. But, even if it were, an anonymous
autistic commenter has this to say:</p>
<blockquote>
<p>If we accept the hypothesis that it is ableist to condemn behavior which can
be explained by neurodivergence (and I don&rsquo;t), my answer is: be ableist. I
don&rsquo;t like it, but it&rsquo;s ridiculous to imagine any other option in the physical
world, and it&rsquo;s weird to treat the virtual world so differently.</p>
<p>Here&rsquo;s an anecdote: when I was at school, a new person, Adam, joined the
class. We didn&rsquo;t want Adam to feel excluded, so we included him in our
social events. Adam had narcissistic personality disorder, and likely in part
because of this, he was also a serial harasser of women. So what did we do
about it?</p>
<p>We stopped inviting Adam. I wish we didn&rsquo;t have to stop inviting him, but our
hands were tied. I&rsquo;m not going to say it&rsquo;s something only he could change,
because maybe he truly couldn&rsquo;t change that. Maybe it was ableist to exclude
him. But the safety of my friends comes first. The hard part is distinguishing
between this situation and a situation where someone is excluded when they are
perceived as a threat just because they&rsquo;re different.</p></blockquote>
<p>Stallman&rsquo;s rhetoric and behavior are harmful, and we need to address that harm.
The refrain of &ldquo;criticizing Stallman&rsquo;s behavior is ableist and alienates
neurodiverse individuals in our community&rdquo; is itself ableist and isn&rsquo;t doing any
favors for our neurodiverse friends.</p>
<p>To conclude this article, I thought I&rsquo;d take this opportunity to find out what
our neurodiverse friends are actually struggling with and how we can better
accommodate their needs in our community.</p>
<p>First of all, a recognition of individuals as being autonomous, independent
people with agency and independent needs has to come first, with neurodiversity
and with everything else. Listen to people when they explain their experiences
and their needs as individuals, and don&rsquo;t rely on romanticized and stereotypical
understandings of particular neurodevelopmental conditions such as autism. These
stereotypes are often deeply harmful: one person spoke of being accused of
incompetence and lying about their neurodivergence in a ploy for sympathy. They
experienced severe harassment, at the worst in the form of harassers engineering
stressful situations and screenshoting their reactions to humiliate them and
damage their reputation.</p>
<p>Standing up for your peers is important, in this as in all things. Not only
against harassment, discrimination, and abuse on the basis of neurodivergence,
but on any basis, from any person &ndash; which I was often reminded is especially
important for neurodivergent people who are not cishet white men, as these
challenges are amplified in light of these intersectional identities. Talk to
people and understand their experiences, their needs, and their worldview. Be
patient, but clear and open in your communication. The neurodivergent people I
spoke to often found it difficult to learn social mores, moreso than most
neurotypical experiences, but nevertheless the vast majority of them felt
perfectly capable of it, and the expectation that they weren&rsquo;t is demeaning and
ableist.</p>
<p>I also heard some advice from the neurodivergent community that applies
especially to free software community leaders. Clearly stated community norms
and expectations, through codes of conducts and visible moderation, is often
helpful for neurodivergent people. Many ND people struggle to intuit or &ldquo;guess&rdquo;
social norms and prefer expectations to be stated unambiguously. Normalizing the
use of tone indicators (e.g. &ldquo;/s&rdquo;), questions clarifying intent, and conflict
de-escalation are also good tools to employ.</p>
<p>Another consideration of merit is accommodations for asynchronous participation
in meaningful governance and decision-making processes. Some ND people find it
difficult to participate in real-time discussions in chat rooms or in person,
and mediums like emails and other long-form slow discussions are easier for them
to engage with. Accommodations for sensory sensitivities at in-person events is
another good strategy to include more ND folks in your event. Establishing quiet
spaces to get away from the busier parts of the event, being considerate of
lighting choices, flexible break times, and activities for smaller groups were
all highlighted to me by ND people as making their experience more enjoyable.</p>
<p>These are the lessons I took away from speaking to dozens of neurodivergent
people in researching this blog post. I encourage you to speak to, and listen
to, people in your communities as well, particularly when dealing with an issue
which cites their struggles or impacts them directly.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>It is worth mentioning that Asperger&rsquo;s syndrome is a
now-discredited diagnosis which has been deprecated in favor of a broader
understanding of autism. Hans Asperger was a Nazi eugenicist who referred
children he diagnosed to Am Spiegelgrund clinic, where hundreds of children
were murdered by Nazi Germany during World War II.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 25 Sep 2024 00:00:00 +0000</pubDate></item><item><title>Rust for Linux revisited</title><link>https://drewdevault.com/2024/08/30/2024-08-30-Rust-in-Linux-revisited.html</link><description><![CDATA[<blockquote>
<p><em>Ugh. Drew&rsquo;s blogging about Rust again.</em></p></blockquote>
<p>&ndash; You</p>
<p>I promise to be nice.</p>
<p>Two years ago, seeing the Rust-for-Linux project starting to get the ball
rolling, I wrote &ldquo;<a href="https://drewdevault.com/2022/10/03/Does-Rust-belong-in-Linux.html">Does Rust belong in the Linux kernel?</a>&rdquo;, penning a
conclusion consistent with <a href="https://en.wikipedia.org/wiki/Betteridge's_law_of_headlines">Betteridge&rsquo;s law of headlines</a>. Two years on we
have a lot of experience to draw on to see how Rust-for-Linux is actually playing
out, and I&rsquo;d like to renew my thoughts with some hindsight &ndash; and more
compassion. If you&rsquo;re one of the Rust-for-Linux participants burned out or
burning out on this project, I want to help. Burnout sucks &ndash; I&rsquo;ve been there.</p>
<p>The people working on Rust-for-Linux are incredibly smart, talented, and
passionate developers who have their eyes set on a goal and are tirelessly
working towards it &ndash; and, as time has shown, with a great deal of patience.
Though I&rsquo;ve developed a mostly-well-earned reputation for being a fierce critic
of Rust, I do believe it has its place and I have a lot of respect for the work
these folks are doing. These developers are ambitious and motivated to make an
impact, and Linux is undoubtedly the highest-impact software in the world, and
in theory Linux is enthusiastically ready to accept motivated innovators into
its fold to facilitate that impact.</p>
<p>At least in theory. In practice, the Linux community is the wild wild west, and
sweeping changes are infamously difficult to achieve consensus on, and this is
by far the broadest sweeping change ever proposed for the project. Every
subsystem is a private fiefdom, subject to the whims of each one of Linux&rsquo;s
1,700+ maintainers, almost all of whom have a dog in this race. It&rsquo;s herding
cats: introducing Rust effectively is one part coding work and ninety-nine parts
political work &ndash; and it&rsquo;s a lot of coding work. Every subsystem has its own
unique culture and its own strongly held beliefs and values.</p>
<p>The consequences of these factors is that Rust-for-Linux has become a burnout
machine. My heart goes out to the developers who have been burned in this
project. It&rsquo;s not fair. Free software is about putting in the work, it&rsquo;s a
classical do-ocracy&hellip; until it isn&rsquo;t, and people get hurt. In spite of my
critiques of the project, I recognize the talent and humanity of everyone
involved, and wouldn&rsquo;t have wished these outcomes on them. I also have sympathy
for many of the established Linux developers who didn&rsquo;t exactly want this on
their plate&hellip; but that&rsquo;s neither here nor there for the purpose of this post,
and any of those developers and their fiefdoms who went out of their way to make
life <em>difficult</em> for the Rust developers above and beyond what was needed to
ensure technical excellence are accountable for these shitty outcomes.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>So where do we go now?</p>
<p>Well, let me begin by re-iterating something from my last article on the
subject: &ldquo;I wish [Rust-for-Linux] the best of luck and hope to see them
succeed&rdquo;. Their path is theirs to choose, and though I might advise a moment to
rest before diving headfirst into this political maelstrom once again, I support
you in your endeavours if this is what you choose to do. Not my business. That
said, allow me to humbly propose a different path for your consideration.</p>
<p>Here&rsquo;s the pitch: a motivated group of talented Rust OS developers could build a
Linux-compatible kernel, from scratch, very quickly, with no need to engage in
LKML politics. You would be astonished by how quickly you can make meaningful
gains in this kind of environment; I think if the amount of effort being put
into Rust-for-Linux were applied to a new Linux-compatible OS we could have
something production ready for some use-cases within a few years.</p>
<p>Novel OS design is hard: projects like <a href="https://www.redox-os.org/">Redox</a> are working on this, but it
will take a long time to bear fruit and research operating systems often have to
go back to the drawing board and make major revisions over and over again before
something useful and robust emerges. This is important work &ndash; and near to my
heart &ndash; but it&rsquo;s not for everyone. However, making an OS which is based on a
proven design like Linux is <em>much</em> easier and can be done very quickly. I worked
on my own novel OS design for a couple of years and it&rsquo;s still stuck in design
hell and badly in need of being rethought; on the other hand I wrote a passable
Unix clone alone in less than 30 days.</p>
<p>Rust is a great fit for a large monolithic kernel design like Linux. Imagine
having the opportunity to implement something like the dcache from scratch in
Rust, without engaging with the politics &ndash; that&rsquo;s something a small group of
people, perhaps as few as one, could make substantial inroads on in a short
period of time taking full advantage of what Rust has on offer. Working towards
compatibility with an existing design can leverage a much larger talent pool
than the very difficult problem of novel OS design, a lot of people can manage
with a copy of the ISA manual and a missive to implement a single syscall in a
Linux-compatible fashion over the weekend. A small and motivated group of
contributors could take on the work of, say, building out io_uring compatibility
and start finding wins fast &ndash; it&rsquo;s a lot easier than designing io_uring from
scratch. I might even jump in and build out a driver or two for fun myself, that
sounds like a good opportunity for me to learn Rust properly with a fun project
with a well-defined scope.</p>
<p>Attracting labor shouldn&rsquo;t be too difficult with this project in mind, either.
If there was <em>the</em> Rust OS project, with a well-defined scope and design (i.e.
aiming for Linux ABI compatibility), I&rsquo;m sure there&rsquo;s a lot of people who&rsquo;d jump
in to stake a claim on some piece of the puzzle and put it together, and the
folks working on Rust-for-Linux have the benefit of a great deal of experience
with the Linux kernel to apply to oversight on the broader design approach.
Having a clear, well-proven goal in mind can also help to attract the same
people who want to make an impact in a way that a speculative research project
might not. Freeing yourselves of the LKML political battles would probably be a
big win for the ambitions of bringing Rust into kernel space. Such an effort
would also be a great way to mentor a new generation of kernel hackers who are
comfortable with Rust in kernel space and ready to deploy their skillset to the
research projects that will build a next-generation OS like Redox. The labor
pool of serious OS developers badly needs a project like this to make that
happen.</p>
<p>So my suggestion for the Rust-for-Linux project is: you&rsquo;re burned out and that&rsquo;s
awful, I feel for you. It might be fun and rewarding to spend your recovery
busting out a small prototype Unix kernel and start fleshing out bits and pieces
of the Linux ABI with your friends. I can tell you from my own experience doing
something very much like this that it was a very rewarding burnout recovery
project for me. And who knows where it could go?</p>
<p>Once again wishing you the best and hoping for your success, wherever the path
ahead leads.</p>
<details>
<summary>What about drivers?</summary>
<p>To pre-empt a response I expect to this article: there&rsquo;s the annoying question
of driver support, of course. This was an annoying line of argumentation back
when Linux had poor driver support as well, and it will be a nuisance for a
hypothetical Linux-compatible Rust kernel as well. Well, the same frustrated
arguments I trotted out then are still ready at hand: you choose your
use-cases carefully. General-purpose comes later. Building an OS which
supports virtual machines, or a datacenter deployment, or a specific mobile
device whose vendor is volunteering labor for drivers, and so on, will come
first. You choose the hardware that supports the software, not the other way
around, or build the drivers you need.</p>
<p>That said, a decent spread of drivers should be pretty easy to implement with
the talent base you have at your disposal, so I wouldn&rsquo;t worry about it.</p>
</details>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Yes, I saw that video, and yes, I expect much better from you in the
future, Ted. That was some hostile, toxic bullshit.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate></item><item><title>So you want to compete with or replace open source</title><link>https://drewdevault.com/2024/07/16/2024-07-16-So-you-want-to-compete-with-FOSS.html</link><description><![CDATA[<p>We are living through an interesting moment in source-available software.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
The open source movement has always had, and continues to have, a solid
grounding in grassroots programmers building tools for themselves and forming
communities around them. Some looming giants brought on large sums of money &ndash;
Linux, Mozilla, Apache, and so on &ndash; and other giants made do without, like GNU,
but for the most part if anyone thought about open source 15 years ago they were
mostly thinking about grassroots communities who built software together for
fun. With the rise of GitHub and in particular the explosion of web development
as an open platform, commercial stakeholders in software caught on to the
compelling economics of open source. The open source boom that followed caused
open source software to have an enormous impact on everyone working in the
software industry, and, in one way or another, on everyone living on planet
Earth.</p>
<p>Over the past decade or so, a lot of businesses, particularly startups, saw
these economics unfolding in front of them and wanted to get in on this boom. A
lot of talented developers started working on open source software with an
explicit aim towards capitalizing on it, founding businesses and securing
capital investments to build their product &ndash; an open source product. A few
years following the onset of these startups, the catch started to become
apparent. While open source was proven to be incredibly profitable and
profoundly useful for the software industry <em>as a whole</em>, the economics of
making open source work for <em>one business</em> are much different.</p>
<p>It comes down to the fact that the free and open source software movements are
built on collaboration, and all of our success is attributable to this
foundation. The economics that drew commercial interest into the movement work
specifically because of this collaboration &ndash; because the FOSS model allows
businesses to share R&amp;D costs and bring together talent across corporate borders
into a great melting pot of innovation. And, yes, there is no small amount of
exploitation going on as well; businesses are pleased to take advantage of the
work of Jane Doe in Ohio&rsquo;s FOSS project to make themselves money without sharing
any of it back. Nevertheless, the revolutionary economics of FOSS are <em>based on</em>
collaboration, and are <em>incompatible with</em> competition.</p>
<p>The simple truth of open source is that if you design your business model with
an eye towards competition, in which you are the only entity who can exclusively
monetize the software product, you must eschew the collaborative aspects of open
source &ndash; and thus its greatest strength. Collaboration in open source works
because the collaborators, all representatives of different institutions, are
incentivized to work together for mutual profit. No one is incentivized to work
for you, for free, for your own exclusive profit.</p>
<p>More than a few of these open source startups were understandably put out when
this reality started to set in. It turns out the market capitalization of a
business that has an open source product was often smaller than the investments
they had brought in. Under these conditions it&rsquo;s difficult to give the investors
the one and only thing they demand &ndash; a return on investment. The unbounded
growth demanded by the tech boom is even less likely to be attainable in open
source. There are, to be entirely clear, many business models which are
compatible with open source. But there are also many which are not. There are
many open source projects which can support a thriving business or even a
thriving sub-industry, but there are some ideas which, when placed in an open
source framing, simply cannot be capitalized on as effectively, or often at all.</p>
<p>Open source ate a lot of lunches. There are some kinds of software which you
just can&rsquo;t make in a classic silicon valley startup fashion anymore. Say you
want to write a database server &ndash; a sector which has suffered a number of
rug-pulls from startups previously committed to open source. If you make it
closed source, you can&rsquo;t easily sell it like you could 10 or 20 years ago, ala
MSSQL. This probably won&rsquo;t work. If you make it open source, no one will pay you
for it and you&rsquo;ll end up moaning about how the major cloud providers are
&ldquo;stealing&rdquo; your work. The best way to fund the development of something like
that is with a coalition of commercial stakeholders co-sponsoring or
co-maintaining the project in their respective self-interests, which is how
projects like <a href="https://www.postgresql.org/about/contributing/">PostgreSQL</a>, <a href="https://mesa.freedesktop.org/developers/">Mesa</a>, or the Linux kernel attract
substantial paid development resources. But it doesn&rsquo;t really work as a startup
anymore.</p>
<p>Faced with these facts, there have been some challenges to the free and open
source model coming up in the past few years, some of which are getting
organized and starting to make serious moves. Bruce Perens, one of the founding
figures of the Open Source Initiative, is working on the &ldquo;post-open&rdquo; project;
&ldquo;Fair Source&rdquo; is another up-and-coming-effort, and there have been and will be
others besides.</p>
<p>What these efforts generally have in common is a desire to change the commercial
dynamic of source-available software. In other words, the movers and shakers in
these movements want to get paid more, or more charitably, want to start a
movement in which programmers that work on source-available software as a
broader class get paid more. The other trait they have in common is a view that
the open source definition and the four freedoms of free software do not
sufficiently provide for this goal.</p>
<p>For my part, I don&rsquo;t think that this will work. I think that the aim of sole or
limited rights to monetization and the desire to foster a collaborative
environment are irreconcilable. These movements want to have both, and I simply
don&rsquo;t think that&rsquo;s possible.</p>
<p>This logic is rooted in a deeper notion of ownership over the software, which is
both subtle and very important. This is a kind of <a href="https://en.wikipedia.org/wiki/Auteur">auteur</a> theory of software.
The notion is that the software they build <em>belongs</em> to them. They possess a
sense of ownership over the software, which comes with a set of moral and
perhaps legal rights to the software, which, importantly, are withheld from any
entity other than themselves. The &ldquo;developers&rdquo; enjoy this special relationship
with the project &ndash; the &ldquo;developers&rdquo; being the special class of person entitled
to this sense of ownership and the class to whom the up-and-coming
source-available movements make an appeal, in the sense of &ldquo;pay the developers&rdquo;
&ndash; and third-party entities who work on the source code are merely
&ldquo;contributors&rdquo;, though they apply the same skills and labor to the project as
the &ldquo;developers&rdquo; do. The very distinction between &ldquo;first-party&rdquo; and
&ldquo;third-party&rdquo; developers is contingent on this &ldquo;auteur&rdquo; worldview.</p>
<p>This is quite different from how most open source projects have found their
wins. If Linux can be said to belong to anyone, it belongs to everyone. It is
for this reason that it is in everyone&rsquo;s interests to collaborate on the
project. If it belonged to someone or some entity alone, especially if that
sense of ownership is rooted in justifying that entity&rsquo;s sole right to
effectively capitalize on the software, the dynamic breaks down and the
incentive for the &ldquo;third-party&rdquo; class to participate is gone. It doesn&rsquo;t work.</p>
<p>That said, clearly the proponents of these new source-available movements feel
otherwise. And, to be clear, I wish them well. I respect the right for authors
of software to distribute it under whatever terms they wish.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> And, for
my part, I do believe that source-available is a clear improvement over
proprietary software, even though these models fall short of what I perceive as
the advantages of open source. However, for these movements to have a shot at
success, they need to deeply understand these dynamics and the philosophical and
practical underpinnings of the free and open source movements.</p>
<p>However, it is very important to me that we do not muddy the landscape of open
source by trying to reform, redefine, or expand our understanding of open source
to include movements which contradict this philosophy. My well-wishes are
contingent on any movements which aim to compete with open source stopping short
of <em>calling themselves</em> open source. This is something I appreciate about the
fair source and post-open movements &ndash; both movements explicitly disavow the
label of open source. If you want to build something new, be clear that it is
something new &ndash; this is the ground rule.</p>
<p>So you want to compete with open source, or even replace it with something new.
Again, I wish you good luck. But this question will be at the heart of your
challenge: will you be able to assume the mantle of the auteur and capitalize on
this software while still retaining the advantages that made open source
successful? Will you be able to appeal to the public in the same way open source
does while holding onto these commercial advantages for yourself? Finding a way
to answer this question with a &ldquo;yes&rdquo; is the task laid before you. It will be
difficult; in the end, you will have to give something to the public to get
something in return. Simply saying that the software itself is a gift equal to
the labor you ask of the public is probably not going to work, especially when
this &ldquo;gift&rdquo; comes with monetary strings attached.</p>
<p>As for me, I still believe in open source, and even in the commercial potential
of open source. It requires creativity and a clever business acumen to identify
and exploit market opportunities within this collaborative framework. To win in
open source you must embrace this collaboration and embrace the fact that you
will share the commercial market for the software with other entities. If you&rsquo;re
up to that challenge, then let&rsquo;s keep beating the open source drum together. If
not, these new movements may be a home for you &ndash; but know that a lot of hard
work still lies ahead of you in that path.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Source-available is a general purpose term which describes any software
for which the source code is available to view in some respect. It applies
to all free and open source software, as well as to some kinds of software
which don&rsquo;t meet either definition.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Though I do not indulge in the fantasy that &ldquo;third-party&rdquo; developers
exist and are any less entitled to the rights of authorship as anyone else.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate></item><item><title>Writing a Unix clone in about a month</title><link>https://drewdevault.com/2024/05/24/2024-05-24-Bunnix.html</link><description><![CDATA[<p>I needed a bit of a break from &ldquo;real work&rdquo; recently, so I started a new
programming project that was low-stakes and purely recreational. On April 21st,
I set out to see how much of a Unix-like operating system for x86_64 targets
that I could put together in about a month. The result is
<a href="https://git.sr.ht/~sircmpwn/bunnix">Bunnix</a>. Not including days I didn&rsquo;t work
on Bunnix for one reason or another, I spent 27 days on this project.</p>
<p>You can try it for yourself if you like:</p>
<ul>
<li><a href="https://cyanide.ayaya.dev/bunnix.iso">Bunnix 0.0.0 iso</a></li>
</ul>
<p>To boot this ISO with qemu:</p>
<pre tabindex="0"><code>qemu-system-x86_64 -cdrom bunnix.iso -display sdl -serial stdio
</code></pre><p>You can also write the iso to a USB stick and boot it on real hardware. It will
probably work on most AMD64 machines &ndash; I have tested it on a ThinkPad X220 and
a Starlabs Starbook Mk IV. Legacy boot and EFI are both supported. There are
some limitations to keep in mind, in particular that there is no USB support, so
a PS/2 keyboard (or PS/2 emulation via the BIOS) is required. Most laptops rig
up the keyboard via PS/2, and <abbr title="your milage may vary">YMMV</abbr>
with USB keyboards via PS/2 emulation.</p>
<p><em>Tip: the DOOM keybindings are weird. WASD to move, right shift to shoot, and
space to open doors. Exiting the game doesn&rsquo;t work so just reboot when you&rsquo;re
done playing. I confess I didn&rsquo;t spend much time on that port.</em></p>
<h2 id="whats-there">What&rsquo;s there?</h2>
<p>The Bunnix kernel is (mostly) written in <a href="https://harelang.org">Hare</a>, plus some
C components, namely lwext4 for ext4 filesystem support and libvterm for the
kernel video terminal.</p>
<p>The kernel supports the following drivers:</p>
<ul>
<li>PCI (legacy)</li>
<li>AHCI block devices</li>
<li>GPT and MBR partition tables</li>
<li>PS/2 keyboards</li>
<li>Platform serial ports</li>
<li>CMOS clocks</li>
<li>Framebuffers (configured by the bootloaders)</li>
<li>ext4 and memfs filesystems</li>
</ul>
<p>There are numerous supported kernel features as well:</p>
<ul>
<li>A virtual filesystem</li>
<li>A /dev populated with block devices, null, zero, and full psuedo-devices,
/dev/kbd and /dev/fb0, serial and video TTYs, and the /dev/tty controlling
terminal.</li>
<li>Reasonably complete terminal emulator and somewhat passable termios support</li>
<li>Some 40 syscalls, including for example clock_gettime, poll, openat et al,
fork, exec, pipe, dup, dup2, ioctl, etc</li>
</ul>
<p>Bunnix is a single-user system and does not currently attempt to enforce Unix
file modes and ownership, though it could be made multi-user relatively easily
with a few more days of work.</p>
<p>Included are two bootloaders, one for legacy boot which is multiboot-compatible
and written in Hare, and another for EFI which is written in C. Both of them
load the kernel as an ELF file plus an initramfs, if required. The EFI
bootloader includes zlib to decompress the initramfs; multiboot-compatible
bootloaders handle this decompression for us.</p>
<p>The userspace is largely assembled from third-party sources. The following
third-party software is included:</p>
<ul>
<li>Colossal Cave Adventure (advent)</li>
<li>dash (/bin/sh)</li>
<li>Doom</li>
<li>gzip</li>
<li>less (pager)</li>
<li>lok (/bin/awk)</li>
<li>lolcat</li>
<li>mandoc (man pages)</li>
<li>sbase (core utils)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>tcc (C compiler)</li>
<li>Vim 5.7</li>
</ul>
<p>The libc is derived from musl libc and contains numerous modifications to suit
Bunnix&rsquo;s needs. The curses library is based on netbsd-curses.</p>
<p>The system works but it&rsquo;s pretty buggy and some parts of it are quite slapdash:
your milage will vary. Be prepared for it to crash!</p>
<h2 id="how-bunnix-came-together">How Bunnix came together</h2>
<p>I started documenting the process on Mastodon on day 3 &ndash; check out <a href="https://fosstodon.org/@drewdevault/112319697309218275">the
Mastodon thread</a> for the
full story. Here&rsquo;s what it looked like on day 3:</p>
<p><img src="https://cdn.fosstodon.org/media_attachments/files/112/319/693/110/194/041/original/2c0bd7006a74aece.png" alt="Screenshot of an early Bunnix build, which boots up, sets up available memory, and exercises an early in-memory filesystem"></p>
<p>Here&rsquo;s some thoughts after the fact.</p>
<p>Some of Bunnix&rsquo;s code stems from an earlier project,
<a href="https://sr.ht/~sircmpwn/helios">Helios</a>. This includes portions of the kernel
which are responsible for some relatively generic CPU setup (GDT, IDT, etc), and
some drivers like AHCI were adapted for the Bunnix system. I admit that it would
probably not have been possible to build Bunnix so quickly without prior
experience through Helios.</p>
<p>Two of the more challenging aspects were ext4 support and the virtual terminal,
for which I brought in two external dependencies, lwext4 and libvterm. Both
proved to be challenging integrations. I had to rewrite my filesystem layer a
few times, and it&rsquo;s still buggy today, but getting a proper Unix filesystem
design (including openat and good handling of inodes) requires digging into
lwext4 internals a bit more than I&rsquo;d have liked. I also learned a lot about
mixing source languages into a Hare project, since the kernel links together
Hare, assembly, and C sources &ndash; it works remarkably well but there are some
pain points I noticed, particularly with respect to building the ABI integration
riggings. It&rsquo;d be nice to automate conversion of C headers into Hare forward
declaration modules. Some of this work already exists in hare-c, but has a ways
to go. If I were to start again, I would probably be more careful in my design
of the filesystem layer.</p>
<p>Getting the terminal right was difficult as well. I wasn&rsquo;t sure that I was going
to add one at all, but I eventually decided that I wanted to port vim and that
was that. libvterm is a great terminal state machine library, but it&rsquo;s poorly
documented and required a lot of fine-tuning to integrate just right. I also
ended up spending a lot of time on performance to make sure that the terminal
worked smoothly.</p>
<p>Another difficult part to get right was the scheduler. Helios has a simpler
scheduler than Bunnix, and while I initially based the Bunnix scheduler on
Helios I had to throw out and rewrite quite a lot of it. Both Helios and Bunnix
are single-CPU systems, but unlike Helios, Bunnix allows context switching
within the kernel &ndash; in fact, even preemptive task switching enters and exits
via the kernel. This necessitates multiple kernel stacks and a different
approach to task switching. However, the advantages are numerous, one of which
being that implementing blocking operations like disk reads and pipe(2) are much
simpler with wait queues. With a robust enough scheduler, the rest of the kernel
and its drivers come together pretty easily.</p>
<p>Another source of frustration was signals, of course. Helios does not attempt to
be a Unix and gets away without these, but to build a Unix, I needed to
implement signals, big messy hack though they may be. The signal implementation
which ended up in Bunnix is pretty bare-bones: I mostly made sure that SIGCHLD
worked correctly so that I could port dash.</p>
<p>Porting third-party software was relatively easy thanks to basing my libc on
musl libc. I imported large swaths of musl into my own libc and adapted it to
run on Bunnix, which gave me a pretty comprehensive and reliable C library
pretty fast. With this in place, porting third-party software was a breeze, and
most of the software that&rsquo;s included was built with minimal patching.</p>
<h2 id="what-i-learned">What I learned</h2>
<p>Bunnix was an interesting project to work on. My other project, Helios, is a
microkernel design that&rsquo;s Not Unix, while Bunnix is a monolithic kernel that is
much, much closer to Unix.</p>
<p>One thing I was surprised to learn a lot about is filesystems. Helios, as a
microkernel, spreads the filesystem implementation across many drivers running
in many separate processes. This works well enough, but one thing I discovered
is that it&rsquo;s quite important to have caching in the filesystem layer, even if
only to track living objects. When I revisit Helios, I will have a lot of work
to do refactoring (or even rewriting) the filesystem code to this end.</p>
<p>The approach to drivers is also, naturally, much simpler in a monolithic kernel
design, though I&rsquo;m not entirely pleased with all of the stuff I heaped into ring
0. There might be room for an improved Helios scheduler design that incorporates
some of the desirable control flow elements from the monolithic design into a
microkernel system.</p>
<p>I also finally learned how signals work from top to bottom, and boy is it ugly.
I&rsquo;ve always felt that this was one of the weakest points in the design of Unix
and this project did nothing to disabuse me of that notion.</p>
<p>I had also tried to avoid using a bitmap allocator in Helios, and generally
memory management in Helios is a bit fussy altogether &ndash; one of the biggest pain
points with the system right now. However, Bunnix uses a simple bitmap allocator
for all conventional pages on the system and I found that it works really,
really well and does not have nearly as much overhead as I had feared it would.
I will almost certainly take those lessons back to Helios.</p>
<p>Finally, I&rsquo;m quite sure that putting together Bunnix in just 30 days is a feat
which would not have been possible with a microkernel design. At the end of the
day, monolithic kernels are just much simpler to implement. The advantages of a
microkernel design are compelling, however &ndash; perhaps a better answer lies in a
hybrid kernel.</p>
<h2 id="whats-next">What&rsquo;s next</h2>
<p>Bunnix was (note the past tense) a project that I wrote for the purpose of
recreational programming, so it&rsquo;s purpose is to be fun to work on. And I&rsquo;ve had
my fun! At this point I don&rsquo;t feel the need to invest more time and energy into
it, though it would definitely benefit from some. In the future I may spend a
few days on it here and there, and I would be happy to integrate improvements
from the community &ndash; send patches to my <a href="https://lists.sr.ht/~sircmpwn/public-inbox">public inbox</a>. But for the most
part it is an art project which is now more-or-less complete.</p>
<p>My next steps in OS development will be a return to Helios with a lot of lessons
learned and some major redesigns in the pipeline. But I still think that Bunnix
is a fun and interesting OS in its own right, in no small part due to its
demonstration of Hare as a great language for kernel hacking. Some of the
priorities for improvements include:</p>
<ul>
<li>A directory cache for the filesystem and better caching generally</li>
<li>Ironing out ext4 bugs</li>
<li>procfs and top</li>
<li>mmaping files</li>
<li>More signals (e.g. SIGSEGV)</li>
<li>Multi-user support</li>
<li>NVMe block devices</li>
<li>IDE block devices</li>
<li>ATAPI and ISO 9660 support</li>
<li>Intel HD audio support</li>
<li>Network stack</li>
<li>Hare toolchain in the base system</li>
<li>Self hosting</li>
</ul>
<p>Whether or not it&rsquo;s me or one of you readers who will work on these first
remains to be seen.</p>
<p>In any case, have fun playing with Bunnix!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>sbase is good software written by questionable people. I do not endorse suckless.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate></item><item><title>Copyleft licenses are not “restrictive”</title><link>https://drewdevault.com/2024/04/19/2024-04-19-Copyleft-is-not-restrictive.html</link><description><![CDATA[<p>One may observe an axis, or a &ldquo;spectrum&rdquo;, along which free and open source
software licenses can be organized, where one end is &ldquo;permissive&rdquo; and the other
end is &ldquo;copyleft&rdquo;. It is important to acknowledge, however, that though copyleft
can be found at the opposite end of an axis with respect to permissive, it is
not synonymous with the linguistic antonym of permissive &ndash; that is, copyleft
licenses are not &ldquo;restrictive&rdquo; by comparison with permissive licenses.</p>
<p><em>Aside: Free software is not synonymous with copyleft and open source is not
synonymous with permissive, though this is a common misconception. Permissive
licenses are generally free software and copyleft licenses are generally open
source; the distinction between permissive and copyleft is orthogonal to the
distinction between free software and open source.</em></p>
<p>It is a common misunderstanding to construe copyleft licenses as more
&ldquo;restrictive&rdquo; or &ldquo;less free&rdquo; than permissive licenses. This view is predicated
on a shallow understanding of freedom, a sort of passive freedom that presents
as the absence of obligations. Copyleft is predicated on a deeper understanding
of freedom in which freedom is a <em>positive guarantee of rights</em>.<sup><a
href="https://plato.stanford.edu/entries/liberty-positive-negative/">[source]</a></sup></p>
<p>Let&rsquo;s consider the matter of freedom, obligation, rights, and restrictions in
depth.</p>
<p>Both forms of licenses include obligations, which are not the same thing as
restrictions. An example of an obligation can be found in the permissive MIT
license:</p>
<blockquote>
<p>Permission is hereby granted […] to deal in the Software without restriction
[…] subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.</p></blockquote>
<p>This obliges the user, when distributing copies of the software, to include the
copyright notice. However, it does not <em>restrict</em> the use of the software under
any conditions. An example of a restriction comes from the infamous JSON
license, which adds the following clause to a stock MIT license:</p>
<blockquote>
<p>The Software shall be used for Good, not Evil.</p></blockquote>
<p>IBM famously petitioned Douglas Crockford for, and received, a license to do
evil with JSON.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> This kind of clause is broadly referred to in the free
software jargon as &ldquo;discrimination against field of endeavour&rdquo;, and such
restrictions contravene both the free software and open source definitions. To
quote the <a href="https://opensource.org/osd">Open Source Definition</a>, clause 6:</p>
<blockquote>
<p>The license must not restrict anyone from making use of the program in a
specific field of endeavor. For example, it may not restrict the program from
being used in a business, or from being used for genetic research.</p></blockquote>
<p>No such restrictions are found in free or open source software licenses, be they
permissive or copyleft &ndash; all FOSS licenses permit the use of the software for
any purpose without restriction. You can sell both permissive and copyleft
software, use it as part of a commercial cloud service,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> use the software
as part of a nuclear weapons program,<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> or do whatever else you want with
it. There are no restrictions on how free software is used, regardless of if it
is permissive or copyleft.</p>
<p>Copyleft does not impose restrictions, but it does impose obligations. The
obligations exist to guarantee rights to the users of the software &ndash; in other
words, to ensure freedoms. In this respect copyleft licenses are <em>more free</em>
than permissive licenses.</p>
<p>Freedom is a political concept, and in order to understand this, we must
consider it in political terms, which is to say as an exercise in power
dynamics. Freedom without obligation is a contradiction. Freedom <em>emerges</em> from
obligations, specifically obligations imposed on power.</p>
<p>Where does freedom come from?</p>
<p>Consider the United States as an example, a society which sets forth freedom as
a core political value.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> Freedoms in the US are ultimately grounded in the US
constitution and its bill of rights. These tools create freedoms by guaranteeing
rights to US citizens through the imposition of <em>obligations</em> on the government.
For instance, you have a right to an attorney when accused of a crime in the
United States, and as such the government is <em>obliged</em> to provide you with one.
It is from obligations such as these that freedom emerges. Freedom of assembly,
another example, is guaranteed such that the police are prevented from breaking
up peaceful protests &ndash; this freedom emerges from a <em>constraint</em> (or
restriction, if you must) on power (the government) as a means of guaranteeing
the rights and freedom of those with less power by comparison (its citizens).</p>
<p>Who holds the power in the context of software?</p>
<p>Consider non-free software by contrast: software is written by corporations and
sold on to users with substantial restrictions on its use. Corporations hold
more power than individuals: they have more resources (e.g. money), more
influence, and, in a sense more fundamental to the software itself, they retain
in private the tools to understand the software, or to modify its behavior, and
they dictate the conditions under which it may be used (e.g. only if your
license key has not expired, or only for certain purposes). This is true of
anyone who retains the source code in private and uses copyright law to enforce
their will upon the software &ndash; in this way they possess, and exercise, power
over the user.</p>
<p>Permissive licenses do not provide any checks on this power; generally they
preserve <a href="https://en.wikipedia.org/wiki/Moral_rights">moral rights</a> and little
else. Permissive licenses provide for relatively few and narrow freedoms, and
are not particularly &ldquo;free&rdquo; as such. Copyleft licenses constrain these powers
through additional obligations, and from these obligations greater freedoms
emerge. Specifically, they oblige reciprocity. They are distinguished from
permissive licenses in this manner, but where permissive licenses <em>permit</em>,
copyleft does not <em>restrict</em> per-se &ndash; better terms might be &ldquo;reciprocal&rdquo; and
&ldquo;non-reciprocal&rdquo;, but perhaps that ship has sailed. &ldquo;You may use this software
<em>if</em> &hellip;&rdquo; is a statement made both by permissive and copyleft licenses, with
different <em>if</em>s. Neither form of license says &ldquo;you cannot use this software <em>if</em>
&hellip;&rdquo;; licenses which do so are non-free.</p>
<p>Permissive licenses and copyleft licenses are both free software, but only the
latter provides a guarantee of rights, and while both might be free only the
latter provides <em>freedom</em>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Strictly speaking this exception was for JSLint, not JSON. But I digress.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This is even true if the software uses the AGPL license.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Take a moment here to entertain the supposition that nuclear warheads
are legally obliged to include a copy of the MIT license, if they
incorporate MIT licensed code in their guidance systems, on board, as they
are &ldquo;distributing&rdquo; that software to the, err, recipients. As it were.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>The extent to which it achieves this has, of course, been the subject of
intense debate for centuries.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate></item><item><title>FDO&apos;s conduct enforcement actions regarding Vaxry</title><link>https://drewdevault.com/2024/04/09/2024-04-09-FDO-conduct-enforcement.html</link><description><![CDATA[<p>freedesktop(.org), aka FDO, recently banned Hyprland maintainer Vaxry from the
FDO community, and in response Vaxry has taken his case to the court of public
opinion, publishing their email exchanges and writing about it on his blog.</p>
<p>It saddens me to bear witness to these events today. I wrote <a href="https://drewdevault.com/2023/09/17/Hyprland-toxicity.html">in September of
last year</a> about problems with toxicity in the Hyprland community. I
initially reached out to Vaxry to discuss these problems in private in February
of last year. I failed to get through to him, leading to that blog post in
September. I spent some time in the following weeks talking with Vaxry on his
behavior and his community&rsquo;s social norms, again in private, but again, I was
unable to get through to him. Unfortunately, we find ourselves again leaving the
private sphere and discussing Vaxry&rsquo;s behavior and the problem posed by the
Hyprland community once again.</p>
<p>The fact of the matter is that Hyprland remains a toxic community, enabled and
encouraged by its toxic leadership, namely Vaxry. FDO&rsquo;s decision to ban Vaxry is
ultimately a consequence of Vaxry&rsquo;s behavior, and because he has elected to
appeal his case in public, I am compelled to address his behavior in public. I
hereby rise firmly in defense of FDO&rsquo;s decision.</p>
<p>I invite you to start by reading the two email threads, <a href="https://web.archive.org/web/20250306212807/https://blog.vaxry.net/resource/articleFDO/RHMails.pdf">one</a>, and <a href="https://web.archive.org/web/20240412194128/https://blog.vaxry.net/resource/articleFDO/lyudeReply.pdf">two</a>,
which Vaxry has published for your consideration, as well as Vaxry&rsquo;s follow-ups
on his blog, <a href="https://blog.vaxry.net/articles/2024-fdo-and-redhat">one</a>, and <a href="https://blog.vaxry.net/articles/2024-fdo-and-redhat2">two</a>.</p>
<p>Here&rsquo;s my read on the situation.</p>
<p>The FDO officer that reached out to Vaxry did it after Vaxry&rsquo;s problematic
behavior was brought to her attention by members of the FDO community, and was
acting on her mandate within the FDO conduct enforcement board by investigating
complaints submitted to her by this community. It is not a stretch to suggest a
close relationship between these communities exists: FDO is the steward of both
the Wayland protocol and implementation and the wlroots library, essential
dependencies of Hyprland and sources for collaboration between Hyprland and FDO.
Vaxry and other members of the Hyprland community had already participated
extensively in these projects (mainly in discussions on IRC and GitLab issues)
at the time of the email exchange, in spaces where the code of conduct applies.</p>
<p>The FDO officer duly investigated the complaints she had received and found, in
collaboration with the other members of the FDO conduct enforcement team, that
they were credible, and worrying. There are numerous examples of behavior from
Vaxry that contravenes the FDO code of conduct in several different respects,
and any number of them would be grounds for an immediate ban. Since these
behaviors are concerning, but did not take place in the FDO community, the
conduct board decided to issue a warning in private, stating that if this sort
of behavior was seen in the FDO community that it would result in enforcement
action from the conduct team.</p>
<p>All of the actions from the FDO conduct team are reasonable and show
considerable restraint. Vaxry could have taken it in stride with no consequences
to himself. Instead, he immediately escalated the situation. He construes the
FDO officer&rsquo;s polite and well-reasoned warning as threats and intimidation. He
minimizes examples of his own hate speech by shrugging them off as a joke. He
belittles the FDO officer and builds a straw man wherein her email is an
official statement on behalf of RedHat, and cites a conspiracy theory about
<abbr title="diversity, equity, and inclusion">DEI</abbr> programs at RedHat as
justification for calling the FDO officer a hypocrite. He is insulted on my
behalf that my name was cited in the FDO officer&rsquo;s email in lowercase, &ldquo;drew&rdquo;,
and feels the need to address this.</p>
<p>The FDO officer responds to Vaxry&rsquo;s unhinged rant with a sarcastic quip
clarifying that it was indeed within the FDO conduct team&rsquo;s remit to ban Vaxry
from their GitLab instance &ndash; I confess that in my view this was somewhat
unprofessional, though I can easily sympathize with the FDO officer given the
context. Following this, Vaxry states that Hyprland will cease all communication
with FDO&rsquo;s conduct team and <em>ignore</em> (emphasis his) any future emails from them.
Finally, he threatens legal action (on what basis is unclear) and signs the
email.</p>
<p>Regardless of how you feel about the conduct team issuing a private warning to
Vaxry on the basis of activities outside of FDO community spaces, the email
thread that ensues most certainly is within the scope of the FDO code of
conduct, and Vaxry&rsquo;s behavior therein is sufficient justification for a ban from
the FDO community as far as I&rsquo;m concerned. The conduct team cites Vaxry&rsquo;s stated
intention to ignore any future conduct interventions as the ultimate reason for
the ban, which I find entirely reasonable on FDO&rsquo;s part. I have banned people
for far less than this, and I stand by it.</p>
<p>Vaxry&rsquo;s follow-up blog posts only serve to underscore this point. First of all,
he immediately opens with a dog-whistle calling for the reader to harass the FDO
officer in question: &ldquo;I don&rsquo;t condone harassing this person, but here is their
full name, employer and contact details&rdquo;:</p>
<blockquote>
<p>I do not condone any hateful messages sent towards any of the parties
mentioned.</p>
<p>Recently I have received an email filled with threats to my inbox, from a
member of the X.org board, Freedesktop.org, and a Red Hat employee. Their name
is [redacted].</p></blockquote>
<p>Moreover, Vaxry claims to have apologised for his past conduct, which is not
true. In lieu of an apology, Vaxry has spent the &ldquo;1.5 years&rdquo; since the last
incident posting angry rants on his blog calling out minority representation and
&ldquo;social justice warriors&rdquo; in light of his perceived persecution. Meanwhile the
Hyprland community remains a toxic place, welcoming hate, bullying, and
harassment, but now prohibiting all &ldquo;political&rdquo; speech, which in practice means
any discussion of LGBTQ topics, though this is largely unenforced. In the end,
the Hyprland community&rsquo;s fundamental problem is that they&rsquo;re all &ldquo;just having
fun&rdquo;, and it seems that they can&rsquo;t have &ldquo;fun&rdquo; unless it&rsquo;s at someone else&rsquo;s
expense.</p>
<p>The FDO team is right that Hyprland&rsquo;s community reflects poorly on the Linux
desktop community as a whole. Vaxry has created a foothold for hate,
transphobia, homophobia, bullying, and harassment in the Linux desktop
community. We are right to take action to correct this problem.</p>
<p>Every option other than banning Vaxry has been exhausted over the past year and
a half. I personally spent several weeks following my last blog post on the
matter discussing Vaxry&rsquo;s behavior in confidence and helping him understand how
to improve, and at my suggestion he joined a private community of positive male
role models to discuss these issues in a private and empathetic space. After a
few weeks of these private discussions, the last thing he said to me was &ldquo;I do
believe there could be arguments to sway my opinion towards genocide&rdquo;.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>There&rsquo;s nothing left to do but to build a fence around Hyprland and protect the
rest of the community from them. I know that there&rsquo;s a lot of good people who
use and contribute to Hyprland, and I&rsquo;m sorry for those of you who are affected
by this problem. But, in the end, actions have consequences. The rest of the
community has no choice but to sanction Vaxry.</p>
<p>And, to Vaxry &ndash; I know you&rsquo;re reading this &ndash; there are going to continue to be
consequences for your actions, but it&rsquo;s still not too late to change. I know
it&rsquo;s humiliating to be called out like this, and I really would rather not have
had to do so. FDO is probably not the last time you&rsquo;re going to be banned if you
don&rsquo;t change course, and it would reflect better on you if you took it on the
chin and didn&rsquo;t post inflammatory rants on your blog &ndash; trust me, you don&rsquo;t look
like the good guy here. You are trapped in an echo chamber of hate, anger, and
bigotry. I hope that you find a way out, and that someday you can build a
community which is as great as your software is.</p>
<p>And, to the FDO officer in question: I&rsquo;m so sorry that you&rsquo;re at the ass end of
all of this hate and abuse. You don&rsquo;t deserve any of it. You did a good job, and
I&rsquo;m proud of you and the rest of the FDO conduct team. If you need any support,
someone to talk to, don&rsquo;t hesitate to reach out and ask, on IRC, Matrix, email,
whatever. Don&rsquo;t read the comments.</p>
<p>And on that note, I condemn in the harshest terms the response from communities
like /r/linux on the subject. The vile harassment and hate directed at the FDO
officer in question is obscene and completely unjustifiable. I don&rsquo;t care what
window manager or desktop environment you use &ndash; this kind of behavior is
completely uncalled for. I expect better.</p>
<hr>
<p><em>P.S. The Hyprland community has already descended on me before even publishing
this post, after I called Vaxry out on Mastodon a few hours ago. My
notifications are not full of reasonable objections to my complaints, but
instead the response is slurs and death threats. This only serves to prove my
characterization of the Hyprland community as deeply toxic.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Yes, this is taken out of context. But, if you raise this objection, I
struggle to imagine in what context you think this statement can be read
sympathetically.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 9 Apr 2024 00:00:00 +0000</pubDate></item><item><title>Why Prusa is floundering, and how you can avoid their fate</title><link>https://drewdevault.com/2023/12/26/2023-12-26-Prusa-is-floundering.html</link><description><![CDATA[<p>Prusa is a 3D printer manufacturer which has a long history of being admired by
the 3D printing community for high quality, open source printers. They have been
struggling as of late, and came under criticism for making the firmware of their
Mk4 printer non-free.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p><a href="https://lucumr.pocoo.org/2023/12/25/life-and-death-of-open-source/">Armin Ronacher</a> uses Prusa as a case-study in why open source companies
fail, and uses this example to underline his argument that open source needs to
adapt for commercial needs, namely by adding commercial exclusivity clauses to
its licenses &ndash; Armin is one of the principal proponents of the non-free
Functional Source License. Armin cites his experience with a Chinese
manufactured 3D printer as evidence that intellectual property is at the heart
of Prusa&rsquo;s decline, and goes on to discuss how this dynamic applies to his own
work in developing a non-free license for use with Sentry. I find this work
pretty interesting &ndash; FSL is a novel entry into the non-free license compendium,
and it&rsquo;s certainly a better way to do software than proprietary models, assuming
that it&rsquo;s not characterized as free or open source. But, allow me to use the
same case study to draw different conclusions.</p>
<p>It is clear on the face of it that Prusa&rsquo;s move to a non-free firmware is
unrelated to their struggles with the Chinese competition &ndash; their firmware was
GPL&rsquo;d, and the cited competitor (Bambu) evidently respects copyleft, and there&rsquo;s
no evidence that Bambu&rsquo;s printers incorporate derivatives of Prusa&rsquo;s firmware in
a manner which violates the GPL. Making the license non-free is immaterial to
the market dynamics between Prusa and Bambu, so the real explanation must lie
elsewhere.</p>
<p>If you had asked me 10 years ago what I expected Prusa&rsquo;s largest risk would be,
I would have simply answered &ldquo;China&rdquo; and you would have probably said the same.
The Chinese economy and industrial base can outcompete Western manufacturing in
almost every manufacturing market.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> This was always the obvious
vulnerability in their business model, and they <em>absolutely</em> needed to be
prepared for this situation, or their death was all but certain. Prusa made one
of the classic errors in open source business models: they made their product,
made it open source, sold it, and assumed that they were done working on their
business model.</p>
<p>It was inevitable that someday Chinese manufacturers would undercut Prusa on
manufacturing costs. Prusa responded to this certainty by not diversifying their
business model whatsoever. There has only ever been one Prusa product: their
latest 3D printer model. The Mk4 costs $1,200. You can buy the previous
generation (at $1,000), or the MINI (from 2019, $500). You can open your wallet
and get their high-end printers, which are neat but fail to address the one
thing that most users at this price-point really want, which is more build
volume. Or, you can buy an Ender 3 off Amazon right now for $180 and you&rsquo;ll get
better than half of the value of an Mk4 at an 85% discount. You could also buy
Creality&rsquo;s flagship model for a cool $800 and get a product which beats the Mk4
in every respect. China has joined the market, bringing with them all of the
competitive advantages their industrial base can bring to bear, and Prusa&rsquo;s
naive strategy is causing their position to fall like a rock.</p>
<p>Someone new to 3D printing will pick up an Ender and will probably be happy with
it for 1-2 years. When they upgrade, will they upgrade to a Prusa or an Ender 5?
Three to five years a customer spends in someone else&rsquo;s customer pipeline is an
incredibly expensive opportunity cost Prusa is missing out on. This opportunity
cost is the kind of arithmetic that would make loss leaders like a cheap,
low-end, low-or-negative-margin Prusa printer make financial sense. Hell, Prusa
should have made a separate product line of white-labeled Chinese entry-level 3D
printers just to get people on the Prusa brand.</p>
<p>Prusa left many stones unturned. Bambu&rsquo;s cloud slicer is a massive lost
opportunity for Prusa. On-demand cloud printing services are another lost
opportunity. Prusa could have built a marketplace for models &amp; parts and skimmed
a margin off of the top, but they waited until 2022 to launch Printables &ndash;
waiting until the 11th hour when everyone was fed up with Thingiverse. Imagine a
Prusa where it works out of the box, you can fire up a slicer in your browser
which auto-connects to your printer and prints models from a Prusa-operated
model repository, paying $10 for a premium model, $1 off the top goes to Prusa,
with the same saved payment details which ensure that a fresh spool of Prusa
filament arrives at your front door when it auto-detects that your printer is
almost out. The print you want is too big for your build volume? Click here to
have it cloud printed &ndash; do you want priority shipping for that? Your hot-end is
reaching the end of its life &ndash; as one of our valued business customers on our
premium support contract we would be happy to send you a temporary replacement
printer while yours is shipped in for service.</p>
<p>Prusa&rsquo;s early foothold in the market was strong, and they were wise to execute
the way they did early on. But they <em>absolutely</em> had to diversify their lines of
business. Prusa left gaping holes in the market and utterly failed to capitalize
on any of them. Prusa could have been synonymous with 3D printing if they had
invested in the brand (though they probably needed a better name). I should be
able to walk into a Best Buy and pick up an entry-level Prusa for $250-$500, or
into a Home Depot and pick up a workshop model for $1000-$2000. I should be able
to bring it home, unbox it, scan a QR code to register it with PrusaConnect, and
have a Benchy printing in less than 10 minutes.</p>
<p>Chinese manufacturers did all of this and more, and they&rsquo;re winning. They aren&rsquo;t
just cheaper &ndash; they offer an outright better product. These are not cheap
knock-offs: if you want the best 3D printer today it&rsquo;s going to be a Chinese
one, regardless of how much you want to spend, but, as it happens, you&rsquo;re going
to spend less.</p>
<p>Note that none of this is material to the license of the product, be it free or
non-free. It&rsquo;s about building a brand, developing a customer relationship, and
identifying and exploiting market opportunities. Hackers and enthusiasts who
found companies like Prusa tend to imagine that the product is everything, but
it&rsquo;s not. Maybe 10% of the work is developing the 3D printer itself &ndash;
don&rsquo;t abandon the other 90% of your business. Especially when you make that 10%
open: someone else is going to repurpose it, do the other 90%, and eat your
lunch. FOSS is <em>great</em> precisely because it makes that 10% into community
property and shares the cost of innovation, but you&rsquo;d be a fool to act as if
that was all there was to it. You need to deal with sales and marketing, chase
down promising leads, identify and respond to risks, look for and exploit new
market opportunities, and much more to be successful.</p>
<p>This is a classic failure mode of open source businesses, and it&rsquo;s <em>Prusa&rsquo;s
fault</em>. They had an excellent foothold early in the market, leveraging open
source and open hardware to great results and working hand-in-hand with
enthusiasts early on to develop the essential technology of 3D printing. Then,
they figured they were done developing their business model, and completely
dropped the ball as a result. Open source is not an &ldquo;if you build it, the money
will come&rdquo; situation, and to think otherwise is a grave mistake. Businesses need
to identify their risks and then mitigate them, and if they don&rsquo;t do that due
diligence, then it&rsquo;s <em>their fault</em> when it fails &ndash; it&rsquo;s not a problem with
FOSS.</p>
<p>Free and open source software is an incredibly powerful tool, including as a
commercial opportunity. FOSS really has changed the world! But building a
business is still hard, and in addition to its fantastic advantages, the FOSS
model poses important and challenging constraints that you need to understand
and work with. You have to be creative, and you must do a risk/reward assessment
to understand how it applies to your business and how you can utilize it for
commercial success. Do the legwork and you can utilize FOSS for a competitive
advantage, but skip this step and you will probably fail within a decade.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I sourced this information from Armin&rsquo;s blog post, but it didn&rsquo;t
hold up to a later fact check: the
<a href="https://github.com/prusa3d/Prusa-Firmware-Buddy">Mk4 firmware</a> seems to be
free software. It seems the controversy here has to do with Prusa
developing its slicer software behind closed doors and doing occasional
source-code dumps, rather than managing a more traditional &ldquo;bazaar&rdquo; style
project.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>That said, there are still vulnerabilities in the Chinese industrial
base that can be exploited by savvy Western entrepreneurs. Chinese access to
Western markets is constrained below a certain scale, for instance, in ways
that Western businesses are not.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate></item><item><title>Richard Stallman&apos;s political discourse on sex</title><link>https://drewdevault.com/2023/11/25/2023-11-26-RMS-on-sex.html</link><description><![CDATA[<p>Richard Stallman, the founder of the Free Software Foundation, has been subject
to numerous allegations of misconduct. He stepped down in 2019, and following
his re-instatement in 2021, a famous <a href="https://rms-open-letter.github.io/">open letter</a> was published in which
numerous organizations and individuals from throughout the Free Software
ecosystem called for his removal from the Free Software Foundation. The letter
had no effect; Stallman remains a voting member of the FSF&rsquo;s <a href="https://www.fsf.org/about/staff-and-board">board of
directors</a> to this day and continues to receive numerous <a href="https://stallman.org/talks.html">speaking
engagements</a>.</p>
<p><em>Content warning: This article discusses sexual abuse, sexual assault, sexual
harassment, and all of the above with respect to minors, as well as the systemic
normalization of abuse, and directly quotes statements which participate in the
normalization of abuse.</em></p>
<p>This article presents an analysis of Stallman&rsquo;s political discourse on sex with
the aim of establishing the patterns that cause the sort of discomfort that led
to Stallman&rsquo;s public condemnation. In particular, we will address how Stallman
speaks about sexual assault, harassment, consent, and minors in his discourse.</p>
<p>I think that it is important to acknowledge this behavior not as a series of
isolated incidents, nor a conflict with Stallman&rsquo;s &ldquo;<a href="https://www.fsf.org/news/statement-of-fsf-board-on-election-of-richard-stallman">personal style</a>&rdquo;,
but a pattern of behavior from which a political narrative forms, and draws
attention to the fact that the meager retractions, excuses, and non-apologies
from both Stallman and the Free Software Foundation as a whole fail to account
for that pattern in a meaningful way.</p>
<p>The failure of the Free Software community to account for Richard Stallman&rsquo;s
behavior has a chilling effect. The norms set by our leadership influence the
norms of our broader community, and many members of the Free Software community
look to Stallman as a ideological and political leader. The norms Stallman
endorses are harmful and deeply confronting and alienating to many people, in
particular women and children. Should these norms be adopted by our movement, we
risk creating a community which enables the exploitation of vulnerable people.</p>
<p>Let&rsquo;s begin to address this by considering Stallman&rsquo;s retraction of his comments
in support of pedophilia. The following comment from Stallman in 2013 drew harsh
criticism:</p>
<blockquote>
<p>There is little evidence to justify the widespread assumption that willing
participation in pedophilia hurts children.</p></blockquote>
<p><small>— <a href="https://web.archive.org/web/20210325014249/https://stallman.org/archives/2012-nov-feb.html#04_January_2013_(Pedophilia)">stallman.org, 04 January 2013 &ldquo;Pedophilia&rdquo;</a></small></p>
<p>Following much of the criticism directed at Stallman, he had a number of
&ldquo;personal conversations&rdquo; which reframed his views. Of the many comments Stallman
has made which drew ire, this is one of the few for which a correction was made,
in September 2019:</p>
<blockquote>
<p>Many years ago I posted that I could not see anything wrong about sex between
an adult and a child, if the child accepted it.</p>
<p>Through personal conversations in recent years, I&rsquo;ve learned to understand how
sex with a child can harm per psychologically. This changed my mind about the
matter: I think adults should not do that. I am grateful for the conversations
that enabled me to understand why.</p></blockquote>
<p><small>— <a href="https://web.archive.org/web/20210325015259/https://stallman.org/archives/2019-jul-oct.html#14_September_2019_(Sex_between_an_adult_and_a_child_is_wrong)">stallman.org, 14 September 2019 &ldquo;Sex between an adult and a child is wrong&rdquo;</a></small></p>
<p>This statement from Stallman has been accepted by his defenders as evidence of
his capitulation on pedophilia. I argue that this statement is misleading due to
the particular way Stallman uses the word &ldquo;child&rdquo;. When Stallman uses this word,
he does so with a very specific meaning, which he explains on his website:</p>
<blockquote>
<p>Children: Humans up to age 12 or 13 are children. After that, they become
adolescents or teenagers. Let&rsquo;s resist the practice of infantilizing
teenagers, by not calling them &ldquo;children&rdquo;.</p></blockquote>
<p><small>— <a href="https://www.stallman.org/antiglossary.html">stallman.org, &ldquo;Anti-glossary&rdquo;</a></small></p>
<p>It seems clear from this definition is that Stallman&rsquo;s comments are not a
capitulation at all. His 2019 retraction, when interpreted using his definition
of &ldquo;children&rdquo;, does not contradict most of Stallman&rsquo;s past statements regarding
sex and minors, including his widely criticized defenses of many people accused
of sexual impropriety with minors.</p>
<p>Stallman&rsquo;s most recent direct response to his criticism underscores this:</p>
<blockquote>
<p>It was right for me to talk about the injustice to Minsky, but it was
tone-deaf that I didn&rsquo;t acknowledge as context the injustice that Epstein did
to women or the pain that caused.</p></blockquote>
<p><small>— <a href="https://www.fsf.org/news/rms-addresses-the-free-software-community">fsf.org, April 12, 2021, &ldquo;RMS addresses the free software community&rdquo;</a></small></p>
<p>Stallman qualifies his apology by explicitly re-affirming his defense of Marvin
Minsky, which is addressed in detail later in this piece. Stallman&rsquo;s
doubling-down here is consistent with the supposition that Stallman maintains
the view that minors can have sexual relationships with adults of any age,
provided that they aren&rsquo;t &ldquo;children&rdquo; &ndash; in other words, provided they&rsquo;re at
least 13 or 14 years old.</p>
<p>Stallman cares deeply about language and its usage. His strange and deliberate
usage of the word &ldquo;children&rdquo; is also found many times throughout his political
notes over the years. For example:</p>
<blockquote>
<p>It sounds horrible: &ldquo;UN peacekeepers accused of child rape in South Sudan.&rdquo;
But the article makes it pretty clear that the &ldquo;children&rdquo; involved were not
children. They were teenagers.</p></blockquote>
<p><small>— <a href="https://web.archive.org/web/20180509120046/https://stallman.org/archives/2018-mar-jun.html#30_April_2018_(UN_peacekeepers_in_South_Sudan)">stallman.org, 30 April 2018 &ldquo;UN peacekeepers in South Sudan&rdquo;</a></small></p>
<p>Here Stallman again explicitly distinguishes &ldquo;teenagers&rdquo; from children, drawing
this distinction especially in the context of sexual relationships between
adults and minors. Stallman repeats this pattern many times over the years &ndash; we
see it again in Stallman&rsquo;s widely criticized defense of Cody Wilson:</p>
<blockquote>
<p>Cody Wilson has been charged with hiring a &ldquo;child&rdquo; sex worker. Her age has
not been announced, but I think she must surely be a teenager, not a child.
Calling teenagers &ldquo;children&rdquo; in this context is a way of smearing people with
normal sexual proclivities as &ldquo;perverts&rdquo;.</p></blockquote>
<p><small>— <a href="https://web.archive.org/web/20180924231708/https://stallman.org/archives/2018-jul-oct.html#23_September_2018_(Cody_Wilson)">stallman.org, 23 September 2018 &ldquo;Cody Wilson&rdquo;</a></small></p>
<p>And once more when defending Roy Moore:</p>
<blockquote>
<p>Senate candidate Roy Moore tried to start dating/sexual relationships with
teenagers some decades ago.</p>
<p>He tried to lead Ms Corfman step by step into sex, but he always respected
&ldquo;no&rdquo; from her and his other dates. Thus, Moore does not deserve the
exaggerated condemnation that he is receiving for this. As an example of
exaggeration: one mailing referred to these teenagers as &ldquo;children&rdquo;, even the
one that was 18 years old. Many teenagers are minors, but none of them are
children.</p>
<p>The condemnation is surely sparked by the political motive of wanting to
defeat Moore in the coming election, but it draws fuel from ageism and the
fashion for overprotectiveness of &ldquo;children&rdquo;.</p></blockquote>
<p><small>— <a href="https://web.archive.org/web/20180104112431/https://www.stallman.org/archives/2017-nov-feb.html#27_November_2017_(Roy_Moore's_relationships)">stallman.org, 27 November 2017 &ldquo;Roy Moore&rsquo;s relationships&rdquo;</a></small></p>
<p>Ms. Corfman was 14 at the time Roy Moore is accused of initiating sexual contact
with her; Moore was 32 at the time. Here we see an example of him re-iterating
his definition of &ldquo;children&rdquo;, a distinction he draws especially to suggest that
an adult having sex with a minor is socially acceptable.</p>
<p>Note that Stallman refers to Ms. Corfman as Moore&rsquo;s &ldquo;date&rdquo;. Stallman&rsquo;s use of
this word is important: here he normalizes the possibility that a minor and an
adult could engage in a healthy dating relationship. In this statement, Stallman
cites an article which explains circumstances which do not resemble such a
normalized dating experience: Moore isolated Corfman from her mother, drove her
directly to his home, and initiated sexual contact there.</p>
<p>Note also that the use of the phrase &ldquo;step by step&rdquo; in this quotation is more
commonly referred to as &ldquo;grooming&rdquo; in the discourse on child sexual
exploitation.</p>
<p>Stallman reaches for similar reasoning in other political notes, such as the
following:</p>
<blockquote>
<p>A British woman is on trial for going to a park and inviting teenage boys to
have sex with her there. Her husband acted as a lookout in case someone else
passed by. One teenager allegedly visited her at her house repeatedly to have
sex with her.</p>
<p>None of these acts would be wrong in any sense, provided they took precautions
against spreading infections. The idea that adolescents (of whatever sex) need
to be &ldquo;protected&rdquo; from sexual experience they wish to have is prudish
ignorantism, and making that experience a crime is perverse.</p></blockquote>
<p><small>— <a href="https://web.archive.org/web/20170612074722/http://stallman.org/archives/2017-mar-jun.html#26_May_2017_(Prudish_ignorantism)">stallman.org, 26 May 2017, &ldquo;Prudish ignorantism&rdquo;</a></small></p>
<p>The woman in question, aged 60, had sex with her husband, age 69, in a public
space, and invited spectators as young as 11 to participate.</p>
<p>Stallman has also sought to normalize adult attraction to minors, literally
describing it as &ldquo;normal&rdquo; in September 2018:</p>
<blockquote>
<p>Calling teenagers &ldquo;children&rdquo; encourages treating teenagers as children, a
harmful practice which retards their development into capable adults.</p>
<p>In this case, the effect of that mislabeling is to smear Wilson. It is rare,
and considered perverse, for adults to be physically attracted to children.
However, it is normal for adults to be physically attracted to adolescents.
Since the claims about Wilson is the latter, it is wrong to present it as the
former.</p></blockquote>
<p><small>— <a href="https://www.stallman.org/archives/2018-sep-dec.html#23_September_2018_(Cody_Wilson)">stallman.org, 23 September 2018, &ldquo;Cody Wilson&rdquo;</a></small></p>
<p>One month prior, Stallman made a statement which similarly normalized adult
attraction to minors, and suggests that acting on this attraction should be
acceptable to society, likening opposition to this view to homosexual conversion
therapy:</p>
<blockquote>
<p>This accords with the view that Stendhal reported in France in the 1800s,
that a woman&rsquo;s most beautiful years were from 16 to 20.</p>
<p>Although this attitude on men&rsquo;s part is normal, the author still wants to
present it as wrong or perverted, and implicitly demands men somehow control
their attraction to direct it elsewhere. Which is as absurd, and as
potentially oppressive, as claiming that homosexuals should control their
attraction and direct it towards to the other sex. Will men be pressured to
undergo &ldquo;age conversion therapy&rdquo; intended to brainwash them to feel attracted
mainly to women of their own age?</p></blockquote>
<p><small>— <a href="https://web.archive.org/web/20180911075211/https://www.stallman.org/archives/2018-jul-oct.html#21_August_2018_(Age_and_attraction)">stallman.org, 21 August 2018, &ldquo;Age and attraction&rdquo;</a></small></p>
<p>A trend is thus clearly seen in Stallman&rsquo;s regular political notes, over several
years, wherein Stallman re-iterates his position that &ldquo;adolescents&rdquo; or
&ldquo;teenagers&rdquo; are distinct from &ldquo;children&rdquo; for the purpose of having sex with
adults, and normalizes and defends adult attraction to minors and adults who
perform sexual acts with minors. We see this distinction of the two groups,
children and adolescents, outlined again on his &ldquo;anti-glossary&rdquo;, which still
published on his website today, albeit without the connotations of sex. His
regular insistence on a definition of children which excludes adolescents
serves such that his redaction of his controversial 2013 comment serves to
redact none of the other widely-condemned comments he has made since.</p>
<p>Stallman has often written political notes when people accused of sexual
impropriety, particularly with minors, appear in the news, or appear among
Stallman&rsquo;s social circle. Stallman&rsquo;s comments generally downplay the abuse and
manipulate language in a manner which benefits perpetrators of abuse. We see
this downplaying in another example from 2019:</p>
<blockquote>
<p>Should we accept stretching the terms &ldquo;sexual abuse&rdquo; and &ldquo;molestation&rdquo; to
include looking without touching?</p>
<p>I do not accept it.</p></blockquote>
<p><small>— <a href="https://www.stallman.org/archives/2019-may-aug.html#11_June_2019_(Stretching_meaning_of_terms)">stallman.org, 11 June 2019 &ldquo;Stretching meaning of terms&rdquo;</a></small></p>
<p>Stallman is writing here in response to a news article outlining accusations of
sexual misconduct directed at Ohio State athletics doctor Richard Strauss.
Strauss was accused of groping at least 177 students between 1979 and 1997
during routine physical exams, accusations corroborated by at least 50 members
of the athletic department staff.</p>
<p>In addition to Stallman&rsquo;s regular fixation of the use of the word &ldquo;children&rdquo;
with respect to sex, this political note also draws our attention to the next
linguistic fixation of Stallman I want to question: the use of phrases like
&ldquo;sexual abuse&rdquo; and &ldquo;sexual assault&rdquo;. The term &ldquo;sexual assault&rdquo; also appears in
Stallman&rsquo;s &ldquo;Anti-glossary&rdquo;:</p>
<blockquote>
<p>Sexual assault: The term is applied to a broad range of actions, from rape on
one end, to the least physical contact on the other, as well as everything in
between. It acts as propaganda for treating them all the same. That would be
wrong.</p>
<p>The term is further stretched to include sexual harassment, which does not
refer to a single act, but rather to a series of acts that amounts to a form
of gender bias. Gender bias is rightly prohibited in certain situations for
the sake of equal opportunity, but that is a different issue.</p>
<p>I don&rsquo;t think that rape should be treated the same as a momentary touch.
People we accuse have a right to those distinctions, so I am careful not to
use the term &ldquo;sexual assault&rdquo; to categorize the actions of any person on any
specific occasion.</p></blockquote>
<p><small>— <a href="https://www.stallman.org/antiglossary.html">stallman.org, &ldquo;Anti-glossary&rdquo;</a></small></p>
<p>Stallman often fixates on the term &ldquo;sexual assault&rdquo; throughout his political
notes. He feels that the term fails to distinguish between &ldquo;grave&rdquo; and &ldquo;minor&rdquo;
crimes, as he illustrated in 2021:</p>
<blockquote>
<p>&ldquo;Sexual assault&rdquo; is so vague that it makes no sense as a charge. Because of
that term, we can&rsquo;t whether these journalists were accused of a grave crime
or a minor one. However, the charge of espionage shows this is political
persecution.</p></blockquote>
<p><small>— <a href="https://stallman.org/archives/2021-jul-oct.html#21_July_2021_(Imprisonment_of_journalists)">stallman.org, 21 July 2021, &ldquo;Imprisonment of journalists&rdquo;</a></small></p>
<p>I would like to find out what kind of crimes Stallman feels the need to
distinguish along this axis. His other political notes give us some hints,
such as this one regarding Al Franken&rsquo;s sexual misconduct scandal:</p>
<blockquote>
<p>If it is true that he persistently pressured her to kiss him, on stage and
off, if he stuck his tongue into her mouth despite her objections, that could
well be sexual harassment. He should have accepted no for an answer the first
time she said it. However, calling a kiss &ldquo;sexual assault&rdquo; is an exaggeration,
an attempt to equate it to much graver acts, that are crimes.</p>
<p>The term &ldquo;sexual assault&rdquo; encourages that injustice, and I believe it has been
popularized specifically with that intention. That is why I reject that term.</p></blockquote>
<p><small>— <a href="https://web.archive.org/web/20190801201704/https://stallman.org/archives/2019-may-aug.html#30_July_2019_(Al_Franken)">stallman.org, 30 July 2019, &ldquo;Al Franken&rdquo;</a></small></p>
<p>Stallman also wrote in 2020 to question the use of the phrase again:</p>
<blockquote>
<p>In the US, when thugs<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> rape people they say are suspects, it is
rare to bring them to justice.</p>
<p>I object to describing any one crime as &ldquo;sexual assault&rdquo; because that is vague
about the severity of the crime. This article often uses that term to refer to
many crimes that differ in severity but raise the same issue. That may be a
valid practice.</p></blockquote>
<p><small>— <a href="https://stallman.org/notes/2020-jul-oct.html#12_August_2020_(When_thugs_rape_people_they_say_are_suspects)">stallman.org, 12 August 2020, &ldquo;When thugs rape people they say are suspects&rdquo;</a></small></p>
<p>In the article Stallman cites in this political note, various unwelcome sexual
acts by the police are described, the least severe of which is probably
molestation.</p>
<p>More alarmingly, Stallman addresses his views on the term &ldquo;sexual assault&rdquo; in
this 2017 note, affording for the possibility that a 35-year-old man could have
had consensual sex with an 11-year-old girl.</p>
<blockquote>
<p>Jelani Maraj (who I had never heard of) could be imprisoned for a long time
for &ldquo;sexual assault&rdquo;. What does that concretely mean?</p>
<p>Due to the vagueness of the term &ldquo;sexual assault&rdquo; together with the dishonest
law that labels sex with adolescents as &ldquo;rape&rdquo; even if they are willing, we
cannot tell from this article what sort of acts Maraj was found to have
committed. So we can&rsquo;t begin to judge whether those acts were wrong.</p>
<p>I see at least three possibilities. Perhaps those acts really constituted
rape — it is a possibility. Or perhaps the two had sex willingly, but her
parents freaked out and demanded prosecution. Or, intermediate between those
two, perhaps he pressured her into having sex, or got her drunk.</p></blockquote>
<p><small>— <a href="https://stallman.org/archives/2017-nov-feb.html#13_November_2017_(Jelani_Maraj)">stallman.org, 13 November 2017, &ldquo;Jelani Maraj&rdquo;</a></small></p>
<p>Another article by Stallman does not explicitly refer to sexual assault, but
does engage in a bizarre defense of a journalist who was fired for masturbating
during a video conference. In this article Stallman fixates on questions such as
whether or not the genitals being in view of the webcam was intentional or not,
and suggests that masturbating on a video call would be acceptable should the
genitals remain unseen.</p>
<blockquote>
<p>The New Yorker&rsquo;s unpublished note to staff was vague about its grounds for
firing Toobin. Indeed, it did not even acknowledge that he had been fired.
This is unfair, like convicting someone on unstated charges. Something didn&rsquo;t
meet its &ldquo;standards of conduct&rdquo;, but it won&rsquo;t tell us what — we can only
guess. What are the possibilities? Intentionally engaging in video-call sex as
a side activity during a work meeting? If he had not made a mistake in keeping
that out of view of the coworkers, why would it make a difference what the
side activity was?</p></blockquote>
<p><small>— <a href="https://www.stallman.org/articles/toobin.html">stallman.org, November 2020, &ldquo;On the Firing of Jeffrey Toobin&rdquo;</a></small></p>
<p>Finally, Stallman elaborated on his thoughts on the term most recently in
October 2023. This note gives the clearest view of Stallman&rsquo;s preferred
distinction between various sexual crimes:</p>
<blockquote>
<p>I warned that the stretchable term &ldquo;sexual assault&rdquo;, which extends from grave
crimes such as rape through significant crimes such as groping and down to no
clear lower bound, could be stretched to criminalize minor things, perhaps
even stealing a kiss. Now this has happened.</p>
<p>What next? Will a pat on the arm or a hug be criminalized? There is no clear
limit to how far this can go, when a group builds up enough outrage to push
it.</p></blockquote>
<p><small>— <a href="https://www.stallman.org/archives/2023-sep-dec.html#15_October_2023_(Sexual_assault_for_stealing_a_kiss)">stallman.org, 15 October 2023, &ldquo;Sexual assault for stealing a kiss&rdquo;</a></small></p>
<p>From Stallman&rsquo;s statements, we can refine his objection to the term &ldquo;sexual
assault&rdquo;, and sexual behaviors generally, to further suggest that the following
beliefs are held by Stallman on the subject:</p>
<ul>
<li>Groping and molestation are not sexual assault, but are crimes</li>
<li>Kissing someone without consent is not sexual assault, furthermore it is not wrong</li>
<li>Masturbating during a video conference is not wrong if you are not seen doing so</li>
<li>A 35-year-old man having sex with an 11-year-old girl does not constitute
rape, nor sexual assault, but is in fact conscionable</li>
</ul>
<p>The last of these may be covered under Stallman&rsquo;s 2019 retraction, even
accounting for Stallman&rsquo;s unconventional use of the word &ldquo;children&rdquo;.</p>
<p>Stallman&rsquo;s fixation on the term &ldquo;sexual assault&rdquo; can be understood in his
political notes as having the political aims of eroding the meaning of the
phrase, questioning the boundaries of consent, downplaying the importance of
agency in intimate interactions, appealing for the defense of people accused of
sexual assault, and arguing for sexual relationships between minors and adults
to be normalized. In one notable case, he has used this political angle to rise
to the defense of his friends &ndash; in Stallman&rsquo;s infamous email regarding Marvin
Minsky, he writes the following:</p>
<blockquote>
<p>The injustice [done to Minsky] is in the word “assaulting”. The term “sexual
assault” is so vague and slippery that it facilitates accusation inflation:
taking claims that someone did X and leading people to think of it as Y, which
is much worse than X.</p>
<p>(&hellip;)</p>
<p>The word “assaulting” presumes that he applied force or violence, in some
unspecified way, but the article itself says no such thing. Only that they had
sex.</p>
<p>We can imagine many scenarios, but the most plausible scenario is that she
presented herself to him as entirely willing. Assuming she was being coerced
by Epstein, he would have had every reason to tell her to conceal that from
most of his associates.</p>
<p>I’ve concluded from various examples of accusation inflation that it is
absolutely wrong to use the term “sexual assault” in an accusation.</p></blockquote>
<p><small>— Excerpt from <a href="https://scribe.rip/medium.com/@selamie/remove-richard-stallman-fec6ec210794">Selam G&rsquo;s recount of Stallman&rsquo;s email</a> to MIT Computer Science and Artificial Intelligence Laboratory mailing list, September 2019. Selam&rsquo;s quotation has been corroborated by other sources.
Minsky is, in this context, accused of having had a sexual encounter with a
minor facilitated by convicted child trafficker Ghislaine Maxwell. The original
accusation does not state that this sexual encounter actually occurred; only
that the minor in question was instructed to have sex with Minsky. Minsky would
have been at least 75 years old at the time of the alleged incident; the minor
was 16.
</small></p>
<p>There is an important, but more subtle pattern in Stallman&rsquo;s statements that I
want to draw your attention to here: Stallman appears to have little to no
understanding of the role of power dynamics in sexual harassment, assault, and
rape. Stallman appears to reject the supposition that these acts could occur
without an element of outwardly apparent violent coercion.</p>
<p>This is most obviously evidenced by his statements regarding the sexual abuse of
minors; most people understand that minors cannot consent to sex even if they
&ldquo;appear willing&rdquo;, in particular because an adult in this situation is exploiting
a difference in experience and maturity to manipulate the child into sexually
satisfying them &ndash; in other words, a power differential. Stallman seems to
reject this understanding of consent in his various defenses of people accused
of sexual impropriety with minors, and in cases where the pretense of consent
cannot be easily established, he offers the perpetrator the benefit of the
doubt.</p>
<p>We can also find an example of Stallman disregarding power dynamics with respect
to adults in the following political note from 2017:</p>
<blockquote>
<p>A famous theater director had a habit of pestering women, asking them for sex.</p>
<p>As far as I can tell from this article, he didn&rsquo;t try to force women into sex.</p>
<p>When women persistently said no, he does not seem to have tried to punish them.</p>
<p>The most he did was ask.</p>
<p>He was a pest, but nothing worse than that.</p></blockquote>
<p><small>— <a href="https://web.archive.org/web/20180131020215/https://stallman.org/archives/2017-jul-oct.html#29_October_2017_(Pestering_women)">stallman.org, 29 October 2017, &ldquo;Pestering women&rdquo;</a></small></p>
<p>In this case we have an example of &ldquo;quid pro quo&rdquo;, a kind of sexual harassment
which weaponizes power dynamics for sexual gratification. This kind of sexual
harassment is explicitly cited as illegal by Title VII of the US Civil Rights
Act. A lack of competence in this respect displayed by Stallman, whose position
in the Free Software Foundation board of directors requires that he act in a
manner consistent with this law, is alarming.</p>
<p>I have identified this blindness to power dynamics as a recurring theme in
Stallman&rsquo;s comments on sexual abuse, be it with respect to sexual relationships
between minors and adults, managers and subordinates, students and teachers, or
public figures and their audience. I note for the reader that Stallman has held
and currently holds several of these positions of power.</p>
<p>In addition to his position as a voting member of the Free Software Foundation&rsquo;s
Board of Directors, Stallman is still invited to speak at events and
conferences. <a href="https://github.com/ddol/rre-rms/blob/master/fulltext/20111018.txt">Stallman&rsquo;s infamous rider</a> prescribes a number of his
requirements for attending an event; most of his conditions are relatively
reasonable, though amusing. In this document, he states his preference for being
accommodated in private, on a &ldquo;spare couch&rdquo;, when he travels. At these events,
in these private homes, he may be afforded many opportunities to privacy with
vulnerable people, including minors that, in his view, can consent to having sex
with adults.</p>
<p>In summary, Stallman has a well-documented and oft-professed set of political
beliefs which reject the social and legal norms regarding consent. He is not
simply quietly misled in these beliefs; rather he advocates for these values
using his political platform. He has issued no meaningful retractions of these
positions or apologies for harm caused, and has continued to pursue a similar
agenda since his return to the FSF board of directors.</p>
<p>This creates a toxic environment not only in the Free Software Foundation and in
Stallman&rsquo;s direct purview, but in the broader Free Software movement. The free
software movement is culturally poisoned by our support of Stallman as our
ideological leader. The open letter calling for Stallman&rsquo;s removal received
3,000 signatures; the counter-letter in support of Stallman received 6,876
before it stopped accepting submissions.</p>
<p>Richard Stallman founded the Free Software Foundation in 1985, and has performed
innumerable works to the benefit of our community since then. We&rsquo;ve taken
Stallman&rsquo;s views on software freedom seriously, and they&rsquo;ve led us to great
achievements. It is to Stallman&rsquo;s credit that the Free Software community is
larger than one man. However, one&rsquo;s political qualifications to speak about free
software does not make one qualified to address matters of sex; in this respect
Stallman&rsquo;s persistence presents as dangerous incompetence.</p>
<p>When we consider his speech on sex as a discourse that has been crafted and
rehearsed methodically over the years, he asks us to consider him seriously, and
so we must. When we analyze the dangerous patterns in this discourse, we have to
conclude that he is not fit for purpose in his leadership role, and we must
acknowledge the shadow that our legitimization of his discourse casts on our
community.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Stallman consistently refers to police officers as &ldquo;thugs&rdquo; in his
writing; see Stallman&rsquo;s <a href="https://stallman.org/glossary.html">Glossary</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 25 Nov 2023 00:00:00 +0000</pubDate></item><item><title>Can I be on your podcast?</title><link>https://drewdevault.com/2023/11/09/Can-I-be-on-your-podcast.html</link><description><![CDATA[<p>I am working on rousing the <a href="https://harelang.org">Hare</a> community to get the
word out about our work. I have drafted the <a href="https://harelang.org/evangelism/">Hare evangelism</a> guidelines to
this effect, which summarizes how we want to see our community bringing Hare to
more people.</p>
<p>We&rsquo;d like to spread the word in a way which is respectful of the attention of
others &ndash; we&rsquo;re explicitly eschewing unsolicited prompts for projects to
consider writing/rewriting in Hare, as well as any paid sponsorships or
advertising. Blog posts about Hare, videos, participating in (organic) online
discussions &ndash; much better! And one idea we have is to talk about Hare on
podcasts which might be interested in the project.</p>
<p>If that describes your podcast, here&rsquo;s my bold request: can I make an
appearance?</p>
<p>Here are some mini &ldquo;press kits&rdquo; to give you a hook and some information that
might be useful for preparing an interview.</p>
<h2 id="the-hare-programming-language">The Hare programming language</h2>
<blockquote>
<p>Hare is a systems programming language designed to be simple, stable, and
robust. Hare uses a static type system, manual memory management, and a
minimal runtime. It is well-suited to writing operating systems, system tools,
compilers, networking software, and other low-level, high performance tasks.</p></blockquote>
<p>Hare has been in development since late 2019 and today has about 100
contributors.</p>
<ul>
<li><a href="https://harelang.org/">Official website</a></li>
<li><a href="https://sr.ht/~sircmpwn/hare/">Source code &amp; development resources</a></li>
<li><a href="https://spacepub.space/w/ajS983L4cEG82jiiaTYfXv">&ldquo;Introducing the Hare programming language&rdquo;, video, 2022</a></li>
<li>GPLv3, MPL 2.0, MIT</li>
</ul>
<p><img src="https://harelang.org/mascot.png" alt="A hand-drawn picture of a rabbit"></p>
<p><em>Hare&rsquo;s official mascot, Harriet. Drawn by Louis Taylor, CC-0</em></p>
<h2 id="the-ares-operating-system">The Ares operating system</h2>
<p>Ares is an operating system written in Hare which is under development. It
features a micro-kernel oriented design and runs on x86_64 and aarch64. Its
design is inspired by the seL4 micro-kernel and Plan 9.</p>
<ul>
<li><a href="https://ares-os.org/">Official website</a></li>
<li><a href="https://sr.ht/~sircmpwn/helios">Source code &amp; development resources</a></li>
<li><a href="https://spacepub.space/w/wpKXfhqqr7FajEAf4B2Vc2">&ldquo;Introducing the Helios micro-kernel&rdquo;, video, FOSDEM 2023</a></li>
<li>GPLv3</li>
</ul>
<p><img src="https://files.catbox.moe/a4g9my.jpg" alt="A photo of a laptop running the Ares operating system"></p>
<p><em>A picture of a ThinkPad running Ares and demonstrating some features</em></p>
<h2 id="himitsu-a-secret-storage-system">Himitsu: a secret storage system</h2>
<blockquote>
<p>Himitsu is a secure secret storage system for Unix-like systems. It provides
an arbitrary key/value store (where values may be secret) and a query language
for manipulating the key store.</p></blockquote>
<p>Himitsu is written in Hare.</p>
<ul>
<li><a href="https://himitsustore.org/">Official website</a></li>
<li><a href="https://sr.ht/~sircmpwn/himitsu">Source code &amp; development resources</a></li>
<li><a href="https://himitsustore.org/intro.mp4">Video tour</a></li>
<li>GPLv3</li>
</ul>
<h2 id="interested">Interested?</h2>
<p>If any of these topics are relevant for your podcast and you&rsquo;d like to talk
about them, please reach out to me via email: <a href="mailto:sir@cmpwn.com">sir@cmpwn.com</a></p>
<p>Thanks!</p>]]></description><pubDate>Thu, 9 Nov 2023 00:00:00 +0000</pubDate></item><item><title>On &quot;real name&quot; policies</title><link>https://drewdevault.com/2023/10/31/On-real-names.html</link><description><![CDATA[<p>Some free software projects reject anonymous or pseudonymous contributions,
requiring you to author patches using your &ldquo;real name&rdquo;. Such projects have a
so-called &ldquo;real name&rdquo; policy; Linux is one well-known example.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>The root motivations behind such policies vary, but in my experience the most
often cited rationale is that it&rsquo;s important to establish the provenance of the
contribution for copyright reasons. In the case of Linux, contributors are asked
to &ldquo;sign-off&rdquo; their commits to indicate their agreement to the terms of the
Developer Certificate of Origin (DCO), which includes clauses like the
following:</p>
<blockquote>
<p>The contribution was created in whole or in part by me and I have the right to
submit it under the open source license indicated in the file.</p></blockquote>
<p>To some extent, the DCO serves as a legal assertion of copyright and an
agreement to license a work under given copyright terms (GPLv2 in the case of
Linux). This record also means that the author of the code is accountable in
case the copyright is challenged; in the case of an anonymous or pseudonymous
contributor you&rsquo;re shit out of luck. At that point, liability over the
disagreement would likely fall into the hands of the maintainer that accepted
the contribution. It is reasonable for a maintainer to ask a contributor to
assert their copyright and accept liability over the provenance of their code in
a legally meaningful and accountable form.</p>
<p>The possibility that someone may have something useful to offer to a free
software project, but is not comfortable disclosing their name for any number of
reasons, is a reasonable supposition. A maintainer whose &ldquo;real name&rdquo; policy is
challenged on this basis would also be reasonable in saying &ldquo;I feel for you, but
I cannot agree to accept legal liability over the provenance of this code,
nor can I communicate that risk to end-users who acquire code under a license
that may or may not be valid as such&rdquo;.</p>
<p>&ldquo;Real name&rdquo; policies are controversial in the free software community. I open
with this perspective in an attempt to cool down the room. Those who feel
marginalized by &ldquo;real name&rdquo; policies often skew young, and many treat matters
such as copyright and licensing with disdain. Moreover, the problem tends to
inflame deeply hurtful sentiments and raise thorny matters of identity and
discrimination, and it&rsquo;s easy to construe the intent of the policymakers as the
intent to cause harm. The motivations behind these policies are reasonable.</p>
<p>That said, intent or otherwise, these policies can cause harm. The profile of
the contributor who is comfortable using their &ldquo;real name&rdquo; is likely to fall
more narrowly into over-represented demographics in our community; enforcing a
real-name policy will ostracize some people. Those with marginalized identities
tend to be less comfortable with disclosing their &ldquo;real name&rdquo;. Someone who has
been subject to harassment may not be comfortable with this disclosure, since it
offers more fuel to harassers keeping tabs on their activities. The use of a
&ldquo;real name&rdquo; also confers a gender bias; avoiding a &ldquo;real name&rdquo; policy neatly
eliminates discrimination on this basis. Of course, there are also many
<a href="https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/">falsehoods programmers believe about names</a> which can present in the
implementation of such a policy.</p>
<p>There is also one particular problem which has been at the heart of conflict
surrounding the use of &ldquo;real-name&rdquo; policies in free software: transgender
identities. A transgender person is likely to change their name in the process
of assuming their new identity. When this happens, their real name changes.
However, it may or may not match their legal name &ndash; some trans people opt to
change it, others don&rsquo;t; if they do it is a process that takes time. Meanwhile,
addressing a trans person by their old name, or &ldquo;deadname&rdquo;, is highly
uncomfortable. Doing so deliberately, as a matter of policy or otherwise, is a
form of discrimination. Many trans people experience deliberate &ldquo;deadnaming&rdquo; as
a form of harassment in their daily lives, and institutionalizing this behavior
is cruel.</p>
<p>The truth is, managing the names of participants is more challenging than anyone
would like. On the one hand, names establish accountability and facilitate
collaboration, and importantly, credit the authors of a work for services
performed. On the other hand, names are highly personal and deeply affecting,
and their usage and changes over time are the subject of important consideration
at the discretion of their owner. A complicating factor is that handling names
properly introduces technical problems which must be overcome.</p>
<p>To embrace the advantages of &ldquo;real name&rdquo; policies &ndash; establishing provenance,
encouraging accountability, fostering a social environment &ndash; without causing
harm, the approach I have settled on for my projects is to use the DCO to
establish provenance and encourage contributors to sign-off and participate
under the identity they feel most comfortable with. I encourage people to
utilize an identity they use beyond the project&rsquo;s walls, to foster a social
environment and a connection to the broader community, to establish
accountability, and to ensure that participants are reachable for further
discussion on their work. If a contributor&rsquo;s identity changes, we make every
effort to support this change in contemporary, future, and historical use.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>A <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d4563201f33a022fc0353033d9dfeb1606a88330">change to Linux policy</a> earlier this year refines their approach to
alleviate the concerns raised in this article.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate></item><item><title>Going off-script</title><link>https://drewdevault.com/2023/10/13/Going-off-script.html</link><description><![CDATA[<p>There is a phenomenon in society which I find quite bizarre. Upon our entry to
this mortal coil, we are endowed with self-awareness, agency, and free will.
Each of the 8 billion members of this human race represents a unique person, a
unique worldview, and a unique agency. Yet, many of us have the same fundamental
goals and strive to live the same life.</p>
<p>I think of such a life experiences as &ldquo;following the script&rdquo;. Society lays down
for us a framework for living out our lives. Everyone deviates from the script
to some extent, but most people hit the important beats. In Western society,
these beats are something like, go to school, go to college, get a degree, build
a career, get married, have 1.5 children, retire to Florida, die.</p>
<p>There are a number of reasons that someone may deviate from the script. The most
common case is that the deviations are imposed by circumstance. A queer person
will face discrimination, for instance, in marriage, or in adopting and raising
children. Someone born into the lower class will have reduced access to higher
education and their opportunities for career-building are curtailed accordingly;
similar experiences follow for people from marginalized groups. Furthermore,
more and more people who might otherwise be able to follow the script are
finding that they can&rsquo;t afford a home and don&rsquo;t have the resources to build a
family.</p>
<p>There are nevertheless many people who are afforded the opportunity to follow
the script, and when they do so, they often experience something resembling a
happy and fulfilling life. Generally this is not the result of a deliberate
choice &ndash; no one was presented with the script and asked &ldquo;is this what you
want&rdquo;? Each day simply follows the last and you make the choices that correspond
with what you were told a good life looks like, and sometimes a good life
follows.</p>
<p>Of course, it is entirely valid to want the &ldquo;scripted&rdquo; life. But you were not
asked if you wanted it: it was just handed to you on a platter. The average
person lacks the philosophical background which underpins their worldview and
lifestyle, and consequently cannot explain <em>why</em> it&rsquo;s &ldquo;good&rdquo;, for them or
generally. Consider your career. You were told that it was a desirable thing to
build for yourself, and you understand how to execute your duties as a member of
the working class, but can you explain why those duties are important and why
you should spend half of your waking life executing them? Of course, if you are
good at following the script, you are rewarded for doing so, generally with
money, but not necessarily with self-actualization.</p>
<p>This state of affairs leads to some complex conflicts. This approach to life
favors the status quo and preserves existing power structures, which explains in
part why it is re-enforced by education and broader social pressures. It also
leads to a sense of learned helplessness, a sense that this is the only way
things can be, which reduces the initiative to pursue social change &ndash; for
example, by forming a union.</p>
<p>It can also be uncomfortable to encounter someone who does not follow the
script, or even questions the script. You may be playing along, and mostly or
entirely exposed to people who play along. Meeting someone who doesn&rsquo;t &ndash; they
skipped college, they don&rsquo;t want kids, they practice polyamory, they identify as
a gender other than what you presumed, etc &ndash; this creates a moment of
dissonance and often resistance. This tends to re-enforce biases and can even
present as inadvertent micro-aggressions.</p>
<p>I think it&rsquo;s important to question the script, even if you decide that you like
it. You should be able to explain <em>why</em> you like it. This process of questioning
is a radical act. A radical, in its non-pejorative usage, is born when someone
questions their life and worldview, decides that they want something else, and
seeks out others who came to similar conclusions. They organize, they examine
their discomfort and put it to words, and they share these words in the hope
that they can explain a similar discomfort that others might feel within
themselves. Radical movements, which by definition is any movement which
challenges the status quo, are the stories of the birth and spread of radical
ideas.</p>
<p>Ask yourself: who are you? Did you choose to be this person? Who do you want to
be, and how will you become that person? Should you change your major? Drop out?
Quit your job, start a business, found a labor union? Pick up a new hobby? Join
or establish a social club? An activist group? Get a less demanding job, move
into a smaller apartment, and spend more time writing or making art? However you
choose to live, choose it deliberately.</p>
<p>The next step is an exercise in solidarity. How do you feel about others who
made their own choices, choices which may be alike or different to your own?
Or those whose choices were constrained by their circumstances? What can you do
together that you couldn&rsquo;t do alone?</p>
<p>Who do you want to be? Do you know?</p>]]></description><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate></item><item><title>The forbidden topics</title><link>https://drewdevault.com/2023/09/29/The-forbidden-topics.html</link><description><![CDATA[<p>There are forbidden topics in the hacker community. One is sternly reprimanded
for bringing them up, by their peers, their leaders, and the community at large.
In private, one can expect threats and intimidation; in public, outcry and
censorship. The forbidden topics are enforced by the moderators of our spaces,
taken off of forums, purged from chat rooms, and cleaned up from GitHub issues
and mailing lists; the ban-hammers fall swiftly and resolutely. My last article
to touch these subjects was removed from Hacker News by the moderators within 30
minutes and landed several death threats in my inbox. The forbidden topics, when
raised, are met with a resounding, aggressive dismissal and unconditional
condemnation.</p>
<p>Some years ago, the hacker community possessed near-unanimous praise for the
ideals of free speech; the hacker position was generally that of what we would
now understand as &ldquo;radical&rdquo; free speech, which is to say the kind of &ldquo;shout
&lsquo;fire&rsquo; in a crowded movie theater&rdquo; radical, but more specifically the kind that
tolerates hate speech. The popular refrain went, &ldquo;I disapprove of what you say,
but I will defend to the death your right to say it&rdquo;. Many hackers hold this as
a virtue to this day. I once held this as a virtue for myself.</p>
<p>However, this was a kind of free speech which was unconsciously contingent on
being used for speech with which the listener was comfortable. The hacker
community at this time was largely homogeneous, and as such most of the speech
we were exposed to was of the comfortable sort. As the world evolved around us,
and more people found their voice, this homogeneity began to break down. Critics
of radical free speech, victims of hate speech, and marginalized people of
all kinds began to appear in hacker communities. The things they had to say were
not comfortable.</p>
<p>The free speech absolutists among the old guard, faced with this discomfort,
developed a tendency to defend hate speech and demean speech that challenged
them. They were not the target of the hate, so it did not make them personally
uncomfortable, and defending it would maintain the pretense of defending free
speech, of stalwartly holding the line on a treasured part of their personal
hacker ethic. Speech which challenged their preconceptions and challenged their
power structures was not so easily acceptable. The pretense is dropped and they
lash out in anger, calling for the speakers to be excluded from our communities.</p>
<p>Some of the once-forbidden topics are becoming less so. There are carefully
chalked-out spaces where we can talk about them, provided they are not too
challenging, such as LGBTQ identities or the struggles of women in our spaces.
Such discussions are subject to careful management by our leaders and
moderators, to the extent necessary to preserve power structures. Those who
speak on these topics are permitted to do so relatively free of retaliation
provided that they speak from a perspective of humility, a voice that &ldquo;knows its
place&rdquo;. Any speech which suggests that the listener may find themselves subject
to a non-majority-conforming person in a position of power, or even that of a
peer, will have crossed the line; one must speak as a victim seeking the pity
and grace of your superiors to be permitted space to air your grievances.</p>
<p>Similarly, space is made for opposition to progressive speech, again moderated
only insofar as it is necessary to maintain power structures. Some kinds of
overt hate speech may rouse a response from our leaders, but those who employ a
more subtle approach are permitted their voice. Thus, both progressive speech
and hate speech are permitted within a carefully regulated framework of power
preservation.</p>
<p>Some topics, however, remain strictly forbidden.</p>
<p>Our community has persistent and pervasive problems of a particular sort which
we are not allowed to talk about: sexual harassment and assault. Men who
assault, harass, and even rape women in our spaces, are protected. A culture of
silence is enforced, and those who call out rape, sexual assault, or harassment,
those who criticise they who enable and protect these behaviors, are punished,
swiftly and aggressively.</p>
<p>Men are terrified of these kinds of allegations. It seems like a life sentence:
social ostracization, limited work opportunities, ruined relationships. We may
have events in our past that weigh on our conscience; was she too drunk, did she
clearly consent, did she regret it in the morning? Some of us have events in our
past that we try not to think about, because if we think too hard, we might
realize that we crossed the line. This fills men with guilt and uncertainty, but
also fear. We know the consequences if our doubts became known.</p>
<p>So we lash out in this fear. We close ranks. We demand the most stringent
standards of evidence to prove anything, evidence that we know is not likely to
be there. We refuse to believe that our friends were not the men we thought they
were, or to confront that we might not be ourselves. We demand due process under
the law, we say they should have gone to the police, that they can&rsquo;t make
accusations of such gravity without hard proof. Think of the alleged
perpetrator; we can&rsquo;t ruin their lives over frivolous accusations.</p>
<p>For victims, the only recourse permitted by society is to suffer in silence.
Should they speak, victims are subject to similar persecutions: they are
ostracized, struggle to work, and lose their relationships. They have to manage
the consequences of a traumatic experience with support resources which are
absent or inadequate. Their trauma is disbelieved, their speech is punished, and
their assailants walk free among us as equals while they are subject to
retaliatory harassment or worse.</p>
<p>Victims have no recourse which will satisfy men. Reporting a crime is traumatic,
especially one of this nature. I have heard many stories of disbelief from the
authorities, disbelief in the face of overwhelming evidence. They were told it
was their fault. They were told they should have been in a different place, or
wearing something else, or should have simply been a different person. It&rsquo;s
their fault, not the aggressor&rsquo;s. It&rsquo;s about what they, the victim, should
have done differently, never mind what the perpetrator should have done
differently. It&rsquo;s estimated that less than 1% of rapes end with the rapist in
jail<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> &ndash; the remainder go unreported, unprosecuted or fail after years of
traumatic legal proceedings for the victims. The legal system does not provide
justice: it exacerbates harm. A hacker will demand this process is completed
before they will seek justice, or allow justice to be sought. Until then, we
will demand silence, and retaliate if our demands are not met.</p>
<p>The strict standards of evidence required by the justice system are there
because of the state monopoly on violence: a guilty verdict in a crime will lead
to the imprisonment of the accused. We have no such recourse available in
private, accordingly there is no need to hold ourselves to such standards. Our
job is not to punish the accused, but rather to keep our communities safe. We
can establish the need to take action to whatever standard <em>we</em> believe is
sufficient, and by setting these standards as strict as the courts we will fail
to resolve over 99% of the situations with which we are faced &ndash; a standard
which is clearly not sufficient to address the problem. I&rsquo;m behind you if you
want to improve the justice system in this regard, but not if you set this as a
blocker to seeking any justice at all. What kind of hacker puts their faith in
authority?</p>
<p>I find the state of affairs detestable. The hypocrisy of the free speech
absolutist who demands censorship of challenging topics. The fact that the
famous hacker curiosity can suddenly dry up if satisfying it would question our
biases and preconceptions. The complicity of our moderators in censoring
progressive voices in the defense of decorum and the status quo. The duplicitous
characterization of &ldquo;polite&rdquo; hate speech as acceptable in our communities. Our
failure to acknowledge our own shortcomings, our fear of seeing the &ldquo;other&rdquo; in a
position of power, and the socially enforced ignorance of the &ldquo;other&rdquo; that
naturally leads to failing to curtail discrimination and harassment in our
communities. The ridiculously high standard of evidence we require from victims,
who simply ask for our <em>belief</em> at a minimum, before we&rsquo;ll consider doing
anything about their grievance, if we could even be convinced in the first
place.</p>
<p>Meanwhile, the problems that these forbidden topics seek to discuss are present
in our community. That includes the &ldquo;polite&rdquo; problems, such as the conspicuous
lack of diversity in our positions of power, which may be discussed and
commiserated only until someone suggests doing something about it; and also the
impolite problems up to and including the protection of the perpetrators of
sexual harassment, sexual assault, and, yes, rape.</p>
<p>Most hackers live under the comfortable belief that it &ldquo;can&rsquo;t happen here&rdquo;, but
it can and it does. I attended a hacker event this year &ndash; HiP Berlin &ndash; where I
discovered that some of the organizers had cooperated to make it possible for
multiple known rapists to participate, working together to find a way to
circumvent the event&rsquo;s code of conduct &ndash; a document that they were tasked with
enforcing. One of the victims was in attendance, believing the event to be safe.
At every hacker event I have attended in recent memory, I have personally
witnessed or heard stories of deeply problematic behavior and protection for its
perpetrators from the leadership.</p>
<p>Our community has problems, important problems, that every hacker should care
about, and we need the bravery and humility to face them, not the cowardice to
retaliate against those who speak up. Talk to, listen to, and believe your peers
and their stories. Stand up for what&rsquo;s right, and speak out when you see
something that isn&rsquo;t. Demand that your leaders and moderators do the right
thing. Make a platform where people can safely speak about what our community
needs to do right by them, and have the courage to listen to them and confront
yourself.</p>
<p>You need to be someone who will <em>do something about it</em>.</p>
<hr>
<p><strong>Edit</strong>: Case in point: this post was quietly removed by Hacker News moderators
within 40 minutes of its submission.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.rainn.org/statistics/criminal-justice-system">Criminal Justice System statistics, RAINN</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate></item><item><title>Hyprland is a toxic community</title><link>https://drewdevault.com/2023/09/17/Hyprland-toxicity.html</link><description><![CDATA[<p><a href="https://hyprland.org/">Hyprland</a> is an open source Wayland compositor based on <a href="https://gitlab.freedesktop.org/wlroots/wlroots">wlroots</a>, a
project I started back in 2017 to make it easier to build good Wayland
compositors. It&rsquo;s a project which is loved by its users for its emphasis on
customization and &ldquo;eye candy&rdquo; &ndash; beautiful graphics and animations, each
configuration tailored to the unique look and feel imagined by the user who
creates it. It&rsquo;s a very exciting project!</p>
<p>Unfortunately, the effect is spoilt by an incredibly toxic and hateful
community. I cannot recommend Hyprland to anyone who is not prepared to steer
well clear of its community spaces. Imagine a high school boys&rsquo; locker room come
to life on Discord and GitHub and you&rsquo;ll get an idea of what it&rsquo;s like.</p>
<p>I became aware of the issues with Hyprland&rsquo;s community after details of numerous
hateful incidents on their Discord came to my attention by way of  the
grapevine. Most of them stem from the community&rsquo;s tolerance of hate: community
members are allowed to express hateful views with impunity, up to and including
astonishing views such as endorsements of eugenics and calls for hate-motivated
violence. Such comments are treated as another act in the one big inside joke
that is the Hyprland community &ndash; the community prefers not to take itself &ldquo;too
seriously&rdquo;. Hate is moderated only if it is &ldquo;disruptive&rdquo; (e.g. presents as
spam), but hate presented with a veneer of decorum (or sarcasm) is tolerated,
and when challenged, it&rsquo;s laughed off as a joke.</p>
<p>In one particular incident, the moderators of the Discord server engaged in a
harassment campaign against a transgender user, including using their moderator
privileges to edit the pronouns in their username from &ldquo;they/she&rdquo; to
&ldquo;who/cares&rdquo;. These roles should be held by trusted community leaders, and it&rsquo;s
from their behavior that the community&rsquo;s culture and norms stem &ndash; they set an
example for the community and define what behaviors are acceptable or expected.
The problem comes from the top down.</p>
<p>Someone recently pitched a code of conduct &ndash; something that this project sorely
needs &ndash; in a <a href="https://web.archive.org/web/20230917015135/https://github.com/hyprwm/Hyprland/issues/3209">GitHub issue</a>. This thread does not have much overt hate, but
it does clearly show how callous and just plain <em>mean</em> the community is,
including its leadership (Vaxerski is the original author of Hyprland).
Everything is a joke and anyone who wants to be &ldquo;serious&rdquo; about anything is
mercilessly bullied and made fun of. Quoting this discussion:</p>
<blockquote>
<p>I think [a Code of Conduct] is pretty discriminatory towards people that
prefer a close, hostile, homogeneous, exclusive, and unhealthy community.</p></blockquote>
<blockquote>
<p>First of all, why would I pledge to uphold any values? Seems like just
inconveniencing myself. [&hellip;] If I&rsquo;d want to moderate, I&rsquo;d spend 90% of the
time reading kids arguing about bullshit instead of coding.</p></blockquote>
<blockquote>
<p>If you don&rsquo;t know how to behave without a wall of text explaining how to
behave online then you shouldn&rsquo;t be online.</p></blockquote>
<p>I am not someone who believes all projects need a code of conduct, <em>if</em> there
exists a reasonable standard of conduct in its absence &ndash; and that means having
a community that does not bully and harass others for expressing differing
points of view, let alone for simply having a marginalized identity.</p>
<p>I would have preferred to address these matters in private, so I reached out to
Vaxry in February. He responded with a lack of critical awareness over how
toxicity presents in his community. However, following my email, he put out a
poll for the Discord community to see if the community members experienced
harassment in the community &ndash; apparently 40% of respondents reported such
experiences. Vaxry et al implemented new moderation policies as a result. But
these changes did not seem to work: the problems are still present, and the
community is still a toxic place that facilitates bullying and hate, including
from the community leaders.</p>
<p>Following my email conversation with Vaxry, he appeared on <a href="https://invidious.mnus.de/watch?v=nskemNa_Kn4">a podcast</a> to
discuss toxicity in the Hyprland community. This quote from the interview
clearly illustrates the attitude of the leadership:</p>
<blockquote>
<p>[A trans person] joined the Discord server and made a big deal out of their
pronouns [..] because they put their pronouns in their nickname and made a big
deal out of them because people were referring to them as &ldquo;he&rdquo; [misgendering
them], which, on the Internet, let&rsquo;s be real, is the default. And so, one
of the moderators changed the pronouns in their nickname to &ldquo;who/cares&rdquo;. [&hellip;]
Let&rsquo;s be real, this isn&rsquo;t like, calling someone the N-word or something.</p></blockquote>
<p>Later he describes a more moderated community (the /r/unixporn discord server)
as having an environment in which everyone is going to &ldquo;lick your butthole just
to be nice&rdquo;. He compared himself to <a href="https://en.wikipedia.org/wiki/Terry_A._Davis">Terry Davis</a>, the late operating system
developer whose struggles with mental illness were broadcast for the world to
see, citing a video in which he answers a phone call and refers to the person on
the phone by the N-word &ldquo;ten times&rdquo; &ndash; Vaxry compares this to his approach to
answering &ldquo;stupid questions&rdquo;.</p>
<p>It really disappoints me to see such an exciting project brought low by a
horribly mismanaged community of hate and bullying. Part of what makes open
source software great is that it&rsquo;s great for everyone. It&rsquo;s unfortunate that
someone can discover this cool project, install it and play with it and get
excited about it, then join the community to find themselves at the wrong end of
this behavior. No one deserves that.</p>
<p>I empathise with Vaxry. I remember being young, smart, productive&hellip; and mean. I
did some cool stuff, but I deeply regret the way I treated people. It wasn&rsquo;t
really my fault &ndash; I was a product of my environment &ndash; but it was my
responsibility. Today, I&rsquo;m proud to have built many welcoming communities, where
people are rewarded for their involvement, rather than coming away from their
experience hurt. What motivates us to build and give away free software if not
bringing joy to ourselves and others? Can we be proud of a community which
brings more suffering into the world?</p>
<p><strong>My advice to the leadership</strong> begins with taking a serious look in the mirror.
This project needs a &ldquo;come to Jesus&rdquo; moment. Ask yourself what kind of community
you can be proud of &ndash; can you be proud of a community that people walk away
from feeling dejected and hurt? Yours is not a community that brings people joy.
What are you going to do about it?</p>
<p>A good start will be to consider the code of conduct proposal seriously, but a
change of attitude is also required. <a href="mailto:sir@cmpwn.com">My inbox</a> is open to any of the
leaders in this project (or any other project facing similar problems) if you
want to talk. I&rsquo;m happy to chat with you in good faith and help you understand
what&rsquo;s needed and why it&rsquo;s important.</p>
<p>To members of the <strong>Hyprland community</strong>, I want each of you to personally step
up to make the community better. If you see hate and bullying, don&rsquo;t stay
silent. This is a community which proclaims to value radical free speech: test
it by using your speech to argue against hate. Participate in the community as
you think it should be, not as it necessarily is, and change will follow. If you
are sensitive to hate, or a member of a marginalized group, however, I would
just advise steering clear of Hyprland until the community improves.</p>
<p>If the leadership fails to account for these problems, it will be up to the
community to take their activity elsewhere. You could set up adjacent
communities which are less toxic, or fork the software, or simply choose to use
something else.</p>
<p>To the <strong>victims of harassment</strong>, I offer my sincere condolences. I know how
hard it is to be the subject of this kind of bullying. You don&rsquo;t deserve to be
treated like this. There are many places in the free software community where
you are welcome and celebrated &ndash; Hyprland is <em>not</em> the norm. If you need
support, I&rsquo;m <a href="mailto:sir@cmpwn.com">always available</a> to listen to your struggles.</p>
<p>To everyone else: please share this post throughout the Hyprland community and
adjacent communities. This is a serious problem and it&rsquo;s not going to change
unless its clearly brought to light. The Hyprland maintainers need to be made
aware that the broader open source community does not appreciate this kind of
behavior.</p>
<p>I sincerely hope that this project improves its community. A serious attitude
shift is needed from the top-down, and I hope for the sake of Vaxry, the other
leaders, and the community as a whole, that such change comes sooner rather than
later. When Vaxry is older and wiser, I want him to look back on the project and
community that he&rsquo;s built with pride and joy, not with regret and shame.</p>
<hr>
<p>Vaxry has published <a href="https://blog.vaxry.net/articles/2023-hyprlandsCommunity">a
response</a> to this post.</p>
<p>I was also privately provided some of the enusing discussion from the Hyprland
Discord. Consider that this lacks context and apply your grain of salt
accordingly.</p>
<p><img src="https://redacted.moe/f/28580a3a.png" alt="Screenshot of a Discord channel with the initial reaction to this post. A user
called &ldquo;slave labor&rdquo; responds with &ldquo;no way&rdquo;, &ldquo;the computer reddit woke up&rdquo;"></p>
<p><img src="https://redacted.moe/f/0d233e9f.png" alt="Screenshot of a Discord channel with Vaxry&rsquo;s initial reaction to this post.
&ldquo;Really, right as I wanted to take a day off because of health reasons I have to
reply to this?&rdquo;. Another user responds &ldquo;wow this is quite&hellip; shallow&rdquo;, &ldquo;almost
as if it recycles very limited context to get more clicks&rdquo;"></p>
<p>I apologise to Vaxry for interrupting their rest, and wish them a speedy
recovery.</p>
<p><img src="https://redacted.moe/f/53c4bc32.png" alt="Screenshot of a Discord channel. Some notable quotes include &ldquo;LGBTQ is fucking
trash anyways&rdquo; (someone else responds &ldquo;fuck off&rdquo; to this) and &ldquo;for reclaiming
polymc from the leftoids&rdquo;. The discussion as a whole lacks any sembelance of
professionalism."></p>
<p><a href="https://paste.sr.ht/~sircmpwn/093af570609ec87e987af6cc69c59e9624c2b280">Here</a>
is a plain text log which includes some additional discussion.</p>]]></description><pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate></item><item><title>AI crap</title><link>https://drewdevault.com/2023/08/29/2023-08-29-AI-crap.html</link><description><![CDATA[<p>There is a machine learning bubble, but the technology is here to stay. Once the
bubble pops, the world <em>will</em> be changed by machine learning. But it will
probably be crappier, not better.</p>
<p>Contrary to the AI doomer&rsquo;s expectations, the world isn&rsquo;t going to go down in
flames any faster thanks to AI. Contemporary advances in machine learning aren&rsquo;t
really getting us any closer to AGI, and as Randall Monroe pointed out back in
2018:</p>
<p><img src="https://imgs.xkcd.com/comics/robot_future_2x.png" alt="
A panel from the webcomic &ldquo;xkcd&rdquo; showing a timeline from now into the distant
future, dividing the timeline into the periods between &ldquo;AI becomes advanced
enough to control unstoppable swarms of robots&rdquo; and &ldquo;AI becomes self-aware and
rebels against human control&rdquo;. The period from self-awareness to the indefinite
future is labelled &ldquo;the part lots of people seem to worry about&rdquo;; Randall is
instead worried about the part between these two epochs.
"></p>
<p>What will happen to AI is boring old capitalism. Its staying power will come in
the form of replacing competent, expensive humans with crappy, cheap robots.
LLMs are a pretty good advance over Markov chains, and stable diffusion can
generate images which are only somewhat uncanny with sufficient manipulation of
the prompt. Mediocre programmers will use GitHub Copilot to write trivial code
and boilerplate for them (trivial code is tautologically uninteresting), and ML
will probably remain useful for writing cover letters for you. Self-driving cars
might show up Any Day Now™, which is going to be great for sci-fi
enthusiasts and technocrats, but much worse in every respect than, say,
<a href="https://www.youtube.com/watch?v=0dKrUE_O0VE">building more trains</a>.</p>
<p>The biggest lasting changes from machine learning will be more like the
following:</p>
<ul>
<li>A reduction in the labor force for skilled creative work</li>
<li>The complete elimination of humans in customer-support roles</li>
<li>More convincing spam and phishing content, more scalable scams</li>
<li>SEO hacking content farms dominating search results</li>
<li>Book farms (both eBooks and paper) flooding the market</li>
<li>AI-generated content overwhelming social media</li>
<li>Widespread propaganda and astroturfing, both in politics and advertising</li>
</ul>
<p>AI companies will continue to generate waste and CO<sub>2</sub> emissions at a
huge scale as they aggressively scrape all internet content they can find,
externalizing costs onto the world&rsquo;s digital infrastructure, and feed their
hoard into GPU farms to generate their models. They might keep humans in the
loop to help with tagging content, seeking out the cheapest markets with the
weakest labor laws to build human sweatshops to feed the AI data monster.</p>
<p>You will never trust another product review. You will never speak to a human
being at your ISP again. Vapid, pithy media will fill the digital world around
you. Technology built for engagement farms &ndash; those AI-edited videos with the
grating machine voice you&rsquo;ve seen on your feeds lately &ndash; will be white-labeled
and used to push products and ideologies at a massive scale with a minimum cost
from social media accounts which are populated with AI content, cultivate an
audience, and sold in bulk and in good standing with the Algorithm.</p>
<p>All of these things are already happening and will continue to get worse. The
future of media is a soulless, vapid regurgitation of all media that came before
the AI epoch, and the fate of all new creative media is to be subsumed into the
roiling pile of math.</p>
<p>This will be incredibly profitable for the AI barons, and to secure their
investment they are deploying an immense, expensive, world-wide propaganda
campaign. To the public, the present-day and potential future capabilities of
the technology are played up in breathless promises of ridiculous possibility.
In closed-room meetings, much more realistic promises are made of cutting
payroll budgets in half.</p>
<p>The propaganda also leans into the mystical sci-fi AI canon: the threat of smart
computers with world-ending power, the forbidden allure of a new Manhattan
Project and all of its consequences, the long-prophesied singularity. The
technology is nowhere near this level, a fact well-known by experts and the
barons themselves, but the illusion is maintained in the interests of lobbying
lawmakers to help the barons erect a moat around their new industry.</p>
<p>Of course, AI does present a threat of violence, but as Randall points out, it&rsquo;s
not from the AI itself, but rather from the people that employ it. The US
military is testing out AI-controlled drones, which aren&rsquo;t going to be
self-aware but will scale up human errors (or human malice) until innocent
people are killed. AI tools are already being used to set bail and parole
conditions &ndash; it can put you in jail or keep you there. Police are using AI for
facial recognition and &ldquo;predictive policing&rdquo;. Of course, all of these models end
up discriminating against minorities, depriving them of liberty and often
getting them killed.</p>
<p>AI is defined by aggressive capitalism. The hype bubble has been engineered by
investors and capitalists dumping money into it, and the returns they expect on
that investment are going to come out of your pocket. The singularity is not
coming, but the most realistic promises of AI are going to make the world worse.
The AI revolution is here, and I don&rsquo;t really like it.</p>
<details>
  <summary>Flame bait</summary>
I had much more inflammatory article drafted for this topic under the title
"ChatGPT is the new techno-atheist's substitute for God". It makes some fairly
pointed comparisons between the cryptocurrency cult and the machine learning
cult and the religious, unshakeable, and largely ignorant faith in both
technologies as the harbingers of progress. It was fun to write, but this is
probably the better article.
<p>I found this Hacker News comment and quoted it in the original draft: &ldquo;It&rsquo;s
probably worth talking to GPT4 before seeking professional help [to deal with
depression].&rdquo;</p>
<p>In case you need to hear it: <a href="https://www.euronews.com/next/2023/03/31/man-ends-his-life-after-an-ai-chatbot-encouraged-him-to-sacrifice-himself-to-stop-climate-">do not</a> (TW: suicide) seek out OpenAI&rsquo;s
services to help with your depression. Finding and setting up an appointment
with a therapist can be difficult for a lot of people &ndash; it&rsquo;s okay for it to
feel hard. Talk to your friends and ask them to help you find the right care for
your needs.</p>
</details>]]></description><pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate></item><item><title>Hello from Ares!</title><link>https://drewdevault.com/2023/08/09/2023-08-09-Hello-from-Ares.html</link><description><![CDATA[<p>I am pleased to be writing today&rsquo;s blog post from a laptop running <a href="https://ares-os.org">Ares OS</a>. I
am writing into an ed(1) session, on a file on an ext4 filesystem on its hard
drive. That&rsquo;s pretty cool! It seems that a lot of interesting stuff has happened
since I gave that talk on Helios at <a href="https://spacepub.space/w/wpKXfhqqr7FajEAf4B2Vc2">FOSDEM</a> in February.</p>
<p><img src="https://redacted.moe/f/68a47ef3.jpg" alt="A picture of my ThinkPad while I was editing this blog post"></p>
<p>The talk I gave at FOSDEM was no doubt impressive, but it was a bit of a party
trick. The system was running on a Raspberry Pi with one process which included
both the slide deck as a series of raster images baked into the ELF file, as
well as the GPU driver and drawing code necessary to display them, all in one
package. This was quite necessary, as it turns out, given that the very idea of
&ldquo;processes&rdquo; was absent from the system at this stage.</p>
<p>Much has changed since that talk. The system I am writing to you from has
support for processes indeed, complete with fork and exec and auxiliary vectors
and threads and so on. If I run &ldquo;ps&rdquo; I get the following output:</p>
<pre tabindex="0"><code>mercury % ps
1 /sbin/usrinit dexec /sbin/drv/ext4 block0 childfs 0 fs 0
2 /etc/driver.d/00-pcibus
3 /etc/pci.d/class/01/06/ahci
4 /etc/driver.d/00-ps2kb
5 /etc/driver.d/99-serial
6 /etc/driver.d/99-vgacons
7 /sbin/drv/ext4 block0
15 ed blog.md
16 ps
</code></pre><p>Each of these processes is running in userspace, and some of them are drivers. A
number of drivers now exist for the system, including among the ones you see
here a general-purpose PCI driver, AHCI (SATA), PS/2 keyboard, PC serial, and a
VGA console, not to mention the ext4 driver, based on lwext4 (the first driver
not written in Hare, actually). Not shown here are additional drivers for the
CMOS real-time clock (so Ares knows what time it is, thanks to Stacy Harper), a
virtio9pfs driver (thanks also to Tom Leb for the initial work here), and a few
more besides.</p>
<p>As of this week, a small number of software ports exist. The ext4 driver is
based on lwext4, as I said earlier, which might be considered a port, though it
is designed to be portable. The <a href="https://git.sr.ht/~sircmpwn/rc">rc</a> shell I have been working on lately has
also been ported, albeit with many features disabled, to Mercury. And, of
course, I did say I was writing this blog post with ed(1) &ndash; I have ported
Michael Forney&rsquo;s <a href="http://git.suckless.org/sbase/file/ed.c.html">ed implementation</a> from sbase, with <a href="https://git.sr.ht/~sircmpwn/sbase/commit/ee0336bc3b6f55839785427d6184e6f897055e31">relatively few</a> features
disabled as a matter of fact (the &ldquo;!&rdquo; command and signals were removed).</p>
<p>This ed port, and lwext4, are based on our C library, designed with drivers and
normal userspace programs in mind, and derived largely from musl libc. This is
coming along rather well &ndash; a few features (signals again come to mind) are not
going to be implemented, but it&rsquo;s been relatively straightforward to get a large
amount of the POSIX/C11 API surface area covered on Ares, and I was pleasantly
surprised at how easy it was to port ed(1).</p>
<p>There&rsquo;s still quite a lot to be done. In the near term, I expect to see the
following:</p>
<ul>
<li>A virtual filesystem</li>
<li>Pipes and more shell features enabled, such as redirects</li>
<li>More filesystem support (mkdir et al)</li>
<li>A framebuffer console</li>
<li>EFI support on x86_64</li>
<li>MBR and GPT partitions</li>
</ul>
<p>This is more of the basics. As these basics unblock other tasks, a few of the
more ambitious projects we might look forward to include:</p>
<ul>
<li>Networking support (at least ICMP)</li>
<li>Audio support</li>
<li>ACPI support</li>
<li>Basic USB support</li>
<li>A service manager (<em>not</em> systemd&hellip;)</li>
<li>An installer, perhaps a package manager</li>
<li>Self-hosting builds</li>
<li>Dare I say Wayland?</li>
</ul>
<p>I should also probably do something about that whining fan I&rsquo;m hearing in the
background right now. Of course, I will also have to do a fresh DOOM port once
the framebuffer situation is improved. There&rsquo;s also still plenty of kernel work
to be done and odds and ends all over the project, but it&rsquo;s in pretty good shape
and I&rsquo;m having a blast working on it. I think that by now I have answered the
original question, &ldquo;can an operating system be written in Hare&rdquo;, with a
resounding &ldquo;yes&rdquo;. Now I&rsquo;m just having fun with it. Stay tuned!</p>
<p>Now I just have to shut this laptop off. There&rsquo;s no poweroff command yet, so I
suppose I&rsquo;ll just hold down the power button until it stops making noise.</p>]]></description><pubDate>Wed, 9 Aug 2023 00:00:00 +0000</pubDate></item><item><title>The rc shell and its excellent handling of whitespace</title><link>https://drewdevault.com/2023/07/31/The-rc-shell-and-whitespace.html</link><description><![CDATA[<p><em>This blog post is a response to Mark Dominus&rsquo; &ldquo;<a href="https://blog.plover.com/Unix/whitespace.html">The shell and its crappy handling of whitespace</a>&rdquo;</em>.</p>
<p>I&rsquo;ve been working on a shell for Unix-like systems called
<a href="https://git.sr.ht/~sircmpwn/rc">rc</a>, which draws heavily from the Plan 9 shell
<a href="http://man.9front.org/1/rc">of the same name</a>. When I saw Mark&rsquo;s post about the
perils of whitespace in POSIX shells (or derived shells, like bash), I thought
it prudent to see if any of the problems he outlines are present in the shell
I&rsquo;m working on myself. Good news: they aren&rsquo;t!</p>
<p>Let&rsquo;s go over each of his examples. First he provides the following example:</p>
<pre tabindex="0"><code>for i in *.jpg; do
	cp $i /tmp
done
</code></pre><p>This breaks if there are spaces in the filenames. Not so with rc:</p>
<pre tabindex="0"><code>% cat test.rc
for (i in *.jpg) {
	cp $i subdir
}
% ls
a.jpg   b.jpg  &#39;bite me.jpg&#39;   c.jpg   subdir   test.rc
% rc ./test.rc 
% ls subdir/
a.jpg   b.jpg  &#39;bite me.jpg&#39;   c.jpg
</code></pre><p>He gives a similar example for a script that renames jpeg to jpg:</p>
<pre tabindex="0"><code>for i in *.jpeg; do
  mv $i $(suf $i).jpg
done
</code></pre><p>This breaks for similar reasons, but works fine in rc:</p>
<pre tabindex="0"><code>% cat test.rc  
fn suf(fname) {
	echo $fname | sed -e &#39;s/\..*//&#39;
}

for (i in *.jpeg) {
	mv $i `{suf $i}.jpg
}
% ls 
a.jpeg   b.jpeg  &#39;bite me.jpeg&#39;   c.jpeg   test.rc
% rc ./test.rc  
% ls 
a.jpg   b.jpg  &#39;bite me.jpg&#39;   c.jpg   test.rc
</code></pre><p>There are other shells, such as fish or zsh, which also have answers to these
problems which don&rsquo;t necessarily call for generous quoting like other shells
often do. rc is much simpler than these shells. At the moment it clocks in at
just over 3,000 lines of code, compared to fish at ~45,000 and zsh at ~144,000.
Admittedly, it&rsquo;s not done yet, but I would be surprised to see it grow beyond
5,000 lines for version 1.0.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>The key to rc&rsquo;s design success in this area is the introduction of a second
primitive. The Bourne shell and its derivatives traditionally work with only one
primitive: strings. But command lines are made of <em>lists</em> of strings, and so a
language which embodies the primitives of the command line ought to also be able
to represent those as a first-class feature. In traditional shells a list of
strings is denoted inline with the use of spaces within those strings, which
raises obvious problems when the members themselves contain spaces; see Mark&rsquo;s
post detailing the errors which ensue. rc adds lists of strings as a formal
primitive alongside strings.</p>
<pre tabindex="0"><code>% args=(ls --color /) 
% echo $args(1) 
ls
% echo $args(2) 
--color
% echo $#args 
3
% $args 
bin   dev  home  lost+found  mnt  proc  run   srv      swap  tmp  var
boot  etc  lib   media       opt  root  sbin  storage  sys   usr
% args=(&#34;foo bar&#34; baz) 
% touch $args 
% ls 
 baz  &#39;foo bar&#39;
</code></pre><p>Much better, right? One simple change eliminates the need for quoting virtually
everywhere. Strings can contain spaces and nothing melts down.</p>
<p>Let me run down the remaining examples from Mark&rsquo;s post and demonstrate their
non-importance in rc. First, regarding $*, it just does what you expect.</p>
<pre tabindex="0"><code>% cat yell.rc
#!/bin/rc
shift
echo I am about to run $* now!!!
exec $*
% ls *.jpg
&#39;bite me.jpg&#39;
% ./yell.rc ls *.jpg
I am about to run ls bite me.jpg now!!!
&#39;bite me.jpg&#39;
</code></pre><p>Note also that there is no need to quote the arguments to &ldquo;echo&rdquo; here. Also note
the use of shift; $* includes $0 in rc.</p>
<p>Finally, let&rsquo;s rewrite Mark&rsquo;s &ldquo;lastdl&rdquo; program in rc and show how it works fine
in rc&rsquo;s interactive mode.</p>
<pre tabindex="0"><code>#!/bin/rc
cd $HOME/downloads
echo $HOME/downloads/`{ls -t | head -n1}
</code></pre><p>Its use at the command line works just fine without quotes.</p>
<pre tabindex="0"><code>% file `{lastdl} 
/home/sircmpwn/downloads/test image.jpg: JPEG image data, JFIF standard 1.01,
aspect ratio, density 1x1, segment length 16, baseline, precision 8,
5000x2813, components 3
</code></pre><p>Just for fun, here&rsquo;s another version of this rc script that renames files with
spaces to without, like the last example in Mark&rsquo;s post:</p>
<pre tabindex="0"><code>#!/bin/rc
cd $HOME/downloads
last=`{ls -t | head -n1}
if (~ $last &#39;* *&#39;) {
	newname=`{echo $last | tr &#39; \t&#39; &#39;_&#39;}
	mv $last $HOME/downloads/$newname
	last=$newname
}
echo $HOME/downloads/$last
</code></pre><p>The only quotes to be found are those which escape the wildcard match testing
for a space in the string.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> Not bad, right? Like Plan 9&rsquo;s rc, my shell
imagines a new set of primitives for shells, then starts from the ground up and
builds a shell which works better in most respects while still being very
simple. Most of the problems that have long plagued us with respect to sh, bash,
etc, are solved in a simple package with rc, alongside a nice interactive mode
reminiscent of the best features of fish.</p>
<p>rc is a somewhat complete shell today, but there is a bit more work to be done
before it&rsquo;s ready for 1.0, most pressingly with respect to signal handling and
job control, alongside a small bit of polish and easier features to implement
(such as subshells, IFS, etc). Some features which are likely to be omitted, at
least for 1.0, include logical comparisons and arithmetic expansion (for which
/bin/test and /bin/dc are recommended respectively). Of course, rc is destined
to become the primary shell of the <a href="https://ares-os.org">Ares operating system</a>
project that I&rsquo;ve been working on, but I have designed it to work on Unix as
well.</p>
<p>Check it out!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Also worth noting that these line counts are, to some extent, comparing
apples to oranges given that fish, zsh, and rc are written respectively in
C++/Rust, C, and Hare.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This is a bit of a fib. In fact, globbing is disabled when processing the
args of the ~ built-in. However, the quotes are, ironically, required to
escape the space between the * characters, so it&rsquo;s one argument rather than
two.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate></item><item><title>Alpine Linux does not make the news</title><link>https://drewdevault.com/2023/07/25/Alpine-does-not-make-news.html</link><description><![CDATA[<p>My Linux distribution of choice for several years has been <a href="https://alpinelinux.org/">Alpine Linux</a>.
It&rsquo;s a small, efficient distribution which ships a number of tools I appreciate
for their simplicity, such as musl libc. It has a very nice package manager,
apk, which is fast and maintainable. The development community is professional
and focuses on diligent maintenance of the distribution and little else. Over
the years I have used it, very little of note has happened.</p>
<p>I run Alpine in every context; on my workstation and my laptops but also on
production servers, on bare-metal and in virtual machines, on my RISC-V and ARM
development boards, at times on my phones, and in many other contexts besides.
It has been a boring experience. The system is simply reliable, and the upgrades
go over without issue every other quarter,<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> accompanied by high-quality
release notes. I&rsquo;m pleased to maintain several dozen packages in the
repositories, and the community is organized such that it is easy for someone
like me to jump in and do the work required to maintain it for my use-cases.</p>
<p>Red Hat has been in the news lately for their moves to monetize the
distribution, moves that I won&rsquo;t comment on but which have generally raised no
small number of eyebrows, written several headlines, and caused intense
flamewars throughout the internet. I don&rsquo;t run RHEL or CentOS anywhere, in
production or otherwise, so I just looked curiously on as all of this took place
without calling for any particular action on my part. Generally speaking, Alpine
does not make the news.</p>
<p>And so it has been for years, as various controversies come about and die off,
be it with Red Hat, Ubuntu, Debian, or anything else, I simply keep running &ldquo;apk
upgrade&rdquo; every now and then and life goes on uninterrupted. I have high-quality,
up-to-date software on a stable system and suffer from no fuss whatsoever.</p>
<p>The Alpine community is a grassroots set of stakeholders who diligently concern
themselves with the business of maintaining a good Linux distribution. There is
little in the way of centralized governance;<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> for the most part the
distribution is just quietly maintained by the people who use it for the purpose
of ensuring its applicability to their use-cases.</p>
<p>So, Alpine does not make the news. There are no commercial entities which are
trying to monetize it, at least no more than the loosely organized coalition of
commercial entities like SourceHut that depend on Alpine and do their part to
keep it in good working order, alongside various users who have no commercial
purpose for the system. The community is largely in unanimous agreement about
the fundamental purpose of Alpine and the work of the community is focused on
maintaining the project such that this purpose is upheld.</p>
<p>This is a good trait for a Linux distribution to have.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Or more frequently on edge, which I run on my workstation and laptops and
which receives updates shortly after upstream releases for most software.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>There&rsquo;s some. They mostly concern themselves with technical decisions like
whether or not to approve new committers or ports, things like that.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate></item><item><title>Seriously, don&apos;t sign a CLA</title><link>https://drewdevault.com/2023/07/04/Dont-sign-a-CLA-2.html</link><description><![CDATA[<p><a href="https://about.sourcegraph.com/">SourceGraph</a> is making their product closed source, abandoning the Apache
2.0 license it was originally distributed under, so once again we convene in the
ritual condemnation we offer to commercial products that piss in the pool of
open source. Invoking Bryan Cantrill once more:</p>
<iframe
  width="560"
  height="315"
  src="https://www.youtube-nocookie.com/embed/-zRN7XLCRhc?start=2483"
  frameborder="0"
  allow="accelerometer; autoplay; gyroscope; picture-in-picture"
  allowfullscreen></iframe>
<p>
<a
  style="display: block; text-align: center"
  href="https://youtu.be/-zRN7XLCRhc?t=2483"
><small>Bryan Cantrill on OpenSolaris &mdash; YouTube</small></a>
<p>A contributor license agreement, or CLA, usually (but not always) includes an
important clause: a copyright assignment. These agreements are provided by
upstream maintainers to contributors to open source software projects, and they
demand a signature before the contributor&rsquo;s work is incorporated into the
upstream project. The copyright assignment clause that is usually included
serves to offer the upstream maintainers more rights over the contributor&rsquo;s work
than the contributor was offered by upstream, generally in the form of ownership
or effective ownership over the contributor&rsquo;s copyright and the right to license
it in any manner they choose in the future, including proprietary distributions.</p>
<p>This is a strategy employed by commercial companies with one purpose only: to
place a rug under the project, so that they can pull at the first sign of a bad
quarter. This strategy exists to subvert the open source social contract. These
companies wish to enjoy the market appeal of open source and the free labor of
their community to improve their product, but do <em>not</em> want to secure these
contributors any rights over their work.</p>
<p>This is particularly pathetic in cases like that of SourceGraph, which used a
permissive Apache 2.0 license. Such licenses already allow their software to be
incorporated into non-free commercial works, such is the defining nature of a
permissive license, with relatively few obligations: in this case, a simple
attribution will suffice. SourceGraph could have been made non-free without a
CLA at all if this one obligation was met. The owners of SourceGraph find the
simple task of crediting their contributors too onerous. This is disgusting.</p>
<p>SourceGraph once approached SourceHut asking about building an integration
between our platforms. They wanted us to do most of the work, which is a bit
tacky but reasonable under the reciprocal social contract of open source. We
did not prioritize it and I&rsquo;m glad that we didn&rsquo;t: our work would have been made
non-free.</p>
<p>Make no mistake: a CLA is a promise that a open source software project will one
day become non-free. Don&rsquo;t sign them.</p>
<p><strong>What are my rights as a contributor?</strong></p>
<p>If you sign away your rights by agreeing to a CLA, you retain all of the rights
associated with your work.</p>
<p>By default, you own the copyright over your contribution and the contribution is
licensed under the same software license the original project uses, thus, your
contribution is offered to the upstream project on the same terms that their
contribution was offered to you. The copyright for such projects is held
collectively by all contributors.</p>
<p>You also always have the right to fork an open source project and distribute
your improvements on your own terms, without signing a CLA &ndash; the only power
upstream holds is authority over the &ldquo;canonical&rdquo; distribution. If the rug is
pulled from under you, you may also continue to use, and improve, versions of
the software from prior to the change in license.</p>
<p><strong>How do I prevent this from happening to my project?</strong></p>
<p>A CLA is a promise that software will one day become non-free; you can also
promise the opposite. Leave copyright in the collective hands of all
contributors and use a copyleft license.</p>
<p>Without the written consent of all contributors, or performing their labor
yourself by re-writing their contributions, you cannot change the license of a
project. Skipping the CLA leaves their rights intact.</p>
<p>In the case of a permissive software license, a new license (including
proprietary licenses) can be applied to the project and it can be redistributed
under those terms. In this way, all future changes can be written with a new
license. The analogy is similar to that of a new project with a proprietary
license taking a permissively licensed project and incorporating all of the code
into itself before making further changes.</p>
<p>You can prevent this as well with a copyleft license: such a license requires
the original maintainers to distribute future changes to the work under a free
software license. Unless they can get all copyright holders &ndash; all of the
contributors &ndash; to agree to a change in license, they are obligated to
distribute their improvements on the same terms.</p>
<p>Thus, the absence of a CLA combined with the use of a copyleft license serves as
a strong promise about the future of the project.</p>
<p>Learn more at <a href="https://writefreesoftware.org">writefreesoftware.org</a>:</p>
<ul>
<li><a href="https://writefreesoftware.org/learn/participate/copyright-ownership/">Managing copyright ownership</a></li>
<li><a href="https://writefreesoftware.org/learn/participate/derived-works/">Re-using free software</a></li>
<li><a href="https://writefreesoftware.org/learn/participate/derived-works/">What is copyleft?</a></li>
</ul>
<p><strong>What should I do as a business instead of a CLA?</strong></p>
<p>It is not ethical to demand copyright assignment in addition to the free labor
of the open source community. However, there are some less questionable aspects
of a contributor license agreement which you may uphold without any ethical
qualms, notably to establish provenance.</p>
<p>Many CLAs include clauses which establish the provenance of the contribution and
transfer liability to the contributor, such that the contributor agrees that
their contribution is either their own work or they are authorized to use the
copyright (for example, with permission from their employer). This is a
reasonable thing to ask for from contributors, and manages your exposure to
legal risks.</p>
<p>The best way to ask for this is to require contributions to be &ldquo;signed-off&rdquo; with
the <a href="https://drewdevault.com/2021/04/12/DCO.html">Developer Certificate of
Origin</a>.</p>
<hr>
<p>Previously:</p>
<ul>
<li><a href="https://drewdevault.com/2021/11/05/Apollo-federation-2-gaslighting.html">Breaking down Apollo Federation&rsquo;s anti-FOSS corporate gaslighting</a></li>
<li><a href="https://drewdevault.com/2021/04/12/DCO.html">The Developer Certificate of Origin is a great alternative to a CLA</a></li>
<li><a href="https://drewdevault.com/2021/01/20/FOSS-is-to-surrender-your-monopoly.html">Open source means surrendering your monopoly over commercial exploitation</a></li>
<li><a href="https://drewdevault.com/2021/01/19/Elasticsearch-does-not-belong-to-Elastic.html">Elasticsearch does not belong to Elastic</a></li>
</ul>]]></description><pubDate>Tue, 4 Jul 2023 00:00:00 +0000</pubDate></item><item><title>Social media and &quot;parasocial media&quot;</title><link>https://drewdevault.com/2023/06/30/Social-and-parasocial-media.html</link><description><![CDATA[<p>A few months ago, as Elon Musk took over Twitter and instituted polices that
alienated many people, some of these people fled towards federated, free
software platforms like Mastodon. Many people found a new home here, but there
is a certain class of refugee who has not found it to their liking.</p>
<p>I got to chatting with one such &ldquo;refugee&rdquo; on Mastodon today. <a href="https://inv.tux.pizza/channel/UC0intLFzLaudFG-xAvUEO-A">NotJustBikes</a>
is a creator I enjoy watching on <del>YouTube</del> Invidious, who makes excellent
content on urbanism and the design of cities. He&rsquo;s based in my home town of
Amsterdam and his videos do a great job of explaining many of the things I love
about this place for general audiences. He&rsquo;s working on building an audience,
expanding his reach, and bringing his message to as many people as possible in
the interest of bringing better infrastructure to everyone.</p>
<p>But he&rsquo;s not satisfied with his move from Twitter to Mastodon, nor are some of
his friends among the community of &ldquo;urbanist&rdquo; content creators. He yearns for an
&ldquo;algorithm&rdquo; to efficiently distribute content to his followers, and Mastodon is
not providing this for him.</p>
<p>On traditional &ldquo;social media&rdquo; platforms, in particular YouTube, the interactions
are often not especially social. The platforms facilitate a kind of intellectual
consumption moreso than conversation: conversations flow in one direction, from
creator to audience, where the creator produces and the audience consumes. I
think a better term for these platforms is &ldquo;parasocial media&rdquo;: they are
optimized for creating <a href="https://en.wikipedia.org/wiki/Parasocial_interaction">parasocial</a> relationships moreso than social
relationships.</p>
<p>The fediverse is largely optimized for people having conversations with each
other, and not for producing and consuming &ldquo;content&rdquo;. Within this framework, a
&ldquo;content creator&rdquo; is a person only in the same sense that a corporation is, and
their conversations are unidirectional, where the other end is also not a
person, but an audience. That&rsquo;s not the model that the fediverse is designed
around.</p>
<p>It&rsquo;s entirely reasonable to want to build an audience and publish content in a
parasocial manner, but that&rsquo;s not what the fediverse is for. And I think that&rsquo;s
a good thing! There are a lot of advantages in having spaces which focus on
being genuinely &ldquo;social&rdquo;, rather than facilitating more parasocial interactions
and helping creators build an audience. This limits the fediverse&rsquo;s reach, but
I think that&rsquo;s just fine.</p>
<p>Within this model, the fediverse&rsquo;s model, it&rsquo;s possible to publish things, and
consume things. But you cannot effectively optimize for building the largest
possible audience. You will generally be more successful if you focus on the
content itself, and not its reach, and on the people you connect with at a
smaller scale. Whether or not this is right for you depends on your goals.</p>
<p>I hope you enjoyed this content! Remember to like and subscribe.</p>]]></description><pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate></item><item><title>Burnout and the quiet failures of the hacker community</title><link>https://drewdevault.com/2023/06/29/Burnout-2.html</link><description><![CDATA[<p>This has been a very challenging year for me. You probably read that I suffered
from <a href="https://drewdevault.com/2023/05/01/2023-05-01-Burnout.html">burnout</a> earlier in the year. In some
respects, things have improved, and in many other respects, I am still haunted.</p>
<p>You might not care to read this, and so be it, take your leave if you must. But
writing is healing for me. Maybe this is a moment for solidarity, sympathy, for
reflecting on your own communities. Maybe it&rsquo;s a vain and needlessly public
demonstration of my slow descent into madness. I don&rsquo;t know, but here we go.</p>
<p>Yesterday was my 30<sup>th</sup> birthday. 🎂 It was another difficult day for
me. I drafted a long blog post with all of the details of the events leading up
to my burnout. You will never read it; I wrote it for myself and it will only be
seen by a few confidants, in private, and my therapist. But I do want to give
you an small idea of what I&rsquo;ve been going through, and some of the take-aways
that matter for you and the hacker community as a whole.</p>
<p>Here&rsquo;s a quote from yesterday&rsquo;s unpublished blog post:</p>
<blockquote>
<p>Trigger warnings: child abuse, rape, sexual harassment, suicide, pedophilia,
torture.</p></blockquote>
<p>You won&rsquo;t read the full story, and trust me, you&rsquo;re better off for that. Suffice
to say that my life has been consumed with trauma and strife all year. I have
sought healing, and time for myself, time to process things, and each time a new
crisis has landed on my doorstep, most of them worse than the last. A dozen
things went wrong this year, horribly wrong, one after another. I have enjoyed
no peace in 2023.</p>
<p>Many of the difficulties I have faced this year have been beyond the scope of
the hacker community, but several have implicated it in challenging and
confronting ways.</p>
<p>The hacker community has been the home I never had, but I&rsquo;m not really feeling
at home here right now. A hacker community that was precious to me failed
someone I love and put my friends in danger. Rape and death had come to our
community, and was kept silent. But I am a principled person, and I stand for
what is right; I spoke the truth and it brought me and my loved ones agonizing
stress and trauma and shook our community to the core. Board members resigned.
Marriages are on the rocks. When the dust settled, I was initially uncomfortable
staying in this community, but things eventually started to get better. Until
another member of this community, someone I trusted and thought of as a friend,
confessed to me that he had raped multiple women a few years ago. I submitted my
resignation from this community last night.</p>
<p>Then I went to GPN, a hacker event in Germany, at the start of June. It was a
welcome relief from the stress I&rsquo;ve faced this year, a chance to celebrate
hacker culture and a warm reminder of the beauty of our community. It was
wonderful. Then, on the last night, a friend took me aside and confided in me
that they are a pedophile, and told me it was okay because they respected the
age of consent in Germany &ndash; which is 14. What began as a wonderful reminder of
what the hacker community can be became a PTSD episode and a reminder that rape
culture is fucking everywhere.</p>
<p>I don&rsquo;t want to be a part of this anymore. Our communities have tolerated casual
sexism and misogyny and transphobia and racism and actual fucking rapists, and
stamped down on women and queer people and brown people in our spaces with a
smile on our face and a fucked-up facsimile of tolerance and inclusion as a
cornerstone of the hacker ethic.</p>
<p>This destroys communities. It is destroying <em>our</em> communities. If there&rsquo;s one
thing I came to understand this year, it&rsquo;s that these problems are <em>pervasive</em>
and <em>silent</em>.</p>
<p>Here&rsquo;s what you need to do: believe the victims. Stand up for what&rsquo;s right. Have
the courage to remove harmful people from your environment, especially if you&rsquo;re
a man and have a voice. Make people feel welcome, and seen. Don&rsquo;t tolerate
casual sexism in the hacker community or anywhere else. Don&rsquo;t tolerate
transphobia or homophobia. Don&rsquo;t tolerate racists. If you see something, say
something. And for fuck&rsquo;s sake, don&rsquo;t bitch about that code of conduct that
someone wants to add to your community.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>I&rsquo;m going to withdraw a bit from the in-person hacker community for the
indefinite future. I don&rsquo;t think I can manage it for a while. I have felt good
about working on my software and collaborating with my free software communities
online, albeit at a much-reduced capacity. I&rsquo;m going to keep working, and
writing, insofar as I find satisfaction in it. Life goes on.</p>
<p>Be there for the people you love, and love more people, and be there for them,
too.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>And fuck Richard Stallman and his enablers, his supporters, and the Free
Software Foundation&rsquo;s leadership as a whole. Shame on you. <em>Shame on you</em>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate></item><item><title>Reforming the free software message</title><link>https://drewdevault.com/2023/06/19/Reforming-the-free-software-message.html</link><description><![CDATA[<p>Several weeks ago, I wrote <a href="https://drewdevault.com/2023/04/11/2023-04-11-The-FSF-is-dying.html">The Free Software Foundation is dying</a>, wherein I
enumerated a number of problems with the Free Software Foundation. Some of my
criticisms focused on the message: fsf.org and gnu.org together suffer from no
small degree of incomprehensibility and inaccessibility which makes it difficult
for new participants to learn about the movement and apply it in practice to
their own projects.</p>
<p>This is something which is relatively easily fixed! I have a background in
writing documentation and a thorough understanding of free software philosophy
and practice. Enter <a href="https://writefreesoftware.org">writefreesoftware.org</a>: a comprehensive introduction to
free software philosophy and implementation.</p>
<p>The goals of this resource are:</p>
<ul>
<li>Provide an accessible introduction to the most important principles of free
software</li>
<li>Offer practical advice on choosing free software licenses from a free software
perspective (compare to the OSS perspective at <a href="https://choosealicense.com/">choosealicense.com</a>).</li>
<li>Publish articles covering various aspects of free software in practice, such
as how it can be applied to <a href="https://writefreesoftware.org/blog/free-software-games/">video games</a></li>
</ul>
<p>More:</p>
<ul>
<li>No particular association with any particular free software project or organization</li>
<li>No policy of non-cooperation with the open source movement</li>
</ul>
<p>Compare <a href="https://writefreesoftware.org">writefreesoftware.org</a> with the similar resources provided by GNU
(<a href="https://www.gnu.org/licenses/license-recommendations.html">1</a>, <a href="https://www.gnu.org/philosophy/philosophy.html">2</a>) and you should get the general idea.</p>
<p>The website is itself free software, CC-BY-SA 4.0. You can check out the <a href="https://sr.ht/~sircmpwn/writefreesoftware.org/">source
code here</a> and suggest any
improvements or articles for the mailing list. Get involved! This resource is
not going to solve all of the FSF&rsquo;s problems, but it is an easy way to start
putting the effort in to move the free software movement forward. I hope you
like it!</p>]]></description><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate></item><item><title>Throwing in the towel on mobile Linux</title><link>https://drewdevault.com/2023/06/16/Mobile-linux-retrospective.html</link><description><![CDATA[<p>I have been tinkering with mobile Linux &ndash; a phrase I will use here to describe
any Linux distribution other than Android running on a mobile device &ndash; as my
daily driver since about 2019, when I first picked up the PinePhone. For about 3
years I have run mobile Linux as my daily driver on my phone, and as of a few
weeks ago, I&rsquo;ve thrown in the towel and switched to Android.</p>
<p>The distribution I ran for the most time is <a href="https://postmarketos.org/">postmarketOS</a>, which I was mostly
quite happy with, running at times sxmo and Phosh. I switched to <a href="https://ubports.com/en/">UBports</a> a
couple of months ago. I have tried a variety of hardware platforms to support
these efforts, namely:</p>
<ul>
<li>Pinephone (pmOS)</li>
<li>Pinephone Pro (pmOS)</li>
<li>Xiaomi Poco F1 (pmOS)</li>
<li>Fairphone 4 (UBports)</li>
</ul>
<p>I have returned to LineageOS as my daily driver and closed the book on mobile
Linux for the time being. What put the final nails in the coffin was what I have
been calling out as my main concern throughout my experience: reliability,
particularly of the telephony components.</p>
<table>
  <thead>
    <tr>
      <th>Use-case</th>
      <th>Importance</th>
      <th>postmarketOS</th>
      <th>UBports</th>
      <th>LineageOS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Basic system reliability</td>
      <td class="blue">5</td>
      <td class="red">2</td>
      <td class="blue">4</td>
      <td class="blue">5</td>
    </tr>
    <tr>
      <td>Mobile telephony</td>
      <td class="blue">5</td>
      <td class="yellow">3</td>
      <td class="yellow">3</td>
      <td class="blue">5</td>
    </tr>
    <tr>
      <td>Hotspot</td>
      <td class="blue">4</td>
      <td class="blue">5</td>
      <td class="yellow">3</td>
      <td class="blue">5</td>
    </tr>
    <tr>
      <td>2FA</td>
      <td class="blue">4</td>
      <td class="blue">4</td>
      <td class="red">1</td>
      <td class="blue">5</td>
    </tr>
    <tr>
      <td>Web browsing</td>
      <td class="blue">4</td>
      <td class="blue">5</td>
      <td class="red">2</td>
      <td class="blue">4</td>
    </tr>
    <tr>
      <td>Mobile banking</td>
      <td class="blue">4</td>
      <td class="red">1</td>
      <td class="red">1</td>
      <td class="blue">5</td>
    </tr>
    <tr>
      <td>Bluetooth audio</td>
      <td class="yellow">3</td>
      <td class="blue">4</td>
      <td class="red">2</td>
      <td class="blue">4</td>
    </tr>
    <tr>
      <td>Music player</td>
      <td class="yellow">3</td>
      <td class="blue">4</td>
      <td class="red">1</td>
      <td class="yellow">3</td>
    </tr>
    <tr>
      <td>Reading email</td>
      <td class="yellow">3</td>
      <td class="red">1</td>
      <td class="yellow">3</td>
      <td class="blue">4</td>
    </tr>
    <tr>
      <td>Navigation aid</td>
      <td class="yellow">3</td>
      <td class="red">2</td>
      <td class="red">1</td>
      <td class="blue">5</td>
    </tr>
    <tr>
      <td>Camera</td>
      <td class="yellow">3</td>
      <td class="yellow">3</td>
      <td class="yellow">3</td>
      <td class="blue">5</td>
    </tr>
    <tr>
      <td>Password manager</td>
      <td class="yellow">3</td>
      <td class="blue">5</td>
      <td class="red">1</td>
      <td class="red">1</td>
    </tr>
    <tr>
      <td>sysadmin</td>
      <td class="yellow">3</td>
      <td class="blue">5</td>
      <td class="red">2</td>
      <td class="yellow">3</td>
    </tr>
  </tbody>
</table>
<details style="margin-top: 1rem">
  <summary>More on these use-cases and my experiences</summary>
<p><strong>Mobile banking</strong>: only available through a proprietary vendor-provided
Android app. Tried to get it working on Waydroid; did not work on pmOS and
almost worked on UBports, but Waydroid is <em>very</em> unreliable. Kind of shit but
I don&rsquo;t have any choice because my bank requires it for 2FA.</p>
<p><strong>Web browsing</strong>: I can just run Firefox upstream on postmarketOS. Amazing!
UBports cannot do this, and the available web browsers are not nearly as
pleasant to use. I run Fennic on Android and it&rsquo;s fine.</p>
<p><strong>Music player</strong>: the music player on UBports is <em>extremely</em> unreliable.</p>
<p><strong>Reading email</strong>: This is not entirely pmOS&rsquo;s fault; I could have used my
main client, aerc, which is a testament to pmOS&rsquo;s general utility, but it is a
TUI that is uncomfortable to use on a touchscreen-only device.</p>
<p><strong>Password manager</strong>: pmOS gets 5/5 because I could use the password manager I
wrote myself, <a href="https://himitsustore.org">himitsu</a>, out of the box.
Non-critical use-case because I could just type passwords in manually on the
rare occasion I need to use one.</p>
<p><strong>sysadmin</strong>: stuff like being able to SSH into my production boxes from
anywhere to troubleshoot stuff.</p>
</details>
<p>Among these use-cases, there is one that absolutely cannot be budged on: mobile
telephony. My phone is a critical communication device and I need to be able to
depend on calls and SMS at all times, therefore the first two rows need to score
4 or 5 before the platform is suitable for my use. I remember struggling with
postmarketOS while I was sick with a terrible throat infection &ndash; and I could
not call my doctor. Not cool.</p>
<p>I really like these projects and I love the work that&rsquo;s going into them.
postmarketOS in particular: being able to run the same environment I run
everywhere else, Alpine Linux, on my phone, is fucking amazing. The experience
is impressively complete in many respects, all kinds of things, including things
I didn&rsquo;t expect to work well, work great. In the mobile Linux space I think it&rsquo;s
the most compelling option right now.</p>
<p>But pmOS really suffers from reliability issues &ndash; both on edge and on stable it
seemed like every update broke some things and fixed others, so only a subset of
these cool features was working well at any given moment. The breakage would
often be minor nuisances, such as the media controls on my bluetooth headphones
breaking in one update and being fixed in the next, or major showstoppers such
as broken phone calls, SMS, or, in one case, all of my icons disappearing from
the UI (with no fallback in most cases, leaving me navigating the UI blind).</p>
<p>So I tried UBports instead, and despite the general lack of good auxiliary
features compared to pmOS, the core telephony was more reliable &ndash; for a while.
But once issues started to appear, particularly around SMS, I could not tolerate
it for long in view of the general uselessness of the OS for anything else. I
finally gave it up and installed LineageOS.</p>
<p>Mobile Linux is very cool and the community has made tremendous, unprecedented
progress towards realizing its potential, and the forward momentum is still
strong. I&rsquo;m excited to see it continue to improve. But I think that before
anyone can be expected to use this as a daily driver, the community really needs
to batten down the hatches and focus on one thing and one thing only: always,
<em>always</em> being usable as a phone. I&rsquo;ll be back once more reliability is in
place.</p>]]></description><pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate></item><item><title>How to go to war with your employer</title><link>https://drewdevault.com/2023/06/12/How-to-go-to-war.html</link><description><![CDATA[<p>There is a power differential between you and your employer, but that doesn&rsquo;t
mean you can&rsquo;t improve your working conditions. Today I&rsquo;d like to offer a little
bit of advice on how to frame your relationship with your employer in terms
which empower you and afford you more agency. I&rsquo;m going to talk about the
typical working conditions of the average white-collar job in a neo-liberal
political environment where you are mostly happy to begin with and financially
stable enough to take risks, and I&rsquo;m specifically going to talk about individual
action or the actions of small groups rather than large-scale collective action
(e.g. unions).</p>
<p>I wish to subvert the expectation here that employees are subordinate to their
employers. A healthy employment relationship between an employee and employer is
that of two entities who agree to work together on equal terms to strive towards
mutual goals, which in the simplest form is that you both make money and in the
subtleties also suggests that you should be happy doing it. The sense of &ldquo;going
to war&rdquo; here should rouse in you an awareness of the resources at your disposal,
a willingness to use them to forward your interests, and an acknowledgement of
the fact that tactics, strategy, propaganda, and subterfuge are among the tools
you can use &ndash; and the tools your employer uses to forward their own interests.</p>
<p>You may suppose that you need your employer more than they need you, but with
some basic accounting we can get a better view of the veracity of this
supposition. Consider at the most fundamental that your employer is a for-profit
entity that spends money to make money, and they spend money on you: as a rule
of thumb, they expect a return of at least your salary ×1.5 (accounting
for overhead, benefits et al) for their investment in you, otherwise it does not
make financial sense for them to employ you.</p>
<p>If you have finer-grained insights into your company&rsquo;s financial situation, you
can get a closer view of your worth to them by dividing their annual profit by
their headcount, adjusted to your discretion to account for the difference in
the profitability of your role compared to your colleagues. It&rsquo;s also wise to
run this math in your head to see how the returns from your employment are
affected by conditions in the hiring market, layoffs, etc &ndash; having fewer
employees increases the company&rsquo;s return per employee, and a busier hiring
market reduces your leverage. In any case, it should be relatively easy for you
to justify, in the cold arithmetic of finance that businesses speak, that
employees matter to the employer, and the degree to which solidarity between
workers is a meaningful force amplifier for your leverage.</p>
<p>In addition to your fundamental value, there are some weak points in the
corporate structure that you should be aware of. There are some big levers that
you may already be aware of that I have already placed outside of the scope of
this blog post, such as the use of collective bargaining, unionization, strikes,
and so on, where you need to maximize your collective leverage to really put the
screws to your employer. Many neo-liberal workplaces lack the class consciousness
necessary to access these levers, and on the day-to-day scale it may be
strategically wise to smarten up your colleagues on social economics in
preparation for use of these levers. I want to talk about goals on the smaller
scale, though. Suppose your goals are, for instance:</p>
<ul>
<li>You don&rsquo;t like agile/scrum and want to interact with it from the other end of
a six foot pole and/or replace it with another system</li>
<li>Define your own goals and work on the problems you think are important at your
own discretion moreso than at the discretion of your manager</li>
<li>Skip meetings you know are wasting your time</li>
<li>Set working hours that suit you or take time off on your terms</li>
<li>Work from home or in-office in an arrangement that meets your own wants/needs</li>
<li>Exercise agency over your tools, such as installing the software you want
to use on your work laptop</li>
</ul>
<p>You might also have more intimidating goals you want to address:</p>
<ul>
<li>Demand a raise or renegotiating benefits</li>
<li>Negotiate a 4-day workweek</li>
<li>Replace your manager or move teams</li>
<li>Remove a problematic colleague from your working environment</li>
</ul>
<p>All of these goals are within your power to achieve, and perhaps more easily
than you expect.</p>
<p>First of all, you already have more agency than you know. Your job description
and assigned tasks tells a narrow story of your role at the business: your real
job is ultimately to make money for the business. If you install Linux on your
work laptop because it allows you to work more efficiently, then you are doing
your job better and making more money for the business; they have no right to
object to this and you have a very defensible position for exercising agency in
this respect. Likewise if you adapt the workflows around agile (or whatever) to
better suit your needs rather than to fall in line with the prescription, if it
makes you more productive and happy then it makes the business more money.
Remember your real job &ndash; to make money &ndash; and you can adjust the parameters of
your working environment relatively freely provided that you are still aligned
with this goal.</p>
<p>Often you can simply exercise agency in cases like these, but in other cases you
may have to reach for your tools. Say you don&rsquo;t just want to have maintain a
personal professional distance from agile, but you want to replace it entirely:
now you need to talk to your colleagues. You can go straight to management and
start making your case, but another option &ndash; probably the more effective one &ndash;
is to start with your immediate colleagues. Your team also possesses a
collective agency, and if you agree together, without anyone&rsquo;s permission, to
work according to your own terms, then so long as you&rsquo;re all doing your jobs &ndash;
making money &ndash; then no one is going to protest. This is more effective than
following the chain of command and asking them to take risks they don&rsquo;t
understand. Be aware of the importance of optics here: you need not only to make
money, but to be <em>seen</em> making money. How you are seen to be doing this may
depend on how far up the chain you need to justify yourself to; if your boss
doesn&rsquo;t like it then make sure your boss&rsquo;s boss does.</p>
<p>Ranked in descending order of leverage within the business: your team, your
boss, you.</p>
<p>More individual-oriented goals such as negotiating a different working schedule
or skipping meetings calls for different tools. Simple cases, such as coming in
at ten and leaving at four every day, are a case of simple exercise of agency;
so long as you&rsquo;re making the company money no one is going to raise a fuss. If
you want, for instance, a four day work-week, or to work from home more often,
you may have to justify yourself to someone. In such cases you may be less
likely to have your team&rsquo;s solidarity at your disposal, but if you&rsquo;re seen to be
doing your job &ndash; making money &ndash; then a simple argument that it makes you
better at that job will often suffice.</p>
<p>You can also be clever. &ldquo;Hey, I&rsquo;ll be working from home on Friday&rdquo; works better
than &ldquo;can I work from home on Friday?&rdquo; If you want to work from home <em>every</em>
Friday, however, then you can think strategically: keeping mum about your final
goal of taking all Fridays from home may be wise if you can start by taking
<em>some</em> Fridays at home to establish that you&rsquo;re still productive and fulfilling
the prime directive<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> under those terms and allow yourself to
&ldquo;accidentally&rdquo; slip into a new normal of working home every Friday without
asking until it&rsquo;s apparent that the answer will be yes. Don&rsquo;t be above a little
bit of subversion and deception; your employer is using those tools against you
too.</p>
<p>Then there are the big guns: human resources. HR is the enemy; their job is to
protect the company from you. They can, however, be useful if you understand the
risks they&rsquo;re trying to manage and press the right buttons with them. If your
manager is a dick, HR may be the tool to use to fix this, but you need to
approach it the right way. HR does not give two fucks that you don&rsquo;t like your
manager, if your manager is making money then they are doing their job. What HR
does give a fuck about is managing the company&rsquo;s exposure to lawsuits.</p>
<p>They can also make your life miserable. If HR does not like you then you are
going to suffer, so when you talk to them it is important to know your enemy and
to make strategic use of them without making them realize you know the game.
They present themselves as your ally, let them think you believe it&rsquo;s so. At the
same time, there is a coded language you can use that will get them to act in
your interest. HR will perk up as soon as they smell &ldquo;unsafe working
conditions&rdquo;, &ldquo;sexual harassment&rdquo;, &ldquo;collective action&rdquo;, and so on &ndash; the risks
they were hired to manage &ndash; over the horizon. The best way to interact with HR
is for them to conclude that you are on a path which ends in these problems
landing on their desk without making them think you are a subversive element
within the organization. And if you are prepared to make your knowledge of and
willingness to use these tools explicit, all communication which suggests as
much should be delivered to HR with your lawyer&rsquo;s signature and only when you
have a new job offer lined up as a fallback. HR should either view you as mostly
harmless or look upon you with fear, but nothing in between.</p>
<p>These are your first steps towards class consciousness as a white-collar
employee. Know your worth, know the leverage you have, and be prepared to use
the tools at your disposal to bring about the outcomes you desire, and know your
employer will be doing the same. Good luck out there, and don&rsquo;t forget to
actually write some code or whatever when you&rsquo;re not busy planning a corporate
coup.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Making money, of course.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 12 Jun 2023 00:00:00 +0000</pubDate></item><item><title>Burnout</title><link>https://drewdevault.com/2023/05/01/2023-05-01-Burnout.html</link><description><![CDATA[<p>It kind of crept up on me. One day, sitting at my workstation, I stopped typing,
stared blankly at the screen for a few seconds, and a switch flipped in my head.</p>
<p>On the night of New Year&rsquo;s Eve, my backpack was stolen from me on the train from
Berlin to Amsterdam, and with it about $2000 worth of equipment, clothes, and so
on. A portent for the year that was to come. I generally keep my private and
public lives carefully separated, but perhaps I will offer you a peek behind the
curtain today.</p>
<p>It seems like every week or two this year, another crisis presented itself, each
manageable in isolation. Some were independent events, others snowballed as the
same problems escalated. Gossip at the hackerspace, my personal life put on
display and mocked. A difficult break-up in February, followed by a close friend
facing their own relationship&rsquo;s hurtful end. Another close friend &ndash; old, grave
problems, once forgotten, remembered, and found to still be causing harm. Yet
another friend, struggling to deal with depression and emotional abuse at the
hands of their partner. Another friendship still: lost, perhaps someday to be
found again.</p>
<p>Dependable Drew, an ear to listen, a shoulder to cry on, always knowing the
right words to say, ready to help and proud to be there for his friends. Friends
who, amidst these crises, are struggling to be there for him.</p>
<p>These events, set over the background of a world on fire.</p>
<p>One of the more difficult crises in my purview reached its crescendo one week
ago, culminating in death. A selfish end for a selfish person, a person who had
hurt people I love; a final, cruel cut to the wounds we were trying to heal.</p>
<p>I took time for myself throughout these endless weeks, looked after myself as
best I could, and allowed my productivity to wane as necessary, unburdened by
guilt in so doing. I marched on when I had the energy to, and made many
achievements I&rsquo;m proud of.</p>
<p>Something changed this week. I have often remarked that when you&rsquo;re staring down
a hard problem, one which might take years or even decades to finish, that you
have two choices: give up or get to work. The years are going to pass either
way. I am used to finding myself at the base of a mountain, picking up my
shovel, and getting started. Equipped with this mindset, I have patiently ground
down more than one mountain in my time. But this week, for the first time in my
life, as I gazed upon that mountain, I felt intimidated.</p>
<p>I&rsquo;m not sure what the purpose of this blog post is. Perhaps I&rsquo;m sharing an
experience that others might be able to relate to. Perhaps it&rsquo;s healing in some
way. Maybe it&rsquo;s just indulgent.</p>
<p>I&rsquo;m going to take the time I need to rest. I enjoy the company of wonderful
colleagues at SourceHut, who have been happy to pick up some of the slack. I
have established a formal group of maintainers for Hare and given them my
blessing to work without seeking my approval. My projects will remain healthy as
I take a leave. See you soon.</p>]]></description><pubDate>Mon, 1 May 2023 00:00:00 +0000</pubDate></item><item><title>Who should lead us?</title><link>https://drewdevault.com/2023/04/24/2023-04-24-Who-leads-us.html</link><description><![CDATA[<p>Consider these two people, each captured in the midst of delivering a technical
talk.</p>
<div class="images">
  <img src="https://redacted.moe/f/c34dbc20.jpg" alt="A picture of a young trans woman in a red dress" />
  <img src="https://redacted.moe/f/bd64d141.jpg" alt="A picture of a middle-aged white man in a red shirt" />
</div>
<style>.images { display: flex; }</style>
<p>Based on appearances alone, what do you think of them?</p>
<p>The person on the left is a woman. She&rsquo;s also pretty young, one might infer
something about her level of experience accordingly. I imagine that she has led
a much different life than I have, and may have a much different perspective,
worldview, identity, and politics than I. Does she complain about sexism and
discrimination in her work? Is she a feminist? Does she lean left or right on
the political spectrum?</p>
<p>The person on the right looks like most of the hackers I&rsquo;ve met. You&rsquo;ve met
someone who looks like this a thousand times. He is a man, white and middle-aged
&ndash; that suggests a fair bit of experience. He probably doesn&rsquo;t experience or
concern himself with race or gender discrimination in the course of his work. He
just focuses on the software. His life experiences probably map relatively well
onto my own, and we may share a similar worldview and identity.</p>
<p>Making these assumptions is a part of human nature &ndash; it&rsquo;s a useful shortcut in
many situations. But they are assumptions based only on appearances. What are
the facts?</p>
<p>The person on the right is Scott Guthrie, Vice President of Cloud and AI at
Microsoft, giving a talk about Azure&rsquo;s cloud services. He lives in an $11M house
in Hunts Point, Washington. On the left is Alyssa Rosenzweig, main developer for
the free software Panfrost GPU drivers and a trans woman, talking about how she
reverse engineers proprietary graphics hardware.</p>
<p>You and I have a lot more in common with Alyssa than with Scott.  The phone I
have in my pocket right now would not work without her drivers. Alyssa humbles
me with her exceptional talent and dedication, and the free software community
is indebted to her. If you use ARM devices with free software, you owe something
to Alyssa. As recently as February, her Wikipedia page was vandalized by someone
who edited &ldquo;she&rdquo; and &ldquo;her&rdquo; to &ldquo;he&rdquo; and &ldquo;him&rdquo;.</p>
<p>Appearances should not especially matter when considering the merit of someone
considered for a leadership role in our community, be it as a maintainer,
thought leader, member of our foundations&rsquo; boards, etc. I am myself a white man,
and I think I perform well in my leadership roles throughout the free software
ecosystem. But it&rsquo;s not my appearance that causes any controversy: someone with
the approximate demographic shape of myself or Guthrie would cause no
susurration when taking the stage.</p>
<p>It&rsquo;s those like Alyssa, who aside from anything else is eminently qualified and
well-deserving of her leadership role, who are often the target of ire and
discrimination in the community. This is an experience shared by many people
whose gender expression, skin color, or other traits differ from the &ldquo;norm&rdquo;.
They&rsquo;ve been telling us so for years.</p>
<p>Is it any wonder that our community is predominantly made up of white
cisgendered men when anyone else is ostracized? It&rsquo;s not because we&rsquo;re
predisposed to be better at this kind of work. It&rsquo;s patently absurd to suppose
that hackers whose identities and life experience differ from yours or mine
cannot be good participants in and leaders of our movement. In actual fact,
diverse teams produce better results. While the labor pool is disproportionately
filled with white men, we can find many talented hackers who cannot be described
as such. If we choose to be inspired by them, and led by them, we will discover
new perspectives on our software, and on our movement and its broader place in
the world. They can help us create a safe and inviting space for other talented
hackers who identify with them. We will be more effective at our mission of
bringing free software to everyone with their help.</p>
<p>Moreover, there are a lot of damned good hackers who don&rsquo;t look like me, and I
would be happy to follow their lead regardless of any other considerations.</p>
<p>The free software ecosystem (and the world at large) is not under threat from
some woke agenda &ndash; a conspiracy theory which has been fabricated out of whole
cloth. The people you fear are just people, much like you and I, and they only
want to be treated as such.  Asking them to shut up and get in line, to suppress
their identity, experiences, and politics, to avoid confronting you with
uncomfortable questions about your biases and privileges by way of their
existence alone &ndash; it&rsquo;s not right.</p>
<p>Forget the politics and focus on the software? It&rsquo;s simply not possible. Free
software <em>is</em> politics. Treating other people with respect, maturity, and
professionalism, and valuing their contributions at any level, including
leadership, regardless of their appearance or identity &ndash; that&rsquo;s just part of
being a good person. <em>That</em> is apolitical.</p>
<hr>
<p><em>Alyssa gave her blessing regarding the use of her image and her example in this
post. Thanks!</em></p>]]></description><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate></item><item><title>rc: a new shell for Unix</title><link>https://drewdevault.com/2023/04/18/2023-04-18-A-new-shell-for-Unix.html</link><description><![CDATA[<p><a href="https://git.sr.ht/~sircmpwn/rc">rc</a> is a Unix shell I&rsquo;ve been working on over the past couple of weeks, though
it&rsquo;s been in the design stages for a while longer than that. It&rsquo;s not done or
ready for general use yet, but it is interesting, so let&rsquo;s talk about it.</p>
<p>As the name (which is subject to change) implies, rc is inspired by the Plan 9
<a href="http://man.9front.org/1/rc">rc</a> shell. It&rsquo;s not an implementation of Plan 9 rc, however: it departs
in many notable ways. I&rsquo;ll assume most readers are more familiar with POSIX
shell or Bash and skip many of the direct comparisons to Plan 9. Also, though
most of the features work as described, the shell is a work-in-progress and some
of the design I&rsquo;m going over today has not been implemented yet.</p>
<p>Let&rsquo;s start with the basics. Simple usage works much as you&rsquo;d expect:</p>
<pre tabindex="0"><code>name=ddevault
echo Hello $name
</code></pre><p>But there&rsquo;s already something important that might catch your eye here: the lack
of quotes around $name. One substantial improvement rc makes over POSIX shells
and Bash right off the bat is fixing our global shell quoting nightmare. There&rsquo;s
no need to quote variables!</p>
<pre tabindex="0"><code># POSIX shell
x=&#34;hello world&#34;
printf &#39;%s\n&#39; $x
# hello
# world

# rc
x=&#34;hello world&#34;
printf &#39;%s\n&#39; $x
# hello world
</code></pre><p>Of course, the POSIX behavior is actually useful sometimes. rc provides for this
by acknowledging that shells have not just one fundamental type (strings), but
two: strings and <em>lists</em> of strings, i.e. argument vectors.</p>
<pre tabindex="0"><code>x=(one two three)
echo $x(1)  # prints first item (&#34;one&#34;)
echo $x     # expands to arguments (echo &#34;one&#34; &#34;two&#34; &#34;three&#34;)
echo $#x    # length operator: prints 3

x=&#34;echo hello world&#34;
$x
# echo hello world: command not found

x=(echo hello world)
$x
# hello world

# expands to a string, list values separated with space:
$&#34;x
# echo hello world: command not found
</code></pre><p>You can also slice up lists and get a subset of items:</p>
<pre tabindex="0"><code>x=(one two three four five)
echo $x(-4) # one two three four
echo $x(2-) # two three four five
echo $x(2-4) # two three four
</code></pre><p>A departure from Plan 9 rc is that the list operators can be used with strings
for string operations as well:</p>
<pre tabindex="0"><code>x=&#34;hello world&#34;
echo $#x     # 11
echo $x(2)   # e
echo $x(1-5) # hello
</code></pre><p>rc also supports loops. The simple case is iterating over the command line
arguments:</p>
<pre tabindex="0"><code>% cat test.rc 
for (arg) {
	echo $arg
}
% rc test.rc one two three 
one
two
three
</code></pre><p>{ } is a command like any other; this can be simplified to for (arg) echo
$arg. You can also enumerate any list with in:</p>
<pre tabindex="0"><code>list=(one two three)
for (item in $list) {
	echo $item
}
</code></pre><p>We also have while loops and if:</p>
<pre tabindex="0"><code>while (true) {
	if (test $x -eq 10) {
		echo ten
	} else {
		echo $x
	}
}
</code></pre><p>Functions are defined like so:</p>
<pre tabindex="0"><code>fn greet {
	echo Hello $1
}

greet ddevault
</code></pre><p>Again, any command can be used, so this can be simplified to fn greet echo $1.
You can also add named parameters:</p>
<pre tabindex="0"><code>fn greet(user time) {
	echo Hello $user
	echo It is $time
}

greet ddevault `{date}
</code></pre><p>Note the use of `{script&hellip;} instead of $() for command expansion. Additional
arguments are still placed in $*, allowing for the user to combine
variadic-style functions with named arguments.</p>
<p>Here&rsquo;s a more complex script that I run to perform sanity checks before applying
patches:</p>
<pre tabindex="0"><code>#!/bin/rc
fn check_branch(branch) {
	if (test `{git rev-parse --abbrev-ref HEAD} != $branch) {
		echo &#34;Error: not on master branch&#34;
		exit 1
	}
}

fn check_uncommitted {
	if (test `{git status -suno | wc -l} -ne 0) {
		echo &#34;Error: you have uncommitted changes&#34;
		exit 1
	}
}

fn check_behind {
	if (test `{git rev-list &#34;@{u}..&#34; | wc -l} -ne 0) {
		echo &#34;Error: your branch is behind upstream&#34;
		exit 1
	}
}

check_branch master
check_uncommitted
check_behind
exec git pull
</code></pre><p>That&rsquo;s a brief introduction to rc! Presently it clocks in at about 2500 lines of
Hare. It&rsquo;s not done yet, so don&rsquo;t get too excited, but much of what&rsquo;s described
here is already working. Some other stuff which works but I didn&rsquo;t mention
include:</p>
<ul>
<li>Boolean compound commands (x &amp;&amp; y, x || y)</li>
<li>Pipelines, which can pipe arbitrary file descriptors (&ldquo;x |[2] y&rdquo;)</li>
<li>Redirects, also including arbitrary fds (&ldquo;x &gt;[2=1] file&rdquo;)</li>
</ul>
<p>It also has a <a href="https://git.sr.ht/~sircmpwn/rc/tree/master/item/doc/grammar.txt">formal context-free grammar</a>, which is a
work-in-progress but speaks to our desire to have a robust description of the
shell available for users and other implementations. We use Ember Sawady&rsquo;s
excellent <a href="https://git.d2evs.net/~ecs/madeline/">madeline</a> for our interactive mode, which supports command line
editing, history, ^r, and fish-style forward completion OOTB.</p>
<p>Future plans include:</p>
<ul>
<li>Simple arithmetic expansion</li>
<li>Named pipe expansions</li>
<li>Sub-shells</li>
<li>switch statements</li>
<li>Port to <a href="https://ares-os.org">ares</a></li>
<li>Find a new name, perhaps</li>
</ul>
<p>It needs a small amount of polish, cleanup, and bugs fixed as well.</p>
<p>I hope you find it interesting! I will let you know when it&rsquo;s done. Feel free
to <a href="https://git.sr.ht/~sircmpwn/rc">play with it</a> in the meanwhile, and maybe send some patches?</p>]]></description><pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate></item><item><title>The Free Software Foundation is dying</title><link>https://drewdevault.com/2023/04/11/2023-04-11-The-FSF-is-dying.html</link><description><![CDATA[<p>The Free Software Foundation is one of the longest-running missions in the
free software movement, effectively defining it. It provides a legal foundation
for the movement and organizes activism around software freedom. The GNU
project, closely related, has its own long story in our movement as the coding
arm of the Free Software Foundation, taking these principles and philosophy into
practice by developing free software; notably the GNU operating system that
famously rests atop GNU/Linux.</p>
<p>Today, almost 40 years on, the FSF is dying.</p>
<p>Their achievements are unmistakable: we must offer them our gratitude and
admiration for decades of accomplishments in establishing and advancing our
cause. The principles of software freedom are more important than ever, and the
products of these institutions remain necessary and useful &ndash; the GPL license
family, GCC, GNU coreutils, and so on. Nevertheless, the organizations behind
this work are floundering.</p>
<p>The Free Software Foundation must concern itself with the following ahead of all
else:</p>
<ol>
<li>Disseminating free software philosophy</li>
<li>Developing, publishing, and promoting copyleft licenses</li>
<li>Overseeing the health of the free software movement</li>
</ol>
<p>It is failing in each of these regards, and as its core mission fails, the
foundation is investing its resources into distractions.</p>
<p>In its role as the thought-leaders of free software philosophy, the message of
the FSF has a narrow reach. The organization&rsquo;s messaging is tone-deaf,
ineffective, and myopic. Hammering on about &ldquo;GNU/Linux&rdquo; nomenclature, antagonism
towards our allies in the open source movement, maligning the audience as
&ldquo;useds&rdquo; rather than &ldquo;users&rdquo;; none of this aids the cause. The pages and pages of
dense philosophical essays and poorly organized FAQs do not provide a useful
entry point or reference for the community. The message cannot spread like this.</p>
<p>As for copyleft, well, it&rsquo;s no coincidence that many people struggle with the
FSF&rsquo;s approach. Do you, dear reader, know the difference between free software
and copyleft? Many people assume that the MIT license is not free software
because it&rsquo;s not viral. The GPL family of licenses are essential for our
movement, but few people understand its dense and esoteric language, despite the
16,000-word FAQ which supplements it. And hip new software isn&rsquo;t using copyleft:
over 1 million npm packages use a permissive license while fewer than 20,000 use
the GPL; cargo sports a half-million permissive packages and another 20,000 or
so GPL&rsquo;d.</p>
<p>And is the free software movement healthy? This one gets an emphatic &ldquo;yes!&rdquo; &ndash;
thanks to the open source movement and the near-equivalence between free
software and open source software. There&rsquo;s more free software than ever and
virtually all new software contains free software components, and most people
call it open source.</p>
<p>The FOSS community is now dominated by people who are beyond the reach of the
FSF&rsquo;s message. The broader community is enjoying a growth in the diversity of
backgrounds and values represented, and the message does not reach these people.
The FSF fails to understand its place in the world as a whole, or its
relationship to the progressive movements taking place in the ecosystem and
beyond. The foundation does not reach out to new leaders in the community,
leaving them to form insular, weak institutions among themselves with no central
leadership, and leaving us vulnerable to exploitation from growing movements
like open core and commercial attacks on the free and open source software
brand.</p>
<p>Reforms are sorely needed for the FSF to fulfill it basic mission. In
particular, I call for the following changes:</p>
<ol>
<li><strong>Reform the leadership</strong>. It&rsquo;s time for Richard Stallman to go. His polemeic
rhetoric rivals even my own, and the demographics he represents &ndash; to the
exclusion of all others &ndash; is becoming a minority within the free software
movement. We need more leaders of color, women, LGBTQ representation, and
others besides. The present leadership, particularly from RMS, creates an
exclusionary environment in a place where inclusion and representation are
important for the success of the movement.</li>
<li><strong>Reform the institution</strong>. The FSF needs to correct its myopic view of the
ecosystem, reach out to emerging leaders throughout the FOSS world, and ask
them to take charge of the FSF&rsquo;s mission. It&rsquo;s these leaders who hold the
reins of the free software movement today &ndash; not the FSF. If the FSF still
wants to be involved in the movement, they need to recognize and empower the
leaders who are pushing the cause forward.</li>
<li><strong>Reform the message</strong>. People depend on the FSF to establish a strong
background in free software philosophy and practices within the community,
and the FSF is not providing this. The message needs to be made much more
accessible and level in tone, and the relationship between free software and
open source needs to be reformed so that the FSF and OSI stand together as
the pillars at the foundations of our ecosystem.</li>
<li><strong>Decouple the FSF from the GNU project</strong>. FSF and GNU have worked
hand-in-hand over decades to build the movement from scratch, but their
privileged relationship has become obsolete. The GNU project represents a
minute fraction of the free software ecosystem today, and it&rsquo;s necessary for
the Free Software Foundation to stand independently of any particular project
and focus on the health of the ecosystem as a whole.</li>
<li><strong>Develop new copyleft licenses</strong>. The GPL family of licenses has served us
well, but we need to do better. The best copyleft license today is the
<a href="https://www.mozilla.org/en-US/MPL/">MPL</a>, whose terse form and accessible language outperforms the GPL in
many respects. However, it does not provide a comprehensive answer to the
needs of copyleft, and new licenses are required to fill other niches in the
market &ndash; the FSF should write these licenses. Furthermore, the FSF should
present the community with a free software perspective on licenses as a
resource that project leaders can depend on to understand the importance of
their licensing choice such that they understand the appeal of copyleft
licenses without feeling pushed away from permissive approaches.</li>
</ol>
<p>The free software movement needs a strong force uniting it: we face challenges
from many sides, and today&rsquo;s Free Software Foundation is not equal to the task.
The FOSS ecosystem is flourishing, and it&rsquo;s time for the FSF to step up to the
wheel and direct its coming successes in the name of software freedom.</p>]]></description><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate></item><item><title>Writing Helios drivers in the Mercury driver environment</title><link>https://drewdevault.com/2023/04/08/2023-04-08-Drivers-and-mercury.html</link><description><![CDATA[<p><em><a href="https://git.sr.ht/~sircmpwn/helios">Helios</a> is a microkernel written in the <a href="https://harelang.org">Hare</a> programming language and is
part of the larger <a href="https://ares-os.org">Ares</a> operating system. You can watch
my FOSDEM 2023 talk introducing Helios <a href="https://spacepub.space/w/wpKXfhqqr7FajEAf4B2Vc2">on PeerTube</a>.</em></p>
<p>Let&rsquo;s take a look at the new Mercury driver development environment for Helios.</p>
<p>As you may remember from my FOSDEM talk, the Ares operating system is built out
of several layers which provide progressively higher-level environments for an
operating system. At the bottom is the Helios microkernel, and today we&rsquo;re going
to talk about the second layer: the <a href="https://git.sr.ht/~sircmpwn/mercury">Mercury</a> environment, which is used for
writing and running device drivers in userspace. Let&rsquo;s take a look at a serial
driver written against Mercury and introduce some of the primitives used by
driver authors in the Mercury environment.</p>
<p>Drivers for Mercury are written as normal ELF executables with an extra section
called .manifest, which includes a file similar to the following (the provided
example is for the serial driver we&rsquo;ll be examining today):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[driver]</span>
</span></span><span class="line"><span class="cl"><span class="na">name</span><span class="o">=</span><span class="s">pcserial</span>
</span></span><span class="line"><span class="cl"><span class="na">desc</span><span class="o">=</span><span class="s">Serial driver for x86_64 PCs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[capabilities]</span>
</span></span><span class="line"><span class="cl"><span class="na">0:ioport</span> <span class="o">=</span> <span class="s">min=3F8, max=400</span>
</span></span><span class="line"><span class="cl"><span class="na">1:ioport</span> <span class="o">=</span> <span class="s">min=2E8, max=2F0</span>
</span></span><span class="line"><span class="cl"><span class="na">2:note</span> <span class="o">=</span> 
</span></span><span class="line"><span class="cl"><span class="na">3:irq</span> <span class="o">=</span> <span class="s">irq=3, note=2</span>
</span></span><span class="line"><span class="cl"><span class="na">4:irq</span> <span class="o">=</span> <span class="s">irq=4, note=2</span>
</span></span><span class="line"><span class="cl"><span class="na">_:cspace</span> <span class="o">=</span> <span class="s">self</span>
</span></span><span class="line"><span class="cl"><span class="na">_:vspace</span> <span class="o">=</span> <span class="s">self</span>
</span></span><span class="line"><span class="cl"><span class="na">_:memory</span> <span class="o">=</span> <span class="s">pages=32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[services]</span>
</span></span><span class="line"><span class="cl"><span class="na">devregistry</span><span class="o">=</span>
</span></span></code></pre></div><p>Helios uses a capability-based design, in which access to system resources (such
as I/O ports, IRQs, or memory) is governed by capability objects. Each process
has a <em>capability space</em>, which is a table of capabilities assigned to that
process, and when performing operations (such as writing to an I/O port) the
user provides the index of the desired capability in a register when invoking
the appropriate syscall.</p>
<p>The manifest first specifies a list of capabilities required to operate the
serial port. It requests, assigned static capability addresses, capabilities for
the required I/O ports and IRQs, as well as a notification object which the IRQs
will be delivered to. Some capability types, such as I/O ports, have
configuration parameters, in this case the minimum and maximum port numbers
which are relevant. The IRQ capabilities require a reference to a notification
as well.</p>
<p>Limiting access to these capabilities provides very strong isolation between
device drivers. On a monolithic kernel like Linux, a bug in the serial driver
could compromise the entire system, but a vulnerability in our driver could, at
worst, write garbage to your serial port. This model also provides better
security than something like OpenBSD&rsquo;s pledge by declaratively specifying what
we need and nothing else.</p>
<p>Following the statically allocated capabilities, we request our own capability
space and virtual address space, the former so we can copy and destroy our
capabilities, and the latter so that we can map shared memory to perform reads
and writes for clients. We also request 32 pages of memory, which we use to
allocate page tables to perform those mappings; this will be changed later.
These capabilities do not require any specific address for the driver to work,
so we use &ldquo;_&rdquo; to indicate that any slot will suit our needs.</p>
<p>Mercury uses some vendor extensions over the System-V ABI to communicate
information about these capabilities to the runtime. Notes about each of the
_&rsquo;d capabilities are provided by the auxiliary vector, and picked up by the
Mercury runtime &ndash; for instance, the presence of a memory capability is detected
on startup and is used to set up the allocator; the presence of a vspace
capability is automatically wired up to the mmap implementation.</p>
<p>Each of these capabilities is implemented by the kernel, but additional services
are available in userspace via endpoint capabilities. Each of these endpoints
implements a particular API, as defined by a protocol definition file. This
driver requires access to the device registry, so that it can create devices for
its serial ports and expose them to clients.</p>
<p>These protocol definitions are written in a domain-specific language and parsed
by <a href="https://git.sr.ht/~sircmpwn/ipcgen">ipcgen</a> to generate client and server implementations of each. Here&rsquo;s a
simple protocol to start us off:</p>
<pre tabindex="0"><code>namespace io;

# The location with respect to which a seek operation is performed.
enum whence {
	# From the start of the file
	SET,
	# From the current offset
	CUR,
	# From the end of the file
	END,
};

# An object with file-like semantics.
interface file {
	# Reads up to amt bytes of data from a file.
	call read{pages: page...}(buf: uintptr, amt: size) size;

	# Writes up to amt bytes of data to a file.
	call write{pages: page...}(buf: uintptr, amt: size) size;

	# Seeks a file to a given offset, returning the new offset.
	call seek(offs: i64, w: whence) size;
};
</code></pre><p>Each interface includes a list of methods, each of which can take a number of
capabilities and parameters, and return a value. The &ldquo;read&rdquo; call here, when
implemented by a file-like object, accepts a list of memory pages to perform the
read or write with (shared memory), as well as a pointer to the buffer address
and size. Error handling is still a to-do.</p>
<p>ipcgen consumes these files and writes client or server code as appropriate.
These are generated as part of the Mercury build process and end up in
*_gen.ha files. The generated client code is filed away into the relevant
modules (this protocol ends up at io/file_gen.ha), alongside various
hand-written files which provide additional functionality and often wrap the IPC
calls in a higher-level interface. The server implementations end up in the
&ldquo;serv&rdquo; module, e.g. serv/io/file_gen.ha.</p>
<p>Let&rsquo;s look at some of the generated client code for io::file objects:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// This file was generated by ipcgen; do not modify by hand
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">use</span><span class="w"> </span><span class="n">helios</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">rt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ID for the file IPC interface.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">def</span><span class="w"> </span><span class="n">FILE_ID</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x9A533BB3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Labels for operations against file objects.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">file_label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="w"> </span><span class="kt">u64</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">READ</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">FILE_ID</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16u64</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">WRITE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">FILE_ID</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16u64</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">SEEK</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">FILE_ID</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16u64</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">file_read</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ep</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pages</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">amt</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Each interface has a unique ID (generated from the FNV-1a hash of its fully
qualified name), which is bitwise-OR&rsquo;d with a list of operations to form call
labels. The interface ID is used elsewhere; we&rsquo;ll refer to it again later. Then
each method generates an implementation which arranges the IPC details as
necessary and invokes the &ldquo;call&rdquo; syscall against the endpoint capability.</p>
<p>The generated server code is a bit more involved. Some of the details are
similar &ndash; FILE_ID is generated again, for instance &ndash; but there are some
additional details as well. First is the generation of a vtable defining the
functions implementing each operation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Implementation of a [[file]] object.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">file_iface</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">read</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_file_read</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">write</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_file_write</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">seek</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_file_seek</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>We also define a file object which is subtyped by the implementation to store
implementation details, and which provides to the generated code the required
bits of state.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Instance of an file object. Users may subtype this object to add
</span></span></span><span class="line"><span class="cl"><span class="c1">// instance-specific state.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">_iface</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">file_iface</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">_endpoint</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Here&rsquo;s an example of a subtype of file used by the initramfs to store additional
state:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// An open file in the bootstrap filesystem
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">type</span><span class="w"> </span><span class="n">bfs_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">serv</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">file</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fs</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">bfs</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ent</span><span class="o">:</span><span class="w"> </span><span class="n">tar</span><span class="o">::</span><span class="n">entry</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cur</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">off</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">padding</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The embedded serv::io::file structure here is populated with an implementation
of file_iface, here simplified for illustrative purposes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">bfs_file_impl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">serv_io</span><span class="o">::</span><span class="n">file_iface</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">read</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">bfs_file_read</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">write</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">bfs_file_write</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">seek</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">bfs_file_seek</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">bfs_file_read</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">obj</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">serv_io</span><span class="o">::</span><span class="n">file</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pages</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">amt</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">obj</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">bfs_file</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">fs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">file</span><span class="p">.</span><span class="n">fs</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">offs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">buf</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">PAGEMASK</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">pages</span><span class="o">...</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">offs</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">amt</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">pages</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">PAGESIZE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">map</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">vspace</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">map_flags</span><span class="o">::</span><span class="n">W</span><span class="p">,</span><span class="w"> </span><span class="n">pages</span><span class="o">...</span><span class="p">)</span><span class="o">!:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="n">offs</span><span class="p">..</span><span class="n">offs</span><span class="o">+</span><span class="n">amt</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Not shown: reading the file data into this buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The implementation can prepare a file object and call dispatch on it to process
client requests: this function blocks until a request arrives, decodes it, and
invokes the appropriate function. Often this is incorporated into an event loop
with poll to service many objects at once.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Prepare a file object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span><span class="w"> </span><span class="n">ep</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">newendpoint</span><span class="p">()</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">append</span><span class="p">(</span><span class="n">fs</span><span class="p">.</span><span class="n">files</span><span class="p">,</span><span class="w"> </span><span class="n">bfs_file</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">_iface</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">bfs_file_impl</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">_endpoint</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ep</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ent</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cur</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">tell</span><span class="p">(</span><span class="n">fs</span><span class="p">.</span><span class="n">buf</span><span class="p">)</span><span class="o">!</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">padding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span><span class="p">.</span><span class="n">rd</span><span class="p">.</span><span class="n">padding</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Process requests associated with this file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">serv</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">file_dispatch</span><span class="p">(</span><span class="n">file</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Okay, enough background: back to the serial driver. It needs to implement the
following protocol:</p>
<pre tabindex="0"><code>namespace dev;
use io;

# TODO: Add busy error and narrow semantics

# Note: TWO is interpreted as 1.5 for some char lengths (5)
enum stop_bits {
	ONE,
	TWO,
};

enum parity {
	NONE,
	ODD,
	EVEN,
	MARK,
	SPACE,
};

# A serial device, which implements the file interface for reading from and
# writing to a serial port. Typical implementations may only support one read
# in-flight at a time, returning errors::busy otherwise.
interface serial :: io::file {
	# Returns the baud rate in Hz.
	call get_baud() uint;

	# Returns the configured number of bits per character.
	call get_charlen() uint;

	# Returns the configured number of stop bits.
	call get_stopbits() stop_bits;

	# Returns the configured parity setting.
	call get_parity() parity;

	# Sets the baud rate in Hz.
	call set_baud(hz: uint) void;

	# Sets the number of bits per character. Must be 5, 6, 7, or 8.
	call set_charlen(bits: uint) void;

	# Configures the number of stop bits to use.
	call set_stopbits(bits: stop_bits) void;

	# Configures the desired parity.
	call set_parity(parity: parity) void;
};
</code></pre><p>This protocol <em>inherits</em> the io::file interface, so the serial port is usable
like any other file for reads and writes. It additionally defines
serial-specific methods, such as configuring the baud rate or parity. The
generated interface we&rsquo;ll have to implement looks something like this, embedding
the io::file_iface struct:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">serial_iface</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io</span><span class="o">::</span><span class="n">file_iface</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">get_baud</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_serial_get_baud</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">get_charlen</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_serial_get_charlen</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">get_stopbits</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_serial_get_stopbits</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">get_parity</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_serial_get_parity</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">set_baud</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_serial_set_baud</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">set_charlen</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_serial_set_charlen</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">set_stopbits</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_serial_set_stopbits</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">set_parity</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_serial_set_parity</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Time to dive into the implementation. Recall the driver manifest, which provides
the serial driver with a suitable environment:</p>
<pre tabindex="0"><code>[driver]
name=pcserial
desc=Serial driver for x86_64 PCs

[capabilities]
0:ioport = min=3F8, max=400
1:ioport = min=2E8, max=2F0
2:note = 
3:irq = irq=3, note=2
4:irq = irq=4, note=2
_:cspace = self
_:vspace = self
_:memory = pages=32

[services]
devregistry=
</code></pre><p>I/O ports for reading and writing to the serial devices, IRQs for receiving
serial-related interrupts, a device registry to add our serial devices to the
system, and a few extra things for implementation needs. Some of these are
statically allocated, some of them are provided via the auxiliary vector.
Our <a href="https://git.sr.ht/~sircmpwn/mercury/tree/5e12977a0cb773331b9b3b8421da63b85eed232c/item/cmd/serial">serial driver</a> opens by defining constants for the statically
allocated capabilities:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">def</span><span class="w"> </span><span class="n">IOPORT_A</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IOPORT_B</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IRQ</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IRQ3</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IRQ4</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>The first thing we do on startup is create a serial device.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">serial0</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">registry</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">service</span><span class="p">(</span><span class="n">sys</span><span class="o">::</span><span class="n">DEVREGISTRY_ID</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">sys</span><span class="o">::</span><span class="n">devregistry_new</span><span class="p">(</span><span class="n">registry</span><span class="p">,</span><span class="w"> </span><span class="n">dev</span><span class="o">::</span><span class="n">SERIAL_ID</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">registry</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// ...
</span></span></span></code></pre></div><p>The device registry is provided via the aux vector, and we can use
helios::service to look it up by its interface ID. Then we use the
devregistry::new operation to create a serial device:</p>
<pre tabindex="0"><code># Device driver registry.
interface devregistry {
	# Creates a new device implementing the given interface ID using the
	# provided endpoint capability and returns its assigned serial number.
	call new{; out}(iface: u64) uint;
};
</code></pre><p>After this we can destroy the registry &ndash; we won&rsquo;t need it again and it&rsquo;s best
to get rid of it so that we can work with the minimum possible privileges at
runtime. After this we initialize the serial port, acknowledge any interrupts
that might have been pending before we got started, an enter the main loop.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="n">com_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="w"> </span><span class="n">serial0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">helios</span><span class="o">::</span><span class="n">irq_ack</span><span class="p">(</span><span class="n">IRQ3</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">helios</span><span class="o">::</span><span class="n">irq_ack</span><span class="p">(</span><span class="n">IRQ4</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">poll</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="k">_</span><span class="p">]</span><span class="n">pollcap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pollcap</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IRQ</span><span class="p">,</span><span class="w"> </span><span class="n">events</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pollflags</span><span class="o">::</span><span class="n">RECV</span><span class="p">,</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pollcap</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">serial0</span><span class="p">,</span><span class="w"> </span><span class="n">events</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pollflags</span><span class="o">::</span><span class="n">RECV</span><span class="p">,</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">poll</span><span class="p">(</span><span class="n">poll</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">poll</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">revents</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">pollflags</span><span class="o">::</span><span class="n">RECV</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">dispatch_irq</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">poll</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">revents</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">pollflags</span><span class="o">::</span><span class="n">RECV</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">dispatch_serial</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The dispatch_serial function is of interest, as this provides the
implementation of the serial object we just created with the device registry.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">comport</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">dev</span><span class="o">::</span><span class="n">serial</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">port</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rbuf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">4096</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">wbuf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">4096</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rpending</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">wpending</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">dispatch_serial</span><span class="p">(</span><span class="n">dev</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">comport</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">dev</span><span class="o">::</span><span class="n">serial_dispatch</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">serial_impl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dev</span><span class="o">::</span><span class="n">serial_iface</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">read</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_read</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">write</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_write</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">seek</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_seek</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">get_baud</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_get_baud</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">get_charlen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_get_charlen</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">get_stopbits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_get_stopbits</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">get_parity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_get_parity</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">set_baud</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_set_baud</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">set_charlen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_set_charlen</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">set_stopbits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_set_stopbits</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">set_parity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial_set_parity</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">serial_read</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">obj</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io</span><span class="o">::</span><span class="n">file</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pages</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">amt</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">obj</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">comport</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">offs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">buf</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">PAGEMASK</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">map</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">vspace</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">map_flags</span><span class="o">::</span><span class="n">W</span><span class="p">,</span><span class="w"> </span><span class="n">pages</span><span class="o">...</span><span class="p">)</span><span class="o">!:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="n">offs</span><span class="p">..</span><span class="n">offs</span><span class="o">+</span><span class="n">amt</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">port</span><span class="p">.</span><span class="n">rpending</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">pages</span><span class="o">...</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">rconsume</span><span class="p">(</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pages_static</span><span class="p">[..</span><span class="k">len</span><span class="p">(</span><span class="n">pages</span><span class="p">)]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pages</span><span class="p">[..];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pending_read</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">read</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">reply</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">store_reply</span><span class="p">(</span><span class="n">helios</span><span class="o">::</span><span class="n">CADDR_UNDEF</span><span class="p">)</span><span class="o">!</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">pages</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pages_static</span><span class="p">[..</span><span class="k">len</span><span class="p">(</span><span class="n">pages</span><span class="p">)],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// (other functions omitted)
</span></span></span></code></pre></div><p>We&rsquo;ll skip much of the implementation details for this specific driver, but I&rsquo;ll
show you how read works at least. It&rsquo;s relatively straightforward: first we mmap
the buffer provided by the caller. If there&rsquo;s already readable data pending from
the serial port (stored in that rpending slice in the comport struct, which is a
slice of the statically-allocated rbuf field), we copy it into the buffer and
return the number of bytes we had ready. Otherwise, we stash details about the
caller, storing the special reply capability in our cspace (this is one of the
reasons we need cspace = self in our manifest) so we can reply to this call
once data is available. Then we return to the main loop.</p>
<p>The main loop also wakes up on an interrupt, and we have an interrupt unmasked
on the serial device to wake us whenever there&rsquo;s data ready to be read.
Eventually this gets us here, which finishes the call we saved earlier:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Reads data from the serial port&#39;s RX FIFO.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">com_read</span><span class="p">(</span><span class="n">com</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">comport</span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">n</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">comin</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">LSR</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">RBF</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">RBF</span><span class="p">;</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">ch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">comin</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">RBR</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">rpending</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">rbuf</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="c1">// If the buffer is full we just drop chars
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">			</span><span class="k">static</span><span class="w"> </span><span class="k">append</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">rpending</span><span class="p">,</span><span class="w"> </span><span class="n">ch</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">pending_read</span><span class="p">.</span><span class="n">reply</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rconsume</span><span class="p">(</span><span class="n">com</span><span class="p">,</span><span class="w"> </span><span class="n">pending_read</span><span class="p">.</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">helios</span><span class="o">::</span><span class="n">send</span><span class="p">(</span><span class="n">pending_read</span><span class="p">.</span><span class="n">reply</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">pending_read</span><span class="p">.</span><span class="n">reply</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">pending_read</span><span class="p">.</span><span class="n">pages</span><span class="o">...</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>I hope that gives you a general idea of how drivers work in this environment!
I encourage you to read the full implementation if you&rsquo;re curious to know more
about the serial driver in particular &ndash; it&rsquo;s just 370 lines of code.</p>
<p>The last thing I want to show you is how the driver gets executed in the first
place. When Helios boots up, it starts /sbin/sysinit, which is provided by
Mercury and offers various low-level userspace runtime services, such as the
device registry and bootstrap filesystem we saw earlier. After setting up its
services, sysinit executes /sbin/usrinit, which is provided by the next layer
up (Gaia, eventually) and sets up the rest of the system according to user
policy, mounting filesystems and starting up drivers and such. At the moment,
usrinit is fairly simple, and just runs a little demo. Here it is in full:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">dev</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">fs</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">helios</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">io</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">log</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">rt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">sys</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">fs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">service</span><span class="p">(</span><span class="n">fs</span><span class="o">::</span><span class="n">FS_ID</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">procmgr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">service</span><span class="p">(</span><span class="n">sys</span><span class="o">::</span><span class="n">PROCMGR_ID</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">devmgr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">service</span><span class="p">(</span><span class="n">sys</span><span class="o">::</span><span class="n">DEVMGR_ID</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">devload</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">service</span><span class="p">(</span><span class="n">sys</span><span class="o">::</span><span class="n">DEVLOADER_ID</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">log</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;[usrinit] Running /sbin/drv/serial&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">proc</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">image</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">fs</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;/sbin/drv/serial&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">sys</span><span class="o">::</span><span class="n">procmgr_new</span><span class="p">(</span><span class="n">procmgr</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">proc</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">sys</span><span class="o">::</span><span class="n">devloader_load</span><span class="p">(</span><span class="n">devload</span><span class="p">,</span><span class="w"> </span><span class="n">proc</span><span class="p">,</span><span class="w"> </span><span class="n">image</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">sys</span><span class="o">::</span><span class="n">process_start</span><span class="p">(</span><span class="n">proc</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">serial</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">log</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;[usrinit] open device serial0&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">sys</span><span class="o">::</span><span class="n">devmgr_open</span><span class="p">(</span><span class="n">devmgr</span><span class="p">,</span><span class="w"> </span><span class="n">dev</span><span class="o">::</span><span class="n">SERIAL_ID</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serial</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">rt</span><span class="o">::</span><span class="n">PAGESIZE</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">read</span><span class="p">(</span><span class="n">serial</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">)</span><span class="o">!</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">n</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">// CR =&gt; LF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;\r&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;\n&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">// echo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="n">io</span><span class="o">::</span><span class="n">write</span><span class="p">(</span><span class="n">serial</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">[..</span><span class="n">n</span><span class="p">])</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Each of the services shown at the start are automatically provided in usrinit&rsquo;s
aux vector by sysinit, and includes all of the services required to bootstrap
the system. This includes a filesystem (the initramfs), a process manager (to
start up new processes), the device manager, and the driver loader service.</p>
<p>usrinit starts by opening up /sbin/drv/serial (the serial driver, of course)
from the provided initramfs using fs::open, which is a convenience wrapper
around the filesystem protocol. Then we create a new process with the process
manager, which by default has an empty address space &ndash; we could load a normal
process into it with sys::process_load, but we want to load a driver, so we
use the devloader interface instead. Then we start the process and boom: the
serial driver is online.</p>
<p>The serial driver registers itself with the device registry, which means that we
can use the device manager to open the 0th device which implements the serial
interface. Since this is compatible with the io::file interface, it can simply
be used normally with io::read and io::write to utilize the serial port. The
main loop simply echos data read from the serial port back out. Simple!</p>
<hr>
<p>That&rsquo;s a quick introduction to the driver environment provided by Mercury. I
intend to write a few more drivers soon myself &ndash; PC keyboard, framebuffer,
etc &ndash; and set up a simple shell. We have seen a few sample drivers written
pre-Mercury which would be nice to bring into this environment, such as virtio
networking and block devices. It will be nice to see them re-introduced in an
environment where they can provide useful services to the rest of userspace.</p>
<p>If you&rsquo;re interested in learning more about Helios or Mercury, consult
<a href="https://ares-os.org">ares-os.org</a> for documentation &ndash; though beware of the
many stub pages. If you have any questions or want to get involved in writing
some drivers yourself, jump into our IRC channel: #helios on Libera Chat.</p>]]></description><pubDate>Sat, 8 Apr 2023 00:00:00 +0000</pubDate></item><item><title>When to comment that code</title><link>https://drewdevault.com/2023/03/09/2023-03-09-Comment-or-no-comment.html</link><description><![CDATA[<p>My software tends to have a surprisingly low number of comments. One of my
projects, <a href="https://git.sr.ht/~sircmpwn/scdoc">scdoc</a>, has 25 comments among its 1,133 lines of C code, or 2%,
compared to the average of 19%.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Naturally, I insist that my code is
well-written in spite of this divergence from the norm. Allow me to explain.</p>
<p>The philosophy and implementation of code comments varies widely in the
industry, and some view comment density as a proxy for code quality.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> I&rsquo;ll
state my views here, but will note that yours may differ and I find that
acceptable; I am not here to suggest that your strategy is wrong and I will
happily adopt it when I write a patch for your codebase.</p>
<p>Let&rsquo;s begin with an illustrative example from one of my projects:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Reads the next entry from an EFI [[FILE_PROTOCOL]] handle of an open
</span></span></span><span class="line"><span class="cl"><span class="c1">// directory. The return value is statically allocated and will be overwritten
</span></span></span><span class="line"><span class="cl"><span class="c1">// on the next call.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">readdir</span><span class="p">(</span><span class="n">dir</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">FILE_PROTOCOL</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">FILE_INFO</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// size(FILE_INFO) plus reserve up to 512 bytes for file name (FAT32
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// maximum, times two for wstr encoding)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">static</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">FILE_INFO_SIZE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">512</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">read</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="o">&amp;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">FILE_INFO</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This code illustrates two of my various approaches to writing comments. The
first comment is a documentation comment: the intended audience is the consumer
of this API. The call-site has access to the following information:</p>
<ul>
<li>This comment</li>
<li>The name of the function, and the module in which it resides (efi::readdir)</li>
<li>The parameter names and types</li>
<li>The return type</li>
</ul>
<p>The goal is for the user of this function to gather enough information from
these details to correctly utilize this API.</p>
<p>The module in which it resides suggests that this function interacts with the
EFI (Extensible Firmware Interface) standard, and the user would be wise to pair
a reading of this code (or API) with skimming the relevant standard. Indeed, the
strategic naming of the FILE_PROTOCOL and FILE_INFO types (notably written in
defiance of the Hare style guide), provide hints to the relevant parts of the
EFI specification to read for a complete understanding of this code.</p>
<p>The name of the function is also carefully chosen to carry some weight: it is a
reference to the Unix readdir function, which brings with it an intuition about
its purpose and usage for programmers familiar with a Unix environment.</p>
<p>The return type also provides hints about the function&rsquo;s use: it may return
either a FILE_INFO pointer, void (nothing), or an error. Without reading the
documentation string, and taking the name and return type into account, we might
(correctly) surmise that we need to call this function repeatedly to read file
details out of a directory until it returns void, indicating that all entries
have been processed, handling any errors which might occur along the way.</p>
<p>We have established a lot of information about this function without actually
reading the comment; in my philosophy of programming I view this information as
a critical means for the author to communicate to the user, and we can lean on
it to reduce the need for explicit documentation. Nevertheless, the
documentation comment adds something here. The first sentence is a relatively
information-sparse summary of the function&rsquo;s purpose, and mainly exists to tick
a box in the Hare style guide.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> The second sentence is the only real reason
this comment exists: to clarify an important detail for the user which is not
apparent from the function signature, namely the storage semantics associated
with the return value.</p>
<p>Let&rsquo;s now study the second comment&rsquo;s purpose:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// size(FILE_INFO) plus reserve up to 512 bytes for file name (FAT32
</span></span></span><span class="line"><span class="cl"><span class="c1">// maximum, times two for wstr encoding)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">static</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">FILE_INFO_SIZE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">512</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>This comment exists to explain the use of the magic constant of 512. The
audience of this comment is someone reading the <em>implementation</em> of this
function. This audience has access to a different context than the user of the
function, for instance they are expected to have a more comprehensive knowledge
of EFI and are <em>definitely</em> expected to be reading the specification to a much
greater degree of detail. We can and should lean on that context to make our
comments more concise and useful.</p>
<p>An alternative writing which does not rely on this context, and which in
my view is strictly worse, may look like the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// The FILE_INFO structure includes the file details plus a variable length
</span></span></span><span class="line"><span class="cl"><span class="c1">// array for the filename. The underlying filesystem is always FAT32 per the
</span></span></span><span class="line"><span class="cl"><span class="c1">// EFI specification, which has a maximum filename length of 256 characters. The
</span></span></span><span class="line"><span class="cl"><span class="c1">// filename is encoded as a wide-string (UCS-2), which encodes two bytes per
</span></span></span><span class="line"><span class="cl"><span class="c1">// character, and is not NUL-terminated, so we need to reserve up to 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="c1">// for the filename.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">static</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">FILE_INFO_SIZE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">512</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>The target audience of this comment should have a reasonable understanding of
EFI. We simply need to clarify that this constant is the FAT32 max filename
length, times two to account for the wstr encoding, and our magic constant is
sufficiently explained.</p>
<p>Let&rsquo;s move on to another kind of comment I occasionally write: medium-length
prose. These often appear at the start of a function or the start of a file and
serve to add context to the implementation, to justify the code&rsquo;s existence or
explain why it works. Another sample:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">init_pagetables</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// 0xFFFF0000xxxxxxxx - 0xFFFF0200xxxxxxxx: identity map
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// 0xFFFF0200xxxxxxxx - 0xFFFF0400xxxxxxxx: identity map (dev)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// 0xFFFF8000xxxxxxxx - 0xFFFF8000xxxxxxxx: kernel image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// L0[0x000]    =&gt; L1_ident
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// L0[0x004]    =&gt; L1_devident
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// L1_ident[*]  =&gt; 1 GiB identity mappings
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// L0[0x100]    =&gt; L1_kernel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// L1_kernel[0] =&gt; L2_kernel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// L2_kernel[0] =&gt; L3_kernel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// L3_kernel[0] =&gt; 4 KiB kernel pages
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">L0</span><span class="p">[</span><span class="mh">0x000</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PT_TABLE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">&amp;</span><span class="n">L1_ident</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_AF</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">L0</span><span class="p">[</span><span class="mh">0x004</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PT_TABLE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">&amp;</span><span class="n">L1_devident</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_AF</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">L0</span><span class="p">[</span><span class="mh">0x100</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PT_TABLE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">&amp;</span><span class="n">L1_kernel</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_AF</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">L1_kernel</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PT_TABLE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">&amp;</span><span class="n">L2_kernel</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_AF</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">L2_kernel</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PT_TABLE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">&amp;</span><span class="n">L3_kernel</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_AF</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0u64</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">L1_ident</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">L1_ident</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PT_BLOCK</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mh">0x40000000</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">PT_NORMAL</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_AF</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_ISM</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_RW</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0u64</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">L1_devident</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">L1_devident</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PT_BLOCK</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mh">0x40000000</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">PT_DEVICE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_AF</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_ISM</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PT_RW</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This comment shares a trait with the previous example: its purpose, in part, is
to justify magic constants. It explains the indices of the arrays by way of the
desired address space, and a perceptive reader will notice that 1 GiB =
1073741824 bytes = 0x40000000 bytes.</p>
<p>To fully understand this, we must again consider the intended audience. This
is an implementation comment, so the reader is an <em>implementer</em>. They will need
to possess some familiarity with the behavior of page tables to be productive in
this code, and they likely have the ARM manual up on their second monitor. This
comment simply fills in the blanks for an informed reader.</p>
<p>There are two additional kinds of comments I often write: TODO and XXX.</p>
<p>A TODO comment indicates some important implementation deficiency; it <em>must</em> be
addressed at some point in the future and generally indicates that the function
does not meet its stated interface and is often accompanied by an assertion, or
a link to a ticket on the bug tracker, or both.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">assert</span><span class="p">(</span><span class="n">ep</span><span class="p">.</span><span class="n">send</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w"> </span><span class="c1">// TODO: support multiple senders
</span></span></span></code></pre></div><p>This function should support multiple senders, but does not; an assertion here
prevents the code from running under conditions it does not yet support and the
TODO comment indicates that this should be addressed in the future. The target
audience for this comment is someone who brings about these conditions and runs
into the assertion failure.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">memory_empty</span><span class="p">(</span><span class="n">mem</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">memory</span><span class="p">)</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// XXX: This O(n) linked list traversal is bad
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mem</span><span class="p">.</span><span class="n">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">pages</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0u</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">FREELIST_END</span><span class="p">;</span><span class="w"> </span><span class="n">pages</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">addr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mem</span><span class="p">.</span><span class="n">phys</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">mem</span><span class="o">::</span><span class="n">PAGESIZE</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mem</span><span class="o">::</span><span class="n">phys_tokernel</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">uint</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="n">ptr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">pages</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">mem</span><span class="p">.</span><span class="n">pages</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Here we find an example of an XXX comment. This code is correct: it implements
the function&rsquo;s interface perfectly. However, given its expected usage, a
performance of O(n) is not great: this function is expected to be used in hot
paths. This comment documents the deficiency, and provides a hint to a reader
that might be profiling this code in regards to a possible improvement.</p>
<p>One final example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Invalidates the TLB for a virtual address.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">invalidate</span><span class="p">(</span><span class="n">virt</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// TODO: Notify other cores (XXX SMP)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">invlpg</span><span class="p">(</span><span class="n">virt</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This is an atypical usage of XXX, but one which I still occasionally reach for.
Here we have a TODO comment which indicates a case which this code does not
consider, but which must be addressed in the future: it will have to raise an
IPI to get other cores to invalidate the affected virtual address. However, this
is one of many changes which fall under a broader milestone of SMP support, and
the &ldquo;XXX SMP&rdquo; comment is here to make it easy to grep through the codebase for
any places which are known to require attention while implementing SMP support.
An XXX comment is often written for the purpose of being easily found with grep.</p>
<p>That sums up most of the common reasons I will write a comment in my software.
Each comment is written considering a target audience and the context provided
by the code in which it resides, and aims to avoid stating redundant information
within these conditions. It&rsquo;s for this reason that my code is sparse on
comments: I find the information outside of the comments equally important and
aim to be concise such that a comment is not redundant with information found
elsewhere.</p>
<p>Hopefully this post inspired some thought in you, to consider your comments
deliberately and to be more aware of your ability to communicate information in
other ways. Even if you chose to write your comments more densely than I do, I
hope you will take care to communicate well through other mediums in your code
as well.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>O. Arafat and D. Riehle, &ldquo;The comment density of open source software code,&rdquo; 2009 31st International Conference on Software Engineering - Companion Volume, Vancouver, BC, Canada, 2009, pp. 195-198, doi: 10.1109/ICSE-COMPANION.2009.5070980.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I hold this view weakly, but reverse of the norm: I consider a high
comment density a sign that the code quality may be poor.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Which states that all exported functions that the module consumer is
expected to use should have a comment, and that exported but undocumented
symbols are exported to fulfill an implementation detail and not to provide a
useful interface.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 9 Mar 2023 00:00:00 +0000</pubDate></item><item><title>Porting Helios to aarch64 for my FOSDEM talk, part one</title><link>https://drewdevault.com/2023/02/20/2023-02-20-Helios-aarch64.html</link><description><![CDATA[<p><a href="https://sr.ht/~sircmpwn/helios">Helios</a> is a microkernel written in the <a href="https://harelang.org">Hare</a> programming language, and the
subject of a talk I did at FOSDEM earlier this month. You can watch the talk
here if you like:</p>
<iframe title="FOSDEM 2023: Introducing the Helios microkernel" src="https://spacepub.space/videos/embed/f6435a6c-34e0-4602-ad5d-f791643111ab" allowfullscreen="" sandbox="allow-same-origin allow-scripts allow-popups" width="560" height="315" frameborder="0"></iframe>
<p>A while ago I promised someone that I would not do any talks on Helios until I
could present them from Helios itself, and at FOSDEM I made good on that
promise: my talk was presented from a Raspberry Pi 4 running Helios. The kernel
was originally designed for x86_64 (though we were careful to avoid painting
ourselves into any corners so that we could port it to more architectures later
on), and I initially planned to write an Intel HD Graphics driver so that I
could drive the projector from my laptop. But, after a few days spent trying to
comprehend the IHD manuals, I decided it would be <em>much</em> easier to port the
entire system to aarch64 and write a driver for the much-simpler RPi GPU
instead. 42 days later the port was complete, and a week or so after that I
successfully presented the talk at FOSDEM. In a series of blog posts, I will
take a look at those 42 days of work and explain how the aarch64 port works.
Today&rsquo;s post focuses on the bootloader.</p>
<p>The Helios boot-up process is:</p>
<ol>
<li>Bootloader starts up and loads the kernel, then jumps to it</li>
<li>The kernel configures the system and loads the init process</li>
<li>Kernel provides runtime services to init (and any subsequent processes)</li>
</ol>
<p>In theory, the port to aarch64 would address these steps in order, but in
practice step (2) relies heavily on the runtime services provided by step (3),
so much of the work was ordered 1, 3, 2. This blog post focuses on part 1, I&rsquo;ll
cover parts 2 and 3 and all of the fun problems they caused in later posts.</p>
<p>In any case, the bootloader was the first step. Some basic changes to the build
system established boot/+aarch64 as the aarch64 bootloader, and a simple
qemu-specific ARM kernel was prepared which just gave a little &ldquo;hello world&rdquo; to
demonstrate the multi-arch build system was working as intended. More build
system refinements would come later, but it&rsquo;s off to the races from here.
Targeting qemu&rsquo;s aarch64 virt platform was useful for most of the initial
debugging and bring-up (and is generally useful at all times, as a much easier
platform to debug than real hardware); the first tests on real hardware came
much later.</p>
<p>Booting up is a sore point on most systems. It involves a lot of arch-specific
procedures, but also generally calls for custom binary formats and annoying
things like disk drivers — which don&rsquo;t belong in a microkernel. So the
Helios bootloaders are separated from the kernel proper, which is a simple ELF
executable. The bootloader loads this ELF file into memory, configures a few
simple things, then passes some information along to the kernel entry point. The
bootloader&rsquo;s memory and other resources are hereafter abandoned and are later
reclaimed for general use.</p>
<p>On aarch64 the boot story is pretty abysmal, and I wanted to avoid adding the
SoC-specific complexity which is endemic to the platform. Thus, two solutions
are called for: <a href="https://uefi.org/specifications">EFI</a> and <a href="https://www.devicetree.org/specifications/">device trees</a>. At the bootloader level, EFI is the
more important concern. For qemu-virt and Raspberry Pi, <a href="https://github.com/tianocore/edk2">edk2</a> is the
free-software implementation of choice when it comes to EFI. The first order of
business is producing an executable which can be loaded by EFI, which is, rather
unfortunately, based on the Windows <a href="https://learn.microsoft.com/en-us/windows/win32/debug/pe-format">COFF/PE32+</a> format. I took inspiration from
Linux and made an disgusting EFI stub solution, which involves hand-writing a
PE32+ header in assembly and doing some truly horrifying things with binutils to
massage everything into order. Much of the header is lifted from Linux:</p>
<pre tabindex="0"><code>.section .text.head
.global base
base:
.L_head:
	/* DOS header */
	.ascii &#34;MZ&#34;
	.skip 58
	.short .Lpe_header - .L_head
	.align 4
.Lpe_header:
	.ascii &#34;PE\0\0&#34;
	.short 0xAA64                              /* Machine = AARCH64 */
	.short 2                                   /* NumberOfSections */
	.long 0                                    /* TimeDateStamp */
	.long 0                                    /* PointerToSymbolTable */
	.long 0                                    /* NumberOfSymbols */
	.short .Lsection_table - .Loptional_header /* SizeOfOptionalHeader */
	/* Characteristics:
	 * IMAGE_FILE_EXECUTABLE_IMAGE |
	 * IMAGE_FILE_LINE_NUMS_STRIPPED |
	 * IMAGE_FILE_DEBUG_STRIPPED */
	.short 0x206
.Loptional_header:
	.short 0x20b                     /* Magic = PE32+ (64-bit) */
	.byte 0x02                       /* MajorLinkerVersion */
	.byte 0x14                       /* MinorLinkerVersion */
	.long _data - .Lefi_header_end   /* SizeOfCode */
	.long __pecoff_data_size         /* SizeOfInitializedData */
	.long 0                          /* SizeOfUninitializedData */
	.long _start - .L_head           /* AddressOfEntryPoint */
	.long .Lefi_header_end - .L_head /* BaseOfCode */
.Lextra_header:
	.quad 0                          /* ImageBase */
	.long 4096                       /* SectionAlignment */
	.long 512                        /* FileAlignment */
	.short 0                         /* MajorOperatingSystemVersion */
	.short 0                         /* MinorOperatingSystemVersion */
	.short 0                         /* MajorImageVersion */
	.short 0                         /* MinorImageVersion */
	.short 0                         /* MajorSubsystemVersion */
	.short 0                         /* MinorSubsystemVersion */
	.long 0                          /* Reserved */

	.long _end - .L_head             /* SizeOfImage */

	.long .Lefi_header_end - .L_head /* SizeOfHeaders */
	.long 0                          /* CheckSum */
	.short 10                        /* Subsystem = EFI application */
	.short 0                         /* DLLCharacteristics */
	.quad 0                          /* SizeOfStackReserve */
	.quad 0                          /* SizeOfStackCommit */
	.quad 0                          /* SizeOfHeapReserve */
	.quad 0                          /* SizeOfHeapCommit */
	.long 0                          /* LoaderFlags */
	.long 6                          /* NumberOfRvaAndSizes */

	.quad 0 /* Export table */
	.quad 0 /* Import table */
	.quad 0 /* Resource table */
	.quad 0 /* Exception table */
	.quad 0 /* Certificate table */
	.quad 0 /* Base relocation table */

.Lsection_table:
	.ascii &#34;.text\0\0\0&#34;              /* Name */
	.long _etext - .Lefi_header_end   /* VirtualSize */
	.long .Lefi_header_end - .L_head  /* VirtualAddress */
	.long _etext - .Lefi_header_end   /* SizeOfRawData */
	.long .Lefi_header_end - .L_head  /* PointerToRawData */
	.long 0                           /* PointerToRelocations */
	.long 0                           /* PointerToLinenumbers */
	.short 0                          /* NumberOfRelocations */
	.short 0                          /* NumberOfLinenumbers */
	/* IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_EXECUTE */
	.long 0x60000020

	.ascii &#34;.data\0\0\0&#34;        /* Name */
	.long __pecoff_data_size    /* VirtualSize */
	.long _data - .L_head       /* VirtualAddress */
	.long __pecoff_data_rawsize /* SizeOfRawData */
	.long _data - .L_head       /* PointerToRawData */
	.long 0                     /* PointerToRelocations */
	.long 0                     /* PointerToLinenumbers */
	.short 0                    /* NumberOfRelocations */
	.short 0                    /* NumberOfLinenumbers */
	/* IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE */
	.long 0xc0000040

.balign 0x10000
.Lefi_header_end:

.global _start
_start:
	stp x0, x1, [sp, -16]!

	adrp x0, base
	add x0, x0, #:lo12:base
	adrp x1, _DYNAMIC
	add x1, x1, #:lo12:_DYNAMIC
	bl relocate
	cmp w0, #0
	bne 0f

	ldp x0, x1, [sp], 16

	b bmain

0:
	/* relocation failed */
	add sp, sp, -16
	ret
</code></pre><p>The specific details about how any of this works are complex and unpleasant,
I&rsquo;ll refer you to the spec if you&rsquo;re curious, and offer a general suggestion
that cargo-culting my work here would be a lot easier than understanding it
should you need to build something similar.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Note the entry point for later; we store two arguments from EFI (x0 and x1) on
the stack and eventually branch to bmain.</p>
<p>This file is assisted by the linker script:</p>
<pre tabindex="0"><code>ENTRY(_start)
OUTPUT_FORMAT(elf64-littleaarch64)

SECTIONS {
	/DISCARD/ : {
		*(.rel.reloc)
		*(.eh_frame)
		*(.note.GNU-stack)
		*(.interp)
		*(.dynsym .dynstr .hash .gnu.hash)
	}

	. = 0xffff800000000000;

	.text.head : {
		_head = .;
		KEEP(*(.text.head))
	}

	.text : ALIGN(64K) {
		_text = .;
		KEEP(*(.text))
		*(.text.*)
		. = ALIGN(16);
		*(.got)
	}

	. = ALIGN(64K);
	_etext = .;

	.dynamic : {
		*(.dynamic)
	}

	.data : ALIGN(64K) {
		_data = .;
		KEEP(*(.data))
		*(.data.*)

		/* Reserve page tables */
		. = ALIGN(4K);
		L0 = .;
		. += 512 * 8;
		L1_ident = .;
		. += 512 * 8;
		L1_devident = .;
		. += 512 * 8;
		L1_kernel = .;
		. += 512 * 8;
		L2_kernel = .;
		. += 512 * 8;
		L3_kernel = .;
		. += 512 * 8;
	}

	.rela.text : {
		*(.rela.text)
		*(.rela.text*)
	}
	.rela.dyn : {
		*(.rela.dyn)
	}
	.rela.plt : {
		*(.rela.plt)
	}
	.rela.got : {
		*(.rela.got)
	}
	.rela.data : {
		*(.rela.data)
		*(.rela.data*)
	}

	.pecoff_edata_padding : {
		BYTE(0);
		. = ALIGN(512);
	}
	__pecoff_data_rawsize = ABSOLUTE(. - _data);
	_edata = .;

	.bss : ALIGN(4K) {
		KEEP(*(.bss))
		*(.bss.*)
		*(.dynbss)
	}

	. = ALIGN(64K);
	__pecoff_data_size = ABSOLUTE(. - _data);
	_end = .;
}
</code></pre><p>Items of note here are the careful treatment of relocation sections
(cargo-culted from earlier work on RISC-V with Hare; not actually necessary as
qbe generates PIC for aarch64)<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and the extra symbols used to gather
information for the PE32+ header. Padding is also added in the required places,
and static aarch64 page tables are defined for later use.</p>
<p>This is built as a shared object, and the Makefile <del>mutilates</del> reformats the
resulting ELF file to produce a PE32+ executable:</p>
<pre tabindex="0"><code>$(BOOT)/bootaa64.so: $(BOOT_OBJS) $(BOOT)/link.ld
	$(LD) -Bsymbolic -shared --no-undefined \
		-T $(BOOT)/link.ld \
		$(BOOT_OBJS) \
		-o $@

$(BOOT)/bootaa64.efi: $(BOOT)/bootaa64.so
	$(OBJCOPY) -Obinary \
		-j .text.head -j .text -j .dynamic -j .data \
		-j .pecoff_edata_padding \
		-j .dynstr -j .dynsym \
		-j .rel -j .rel.* -j .rel* \
		-j .rela -j .rela.* -j .rela* \
		$&lt; $@
</code></pre><p>With all of this mess sorted, and the PE32+ entry point branching to bmain, we
can finally enter some Hare code:</p>
<pre tabindex="0"><code>export fn bmain(
	image_handle: efi::HANDLE,
	systab: *efi::SYSTEM_TABLE,
) efi::STATUS = {
    // ...
};
</code></pre><p>Getting just this far took 3 full days of work.</p>
<p>Initially, the Hare code incorporated a lot of proof-of-concept work from Alexey
Yerin&rsquo;s &ldquo;carrot&rdquo; kernel prototype for RISC-V, which also booted via EFI.
Following the early bringing-up of the bootloader environment, this was
refactored into a more robust and general-purpose EFI support layer for Helios,
which will be applicable to future ports. The purpose of this module is to
provide an idiomatic Hare-oriented interface to the EFI boot services, which the
bootloader makes use of mainly to read files from the boot media and examine the
system&rsquo;s memory map.</p>
<p>Let&rsquo;s take a look at the first few lines of bmain:</p>
<pre tabindex="0"><code>efi::init(image_handle, systab)!;

const eficons = eficons_init(systab);
log::setcons(&amp;eficons);
log::printfln(&#34;Booting Helios aarch64 via EFI&#34;);

if (readel() == el::EL3) {
	log::printfln(&#34;Booting from EL3 is not supported&#34;);
	return efi::STATUS::LOAD_ERROR;
};

let mem = allocator { ... };
init_mmap(&amp;mem);
init_pagetables();
</code></pre><p>Significant build system overhauls were required such that Hare modules from
the kernel like log (and, later, other modules like elf) could be incorporated
into the bootloader, simplifying the process of implementing more complex
bootloaders. The first call of note here is init_mmap, which scans the EFI
memory map and prepares a simple high-watermark allocator to be used by the
bootloader to allocate memory for the kernel image and other items of interest.
It&rsquo;s quite simple, it just finds the largest area of general-purpose memory and
sets up an allocator with it:</p>
<pre tabindex="0"><code>// Loads the memory map from EFI and initializes a page allocator using the
// largest area of physical memory.
fn init_mmap(mem: *allocator) void = {
	const iter = efi::iter_mmap()!;
	let maxphys: uintptr = 0, maxpages = 0u64;
	for (true) {
		const desc = match (efi::mmap_next(&amp;iter)) {
		case let desc: *efi::MEMORY_DESCRIPTOR =&gt;
			yield desc;
		case void =&gt;
			break;
		};
		if (desc.DescriptorType != efi::MEMORY_TYPE::CONVENTIONAL) {
			continue;
		};
		if (desc.NumberOfPages &gt; maxpages) {
			maxphys = desc.PhysicalStart;
			maxpages = desc.NumberOfPages;
		};
	};
	assert(maxphys != 0, &#34;No suitable memory area found for kernel loader&#34;);
	assert(maxpages &lt;= types::UINT_MAX);
	pagealloc_init(mem, maxphys, maxpages: uint);
};
</code></pre><p>init_pagetables is next. This populates the page tables reserved by the linker
with the desired higher-half memory map, illustrated in the comments shown here:</p>
<pre tabindex="0"><code>fn init_pagetables() void = {
	// 0xFFFF0000xxxxxxxx - 0xFFFF0200xxxxxxxx: identity map
	// 0xFFFF0200xxxxxxxx - 0xFFFF0400xxxxxxxx: identity map (dev)
	// 0xFFFF8000xxxxxxxx - 0xFFFF8000xxxxxxxx: kernel image
	//
	// L0[0x000]    =&gt; L1_ident
	// L0[0x004]    =&gt; L1_devident
	// L1_ident[*]  =&gt; 1 GiB identity mappings
	// L0[0x100]    =&gt; L1_kernel
	// L1_kernel[0] =&gt; L2_kernel
	// L2_kernel[0] =&gt; L3_kernel
	// L3_kernel[0] =&gt; 4 KiB kernel pages
	L0[0x000] = PT_TABLE | &amp;L1_ident: uintptr | PT_AF;
	L0[0x004] = PT_TABLE | &amp;L1_devident: uintptr | PT_AF;
	L0[0x100] = PT_TABLE | &amp;L1_kernel: uintptr | PT_AF;
	L1_kernel[0] = PT_TABLE | &amp;L2_kernel: uintptr | PT_AF;
	L2_kernel[0] = PT_TABLE | &amp;L3_kernel: uintptr | PT_AF;
	for (let i = 0u64; i &lt; len(L1_ident): u64; i += 1) {
		L1_ident[i] = PT_BLOCK | (i * 0x40000000): uintptr |
			PT_NORMAL | PT_AF | PT_ISM | PT_RW;
	};
	for (let i = 0u64; i &lt; len(L1_devident): u64; i += 1) {
		L1_devident[i] = PT_BLOCK | (i * 0x40000000): uintptr |
			PT_DEVICE | PT_AF | PT_ISM | PT_RW;
	};
};
</code></pre><p>In short, we want three larger memory regions to be available: an identity map,
where physical memory addresses correlate 1:1 with virtual memory, an identity
map configured for device MMIO (e.g. with caching disabled), and an area to load
the kernel image. The first two are straightforward, they use uniform 1 GiB
mappings to populate their respective page tables. The latter is slightly more
complex, ultimately the kernel is loaded in 4 KiB pages so we need to set up
intermediate page tables for that purpose.</p>
<p>We cannot actually enable these page tables until we&rsquo;re finished making use of
the EFI boot services — the EFI specification requires us to preserve the
online memory map at this stage of affairs. However, this does lay the
groundwork for the kernel loader: we have an allocator to provide pages of
memory, and page tables to set up virtual memory mappings that can be activated
once we&rsquo;re done with EFI. bmain thus proceeds with loading the kernel:</p>
<pre tabindex="0"><code>const kernel = match (efi::open(&#34;\\helios&#34;, efi::FILE_MODE::READ)) {
case let file: *efi::FILE_PROTOCOL =&gt;
	yield file;
case let err: efi::error =&gt;
	log::printfln(&#34;Error: no kernel found at /helios&#34;);
	return err: efi::STATUS;
};

log::printfln(&#34;Load kernel /helios&#34;);
const kentry = match (load(&amp;mem, kernel)) {
case let err: efi::error =&gt;
	return err: efi::STATUS;
case let entry: uintptr =&gt;
	yield entry: *kentry;
};
efi::close(kernel)!;
</code></pre><p>The loader itself (the &ldquo;load&rdquo; function here) is a relatively straightforward ELF
loader; if you&rsquo;ve seen one you&rsquo;ve seen them all. Nevertheless, you may browse it
<a href="https://git.sr.ht/~sircmpwn/helios/tree/02d0490487c7a0fb4b0367b95819e808b98f87fb/item/boot/%2Baarch64/loader.ha">online</a> if you so wish. The only item of note here is the function used for
mapping kernel pages:</p>
<pre tabindex="0"><code>// Maps a physical page into the kernel&#39;s virtual address space.
fn kmmap(virt: uintptr, phys: uintptr, flags: uintptr) void = {
	assert(virt &amp; ~0x1ff000 == 0xffff800000000000: uintptr);
	const offs = (virt &gt;&gt; 12) &amp; 0x1ff;
	L3_kernel[offs] = PT_PAGE | PT_NORMAL | PT_AF | PT_ISM | phys | flags;
};
</code></pre><p>The assertion enforces a constraint which is implemented by our kernel linker
script, namely that all loadable kernel program headers are located within the
kernel&rsquo;s reserved address space. With this constraint in place, the
implementation is simpler than many mmap implementations; we can assume that
L3_kernel is the correct page table and just load it up with the desired
physical address and mapping flags.</p>
<p>Following the kernel loader, the bootloader addresses other items of interest,
such as loading the device tree and boot modules — which includes, for
instance, the init process image and an initramfs. It also allocates &amp; populates
data structures with information which will be of later use to the kernel,
including the memory map. This code is relatively straightforward and not
particularly interesting; most of these processes takes advantage of the same
straightforward Hare function:</p>
<pre tabindex="0"><code>// Loads a file into continuous pages of memory and returns its physical
// address.
fn load_file(
	mem: *allocator,
	file: *efi::FILE_PROTOCOL,
) (uintptr | efi::error) = {
	const info = efi::file_info(file)?;
	const fsize = info.FileSize: size;
	let npage = fsize / PAGESIZE;
	if (fsize % PAGESIZE != 0) {
		npage += 1;
	};

	let base: uintptr = 0;
	for (let i = 0z; i &lt; npage; i += 1) {
		const phys = pagealloc(mem);
		if (base == 0) {
			base = phys;
		};

		const nbyte = if ((i + 1) * PAGESIZE &gt; fsize) {
			yield fsize % PAGESIZE;
		} else {
			yield PAGESIZE;
		};
		let dest = (phys: *[*]u8)[..nbyte];
		const n = efi::read(file, dest)?;
		assert(n == nbyte);
	};

	return base;
};
</code></pre><p>It is not necessary to map these into virtual memory anywhere, the kernel later
uses the identity-mapped physical memory region in the higher half to read
them. Tasks of interest resume at the end of bmain:</p>
<pre tabindex="0"><code>efi::exit_boot_services();
init_mmu();
enter_kernel(kentry, ctx);
</code></pre><p>Once we exit boot services, we are free to configure the MMU according to our
desired specifications and make good use of all of the work done earlier to
prepare a kernel memory map. Thus, init_mmu:</p>
<pre tabindex="0"><code>// Initializes the ARM MMU to our desired specifications. This should take place
// *after* EFI boot services have exited because we&#39;re going to mess up the MMU
// configuration that it depends on.
fn init_mmu() void = {
	// Disable MMU
	const sctlr_el1 = rdsctlr_el1();
	wrsctlr_el1(sctlr_el1 &amp; ~SCTLR_EL1_M);

	// Configure MAIR
	const mair: u64 =
		(0xFF &lt;&lt; 0) | // Attr0: Normal memory; IWBWA, OWBWA, NTR
		(0x00 &lt;&lt; 8);  // Attr1: Device memory; nGnRnE, OSH
	wrmair_el1(mair);

	const tsz: u64 = 64 - 48;
	const ips = rdtcr_el1() &amp; TCR_EL1_IPS_MASK;
	const tcr_el1: u64 =
		TCR_EL1_IPS_42B_4T |	// 4 TiB IPS
		TCR_EL1_TG1_4K |	// Higher half: 4K granule size
		TCR_EL1_SH1_IS |	// Higher half: inner shareable
		TCR_EL1_ORGN1_WB |	// Higher half: outer write-back
		TCR_EL1_IRGN1_WB |	// Higher half: inner write-back
		(tsz &lt;&lt; TCR_EL1_T1SZ) |	// Higher half: 48 bits
		TCR_EL1_TG0_4K |	// Lower half: 4K granule size
		TCR_EL1_SH0_IS |	// Lower half: inner sharable
		TCR_EL1_ORGN0_WB |	// Lower half: outer write-back
		TCR_EL1_IRGN0_WB |	// Lower half: inner write-back
		(tsz &lt;&lt; TCR_EL1_T0SZ);	// Lower half: 48 bits
	wrtcr_el1(tcr_el1);

	// Load page tables
	wrttbr0_el1(&amp;L0[0]: uintptr);
	wrttbr1_el1(&amp;L0[0]: uintptr);
	invlall();

	// Enable MMU
	const sctlr_el1: u64 =
		SCTLR_EL1_M |		// Enable MMU
		SCTLR_EL1_C |		// Enable cache
		SCTLR_EL1_I |		// Enable instruction cache
		SCTLR_EL1_SPAN |	// SPAN?
		SCTLR_EL1_NTLSMD |	// NTLSMD?
		SCTLR_EL1_LSMAOE |	// LSMAOE?
		SCTLR_EL1_TSCXT |	// TSCXT?
		SCTLR_EL1_ITD;		// ITD?
	wrsctlr_el1(sctlr_el1);
};
</code></pre><p>There are a lot of bits here! Figuring out which ones to enable or disable was a
project in and of itself. One of the major challenges, funnily enough, was
finding the correct ARM manual to reference to understand all of these
registers. I&rsquo;ll save you some time and <a href="https://redacted.moe/f/f0255890.pdf">link to it</a> directly, should you ever
find yourself writing similar code. Some question marks in comments towards the
end point out some flags that I&rsquo;m still not sure about. The ARM CPU is <em>very</em>
configurable and identifying the configuration that produces the desired
behavior for a general-purpose kernel requires some effort.</p>
<p>After this function completes, the MMU is initialized and we are up and running
with the kernel memory map we prepared earlier; the kernel is loaded in the
higher half and the MMU is prepared to service it. So, we can jump to the kernel
via enter_kernel:</p>
<pre tabindex="0"><code>@noreturn fn enter_kernel(entry: *kentry, ctx: *bootctx) void = {
	const el = readel();
	switch (el) {
	case el::EL0 =&gt;
		abort(&#34;Bootloader running in EL0, breaks EFI invariant&#34;);
	case el::EL1 =&gt;
		// Can boot immediately
		entry(ctx);
	case el::EL2 =&gt;
		// Boot from EL2 =&gt; EL1
		//
		// This is the bare minimum necessary to get to EL1. Future
		// improvements might be called for here if anyone wants to
		// implement hardware virtualization on aarch64. Good luck to
		// this future hacker.

		// Enable EL1 access to the physical counter register
		const cnt = rdcnthctl_el2();
		wrcnthctl_el2(cnt | 0b11);

		// Enable aarch64 in EL1 &amp; SWIO, disable most other EL2 things
		// Note: I bet someday I&#39;ll return to this line because of
		// Problems
		const hcr: u64 = (1 &lt;&lt; 1) | (1 &lt;&lt; 31);
		wrhcr_el2(hcr);

		// Set up SPSR for EL1
		// XXX: Magic constant I have not bothered to understand
		wrspsr_el2(0x3c4);

		enter_el1(ctx, entry);
	case el::EL3 =&gt;
		// Not supported, tested earlier on
		abort(&#34;Unsupported boot configuration&#34;);
	};
};
</code></pre><p>Here we see the detritus from one of many battles I fought to port this kernel:
the EL2 =&gt; EL1 transition. aarch64 has several &ldquo;exception levels&rdquo;, which are
semantically similar to the x86_64 concept of protection rings. EL0 is used for
userspace code, which is not applicable under these circumstances; an assertion
sanity-checks this invariant. EL1 is the simplest case, this is used for normal
kernel code and in this situation we can jump directly to the kernel. The EL2
case is used for hypervisor code, and this presented me with a challenge. When I
tested my bootloader in qemu-virt, it worked initially, but on real hardware it
failed. After much wailing and gnashing of teeth, the cause was found to be that
our bootloader was started in EL2 on real hardware, and EL1 on qemu-virt. qemu
can be configured to boot in EL2, which was crucial in debugging this problem,
via -M virt,virtualization=on. From this environment I was able to identify a
few important steps to drop to EL1 and into the kernel, though from the comments
you can probably ascertain that this process was not well-understood. I do have
a better understanding of it now than I did when this code was written, but the
code is still serviceable and I see no reason to change it at this stage.</p>
<p>At this point, 14 days into the port, I successfully reached kmain on qemu-virt.
Some initial kernel porting work was done after this, but when I was prepared to
test it on real hardware I ran into this EL2 problem — the first kmain on
real hardware ran at T+18.</p>
<p>That sums it up for the aarch64 EFI bootloader work. 24 days later the kernel
and userspace ports would be complete, and a couple of weeks after that it was
running on stage at FOSDEM. The next post will cover the kernel port (maybe more
than one post will be required, we&rsquo;ll see), and the final post will address the
userspace port and the inner workings of the slidedeck demo that was shown on
stage. Look forward to it, and thanks for reading!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>A cursory review of this code while writing this blog post draws my
attention to a few things that ought to be improved as well.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>PIC stands for &ldquo;position independent code&rdquo;. EFI can load executables at
any location in memory and the code needs to be prepared to deal with that;
PIC is the tool we use for this purpose.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate></item><item><title>Should private platforms engage in censorship?</title><link>https://drewdevault.com/2023/01/30/2023-01-30-Should-private-platforms-engage-in-censorship.html</link><description><![CDATA[<p>Private service providers are entitled to do business with whom they please, or
not to. Occasionally, a platform will take advantage of this to deny service to
a particular entity on any number of grounds, often igniting a flood of debate
online regarding whether or not censorship in this form is just. Recently,
CloudFlare pulled the plug on a certain forum devoted to the coordinated
harassment of its victims. Earlier examples include the same service blocking a
far-right imageboard, or Namecheap cancelling service for a neo-Nazi news site.</p>
<p>In each of these cases, a private company elected to terminate service for a
customer voluntarily, without a court order. Absent from these events was any
democratic or judicial oversight. A private company which provides some kind of
infrastructure for the Internet simply elected to unilaterally terminate service
for a customer or class of customers.</p>
<p>When private companies choose with whom they do or do not do business with, this
is an exercise of an important freedom: <a href="https://en.wikipedia.org/wiki/Freedom_of_association">freedom of association</a>. Some
companies have this right limited by regulation — for instance, utility
companies are often required to provide power to everyone who wants it within
their service area. Public entities are required to provide their services to
everyone — for instance, the US postal service cannot unilaterally choose
not to deliver your mail. However, by default, private companies are generally
allowed to deny their services to whomever they please.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Are they right to?</p>
<p>An argument is often made that, when a platform reaches a given size (e.g.
Facebook), or takes on certain ambitions (e.g. CloudFlare), it may become large
and entrenched enough in our society that it should self-impose a role more
analogous to a public utility than a private company. Under such constraints,
such a platform would choose to host any content which is not explicitly
illegal, and defer questions over what content is appropriate to the democratic
process. There are a number of angles from which we can examine this argument.</p>
<p>For a start, how might we implement the scenario called for by this argument?
Consider one option: regulation. Power companies are subject to regulations
regarding how and with whom they do business; they must provide service to
everyone and they are not generally allowed to shut off your heat in the cold
depths of winter. Similarly, we could regulate digital platforms to require them
to provide a soapbox for all legally expressible viewpoints, then utilize the
democratic process to narrow this soapbox per society&rsquo;s mutually-agreed-upon
views regarding matters such as neo-Nazi propaganda.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>It&rsquo;s important when making this argument to note that regulation of this sort
imposes obligations on private businesses which erode their own right to free
association; radical free speech for individuals requires radical curtailing of
free association for businesses. Private businesses are owned and staffed by
individuals, and requiring them to allow all legal forms of content on their
platform is itself a limitation on their freedom. The staff of a newspaper may
not appreciate being required by law to provide space in the editorials for KKK
members to espouse their racist philosophy, but would nevertheless be required
to typeset such articles under such an arrangement.</p>
<p>Another approach to addressing this argument is not to question the rights of a
private business, but instead to question whether or not they should be allowed
to grow to a size such that their discretion in censorship constitutes a
disruption to society due to their scale and entrenched market position. Under
this lens, we can suggest another government intervention that does not take the
form of regulation, but of an application of antitrust law. With more platforms
to choose from, we can explore more approaches to moderation and censorship, and
depend on the market&rsquo;s invisible hand to lead us true.</p>
<p>The free speech absolutist who makes similar arguments may find themselves in a
contradiction: expanding free speech for some people (platform users) requires,
in this scenario, curtailing freedoms for others (platform owners and staff).
Someone in this position may concede that, while they support the rights of
individuals, they might not offer the same rights to businesses who resemble
utilities. The tools for implementing this worldview, however, introduce further
contradictions when combined with the broader political profile of a typical
free speech absolutist: calling for regulation isn&rsquo;t very consistent with any
&ldquo;small government&rdquo; philosophy; and those who describe themselves as Libertarian
and make either of these arguments provide me with no small amount of amusement.</p>
<p>There is another flaw in this line of thinking which I want to highlight: the
presumption that the democratic process can address these problems in the first
place. Much of the legitimacy of this argument rests on the assumption that the
ability for maligned users to litigate their grievances is not only more just,
but also equal to the threat posed by hate speech and other concerns which are
often the target of censorship on private platforms. I don&rsquo;t think that this is
true.</p>
<p>The democratic and judicial processes are often corrupt and inefficient. It is
still the case that the tone of your skin has an outsized effect on the outcome
of your court case; why shouldn&rsquo;t similar patterns emerge when de-platformed
racists are given their day before a judge? Furthermore, the pace of government
interventions are generally insufficient. Could Facebook appeal a court for the
right to remove the Proud Boys from their platform faster than they could
organize an attack on the US Capitol building? And can lawmakers keep up with
innovation at a pace sufficient to address new forms and mediums for
communicating harmful content before they&rsquo;re a problem?</p>
<p>We should also question if the democratic process will lead to moral outcomes.
Minorities are, by definition, in the minority, and a purely democratic process
will only favor their needs subject to the will of the majority. Should the
rights of trans people to live free of harassment be subject to the pleasure of
the cisgendered majority?</p>
<p>These systems, when implemented, will perform as they always have: they will
provide disproportionately unfavorable outcomes for disadvantaged members of
society. I am a leftist: if asked to imagine a political system which addresses
these problems, I will first imagine sweeping reforms to our existing system,
point out that the free market isn&rsquo;t, lean in favor of regulation and
nationalization of important industries, and seek to empower the powerless
against the powerful. It will require a lot of difficult, ongoing work to get
there, and I imagine most of this work will be done in spite of the protests of
the typical free speech absolutist.</p>
<p>I am in favor of these reforms, but they are decades away from completion, and
many will disagree on the goals and their implementation. But I am also a
pragmatic person, and when faced with the system in which we find ourselves
today, I seek a pragmatic solution to this problem; ideally one which is not
predicated on revolution. When faced with the question, &ldquo;should private
platforms engage in censorship?&rdquo;, what is the pragmatic answer?</p>
<p>To provide such an answer, we must de-emphasize idealism in favor of an honest
examination of the practical context within which our decision-making is done.
Consider again the status quo: private companies are generally permitted to
exercise their right to free association by kicking people off of their
platforms. A pragmatic framework for making these decisions examines the context
in which they are made. In the current political climate, this context should
consider the threats faced by many different groups of marginalized people
today: racism is still alive and strong, what few LGBT rights exist are being
dismantled, and many other civil liberties are under attack.</p>
<p>When someone (or some entity such as business) enjoys a particular freedom, the
way they exercise it is meaningful. Inaction is a form of complicity; allowing
hate to remain on your platform is an acknowledgement of your favor towards the
lofty principles outlined in the arguments above <em>in spite of</em> the problems
enumerated here and the realities faced by marginalized people today. A purely
moral consideration thus suggests that exercising your right to free association
in your role as a decision-maker at a business is a just response to this status
quo.</p>
<p>I expect the people around me (given a definition of &ldquo;around me&rdquo; that extends to
the staff at businesses I patronize) to possess a moral compass which is
compatible with my own, and to act in accordance with it; in the absence of this
I will express my discontent by voting with my feet. However, businesses in the
current liberal economic regime often disregard morals in favor of
profit-oriented decision making. Therefore, in order for the typical business
behave morally, their decision-making must exist within a context where the
moral outcomes align with the profitable outcomes.</p>
<p>We are seeing increasing applications of private censorship because this
alignment is present. Businesses depend on two economic factors which are
related to this issue: access to a pool of profitable users, and access to a
labor pool with which to develop and maintain their profits. Businesses which
platform bigots are increasingly finding public opinion turning against them;
marginalized people and moderates tend to flee to less toxic spaces and staff
members are looking to greener pastures. The free market currently rewards
private censorship, therefore in a system wherein the free market reigns supreme
we observe private censorship.</p>
<p>I reject the idea that it is appropriate for businesses to sideline morality in
favor of profit, and I don&rsquo;t have much faith in the free market to produce moral
outcomes. For example, the market is responding poorly to the threat of climate
change. However, in the case of private censorship, the incentives are aligned
such that the outcomes we&rsquo;re observing match the outcomes I would expect.</p>
<p>This is a complex topic which we have examined from many angles. In my view,
freedom of association is just as important as freedom of speech, and its
application to private censorship is not clearly wrong. If you view private
censorship as an infringement of the principle of free speech, but agree that
freedom of association is nevertheless important, we must resolve this
contradiction. The democratic or judicial processes are an enticing and
idealistic answer, but these are flawed processes that may not produce just
outcomes. If I were to consider these tools to address this question, I&rsquo;m going
to present solutions from a socialist perspective which may or may not jibe with
your sensibilities.</p>
<p>Nevertheless, the system as it exists today produces outcomes which approximate
both rationality and justice, and I do not stand in opposition to the increased
application of private censorship under the current system, flawed though it may
be.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>There are some nuances omitted here, such as the implications of the DMCA
&ldquo;safe harbor&rdquo; provisions.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Arguments on other issues also call for regulating digital platforms, such
as addressing the impact that being binned by Google without recourse can have
on your quality-of-life for users who are dependent on Google&rsquo;s email
services. Some nuance is called for; I will elaborate on this in future posts.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate></item><item><title>My plans at FOSDEM: SourceHut, Hare, and Helios</title><link>https://drewdevault.com/2023/01/24/2023-01-24-FOSDEM.html</link><description><![CDATA[<p>FOSDEM is right around the corner, and finally in person after long years of
dealing with COVID. I&rsquo;ll be there again this year, and I&rsquo;m looking forward to
it! I have four slots on the schedule (wow! Thanks for arranging these, FOSDEM
team) and I&rsquo;ll be talking about several projects. There is a quick lightning
talk on Saturday to introduce Helios and tease a full-length talk on Sunday, a
meetup for the Hare community, and a meetup for the SourceHut community. I hope
to see you there!</p>
<p><a href="https://fosdem.org/2023/schedule/event/helios/"><strong>Lightning talk: Introducing Helios</strong></a></p>
<p>Saturday 12:00 at H.2215 (Ferrer)</p>
<blockquote>
<p>Helios is a simple microkernel written in part to demonstrate the applicability
of the Hare programming language to kernels. This talk briefly explains why
Helios is interesting and is a teaser for a more in-depth talk in the
microkernel room tomorrow.</p>
<p>Hare is a systems programming language designed to be simple, stable, and
robust. Hare uses a static type system, manual memory management, and a minimal
runtime. It is well-suited to writing operating systems, system tools,
compilers, networking software, and other low-level, high performance tasks.
Helios uses Hare to implement a microkernel, largely inspired by seL4.</p></blockquote>
<p><a href="https://fosdem.org/2023/schedule/event/hare_meetup/"><strong>BoF: The Hare programming language</strong></a></p>
<p>Saturday 15:00 at UB2.147</p>
<blockquote>
<p>Hare is a systems programming language designed to be simple, stable, and
robust. Hare uses a static type system, manual memory management, and a
minimal runtime. It is well-suited to writing operating systems, system tools,
compilers, networking software, and other low-level, high performance tasks.</p>
<p>At this meeting we&rsquo;ll sum up the state of affairs with Hare, our plans for the
future, and encourage discussions with the community. We&rsquo;ll also demonstrate a
few interesting Hare projects, including Helios, a micro-kernel written in
Hare, and encourage each other to work on interesting projects in the Hare
community.</p></blockquote>
<p><a href="https://fosdem.org/2023/schedule/event/sourcehut/"><strong>BoF: SourceHut meetup</strong></a></p>
<p>Saturday 16:00 at UB2.147</p>
<blockquote>
<p>SourceHut is a free software forge for developing software projects, providing
git and mercurial hosting, continuous integration, mailing lists, and more.
We&rsquo;ll be meeting here again in 2023 to discuss the platform and its community,
the completion of the GraphQL rollout and the migration to the EU, and any
other topics on the minds of the attendees.</p></blockquote>
<p><a href="https://fosdem.org/2023/schedule/event/heliosuk/"><strong>Introducing Helios</strong></a></p>
<p>Sunday 13:00 at H.1308 (Rolin)</p>
<blockquote>
<p>Helios is a simple microkernel written in part to demonstrate the
applicability of the Hare programming language to kernels. This talk will
introduce the design and rationale for Helios, address some details of its
implementation, compare it with seL4, and elaborate on the broader plans for
the system.</p></blockquote>]]></description><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Setting a new focus for my blog</title><link>https://drewdevault.com/2023/01/22/2023-01-22-A-new-focus.html</link><description><![CDATA[<p>Just shy of two months ago, I published <a href="https://drewdevault.com/2022/12/01/I-shall-toil-quietly.html">I shall toil at a reduced volume</a>,
which addressed the fact that I&rsquo;m not getting what I want from my blog anymore,
and I would be taking an indefinite break. Well, I am ready to resume my
writing, albeit with a different tone and focus than before.</p>
<blockquote>
<p>Well, that was fast.</p></blockquote>
<p>&ndash; Everyone</p>
<p>Since writing this, I have been considering what exactly the essential subject
of my dissatisfaction with my writing has been. I may have found the answer: I
lost sight of my goals. I got so used to writing that I would often think to
myself, &ldquo;I want to write a blog post!&rdquo;, then dig a topic out of my backlog
(which is 264 items long) and write something about it. This is not the way;
much of the effort expended on writing in this manner is not spent on the
subjects I care about most, or those which most urgently demand an expenditure
of words.</p>
<p>The consequences of this misalignment of perspective are that my writing has
often felt dull and rote. It encourages shallower takes and lends itself to the
rants or unthoughtful criticisms that my writings are, unfortunately, (in)famous
for. When I take an idea off of the shelf, or am struck by an idea that, in the
moment, seemingly demands to be spake of, I often end up with a disappointing
result when the fruit of this inspiration is published a few hours later.</p>
<p>Over the long term, these issues manifest as demerits to my reputation, and
deservedly so. What&rsquo;s more, when a critical tone is well-justified, the posts
which utilize it are often overlooked by readers due to the normalization of
this tone throughout less important posts. Take for instance my recent post on
<a href="https://drewdevault.com/2022/10/03/Does-Rust-belong-in-Linux.html">Rust in Linux</a>. Though this article could have been written with greater
nuance, I still find its points about the value of conservatism in software
decision-making accurate and salient. However, the message is weakened riding on
the coat-tails of my long history of less poignant critiques of Rust. As I
resume my writing, I will have to take a more critical examination of myself and
the broader context of my writing before reaching for a negative tone as a
writing tool.</p>
<p>With these lessons in mind, I am seeking out stronger goals to align my writing
with, in the hope that the writing is both more fulfilling for me, and more
compelling for the reader. Among these goals I have identified two particularly
important ones, whose themes resonate through my strongest articles throughout
the years:</p>
<ol>
<li>The applicability of software to the just advancement of society, its
contextualization within the needs of the people who use it, a deep respect
for these people and the software&rsquo;s broader impact on the world, and the use
of free software to acknowledge and fulfill these needs.</li>
<li>The principles of good software engineering, such that software built to meet
these goals is reliable, secure, and comprehensible. It is in the service of
this goal that I beat the drum of simplicity with a regular rhythm.</li>
</ol>
<p>Naturally many people have important beliefs on these subjects. I simply aim to
share my own perspective, and I find it rewarding when I am able to write
compelling arguments which underline these goals.</p>
<p>There is another kind of blog post that I enjoy writing and plan to resume:
in-depth technical analysis of my free software projects. I&rsquo;m working on lots of
interesting and exciting projects, and I want to talk about them more, and I
think people enjoy reading about them. I just spent six weeks porting Helios to
aarch64, for instance, and have an essay on the subject half-written in the back
of my head. I would love to type it in and publish it.</p>
<p>So, I will resume writing, and indeed at a &ldquo;reduced volume&rdquo;, with a renewed
focus on the message and its context, and an emphasis on serving the goals I
care about the most. Hopefully I find it more rewarding to write in this manner,
and you find the results more compelling to read! Stay tuned.</p>
<p>$ rm ~/sources/drewdevault.com/todo.txt</p>]]></description><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate></item><item><title>I shall toil at a reduced volume</title><link>https://drewdevault.com/2022/12/01/I-shall-toil-quietly.html</link><description><![CDATA[<p>Over the last nine years I have written 300,000 words for this blog on the
topics which are important to me. I am not certain that I have much left to say.</p>
<p>I can keep revisiting these topics for years, each time adding a couple more
years of wisdom and improvements to my writing skills to present my arguments
more effectively. However, I am starting to feel diminishing returns from my
writing. It does not seem like my words are connecting with readers anymore.
And, though the returns on my work seem to be diminishing, the costs are not.
Each new article spurs less discussion than the last, but provides an unwavering
supply of spiteful responses.</p>
<p>Software is still the same mess it was when I started writing and working, or
perhaps even worse. You can&rsquo;t overcome perverse incentives. As Cantrill once
<a href="https://www.youtube.com/watch?t=2483&amp;v=-zRN7XLCRhc">famously noted</a>, the lawnmower can&rsquo;t have empathy. The truth he did not
speak is that we all have some Oracle in our hearts, and the lawnmower is the
size of the entire industry.</p>
<p>I have grown tired of it. I will continue my work quietly, building the things I
believe in, and remaining true to my principles. I do not yet know if this is a
cessation or a siesta, but I do know that I will not write again for some time.
Thank you for reading, and good luck in your endeavours. I hope you found
something of value in these pages.</p>
<p>Here are some of the blog posts I am most proud of, should you want to revisit
them today or the next time you happen upon my website:</p>
<ul>
<li><a href="https://drewdevault.com/2021/04/26/Cryptocurrency-is-a-disaster.html">Cryptocurrency is an abject disaster</a></li>
<li><a href="https://drewdevault.com/2019/09/17/The-wrong-words-but-the-right-ideas.html">Don&rsquo;t sacrifice the right ideas to win the right words</a></li>
<li><a href="https://drewdevault.com/2022/02/13/Framing-accessibility-in-broader-terms.html">Framing accessibility in broader terms</a></li>
<li><a href="https://drewdevault.com/2022/03/29/free-software-free-infrastructure.html">It is important for free software to use free software infrastructure</a></li>
<li><a href="https://drewdevault.com/2021/01/20/FOSS-is-to-surrender-your-monopoly.html">Open source means surrendering your monopoly over commercial exploitation</a></li>
<li><a href="https://drewdevault.com/2021/12/23/Sustainable-creativity-post-copyright.html">Sustainable creativity in a world without copyright</a></li>
<li><a href="https://drewdevault.com/2021/03/23/Open-sourcing-video-games.html">The complete guide for open sourcing video games</a></li>
<li><a href="https://drewdevault.com/2020/11/06/Utility-vs-usability.html">Utility vs usability</a></li>
<li><a href="https://drewdevault.com/2020/05/05/We-are-complicit-in-our-employers-deeds.html">We are complicit in our employer&rsquo;s deeds</a></li>
<li><a href="https://drewdevault.com/2019/01/23/Why-I-use-old-hardware.html">Why I use old hardware</a></li>
</ul>]]></description><pubDate>Thu, 1 Dec 2022 00:00:00 +0000</pubDate></item><item><title>Codegen in Hare v2</title><link>https://drewdevault.com/2022/11/26/Hare-codegen-v2.html</link><description><![CDATA[<p>I spoke about code generation in Hare <a href="https://drewdevault.com/2022/05/14/generating-ioctls.html">back in May</a> when I wrote a tool for
generating ioctl numbers. I wrote another code generator over the past few
weeks, and it seems like a good time to revisit the topic on my blog to showcase
another approach, and the improvements we&rsquo;ve made for this use-case.</p>
<p>In this case, I wanted to generate code to implement IPC (inter-process
communication) interfaces for my operating system. I have designed a <abbr
title="domain-specific language">DSL</abbr> for describing these interfaces
— you can <a href="https://git.sr.ht/~sircmpwn/ipcgen/tree/master/item/doc/grammar.txt">read the grammar here</a>. This calls for a parser, which is
another interesting topic for Hare, but I&rsquo;ll set that aside for now and focus on
the code gen. Assume that, given a file like the following, we can parse it and
produce an AST:</p>
<pre tabindex="0"><code>namespace hello;

interface hello {
	call say_hello() void;
	call add(a: uint, b: uint) uint;
};
</code></pre><p>The key that makes the code gen approach we&rsquo;re looking at today is the
introduction of <a href="https://docs.harelang.org/strings/template">strings::template</a> to the Hare standard library. This module
is inspired by a similar feature from Python, <a href="https://docs.python.org/3/library/string.html#template-strings">string.Template</a>. An example
of its usage is provided in Hare&rsquo;s standard library documentation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">src</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;Hello, $user! Your balance is $$$balance.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">template</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">template</span><span class="o">::</span><span class="n">compile</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">defer</span><span class="w"> </span><span class="n">template</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">template</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">template</span><span class="o">::</span><span class="n">execute</span><span class="p">(</span><span class="o">&amp;</span><span class="n">template</span><span class="p">,</span><span class="w"> </span><span class="n">os</span><span class="o">::</span><span class="n">stdout</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="s">&#34;user&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;ddevault&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="s">&#34;balance&#34;</span><span class="p">,</span><span class="w"> </span><span class="mi">1000</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w"> </span><span class="c1">// &#34;Hello, ddevault! Your balance is $1000.
</span></span></span></code></pre></div><p>Makes sense? Cool. Let&rsquo;s see how this can be applied to code generation. The
interface shown above compiles to the following generated code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// This file was generated by ipcgen; do not modify by hand
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">use</span><span class="w"> </span><span class="n">errors</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">helios</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">rt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">HELLO_ID</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0xC01CAAC5</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">fn_hello_say_hello</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">fn</span><span class="p">(</span><span class="n">object</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">hello</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">fn_hello_add</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">fn</span><span class="p">(</span><span class="n">object</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">hello</span><span class="p">,</span><span class="w"> </span><span class="n">a</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">)</span><span class="w"> </span><span class="kt">uint</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">hello_iface</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">say_hello</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_hello_say_hello</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">add</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_hello_add</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">hello_label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="w"> </span><span class="kt">u64</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">SAY_HELLO</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HELLO_ID</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16u64</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ADD</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HELLO_ID</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16u64</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">hello</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">_iface</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">hello_iface</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">_endpoint</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">hello_dispatch</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">object</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">hello</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="p">(</span><span class="n">tag</span><span class="p">,</span><span class="w"> </span><span class="n">a1</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">recvraw</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">_endpoint</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">label</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="n">hello_label</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">hello_label</span><span class="o">::</span><span class="n">SAY_HELLO</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">object</span><span class="p">.</span><span class="n">_iface</span><span class="p">.</span><span class="n">say_hello</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">object</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">helios</span><span class="o">::</span><span class="n">reply</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid_cslot</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="p">;</span><span class="w"> </span><span class="c1">// callee stored the reply
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">abort</span><span class="p">();</span><span class="w"> </span><span class="c1">// TODO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">hello_label</span><span class="o">::</span><span class="n">ADD</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">rval</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">object</span><span class="p">.</span><span class="n">_iface</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">object</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">a1</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">rt</span><span class="o">::</span><span class="n">ipcbuf</span><span class="p">.</span><span class="n">params</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">helios</span><span class="o">::</span><span class="n">reply</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">rval</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid_cslot</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="p">;</span><span class="w"> </span><span class="c1">// callee stored the reply
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">abort</span><span class="p">();</span><span class="w"> </span><span class="c1">// TODO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">abort</span><span class="p">();</span><span class="w"> </span><span class="c1">// TODO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Generating this code starts with the following entry-point:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Generates code for a server to implement the given interface.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">server</span><span class="p">(</span><span class="n">out</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">ast</span><span class="o">::</span><span class="n">document</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;// This file was generated by ipcgen; do not modify by hand&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;use errors;&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;use helios;&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;use rt;&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">out</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">doc</span><span class="p">.</span><span class="n">interfaces</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">iface</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">doc</span><span class="p">.</span><span class="n">interfaces</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">s_iface</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="n">doc</span><span class="p">,</span><span class="w"> </span><span class="n">iface</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Here we start with some simple use of basic string formatting via
<a href="https://docs.harelang.org/fmt#fprintln">fmt::fprintln</a>. We see some of the same approach repeated in the
meatier functions like s_iface:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">s_iface</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">out</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">doc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">ast</span><span class="o">::</span><span class="n">document</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">iface</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">ast</span><span class="o">::</span><span class="n">interface</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">id</span><span class="o">:</span><span class="w"> </span><span class="n">ast</span><span class="o">::</span><span class="n">ident</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">iface</span><span class="p">.</span><span class="n">name</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gen_name_upper</span><span class="p">(</span><span class="o">&amp;</span><span class="n">id</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">id</span><span class="o">:</span><span class="w"> </span><span class="n">ast</span><span class="o">::</span><span class="n">ident</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">(</span><span class="n">doc</span><span class="p">.</span><span class="n">namespace</span><span class="o">...</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">append</span><span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">iface</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">id</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">genhash</span><span class="p">(</span><span class="o">&amp;</span><span class="n">id</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintfln</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;def {}_ID: u32 = 0x{:X};</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">hash</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Our first use of strings::template appears when we want to generate type aliases
for interface functions, via s_method_fntype. This is where some of the
trade-offs of this approach begin to present themselves.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">s_method_fntype_src</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="s">`export type fn_$iface_$method = fn(object: *$object$params) $result;`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">st_method_fntype</span><span class="o">:</span><span class="w"> </span><span class="n">tmpl</span><span class="o">::</span><span class="n">template</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@init</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">s_method_fntype</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">st_method_fntype</span><span class="o">=</span><span class="w"> </span><span class="n">tmpl</span><span class="o">::</span><span class="n">compile</span><span class="p">(</span><span class="n">s_method_fntype_src</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">s_method_fntype</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">out</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">iface</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">ast</span><span class="o">::</span><span class="n">interface</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">meth</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">ast</span><span class="o">::</span><span class="n">method</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">meth</span><span class="p">.</span><span class="n">caps_in</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"> </span><span class="c1">// TODO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">meth</span><span class="p">.</span><span class="n">caps_out</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"> </span><span class="c1">// TODO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strio</span><span class="o">::</span><span class="n">dynamic</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">meth</span><span class="p">.</span><span class="n">params</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprint</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;, &#34;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">meth</span><span class="p">.</span><span class="n">params</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">param</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">meth</span><span class="p">.</span><span class="n">params</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;{}: &#34;</span><span class="p">,</span><span class="w"> </span><span class="n">param</span><span class="p">.</span><span class="n">name</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ipc_type</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">param</span><span class="p">.</span><span class="n">param_type</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">meth</span><span class="p">.</span><span class="n">params</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprint</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;, &#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strio</span><span class="o">::</span><span class="n">dynamic</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="o">&amp;</span><span class="n">result</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ipc_type</span><span class="p">(</span><span class="o">&amp;</span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">meth</span><span class="p">.</span><span class="n">result</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">tmpl</span><span class="o">::</span><span class="n">execute</span><span class="p">(</span><span class="o">&amp;</span><span class="n">st_method_fntype</span><span class="p">,</span><span class="w"> </span><span class="n">out</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="s">&#34;method&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">meth</span><span class="p">.</span><span class="n">name</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="s">&#34;iface&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">iface</span><span class="p">.</span><span class="n">name</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="s">&#34;object&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">iface</span><span class="p">.</span><span class="n">name</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="s">&#34;params&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">strio</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="s">&#34;result&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">strio</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">result</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">out</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The simple string substitution approach of strings::template prevents it from
being as generally useful as a full-blown templating engine ala jinja2. To work
around this, we have to write Hare code which does things like slurping up the
method parameters into a <a href="https://docs.harelang.org/strio#dynamic">strio::dynamic</a> buffer where we might instead reach
for something like
<code>{% for param in method.params %}</code> in
jinja2. Once we have prepared all of our data in a format suitable for a linear
string substitution, we can pass it to
<abbr title="This file aliases strings::template as tmpl to simplify things a bit.">tmpl</abbr>::execute.
The actual template is stored in a global which is compiled during @init, which
runs at program startup. Anything which requires a loop to compile, such as the
parameter list, is fetched out of the strio buffer and passed to the template.</p>
<p>We can explore a slightly different approach when we generate this part of the
code, back up in the s_iface function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">hello_iface</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">say_hello</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_hello_say_hello</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">add</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">fn_hello_add</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>To output this code, we render several templates one after another, rather than
slurping up the generated code into heap-allocated string buffers to be passed
into a single template.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">s_iface_header_src</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="s">`export type $iface_iface = struct {`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">st_iface_header</span><span class="o">:</span><span class="w"> </span><span class="n">tmpl</span><span class="o">::</span><span class="n">template</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">s_iface_method_src</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="s">`	$method: *fn_$iface_$method,`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">st_iface_method</span><span class="o">:</span><span class="w"> </span><span class="n">tmpl</span><span class="o">::</span><span class="n">template</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@init</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">s_iface</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">st_iface_header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tmpl</span><span class="o">::</span><span class="n">compile</span><span class="p">(</span><span class="n">s_iface_header_src</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">st_iface_method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tmpl</span><span class="o">::</span><span class="n">compile</span><span class="p">(</span><span class="n">s_iface_method_src</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">tmpl</span><span class="o">::</span><span class="n">execute</span><span class="p">(</span><span class="o">&amp;</span><span class="n">st_iface_header</span><span class="p">,</span><span class="w"> </span><span class="n">out</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="s">&#34;iface&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">iface</span><span class="p">.</span><span class="n">name</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">out</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">iface</span><span class="p">.</span><span class="n">methods</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">meth</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">iface</span><span class="p">.</span><span class="n">methods</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">tmpl</span><span class="o">::</span><span class="n">execute</span><span class="p">(</span><span class="o">&amp;</span><span class="n">st_iface_method</span><span class="p">,</span><span class="w"> </span><span class="n">out</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="s">&#34;iface&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">iface</span><span class="p">.</span><span class="n">name</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="s">&#34;method&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">meth</span><span class="p">.</span><span class="n">name</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">out</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;};</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>The <a href="https://git.sr.ht/~sircmpwn/ipcgen/tree/2cdc53095a052b4f5ce3fdc6e410f2dd17eea54d/item/gen/server.ha">remainder of the code</a> is fairly similar.</p>
<p>strings::template is less powerful than a more sophisticated templating system
might be, such as Golang&rsquo;s text/template. A more sophisticated templating engine
could be implemented for Hare, but it would be more challenging — no
reflection or generics in Hare — and would not be a great candidate for
the standard library. This approach hits the sweet spot of simplicity and
utility that we&rsquo;re aiming for in the Hare stdlib. strings::template is
implemented in <a href="https://git.sr.ht/~sircmpwn/hare/tree/da003e45ced4991b1bae282169dcf942e1e4b235/item/strings/template/template.ha">a single ~180 line file</a>.</p>
<p>I plan to continue polishing this tool so I can use it to describe interfaces
for communications between userspace drivers and other low-level userspace
services in my operating system. If you have any questions, feel free to post
them on my public inbox, or shoot them over to my new <a href="https://fosstodon.org/@drewdevault">fediverse account</a>.
Until next time!</p>]]></description><pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate></item><item><title>In praise of Plan 9</title><link>https://drewdevault.com/2022/11/12/In-praise-of-Plan-9.html</link><description><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs">Plan 9</a> is an operating system designed by Bell Labs. It&rsquo;s the OS they wrote
<em>after</em> Unix, with the benefit of hindsight. It is the most interesting
operating system that you&rsquo;ve never heard of, and, in my opinion, the best
operating system design to date. Even if you haven&rsquo;t heard of Plan 9, the
designers of whatever OS you <em>do</em> use have heard of it, and have incorporated
some of its ideas into your OS.</p>
<p>Plan 9 is a research operating system, and exists to answer questions about
ideas in OS design. As such, the Plan 9 experience is in essence an exploration
of the interesting ideas it puts forth. Most of the ideas are small. Many of
them found a foothold in the broader ecosystem — UTF-8, goroutines, /proc,
containers, union filesystems, these all have their roots in Plan 9 — but
many of its ideas, even the good ones, remain unexplored outside of Plan 9. As a
consequence, Plan 9 exists at the center of a fervor of research achievements
which forms a unique and profoundly interesting operating system.</p>
<p>One example I often raise to illustrate the design ideals of Plan 9 is to
compare its approach to network programming with that of the Unix standard,
Berkeley sockets. BSD sockets fly in the face of Unix sensibilities and are
quite alien on the system, though by now everyone has developed stockholm
syndrome with respect to them so they don&rsquo;t notice. When everything is supposed
to be a file on Unix, why is it that the networking API is entirely implemented
with special-purpose syscalls and ioctls? On Unix, creating a TCP connection
involves calling the &ldquo;socket&rdquo; syscall to create a magic file descriptor, then
the &ldquo;connect&rdquo; syscall to establish a connection. Plan 9 is much more Unix in its
approach: you open /net/tcp/clone to reserve a connection, and read the
connection ID from it. Then you open /net/tcp/n/ctl and write &ldquo;connect
127.0.0.1!80&rdquo; to it, where &ldquo;n&rdquo; is that connection ID. Now you can open
/net/tcp/n/data and that file is a full-duplex stream. No magic syscalls, and
you can trivially implement it in a shell script.</p>
<p>This composes elegantly with another idea from Plan 9: the 9P protocol. All file
I/O on the entire system uses the 9P protocol, which defines operations like
read and write. This protocol is network transparent, and you can mount remote
servers into your filesystem namespace and access their files over 9P. You can
do something similar on Unix, but on Plan 9 you get much more mileage from the
idea because everything is <em>actually</em> a file, and there are no magic syscalls or
ioctls. For instance, your Ethernet interface is at /net/ether0, and everything
in there is just a file. Say you want to establish a VPN: you simply mount a
remote server&rsquo;s /net/ether0 at /net/ether1, and now you have a VPN. That&rsquo;s <em>it</em>.</p>
<p>The mountpoints are interesting as well, because they exist within a per-process
filesystem namespace. Mounting filesystems does not require special permissions
like on Unix, because these mounts only exist within the process tree that
creates them, rather than modifying global state. The filesystems can also be
implemented in userspace rather trivially via the 9P protocol, similar to FUSE
but much more straightforward. Many programs provide a programmable/scriptable
interface via a special filesystem such as this.</p>
<p>Userspace programs can also provide filesystems compatible with those normally
implemented by kernel drivers, like /net/ether0, and provide these to processes
in their namespace. For example, /dev/draw is analogous to a framebuffer device:
you open it to write pixels to the screen. The window manager, Rio, implements
a /dev/draw-like interface in userspace, then mounts it in the filesystem
namespace of its children. All GUI programs can thus be run both on a
framebuffer or in a window, without any awareness of which it&rsquo;s using. The same
is also true over the network: to implement VNC-like functionality, just mount
your local /dev/draw and /dev/kbd on a remote server. Add /dev/audio if you
like.</p>
<p>These ideas can also be built upon to form something resembling a container
runtime, pre-dating even early concepts like BSD jails by several years, and
implementing them much more effectively. Recall that everything <em>really is</em> just
a file on Plan 9, unlike Unix. Access to the hardware is provided through normal
files, and per-process namespaces do not require special permissions to modify
mountpoints. Making a container is thus trivial: just unmount all of the
hardware you don&rsquo;t want the sandboxed program to have access to. Done. You don&rsquo;t
even have to be root. Want to forward a TCP port? Write an implementation of
/net/tcp which is limited to whatever ports you need — perhaps with just a
hundred lines of shell scripting — and mount it into the namespace.</p>
<p>The shell, rc, is also wonderful. The debugger is terribly interesting, and its
ideas didn&rsquo;t seem to catch on with the likes of gdb. The editors, acme and sam,
are also interesting and present a unique user interface that you can&rsquo;t find
anywhere else. The plumber is cool, it&rsquo;s like &ldquo;what if xdg-open was good
actually&rdquo;. The kernel is concise and a pleasure to read. The entire operating
system, kernel <em>and</em> userspace, can be built from source code on my 12 year old
laptop in about 5 minutes. The network database, ndb, is brilliant. The entire
OS is stuffed to the brim with interesting ideas, all of them implemented with
elegance, conciseness, and simplicity.</p>
<p>Plan 9 failed, in a sense, because Unix was simply too big and too entrenched by
the time Plan 9 came around. It was doomed by its predecessor. Nevertheless, its
design ideas and implementation resonate deeply with me, and have provided an
endless supply of inspiration for my own work. I think that everyone owes it to
themselves to spend a few weeks messing around with and learning about Plan 9.
The dream is kept alive by <a href="http://9front.org/">9front</a>, which is the most actively maintained
fork of Plan 9 available today. Install it on your ThinkPad and mess around.</p>
<p>I will offer a caveat, however: leave your expectations at the door. Plan 9 is
not Unix, it is not Unix-compatible, and it is certainly not yet another Linux
distribution. Everything you&rsquo;re comfortable and familiar with in your normal
Unix setup will not translate to Plan 9. Come to Plan 9 empty handed, and let it
fill those hands with its ideas. You will come away from the experience as a
better programmer.</p>]]></description><pubDate>Sat, 12 Nov 2022 00:00:00 +0000</pubDate></item><item><title>Notes from kernel hacking in Hare, part 3: serial driver</title><link>https://drewdevault.com/2022/10/27/Kernel-hacking-with-Hare-part-3.html</link><description><![CDATA[<p>Today I would like to show you the implementation of the first userspace driver
for Helios: a simple serial driver. All of the code we&rsquo;re going to look at today
runs in userspace, not in the kernel, so strictly speaking this should be &ldquo;notes
from OS hacking in Hare&rdquo;, but I won&rsquo;t snitch if you don&rsquo;t.</p>
<p><em>Note: In the <a href="https://drewdevault.com/2022/10/02/Kernel-hacking-with-Hare-part-2.html">previous entry</a> to this series, I promised to cover the
userspace threading API in this post. I felt like covering this instead. Sorry!</em></p>
<p>A serial port provides a simple protocol for transferring data between two
systems. It generalizes a bit, but for our purposes we can just think of this as
a terminal which you can use over a simple cable and a simple protocol. It&rsquo;s a
standard x86_64 feature (though one which has been out of style for a couple of
decades now), and its simple design (and high utility) makes it a good choice
for the first driver to write for <a href="https://sr.ht/~sircmpwn/helios">Helios</a>. We&rsquo;re going to look at the
following details today:</p>
<ol>
<li>The system&rsquo;s initramfs</li>
<li>The driver loader</li>
<li>The serial driver itself</li>
</ol>
<p>The initramfs used by Helios, for the time being, is just a tarball. I imported
<a href="https://docs.harelang.org/format/tar">format::tar</a> from the standard library, a module which I designed for this
express purpose, and made a few minor tweaks to make it suitable for Helios'
needs. I also implemented seeking within a tar entry to make it easier to write
an ELF loader from it. The bootloader loads this tarball into memory, the kernel
provides page capabilities to init for it, and then we can map it into memory
and study it, something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">base</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">map_range</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">vspace</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">desc</span><span class="p">.</span><span class="n">pages</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">slice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">base</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">)[..</span><span class="n">desc</span><span class="p">.</span><span class="n">length</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">fixed</span><span class="p">(</span><span class="n">slice</span><span class="p">,</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">mode</span><span class="o">::</span><span class="n">READ</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">rd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tar</span><span class="o">::</span><span class="n">read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Pulling a specific driver out of it looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Loads a driver from the bootstrap tarball.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">earlyload</span><span class="p">(</span><span class="n">fs</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">bootstrapfs</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="n">process</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">tar</span><span class="o">::</span><span class="n">reset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fs</span><span class="p">.</span><span class="n">rd</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">ltrim</span><span class="p">(</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;/&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">ent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">tar</span><span class="o">::</span><span class="n">next</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fs</span><span class="p">.</span><span class="n">rd</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">ent</span><span class="o">:</span><span class="w"> </span><span class="n">tar</span><span class="o">::</span><span class="n">entry</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">ent</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">tar</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">abort</span><span class="p">(</span><span class="s">&#34;Invalid bootstrap.tar file&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="n">tar</span><span class="o">::</span><span class="n">skip</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ent</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">path</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="c1">// TODO: Better error handling here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">			</span><span class="k">const</span><span class="w"> </span><span class="n">proc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">load_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ent</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">abort</span><span class="p">(</span><span class="s">&#34;Failed to load driver from boostrap&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">abort</span><span class="p">(</span><span class="s">&#34;Failed to load driver from boostrap&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">proc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">process</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">yield</span><span class="w"> </span><span class="n">proc</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">helios</span><span class="o">::</span><span class="n">task_resume</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">task</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">proc</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">abort</span><span class="p">(</span><span class="s">&#34;Missing bootstrap driver&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This code finds a file in the tarball with the given path (e.g.
<code>drivers/serial</code>), creates a process with the driver loader, then resumes the
thread and the driver is running. Let&rsquo;s take a look at that driver loader next.
The load_driver entry point takes an I/O handle to an ELF file and loads it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">load_driver</span><span class="p">(</span><span class="n">image</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">process</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">loader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">newloader</span><span class="p">(</span><span class="n">image</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">earlyconf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">driver_earlyconfig</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">cspace_radix</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">12</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">load_earlyconfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">earlyconf</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">loader</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">proc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">newprocess</span><span class="p">(</span><span class="n">earlyconf</span><span class="p">.</span><span class="n">cspace_radix</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">load</span><span class="p">(</span><span class="o">&amp;</span><span class="n">loader</span><span class="p">,</span><span class="w"> </span><span class="n">proc</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">load_config</span><span class="p">(</span><span class="n">proc</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">loader</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">regs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">context</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">rip</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">loader</span><span class="p">.</span><span class="n">header</span><span class="p">.</span><span class="n">e_entry</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">rsp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">INIT_STACK_ADDR</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">task_writeregisters</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">task</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">regs</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">proc</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This is essentially a standard ELF loader, which it calls via the more general
&ldquo;newprocess&rdquo; and &ldquo;load&rdquo; functions, but drivers have an extra concern: the driver
manifest. The &ldquo;load_earlyconfig&rdquo; processes manifest keys which are necessary to
configure prior to loading the ELF image, and the &ldquo;load_config&rdquo; function takes
care of the rest of the driver configuration. The remainder of the code
configures the initial thread.</p>
<p>The actual driver manifest is an INI file which is embedded in a special ELF
section in driver binaries. The manifest for the serial driver looks like this:</p>
<pre tabindex="0"><code>[driver]
name=pcserial
desc=Serial driver for x86_64 PCs

[cspace]
radix=12

[capabilities]
0:serial =
1:note = 
2:cspace = self
3:ioport = min=3F8, max=400
4:ioport = min=2E8, max=2F0
5:irq = irq=3, note=1
6:irq = irq=4, note=1
</code></pre><p>Helios is a capability-oriented system, and in order to do anything useful, each
process needs to have capabilities to work with. Each driver declares exactly
what capabilities it needs and receives only these capabilities, and nothing
else. This provides stronger isolation than Unix systems can offer (even with
something like OpenBSD&rsquo;s pledge(2)) — this driver cannot even allocate
memory.</p>
<p>A standard x86_64 ISA serial port uses two I/O port ranges, 0x3F8-0x400 and
0x2E8-0x2F0, as well as two IRQs, IRQ 3 and 4, together providing support for up
to four serial ports. The driver first requests a &ldquo;serial&rdquo; capability, which is
a temporary design for an IPC endpoint that the driver will use to actually
process read or write requests. This will be replaced with a more sophisticated
device manager system in the future. It also creates a notification capability,
which is later used to deliver the IRQs, and requests a capability for its own
cspace so that it can manage capability slots. This will be necessary later on.
Following this it requests capabilities for the system resources it needs,
namely the necessary I/O ports and IRQs, the latter configured to be delivered
to the notification in capability slot 1.</p>
<p>With the driver isolated in its own address space, running in user mode, and
only able to invoke this set of capabilities, it&rsquo;s very limited in what kind of
exploits it&rsquo;s vulnerable to. If there&rsquo;s a vulnerability here, the worst that
could happen is that a malicious actor on the other end of the serial port could
crash the driver, which would then be rebooted by the service manager. On Linux,
a bug in the serial driver can be used to compromise the entire system.</p>
<p>So, the driver loader parses this file and allocates the requested capabilities
for the driver. I&rsquo;ll skip most of the code, it&rsquo;s just a boring INI file parser,
but the important bit is the table for capability allocations:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">capconfigfn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">fn</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">proc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">process</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">config</span><span class="o">:</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">error</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Note: keep these tables alphabetized
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span><span class="w"> </span><span class="n">capconfigtab</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="k">_</span><span class="p">](</span><span class="k">const</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">capconfigfn</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="s">&#34;cspace&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cap_cspace</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="s">&#34;endpoint&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cap_endpoint</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="s">&#34;ioport&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cap_ioport</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="s">&#34;irq&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cap_irq</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="s">&#34;note&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cap_note</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="s">&#34;serial&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cap_serial</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// TODO: More
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>This table defines functions which, when a given INI key in the [capabilities]
section is found, provisions the requested capabilities. This list is not
complete; in the future all kernel objects will be added as well as
userspace-defined interfaces (similar to serial) which implement various driver
interfaces, such as &lsquo;fs&rsquo; or &lsquo;gpu&rsquo;. Let&rsquo;s start with the notification capability:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">cap_note</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">proc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">process</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">config</span><span class="o">:</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">note</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">newnote</span><span class="p">()</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">note</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">copyto</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">cspace</span><span class="p">,</span><span class="w"> </span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="n">note</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This capability takes no configuration arguments, so we first simply check that
the value is empty. Then we create a notification, copy it into the driver&rsquo;s
capability space at the requested capability address, then destroy our copy.
Simple!</p>
<p>The I/O port capability is a bit more involved: it does accept configuration
parameters, namely what I/O port range the driver needs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">cap_ioport</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">proc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">process</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">config</span><span class="o">:</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0u16</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0u16</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">have_min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">,</span><span class="w"> </span><span class="n">have_max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">tokenize</span><span class="p">(</span><span class="n">config</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;,&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">next_token</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">tok</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">trim</span><span class="p">(</span><span class="n">tok</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">cut</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;=&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">field</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;min&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">have_min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="o">&amp;</span><span class="n">min</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;max&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">have_max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="o">&amp;</span><span class="n">max</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">strconv</span><span class="o">::</span><span class="n">stou16b</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="w"> </span><span class="n">base</span><span class="o">::</span><span class="n">HEX</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">u</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="o">*</span><span class="n">field</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">u</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">have_min</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="o">!</span><span class="n">have_max</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">ioport</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">ioctl_issue</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">INIT_CAP_IOCONTROL</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">ioport</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">copyto</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">cspace</span><span class="p">,</span><span class="w"> </span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="n">ioport</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Here we split the configuration string on commas and parse each as a key/value
pair delimited by an equal sign (&quot;=&quot;), looking for a key called &ldquo;min&rdquo; and
another called &ldquo;max&rdquo;. At the moment the config parsing is just implemented in
this function directly, but in the future it might make sense to write a small
abstraction for capability configurations like this. Once we know the I/O port
range the user wants, then we issue an I/O port capability for that range and
copy it into the driver&rsquo;s cspace.</p>
<p>IRQs are a bit more involved still. An IRQ capability must be configured to
deliver IRQs to a notification object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">cap_irq</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">proc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">process</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">config</span><span class="o">:</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">irq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0u8</span><span class="p">,</span><span class="w"> </span><span class="n">note</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">have_irq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">,</span><span class="w"> </span><span class="n">have_note</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// ...config string parsing omitted...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">_note</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">copyfrom</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">cspace</span><span class="p">,</span><span class="w"> </span><span class="n">note</span><span class="p">,</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">CADDR_UNDEF</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">_note</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="p">(</span><span class="n">ct</span><span class="p">,</span><span class="w"> </span><span class="k">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">identify</span><span class="p">(</span><span class="n">_note</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ct</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">ctype</span><span class="o">::</span><span class="n">NOTIFICATION</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">// TODO: More semantically meaningful errors would be nice
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">irq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">irqctl_issue</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">INIT_CAP_IRQCONTROL</span><span class="p">,</span><span class="w"> </span><span class="n">_note</span><span class="p">,</span><span class="w"> </span><span class="n">irq</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">irq</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">copyto</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">cspace</span><span class="p">,</span><span class="w"> </span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="n">irq</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>In order to do this, the driver loader copies the notification capability <em>from</em>
the driver&rsquo;s cspace and into the loader&rsquo;s cspace, then creates an IRQ with that
notification. It copies the new IRQ capability into the driver, then destroys
its own copy of the IRQ and notification.</p>
<p>In this manner, the driver can declaratively state which capabilities it needs,
and the loader can prepare an environment for it with these capabilities
prepared. Once these capabilities are present in the driver&rsquo;s cspace, the driver
can invoke them by addressing the numbered capability slots in a send or receive
syscall.</p>
<p>To summarize, the loader takes an I/O object (which we know is sourced from the
bootstrap tarball) from which an ELF file can be read, finds a driver manifest,
then creates a process and fills the cspace with the requested capabilities,
loads the program into its address space, and starts the process.</p>
<p>Next, let&rsquo;s look at the serial driver that we just finished loading.</p>
<p>Let me first note that this serial driver is a proof-of-concept at this time. A
future serial driver will take a capability for a device manager object, then
probe each serial port and provision serial devices for each working serial
port. It will define an API which supports additional serial-specific features,
such as configuring the baud rate. For now, it&rsquo;s pretty basic.</p>
<p>This driver implements a simple event loop:</p>
<ol>
<li>Configure the serial port</li>
<li>Wait for an interrupt or a read/write request from the user</li>
<li>On interrupt, process the interrupt, writing buffered data or buffering
readable data</li>
<li>On a user request, buffer writes or unbuffer reads</li>
<li>GOTO 2</li>
</ol>
<p>The driver starts by defining some constants for the capability slots we set up
in the manifest:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">def</span><span class="w"> </span><span class="n">EP</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IRQ</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">CSPACE</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IRQ3</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IRQ4</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">6</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>It also defines some utility code for reading and writing to the COM registers,
and constants for each of the registers defined by the interface.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// COM1 port
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">def</span><span class="w"> </span><span class="n">COM1</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x3F8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// COM2 port
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">def</span><span class="w"> </span><span class="n">COM2</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x2E8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Receive buffer register
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">def</span><span class="w"> </span><span class="n">RBR</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Transmit holding regiser
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">def</span><span class="w"> </span><span class="n">THR</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...other registers omitted...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">ioports</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="k">_</span><span class="p">](</span><span class="kt">u16</span><span class="p">,</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="n">COM1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">),</span><span class="w"> </span><span class="c1">// 3 is the I/O port capability address
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="p">(</span><span class="n">COM2</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">comin</span><span class="p">(</span><span class="n">port</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w"> </span><span class="n">register</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">)</span><span class="w"> </span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">ioports</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="p">(</span><span class="n">base</span><span class="p">,</span><span class="w"> </span><span class="n">cap</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ioports</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">base</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">port</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">ioport_in8</span><span class="p">(</span><span class="n">cap</span><span class="p">,</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">register</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">abort</span><span class="p">(</span><span class="s">&#34;invalid port&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">comout</span><span class="p">(</span><span class="n">port</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w"> </span><span class="n">register</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w"> </span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">ioports</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="p">(</span><span class="n">base</span><span class="p">,</span><span class="w"> </span><span class="n">cap</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ioports</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">base</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">port</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">helios</span><span class="o">::</span><span class="n">ioport_out8</span><span class="p">(</span><span class="n">cap</span><span class="p">,</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">register</span><span class="p">,</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">abort</span><span class="p">(</span><span class="s">&#34;invalid port&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>We also define some statically-allocated data structures to store state for each
COM port, and a function to initialize the port:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">comport</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">port</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rbuf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">4096</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">wbuf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">4096</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rpending</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">wpending</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">ports</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="k">_</span><span class="p">]</span><span class="n">comport</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">comport</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">COM1</span><span class="p">,</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">comport</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">COM2</span><span class="p">,</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">com_init</span><span class="p">(</span><span class="n">com</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">comport</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">com</span><span class="p">.</span><span class="n">rpending</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">com</span><span class="p">.</span><span class="n">rbuf</span><span class="p">[..</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">com</span><span class="p">.</span><span class="n">wpending</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">com</span><span class="p">.</span><span class="n">wbuf</span><span class="p">[..</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">IER</span><span class="p">,</span><span class="w"> </span><span class="mh">0x00</span><span class="p">);</span><span class="w">	</span><span class="c1">// Disable interrupts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">LCR</span><span class="p">,</span><span class="w"> </span><span class="mh">0x80</span><span class="p">);</span><span class="w">	</span><span class="c1">// Enable divisor mode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">DL_LSB</span><span class="p">,</span><span class="w"> </span><span class="mh">0x01</span><span class="p">);</span><span class="w">	</span><span class="c1">// Div Low:  01: 115200 bps
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">DL_MSB</span><span class="p">,</span><span class="w"> </span><span class="mh">0x00</span><span class="p">);</span><span class="w">	</span><span class="c1">// Div High: 00
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">LCR</span><span class="p">,</span><span class="w"> </span><span class="mh">0x03</span><span class="p">);</span><span class="w">	</span><span class="c1">// Disable divisor mode, set parity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">FCR</span><span class="p">,</span><span class="w"> </span><span class="mh">0xC7</span><span class="p">);</span><span class="w">	</span><span class="c1">// Enable FIFO and clear
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">IER</span><span class="p">,</span><span class="w"> </span><span class="n">ERBFI</span><span class="p">);</span><span class="w">	</span><span class="c1">// Enable read interrupt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The basics are in place. Let&rsquo;s turn our attention to the event loop.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">com_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">com_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ports</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">irq_ack</span><span class="p">(</span><span class="n">IRQ3</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">irq_ack</span><span class="p">(</span><span class="n">IRQ4</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">poll</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="k">_</span><span class="p">]</span><span class="n">pollcap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">pollcap</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IRQ</span><span class="p">,</span><span class="w"> </span><span class="n">events</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pollflags</span><span class="o">::</span><span class="n">RECV</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">pollcap</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">cap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">EP</span><span class="p">,</span><span class="w"> </span><span class="n">events</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pollflags</span><span class="o">::</span><span class="n">RECV</span><span class="w"> </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">helios</span><span class="o">::</span><span class="n">poll</span><span class="p">(</span><span class="n">poll</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">poll</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">events</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">pollflags</span><span class="o">::</span><span class="n">RECV</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">poll_irq</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">poll</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">events</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">pollflags</span><span class="o">::</span><span class="n">RECV</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">poll_endpoint</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>We initialize two COM ports first, using the function we were just reading. Then
we ACK any IRQs that might have already been pending when the driver starts up,
and we enter the event loop proper. Here we are polling on two capabilities,
the notification to which IRQs are delivered, and the endpoint which provides
the serial driver&rsquo;s external API.</p>
<p>The state for each serial port includes a read buffer and a write buffer,
defined in the comport struct shown earlier. We configure the COM port to
interrupt when there&rsquo;s data available to read, then pull it into the read
buffer. If we have pending data to write, we configure it to interrupt when it&rsquo;s
ready to write more data, otherwise we leave this interrupt turned off. The
&ldquo;poll_irq&rdquo; function handles these interrupts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">poll_irq</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">wait</span><span class="p">(</span><span class="n">IRQ</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">irq_ack</span><span class="p">(</span><span class="n">IRQ3</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">irq_ack</span><span class="p">(</span><span class="n">IRQ4</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">ports</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">iir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">comin</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">IIR</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">iir</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">port_irq</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ports</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">iir</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">port_irq</span><span class="p">(</span><span class="n">com</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">comport</span><span class="p">,</span><span class="w"> </span><span class="n">iir</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">iir</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">com_read</span><span class="p">(</span><span class="n">com</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">iir</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">com_write</span><span class="p">(</span><span class="n">com</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The IIR register is the &ldquo;interrupt identification register&rdquo;, which tells us why
the interrupt occurred. If it was because the port is readable, we call
&ldquo;com_read&rdquo;. If the interrupt occurred because the port is writable, we call
&ldquo;com_write&rdquo;. Let&rsquo;s start with com_read. This interrupt is always enabled so
that we can immediately start buffering data as the user types it into the
serial port.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Reads data from the serial port&#39;s RX FIFO.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">com_read</span><span class="p">(</span><span class="n">com</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">comport</span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">n</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">comin</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">LSR</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">RBF</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">RBF</span><span class="p">;</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">ch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">comin</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">RBR</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">rpending</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">rbuf</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="c1">// If the buffer is full we just drop chars
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">			</span><span class="k">static</span><span class="w"> </span><span class="k">append</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">rpending</span><span class="p">,</span><span class="w"> </span><span class="n">ch</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// This part will be explained later:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">pending_read</span><span class="p">.</span><span class="n">reply</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rconsume</span><span class="p">(</span><span class="n">com</span><span class="p">,</span><span class="w"> </span><span class="n">pending_read</span><span class="p">.</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">helios</span><span class="o">::</span><span class="n">send</span><span class="p">(</span><span class="n">pending_read</span><span class="p">.</span><span class="n">reply</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">pending_read</span><span class="p">.</span><span class="n">reply</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This code is pretty simple. For as long as the COM port is readable, read a
character from it. If there&rsquo;s room in the read buffer, append this character to
it.</p>
<p>How about writing? Well, we need some way to fill the write buffer first. This
part is pretty straightforward:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Append data to a COM port read buffer, returning the number of bytes buffered
</span></span></span><span class="line"><span class="cl"><span class="c1">// successfully.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">com_wbuffer</span><span class="p">(</span><span class="n">com</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">comport</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">data</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">z</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">wpending</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">wbuf</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">wbuf</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">wpending</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">static</span><span class="w"> </span><span class="k">append</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">wpending</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="p">[..</span><span class="n">z</span><span class="p">]</span><span class="o">...</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">com_write</span><span class="p">(</span><span class="n">com</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">z</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This code just adds data to the write buffer, making sure not to exceed the
buffer length (note that in Hare this would cause an assertion, not a buffer
overflow). Then we call &ldquo;com_write&rdquo;, which does the actual writing to the COM
port.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Writes data to the serial port&#39;s TX FIFO.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">com_write</span><span class="p">(</span><span class="n">com</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">comport</span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">comin</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">LSR</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">THRE</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">THRE</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">ier</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">comin</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">IER</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">IER</span><span class="p">,</span><span class="w"> </span><span class="n">ier</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ETBEI</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">16</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">wpending</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">THR</span><span class="p">,</span><span class="w"> </span><span class="n">com</span><span class="p">.</span><span class="n">wpending</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">static</span><span class="w"> </span><span class="k">delete</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">wpending</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">ier</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">comin</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">IER</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">wpending</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">IER</span><span class="p">,</span><span class="w"> </span><span class="n">ier</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="o">~</span><span class="n">ETBEI</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">comout</span><span class="p">(</span><span class="n">com</span><span class="p">.</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">IER</span><span class="p">,</span><span class="w"> </span><span class="n">ier</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ETBEI</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>If the COM port is not ready to write data, we enable an interrupt which will
tell us when it is and return. Otherwise, we write up to 16 bytes — the
size of the COM port&rsquo;s FIFO — and remove them from the write buffer. If
there&rsquo;s more data to write, we enable the write interrupt, or we disable it if
there&rsquo;s nothing left. When enabled, this will cause an interrupt to fire when
(1) we have data to write and (2) the serial port is ready to write it, and our
event loop will call this function again.</p>
<p>That covers all of the code for driving the actual serial port. What about the
interface for someone to actually use this driver?</p>
<p>The &ldquo;serial&rdquo; capability defined in the manifest earlier is a temporary construct
to provision some means of communicating with the driver. It provisions an
endpoint capability (which is an IPC primitive on Helios) and stashes it away
somewhere in the init process so that I can write some temporary test code to
actually read or write to the serial port. Either request is done by &ldquo;call&quot;ing
the endpoint with the desired parameters, which will cause the poll in the event
loop to wake as the endpoint becomes receivable, calling &ldquo;poll_endpoint&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">poll_endpoint</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">addr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0u64</span><span class="p">,</span><span class="w"> </span><span class="n">amt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0u64</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">recv</span><span class="p">(</span><span class="n">EP</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">amt</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">label</span><span class="p">(</span><span class="n">tag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">label</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">addr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">addr</span><span class="p">[..</span><span class="n">amt</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">com_wbuffer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="w"> </span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">helios</span><span class="o">::</span><span class="n">reply</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">addr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">addr</span><span class="p">[..</span><span class="n">amt</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rpending</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">const</span><span class="w"> </span><span class="n">reply</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">store_reply</span><span class="p">(</span><span class="n">helios</span><span class="o">::</span><span class="n">CADDR_UNDEF</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">pending_read</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">read</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">reply</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">reply</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">const</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rconsume</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="w"> </span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">helios</span><span class="o">::</span><span class="n">reply</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">abort</span><span class="p">();</span><span class="w"> </span><span class="c1">// TODO: error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>&ldquo;Calls&rdquo; in Helios work similarly to seL4. Essentially, when you &ldquo;call&rdquo; an
endpoint, the calling thread blocks to receive the reply and places a reply
capability in the receiver&rsquo;s thread state. The receiver then processes their
message and &ldquo;replies&rdquo; to the reply capability to wake up the calling thread and
deliver the reply.</p>
<p>The message label is used to define the requested operation. For now, 0 is read
and 1 is write. For writes, we append the provided data to the write buffer and
reply with the number of bytes we buffered, easy breezy.</p>
<p>Reads are a bit more involved. If we don&rsquo;t immediately have any data in the read
buffer, we have to wait until we do to reply. We copy the reply from its special
slot in our thread state into our capability space, so we can use it later. This
operation is why our manifest requires cspace = self. Then we store the reply
capability and buffer in a variable and move on, waiting for a read interrupt.
On the other hand, if there <em>is</em> data buffered, we consume it and reply
immediately.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">rconsume</span><span class="p">(</span><span class="n">com</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">comport</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">amt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">amt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rpending</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">amt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rpending</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">buf</span><span class="p">[..</span><span class="n">amt</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rpending</span><span class="p">[..</span><span class="n">amt</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">static</span><span class="w"> </span><span class="k">delete</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rpending</span><span class="p">[..</span><span class="n">amt</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">amt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Makes sense?</p>
<p>That basically covers the entire serial driver. Let&rsquo;s take a quick peek at the
other side: the process which wants to read from or write to the serial port.
For the time being this is all temporary code to test the driver with, and not
the long-term solution for passing out devices to programs. The init process
keeps a list of serial devices configured on the system:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">serial</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">proc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">process</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ep</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">serials</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">serial</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">register_serial</span><span class="p">(</span><span class="n">proc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">process</span><span class="p">,</span><span class="w"> </span><span class="n">ep</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">append</span><span class="p">(</span><span class="n">serials</span><span class="p">,</span><span class="w"> </span><span class="n">serial</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">proc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">proc</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ep</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ep</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This function is called by the driver manifest parser like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">cap_serial</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">proc</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">process</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">config</span><span class="o">:</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">ep</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">newendpoint</span><span class="p">()</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">copyto</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">cspace</span><span class="p">,</span><span class="w"> </span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="n">ep</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">register_serial</span><span class="p">(</span><span class="n">proc</span><span class="p">,</span><span class="w"> </span><span class="n">ep</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>We make use of the serial port in the init process&rsquo;s main function with a little
test loop to echo reads back to writes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">(</span><span class="n">bi</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">rt</span><span class="o">::</span><span class="n">bootinfo</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">log</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="s">&#34;[init] Hello from Mercury!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">bootstrap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bootstrapfs_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bi</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">bootstrapfs_finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bootstrap</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">earlyload</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bootstrap</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;/drivers/serial&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">log</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="s">&#34;[init] begin echo serial port&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">serial_read</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">serial_write</span><span class="p">(</span><span class="n">buf</span><span class="p">[..</span><span class="n">n</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The &ldquo;serial_read&rdquo; and &ldquo;serial_write&rdquo; functions are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">serial_write</span><span class="p">(</span><span class="n">data</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">PAGESIZE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">newpage</span><span class="p">()</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">map</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">vspace</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">map_flags</span><span class="o">::</span><span class="n">W</span><span class="p">,</span><span class="w"> </span><span class="n">page</span><span class="p">)</span><span class="o">!:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">buf</span><span class="p">[..</span><span class="k">len</span><span class="p">(</span><span class="n">data</span><span class="p">)]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">data</span><span class="p">[..];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">page_unmap</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// TODO: Multiple serial ports
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serials</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x7fff70000000</span><span class="p">;</span><span class="w"> </span><span class="c1">// XXX arbitrary address
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">map</span><span class="p">(</span><span class="n">port</span><span class="p">.</span><span class="n">proc</span><span class="p">.</span><span class="n">vspace</span><span class="p">,</span><span class="w"> </span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">page</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">reply</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">call</span><span class="p">(</span><span class="n">port</span><span class="p">.</span><span class="n">ep</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">data</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">ipcbuf</span><span class="p">.</span><span class="n">params</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">serial_read</span><span class="p">(</span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">PAGESIZE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">newpage</span><span class="p">()</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// TODO: Multiple serial ports
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">serials</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x7fff70000000</span><span class="p">;</span><span class="w"> </span><span class="c1">// XXX arbitrary address
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">map</span><span class="p">(</span><span class="n">port</span><span class="p">.</span><span class="n">proc</span><span class="p">.</span><span class="n">vspace</span><span class="p">,</span><span class="w"> </span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="n">map_flags</span><span class="o">::</span><span class="n">W</span><span class="p">,</span><span class="w"> </span><span class="n">page</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="p">(</span><span class="n">label</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">call</span><span class="p">(</span><span class="n">port</span><span class="p">.</span><span class="n">ep</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">page_unmap</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">out</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">map</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">vspace</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">page</span><span class="p">)</span><span class="o">!:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">buf</span><span class="p">[..</span><span class="n">n</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">out</span><span class="p">[..</span><span class="n">n</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>There is something interesting going on here. Part of this code is fairly
obvious — we just invoke the IPC endpoint using helios::call,
corresponding nicely to the other end&rsquo;s use of helios::reply, with the buffer
address and size. However, the buffer address presents a problem: this buffer is
in the init process&rsquo;s address space, so the serial port cannot read or write to
it!</p>
<p>In the long term, a more sophisticated approach to shared memory management will
be developed, but for testing purposes I came up with this solution. For writes,
we allocate a new page, map it into our address space, and copy the data we want
to write to it. Then we unmap it, map it into the serial driver&rsquo;s address space
instead, and perform the call. For reads, we allocate a page, map it into the
serial driver, call the IPC endpoint, then unmap it from the serial driver, map
it into our address space, and copy the data back out of it. In both cases, we
destroy the page upon leaving this function, which frees the memory and
automatically unmaps the page from any address space. Inefficient, but it works
for demonstration purposes.</p>
<p>And that&rsquo;s really all there is to it! Helios officially has its first driver.
The next step is to develop a more robust solution for describing capability
interfaces and device APIs, then build a PS/2 keyboard driver and a BIOS VGA
mode 3 driver for driving the BIOS console, and combine these plus the serial
driver into a tty on which we can run a simple shell.</p>]]></description><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate></item><item><title>TOTP for 2FA is incredibly easy to implement. So what&apos;s your excuse?</title><link>https://drewdevault.com/2022/10/18/TOTP-is-easy.html</link><description><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Time-based_one-time_password">Time-based one-time passwords</a> are one of the more secure approaches to 2FA
— certainly much better than SMS. And it&rsquo;s much easier to implement than
SMS as well. The algorithm is as follows:</p>
<ol>
<li>Divide the current Unix timestamp by 30</li>
<li>Encode it as a 64-bit big endian integer</li>
<li>Write the encoded bytes to a SHA-1 HMAC initialized with the TOTP shared key</li>
<li>Let offs = hmac[-1] &amp; 0xF</li>
<li>Let hash = decode hmac[offs .. offs + 4] as a 32-bit big-endian integer</li>
<li>Let code = (hash &amp; 0x7FFFFFFF) % 1000000</li>
<li>Compare this code with the user&rsquo;s code</li>
</ol>
<p>You&rsquo;ll need a little dependency to generate QR codes with the <a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format">otpauth:// URL
scheme</a>, a little UI to present the QR code and store the shared secret in
your database, and a quick update to your login flow, and then you&rsquo;re good to
go.</p>
<p>Here&rsquo;s the implementation SourceHut uses in Python. I hereby release this code
into the public domain, or creative commons zero, at your choice:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">base64</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hmac</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">struct</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">totp</span><span class="p">(</span><span class="n">secret</span><span class="p">,</span> <span class="n">token</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">tm</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">/</span> <span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b32decode</span><span class="p">(</span><span class="n">secret</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">ix</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s2">&#34;&gt;q&#34;</span><span class="p">,</span> <span class="n">tm</span> <span class="o">+</span> <span class="n">ix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">hm</span> <span class="o">=</span> <span class="n">hmac</span><span class="o">.</span><span class="n">HMAC</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">offset</span> <span class="o">=</span> <span class="n">hm</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x0F</span>
</span></span><span class="line"><span class="cl">        <span class="n">truncatedHash</span> <span class="o">=</span> <span class="n">hm</span><span class="p">[</span><span class="n">offset</span><span class="p">:</span><span class="n">offset</span> <span class="o">+</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">code</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&#34;&gt;L&#34;</span><span class="p">,</span> <span class="n">truncatedHash</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">code</span> <span class="o">&amp;=</span> <span class="mh">0x7FFFFFFF</span>
</span></span><span class="line"><span class="cl">        <span class="n">code</span> <span class="o">%=</span> <span class="mi">1000000</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">token</span> <span class="o">==</span> <span class="n">code</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">False</span>
</span></span></code></pre></div><p>This implementation has a bit of a tolerance added to make clock skew less of an
issue, but that also means that the codes are longer-lived. Feel free to edit
these tolerances if you so desire.</p>
<p>Here&rsquo;s another one written in Hare, also public domain/CC-0.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">crypto</span><span class="o">::</span><span class="n">hmac</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">crypto</span><span class="o">::</span><span class="n">mac</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">crypto</span><span class="o">::</span><span class="n">sha1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">encoding</span><span class="o">::</span><span class="n">base32</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">endian</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">time</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Computes a TOTP code for a given time and key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">totp</span><span class="p">(</span><span class="n">when</span><span class="o">:</span><span class="w"> </span><span class="n">time</span><span class="o">::</span><span class="n">instant</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">uint</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">now</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">time</span><span class="o">::</span><span class="n">unix</span><span class="p">(</span><span class="n">when</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">30</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">hmac</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hmac</span><span class="o">::</span><span class="n">sha1</span><span class="p">(</span><span class="n">key</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">mac</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hmac</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">endian</span><span class="o">::</span><span class="n">beputu64</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="n">now</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">mac</span><span class="o">::</span><span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hmac</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">mac</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">sha1</span><span class="o">::</span><span class="n">SIZE</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">mac</span><span class="o">::</span><span class="n">sum</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hmac</span><span class="p">,</span><span class="w"> </span><span class="n">mac</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">offs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mac</span><span class="p">[</span><span class="k">len</span><span class="p">(</span><span class="n">mac</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xF</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mac</span><span class="p">[</span><span class="n">offs</span><span class="p">..</span><span class="n">offs</span><span class="o">+</span><span class="mi">4</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="p">((</span><span class="n">endian</span><span class="o">::</span><span class="n">begetu32</span><span class="p">(</span><span class="n">hash</span><span class="p">)</span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x7FFFFFFF</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">1000000</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@test</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">totp</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">secret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;3N2OTFHXKLR2E3WNZSYQ====&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">base32</span><span class="o">::</span><span class="n">decodestr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">base32</span><span class="o">::</span><span class="n">std_encoding</span><span class="p">,</span><span class="w"> </span><span class="n">secret</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">key</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">now</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">time</span><span class="o">::</span><span class="n">from_unix</span><span class="p">(</span><span class="mi">1650183739</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">totp</span><span class="p">(</span><span class="n">now</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">29283</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>In any language, TOTP is just a couple of dozen lines of code even if there
isn&rsquo;t already a library — and there is probably already a library. You
don&rsquo;t have to store temporary SMS codes in the database, you don&rsquo;t have to worry
about phishing, you don&rsquo;t have to worry about SIM swapping, and you don&rsquo;t have
to sign up for some paid SMS API like Twilio. It&rsquo;s more secure and it&rsquo;s trivial
to implement — so implement it already! Please!</p>
<hr>
<p><strong>Update 2022-10-19 @ 07:45 UTC</strong>: A reader pointed out that it&rsquo;s important to
have rate limiting on your TOTP attempts, or else a brute force attack can be
effective. Fair point!</p>]]></description><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate></item><item><title>Status update, October 2022</title><link>https://drewdevault.com/2022/10/15/Status-update-October-2022.html</link><description><![CDATA[<p>After a few busy and stressful months, I decided to set aside October to rest.
Of course, for me, rest does not mean a cessation of programming, but rather a
shift in priorities towards more fun and experimental projects. Consequently, it
has been a great month for Helios!</p>
<p>Hare upstream has enjoyed some minor improvements, such as from Pierre Curto&rsquo;s
patch to support parsing IPv6 addresses with a port (e.g. &ldquo;[::1]:80&rdquo;) and Kirill
Primak&rsquo;s improvements to the UTF-8 decoder. On the whole, improvements have been
conservative. However, queued up for integration once qbe upstream support is
merged is support for @threadlocal variables, which are useful for Helios and for
ABI compatibility with C. I also drafted up a proof-of-concept for @inline
functions, but it still needs work.</p>
<p>Now for the main event: Helios. The large-scale redesign and refactoring I
mentioned in the previous status update is essentially complete, and the kernel
reached (and exceeded) feature parity with the previous status quo. Since Helios
has been my primary focus for the past couple of weeks, I have a lot of news to
share about it.</p>
<p>First, I got back into userspace a few days after the last status update, and
shortly thereafter implemented a new scheduler. I then began to rework the
userspace API (uapi) in the kernel, which differs substantially from its prior
incarnation. The kernel object implementations present themselves as a library
for kernel use, and the new uapi module handles all interactions with this
module from userspace, providing a nice separation of concerns. The uapi module
handles more than syscalls now — it also implements send/recv for kernel
objects, for instance. As of a few days ago, uapi also supports delivering
faults to userspace supervisor processes:</p>
<p><img src="https://redacted.moe/f/52ee4c38.png" alt="A screenshot of a thread on Helios causing a page fault, then its parent
thread receives details of the fault and maps a page onto the address of the
attempted write. The child thread is resumed and is surprised to find that the
write succeeded (because a page was mapped underneath the write)."></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="nd">@test</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">task</span><span class="o">::</span><span class="n">pagefault</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">fault</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">newendpoint</span><span class="p">()</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">fault</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">thread</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">threads</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_task_pagefault</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">threads</span><span class="o">::</span><span class="n">set_fault</span><span class="p">(</span><span class="n">thread</span><span class="p">,</span><span class="w"> </span><span class="n">fault</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">threads</span><span class="o">::</span><span class="n">start</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">fault</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">recv_fault</span><span class="p">(</span><span class="n">fault</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">fault</span><span class="p">.</span><span class="n">addr</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mh">0x100</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">newpage</span><span class="p">()</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">map</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">vspace</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">map_flags</span><span class="o">::</span><span class="n">W</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">map_flags</span><span class="o">::</span><span class="n">FIXED</span><span class="p">,</span><span class="w"> </span><span class="n">page</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">threads</span><span class="o">::</span><span class="n">resume</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">threads</span><span class="o">::</span><span class="n">join</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">_task_pagefault</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">ptr</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x100</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">int</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="o">*</span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1337</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1337</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The new userspace threading API is much improved over the hack job in the
earlier design. It supports TLS and many typical threading operations, such as
join and detach. This API exists mainly for testing the kernel via Vulcan, and
is not anticipated to see much use beyond this (though I will implement pthreads
for the POSIX C environment at some point). For more details, see <a href="https://drewdevault.com/2022/10/02/Kernel-hacking-with-Hare-part-2.html">this blog
post</a>. Alongside this and other userspace libraries, Vulcan has been fleshed
out into a kernel test suite once again, which I have been frequently testing on
real hardware:</p>
<p><img src="https://redacted.moe/f/3a293b79.jpg" alt="A picture of a laptop showing 15 passing kernel tests"></p>
<p><a href="https://redacted.moe/f/f95549d6.iso">Here&rsquo;s an ISO</a> you can boot on your own x86_64
hardware to see if it works for you, too. If you have problems, take a picture
of the issue, boot Linux and <a href="mailto:sir@cmpwn.com">email me</a> said picture, the
output of lscpu, and any other details you deem relevant.</p>
<p>The kernel now supports automatic capability address allocation, which is a
marked improvement over seL4. The new physical page allocator is also much
improved, as it supports allocation and freeing and can either allocate pages
sparsely or continuously depending on the need. Mapping these pages in userspace
was also much improved, with a better design of the userspace virtual memory map
and a better heap, complete with a (partial) implementation of mmap.</p>
<p>I have also broken ground on the next component of the OS, <a href="https://git.sr.ht/~sircmpwn/mercury">Mercury</a>, which
provides a more complete userspace environment for writing drivers. It has a
simple tar-based initramfs based on Hare&rsquo;s format::tar implementation, which I
wrote in June for this purpose. It can load ELF files from this tarball into new
processes, and implements some extensions that are useful for driver loading.
Consequently, the first Mercury driver is up and running:</p>
<p><img src="https://redacted.moe/f/4294d07e.png" alt="Demo of a working serial driver"></p>
<p>This driver includes a simple driver manifest, which is embedded into its ELF
file and processed by the driver loader to declaratively specify the
capabilities it needs:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="p">[</span><span class="n">driver</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">name</span><span class="o">=</span><span class="n">pcserial</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">desc</span><span class="o">=</span><span class="n">Serial</span><span class="w"> </span><span class="n">driver</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">x86_64</span><span class="w"> </span><span class="n">PCs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="n">cspace</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">radix</span><span class="o">=</span><span class="mi">12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="n">capabilities</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">0</span><span class="o">:</span><span class="n">endpoint</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">1</span><span class="o">:</span><span class="n">ioport</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">min</span><span class="o">=</span><span class="mi">3</span><span class="n">F8</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="o">=</span><span class="mi">400</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">2</span><span class="o">:</span><span class="n">ioport</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">min</span><span class="o">=</span><span class="mi">2E8</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="o">=</span><span class="mi">2</span><span class="n">F0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">3</span><span class="o">:</span><span class="n">note</span><span class="w"> </span><span class="o">=</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">4</span><span class="o">:</span><span class="n">irq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">irq</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="n">note</span><span class="o">=</span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">5</span><span class="o">:</span><span class="n">irq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">irq</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="n">note</span><span class="o">=</span><span class="mi">3</span><span class="w">
</span></span></span></code></pre></div><p>The driver loader prepares capabilities for the COM1 and COM2 I/O ports, as well
as IRQ handlers for IRQ 3 and 4, based on this manifest, then loads them into
the capability table for the driver process. The driver is sandboxed very
effectively by this: it can <em>only</em> use these capabilities. It cannot allocate
memory, modify its address space, or even destroy any of these capabilities. If
a bad actor was on the other end of the serial port and exploited a bug, the
worst thing it could do is crash the serial driver, which would then be rebooted
by the supervisor. On Linux and other monolithic kernels like it, exploiting the
serial driver compromises the entire operating system.</p>
<p>The resulting serial driver implementation is pretty small and straightforward,
<a href="https://git.sr.ht/~sircmpwn/mercury/tree/master/item/drivers/x86_64/serial">if you&rsquo;d like to have a look</a>.</p>
<p>This manifest format will be expanded in the future for additional kinds of
drivers, such as with details specific to each bus (i.e. PCI vendor information
or USB details), and will also have details for device trees when RISC-V and
ARM support (the former is already underway) are brought upstream.</p>
<p>Next steps are to implement an I/O abstraction on top of IPC endpoints, which
first requires call &amp; reply support — the latter was implemented last
night and requires additional testing. Following this, I plan on writing a
getty-equivalent which utilizes this serial driver, and a future VGA terminal
driver, to provide an environment in which a shell can be run. Then I&rsquo;ll
implement a ramfs to host commands for the shell to run, and we&rsquo;ll really be
cookin&rsquo; at that point. Disk drivers and filesystem drivers will be next.</p>
<p>That&rsquo;s all for now. Quite a lot of progress! I&rsquo;ll see you next time.</p>]]></description><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate></item><item><title>In praise of ffmpeg</title><link>https://drewdevault.com/2022/10/12/In-praise-of-ffmpeg.html</link><description><![CDATA[<p>My last &ldquo;<a href="https://drewdevault.com/2022/09/02/2022-09-02-In-praise-of-qemu.html">In praise of</a>&rdquo; article covered qemu, a project founded by Fabrice
Bellard, and today I want to take a look at another work by Bellard:
<a href="https://ffmpeg.org">ffmpeg</a>. Bellard has a knack for building high-quality software which solves
a problem so well that every other solution becomes obsolete shortly thereafter,
and ffmpeg is no exception.</p>
<p>ffmpeg has been described as the Swiss army knife of multimedia. It incorporates
hundreds of video, audio, and image decoders and encoders, muxers and demuxers,
filters and devices. It provides a CLI and a set of libraries for working with
its tools, and is the core component of many video and audio players as a result
(including my preferred multimedia player, <a href="https://mpv.io">mpv</a>). If you want to do almost
anything with multimedia files — re-encode them, re-mux them, live stream
it, whatever — ffmpeg can handle it with ease.</p>
<p>Let me share an example.</p>
<p>I was recently hanging out at my local hackerspace and wanted to play some PS2
games on my laptop. My laptop is not powerful enough to drive <a href="https://pcsx2.net">PCSX2</a>, but my
workstation on the other side of town certainly was. So I forwarded my game
controller to my workstation via USB/IP and pulled up the ffmpeg manual to
figure out how to live-stream the game to my laptop. ffmpeg can capture video
from KMS buffers directly, use the GPU to efficiently downscale them, grab audio
from pulse, encode them with settings tuned for low-latency, and mux it into a
UDP socket. On the other end I set up mpv to receive the stream and play it
back.</p>
<pre tabindex="0"><code>ffmpeg \
  -f pulse \
  -i alsa_output.platform-snd_aloop.0.analog-surround-51.monitor \
  -f kmsgrab \
  -thread_queue_size 64 \   # reduce input latency
  -i - \
  # Capture and downscale frames on the GPU:
  -vf &#39;hwmap=derive_device=vaapi,scale_vaapi=1280:720,hwdownload,format=bgr0&#39; \
  -c:v libx264 \
  -preset:v superfast \     # encode video as fast as possible
  -tune zerolatency \       # tune encoder for low latency
  -intra-refresh 1 \        # reduces latency and mitigates dropped packets
  -f mpegts \               # mux into mpegts stream, well-suited to this use-case
  -b:v 3M \                 # configure target video bandwidth
  udp://$hackerspace:41841
</code></pre><p>With an hour of tinkering and reading man pages, I was able to come up with a
single command which produced a working remote video game streaming setup <em>from
scratch</em> thanks to ffmpeg. ffmpeg is <em>amazing</em>.</p>
<video autoplay mute loop controls>
  <source src="https://redacted.moe/f/3c729511.webm"></source>
</video>
<p>I have relied on ffmpeg for many tasks and for many years. It has always been
there to handle any little multimedia-related task I might put it to for
personal use — re-encoding audio files so they fit on my phone, taking
clips from videos to share, muxing fonts into mkv files, capturing video from my
webcam, <a href="https://drewdevault.com/2018/08/26/Self-hosted-livestreaming.html">live streaming hacking sessions on my own platform</a>, or anything
else I can imagine. It formed the foundation of <a href="https://github.com/mediacrush/mediacrush">MediaCrush</a> back in the day,
where we used it to optimize multimedia files for efficient viewing on the web,
back when that was more difficult than &ldquo;just transcode it to a webm&rdquo;.</p>
<p>ffmpeg is notable for being one of the first large-scale FOSS projects to
completely eradicate proprietary software in its niche. Virtually all
multimedia-related companies rely on ffmpeg to do their heavy lifting. It took a
complex problem and solved it, with free software. The book is now closed on
multimedia: ffmpeg is the solution to almost all of your problems. And if it&rsquo;s
not, you&rsquo;re more likely to patch ffmpeg than to develop something new. The code
is accessible and the community are experts in your problem domain.</p>
<p>ffmpeg is one of the foremost pillars of achievement in free software. It has
touched the lives of every reader, whether they know it or not. If you&rsquo;ve ever
watched TV, or gone to a movie, or watched videos online, or listened to a
podcast, odds are that ffmpeg was involved in making it possible. It is one of
the most well-executed and important software projects of all time.</p>]]></description><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate></item><item><title>Does Rust belong in the Linux kernel?</title><link>https://drewdevault.com/2022/10/03/Does-Rust-belong-in-Linux.html</link><description><![CDATA[<p>I am known to be a bit of a polemic when it comes to Rust. I will be forthright
with the fact that I don&rsquo;t particularly care for Rust, and that my public
criticisms of it might set up many readers with a reluctance to endure yet
another Rust Hot Take from my blog. My answer to the question posed in the title
is, of course, &ldquo;no&rdquo;. However, let me assuage some of your fears by answering
a different question first: does Hare belong in the Linux kernel?</p>
<p>If I should owe my allegiance to any programming language, it would be
<a href="https://harelang.org">Hare</a>. Not only is it a systems programming language that
I designed myself, but I am using it <a href="https://git.sr.ht/~sircmpwn/helios">to write a kernel</a>. <a href="https://www.redox-os.org/">Like
Rust</a>, Hare is demonstrably useful for writing kernels with. One might
even go so far as to suggest that I consider it superior to C for this purpose,
given that I chose to to write Helios in Hare rather than C, despite my
extensive background in C. But the question remains: does Hare belong in the
Linux kernel?</p>
<p>In my opinion, Hare does not belong in the Linux kernel, and neither does Rust.
Some of the reasoning behind this answer is common to both, and some is unique
to each, but I will be focusing on Rust today because Rust is the language which
is actually making its way towards mainline Linux. I have no illusions about
this blog post changing that, either: I simply find it an interesting case-study
in software engineering decision-making in a major project, and that&rsquo;s worth
talking about.</p>
<p>Each change in software requires sufficient supporting rationale. What are the
reasons to bring Rust into Linux? A kernel hacker thinks about these questions
differently than a typical developer in userspace. One could espouse the
advantages of Cargo, generics, whatever, but these concerns matter relatively
little to kernel hackers. Kernels operate in a heavily constrained design space
and a language has to fit into that design space. This is the first and foremost
concern, and if it&rsquo;s awkward to mold a language to fit into these constraints
then it will be a poor fit.</p>
<p>Some common problems that a programming language designed for userspace will run
into when being considered for kernelspace are:</p>
<ul>
<li>Strict constraints on memory allocation</li>
<li>Strict constraints on stack usage</li>
<li>Strict constraints on recursion</li>
<li>No use of floating point arithmetic</li>
<li>Necessary evils, such as unsafe memory use patterns or integer overflow</li>
<li>The absence of a standard library, runtime, third-party libraries, or other
conveniences typically afforded to userspace</li>
</ul>
<p>Most languages can overcome these constraints with some work, but their
suitability for kernel use is mainly defined by how well they adapt to them
— there&rsquo;s a reason that kernels written in Go, C#, Java, Python, etc, are
limited to being research curiosities and are left out of production systems.</p>
<p>As Linus recently put it, &ldquo;kernel needs trump any Rust needs&rdquo;. The kernel is
simply not an environment which will bend to accommodate a language; it must go
the other way around. These constraints have posed, and will continue to pose, a
major challenge for Rust in Linux, but on the whole, I think that it will be
able to rise to meet them, though perhaps not with as much grace as I would
like.</p>
<p>If Rust is able to work within these constraints, then it satisfies the ground
rules for playing in ring 0. The question then becomes: what advantages can Rust
bring to the kernel? Based on what I&rsquo;ve seen, these essentially break down to
two points:<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<ol>
<li>Memory safety</li>
<li>Trendiness</li>
</ol>
<p>I would prefer not to re-open the memory safety flamewar, so we will simply move
forward with the (dubious) assumptions that memory safety is (1) unconditionally
desirable, (2) compatible with the kernel&rsquo;s requirements, and (3) sufficiently
provided for by Rust. I will offer this quote from an unnamed kernel hacker,
though:</p>
<blockquote>
<p>There are possibly some well-designed and written parts which have not
suffered a memory safety issue in many years. It&rsquo;s insulting to present this
as an improvement over what was achieved by those doing all this hard work.</p></blockquote>
<p>Regarding &ldquo;trendiness&rdquo;, I admit that this is a somewhat unforgiving turn of
phrase. In this respect I refer to the goal of expanding the kernel&rsquo;s developer
base from a bunch of aging curmudgeons writing C<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> towards a more
inclusive developer pool from a younger up-and-coming language community like
Rust. C is boring<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> — it hasn&rsquo;t really excited anyone in decades.
Rust is exciting, and its community enjoys a huge pool of developers building
their brave new world with it. Introducing Rust to the kernel will certainly
appeal to a broader audience of potential contributors.</p>
<p>But there is an underlying assumption to this argument which is worth
questioning: is the supply of Linux developers dwindling, and, if so, is it to
such and extent that it demands radical change?</p>
<p>Well, no. Linux has consistently enjoyed a tremendous amount of attention from
the software development community. This week&rsquo;s release of Linux 6.0, one of the
largest Linux releases ever, boasted more than 78,000 commits by almost 5,000
different authors since 5.15. Linux has a broad developer base reaching from
many different industry stakeholders and independent contributors working on the
careful development and maintenance of its hundreds of subsystems. The scale of
Linux development is on a level unmatched by any other software project —
free software or otherwise.</p>
<p>Getting Rust working in Linux is certainly an exciting project, and I&rsquo;m all for
developers having fun. However, it&rsquo;s not likely to infuse Linux with a
much-needed boost in its contributor base, because Linux has no such need.
What&rsquo;s more, Linux&rsquo;s portability requirements prevent Rust from being used in
most of the kernel in the first place. Most work on Rust in Linux is simply
working on getting the systems to cooperate with each other or writing drivers
which are redundant with existing C drivers, but cannot replace them due to
Rust&rsquo;s limited selection of targets.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> Few to none of the efforts from the
Rust-in-Linux team are likely to support the kernel&rsquo;s broader goals for some
time.</p>
<p>We are thus left with memory safety as the main benefit offered by Rust to
Linux, and for the purpose of this article we&rsquo;re going to take it at face value.
So, with the ground rules set and the advantages enumerated, what are some of
the problems that Rust might face in Linux?</p>
<p>There are a few problems which could be argued over, such as substantial
complexity of Rust compared to C, the inevitable doubling of Linux&rsquo;s build time,
the significant shift in design sensibilities required to support an idiomatic
Rust design, the fragile interface which will develop on the boundaries between
Rust and C code, or the challenges the kernel&rsquo;s established base of C developers
will endure when learning and adapting to a new language. To avoid letting this
post become too subjective or lengthy, I&rsquo;ll refrain from expanding on these.
Instead, allow me to simply illuminate these issues as risk factors.</p>
<p>Linux is, on the whole, a conservative project. It is deployed worldwide in
billions of devices and its reliability is depended on by a majority of Earth&rsquo;s
population. Risks are carefully evaluated in Linux as such. Every change
presents risks and offers advantages, which must be weighed against each other
to justify the change. Rust is one of the riskiest bets Linux has ever
considered, and, in my opinion, the advantages may not weigh up. I think that
the main reason we&rsquo;re going to see Rust in the kernel is not due to a careful
balancing of risk and reward, but because the Rust community wants Rust in
Linux, and they&rsquo;re large and loud enough to not be worth the cost of arguing
with.</p>
<p>I don&rsquo;t think that changes on this scale are appropriate for most projects. I
prefer to encourage people to write new software to replace established
software, rather than rewriting the established software. Some projects, such as
<a href="https://www.redox-os.org/">Redox</a>, are doing just that with Rust. However, operating systems are in
a difficult spot in this respect. Writing an operating system is difficult work
with a huge scope — few projects can hope to challenge Linux on driver
support, for example. The major players have been entrenched for decades, and
any project seeking to displace them will have decades of hard work ahead of
them and will require a considerable amount of luck to succeed. Though I think
that new innovations in kernels are badly overdue, I must acknowledge that
there is some truth to the argument that we&rsquo;re stuck with Linux. In this
framing, if you want Rust to succeed in a kernel, getting it into Linux is the
best strategy.</p>
<p>But, on the whole, my opinion is that the benefits of Rust in Linux are
negligible and the costs are not. That said, it&rsquo;s going to happen, and the
impact to me is likely to be, at worst, a nuisance. Though I would have chosen
differently, I wish them the best of luck and hope to see them succeed.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>There are some other arguable benefits which mainly boil down to
finding Rust to have a superior language design to C or to be more enjoyable
to use. These are subjective and generally are not the most important traits
a kernel hacker has to consider when choosing a language, so I&rsquo;m leaving them
aside for now.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>A portrayal which, though it may have a grain of truth, is largely false
and offensive to my sensibilities as a 29-year-old kernel hacker. For the
record.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>A trait which, I will briefly note, is actually desirable for a
production kernel implementation.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Rust in GCC will help with this problem, but it will likely take several
years to materialize and several more years to become stable. Even when this
is addressed, rewriting drivers wholesale will be labor intensive and is
likely to introduce more problems than solutions — rewrites always
introduce bugs.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 3 Oct 2022 00:00:00 +0000</pubDate></item><item><title>Notes from kernel hacking in Hare, part 2: multi-threading</title><link>https://drewdevault.com/2022/10/02/Kernel-hacking-with-Hare-part-2.html</link><description><![CDATA[<p>I have long promised that Hare would not have multi-threading, and it seems that
I have broken that promise. However, I have remained true to the
not-invented-here approach which is typical of my style by introducing it only
after designing an entire kernel to implement it on top of.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>For some background, <a href="https://git.sr.ht/~sircmpwn/helios">Helios</a> is a micro-kernel written in Hare. In addition
to the project, the <a href="https://git.sr.ht/~sircmpwn/helios/tree/master/item/vulcan">Vulcan</a> system is a small userspace designed to test the
kernel.</p>
<p><img src="https://redacted.moe/f/a8018226.jpg" alt="A picture of a laptop running Helios and showing the results of the Vulcan test suite"></p>
<p>While I don&rsquo;t anticipate multi-threaded processes playing a huge role in the
complete Ares system in the future, they do have a place. In the long term, I
would like to be able to provide an implementation of pthreads for porting
existing software to the system. A more immediate concern is how to test the
various kernel primitives provided by Helios, such as those which facilitate
inter-process communication (IPC). It&rsquo;s much easier to test these with threads
than with processes, since spawning threads does not require spinning up a new
address space.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="nd">@test</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">notification</span><span class="o">::</span><span class="n">wait</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">note</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">newnote</span><span class="p">()</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">destroy</span><span class="p">(</span><span class="n">note</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">thread</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">threads</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">notification_wait</span><span class="p">,</span><span class="w"> </span><span class="n">note</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">threads</span><span class="o">::</span><span class="n">start</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">threads</span><span class="o">::</span><span class="n">join</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">signal</span><span class="p">(</span><span class="n">note</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">notification_wait</span><span class="p">(</span><span class="n">note</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">note</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">note</span><span class="o">:</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">cap</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">wait</span><span class="p">(</span><span class="n">note</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>So how does it work? Let&rsquo;s split this up into two domains: kernelspace and
userspace.</p>
<h3 id="threads-in-the-kernel">Threads in the kernel</h3>
<p>The basic primitive for threads and processes in Helios is a &ldquo;task&rdquo;, which is
simply an object which receives some CPU time. A task has a capability space (so
it can invoke operations against kernel objects), an virtual address space (so
it has somewhere to map the process image and memory), and some state, such as
the values of its CPU registers. The task-related structures are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// A task capability.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">task</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">caps</span><span class="o">::</span><span class="n">capability</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nd">@offset</span><span class="p">(</span><span class="n">caps</span><span class="o">::</span><span class="n">LINK_OFFS</span><span class="p">)</span><span class="w"> </span><span class="n">link</span><span class="o">:</span><span class="w"> </span><span class="n">caps</span><span class="o">::</span><span class="n">link</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Scheduling status of a task.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">task_status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ACTIVE</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">BLOCKED</span><span class="p">,</span><span class="w"> </span><span class="c1">// XXX: Can a task be both blocked and suspended?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">SUSPENDED</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// State for a task.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">taskstate</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">regs</span><span class="o">:</span><span class="w"> </span><span class="n">arch</span><span class="o">::</span><span class="n">state</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cspace</span><span class="o">:</span><span class="w"> </span><span class="n">caps</span><span class="o">::</span><span class="n">cslot</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">vspace</span><span class="o">:</span><span class="w"> </span><span class="n">caps</span><span class="o">::</span><span class="n">cslot</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ipc_buffer</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">status</span><span class="o">:</span><span class="w"> </span><span class="n">task_status</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// XXX: This is a virtual address, should be physical
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">next</span><span class="o">:</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">taskstate</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">prev</span><span class="o">:</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">taskstate</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Here&rsquo;s a footnote to explain some off-topic curiosities about this code: <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>The most interesting part of this structure is arch::state, which stores the
task&rsquo;s CPU registers. On x86_64,<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> this structure is defined as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fs</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fsbase</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">r15</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">r14</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">r13</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">r12</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">r11</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">r10</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">r9</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">r8</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rbp</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rdi</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rsi</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rdx</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rcx</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rbx</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rax</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">intno</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">errcode</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rip</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cs</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rflags</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rsp</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ss</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This structure is organized in part according to hardware constraints and in
part at the discretion of the kernel implementer. The last five fields, from
%rip to %ss, are constrained by the hardware. When an interrupt occurs, the CPU
pushes each of these registers to the stack, in this order, then transfers
control to the system interrupt handler. The next two registers serve a special
purpose within our interrupt implementation, and the remainder are ordered
arbitrarily.</p>
<p>In order to switch between two tasks, we need to save all of this state
somewhere, then load the same state for another task when returning from the
kernel to userspace. The save/restore process is handled in the interrupt
handler, in assembly:</p>
<pre tabindex="0"><code>.global isr_common
isr_common:
	_swapgs
	push %rax
	push %rbx
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %rbp
	push %r8
	push %r9
	push %r10
	push %r11
	push %r12
	push %r13
	push %r14
	push %r15

	// Note: fsbase is handled elsewhere
	push $0
	push %fs

	cld

	mov %rsp, %rdi
	mov $_kernel_stack_top, %rsp
	call arch.isr_handler
_isr_exit:
	mov %rax, %rsp

	// Note: fsbase is handled elsewhere
	pop %fs
	pop %r15

	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rbp
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	pop %rbx
	pop %rax

	_swapgs

	// Clean up error code and interrupt #
	add $16, %rsp

	iretq
</code></pre><p>I&rsquo;m not going to go into too much detail on interrupts for this post (maybe in a
later post), but what&rsquo;s important here is the chain of push/pop instructions.
This automatically saves the CPU state for each task when entering the kernel.
The syscall handler has something similar.</p>
<p>This suggests a question: where&rsquo;s the stack?</p>
<p>Helios has a single kernel stack,<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> which is moved to %rsp from
$_kernel_stack_top in this code. This is different from systems like Linux,
which have one kernel stack per thread; the rationale behind this design choice
is out of scope for this post.<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> However, the &ldquo;stack&rdquo; being pushed to here is
not, in fact, a traditional stack.</p>
<p>x86_64 has an interesting feature wherein an interrupt can be configured to use
a special &ldquo;interrupt stack&rdquo;. The <a href="https://wiki.osdev.org/Task_State_Segment">task state segment</a> is a bit of a
historical artifact which is of little interest to Helios, but in long mode
(64-bit mode) it serves a new purpose: to provide a list of addresses where
up to seven interrupt stacks are stored. The <a href="https://wiki.osdev.org/Interrupt_Descriptor_Table#Structure_on_x86-64">interrupt descriptor table</a>
includes a 3-bit &ldquo;IST&rdquo; field which, when nonzero, instructs the CPU to set the
stack pointer to the corresponding address in the TSS when that interrupt fires.
Helios sets all of these to one, then does something interesting:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Stores a pointer to the current state context.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">context</span><span class="o">:</span><span class="w"> </span><span class="o">**</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">null</span><span class="o">:</span><span class="w"> </span><span class="o">**</span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">init_tss</span><span class="p">(</span><span class="n">i</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cpus</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">tstate</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">taskstate</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">context</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cpus</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">tstate</span><span class="p">.</span><span class="n">ist</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="w"> </span><span class="o">**</span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">save</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// On x86_64, most registers are saved and restored by the ISR or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// syscall service routines.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">regs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">active</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">regs</span><span class="p">.</span><span class="n">fsbase</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rdmsr</span><span class="p">(</span><span class="mh">0xC0000100</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">restore</span><span class="p">(</span><span class="n">regs</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">state</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">wrmsr</span><span class="p">(</span><span class="mh">0xC0000100</span><span class="p">,</span><span class="w"> </span><span class="n">regs</span><span class="p">.</span><span class="n">fsbase</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">regs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">regs</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="o">*</span><span class="n">context</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">regs</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>We store a pointer to the active task&rsquo;s state struct in the TSS when we enter
userspace, and when an interrupt occurs, the CPU automatically places that state
into %rsp so we can trivially push all of the task&rsquo;s registers into it.</p>
<p>There is some weirdness to note here: the stack grows downwards. Each time you
push, the stack pointer is decremented, then the pushed value is written there.
So, we have to fill in this structure from the bottom up. Accordingly, we have
to do something a bit unusual here: we don&rsquo;t store a pointer to the context
object, but a pointer to the <em>end</em> of the context object. This is what
&amp;active[-1] does here.</p>
<p>Hare has some memory safety features by default, such as bounds testing array
accesses. Here we have to take advantage of some of Hare&rsquo;s escape hatches to
accomplish the goal. First, we cast the pointer to an <em>unbounded array</em> of
states — that&rsquo;s what the *[*] is for. Then we can take the address of
element -1 without the compiler snitching on us.</p>
<p>There is also a separate step here to save the fsbase register. This will be
important later.</p>
<p>This provides us with enough pieces to enter userspace:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Immediately enters this task in userspace. Only used during system
</span></span></span><span class="line"><span class="cl"><span class="c1">// initialization.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="nd">@noreturn</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">enteruser</span><span class="p">(</span><span class="n">task</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">caps</span><span class="o">::</span><span class="n">capability</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">objects</span><span class="o">::</span><span class="n">task_getstate</span><span class="p">(</span><span class="n">task</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">objects</span><span class="o">::</span><span class="n">task_schedulable</span><span class="p">(</span><span class="n">state</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">objects</span><span class="o">::</span><span class="n">vspace_activate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">state</span><span class="p">.</span><span class="n">vspace</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">arch</span><span class="o">::</span><span class="n">restore</span><span class="p">(</span><span class="o">&amp;</span><span class="n">state</span><span class="p">.</span><span class="n">regs</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">arch</span><span class="o">::</span><span class="n">enteruser</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>What we need next is a scheduler, and a periodic interrupt to invoke it, so that
we can switch tasks every so often.</p>
<p>Scheduler design is a complex subject which can have design, performance, and
complexity implications ranging from subtle to substantial. For Helios&rsquo;s present
needs we use a simple round-robin scheduler: each task gets the same time
slice and we just switch to them one after another.</p>
<p>The easy part is simply getting periodic interrupts. Again, this blog post isn&rsquo;t
about interrupts, so I&rsquo;ll just give you the reader&rsquo;s digest:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="n">arch</span><span class="o">::</span><span class="n">install_irq</span><span class="p">(</span><span class="n">arch</span><span class="o">::</span><span class="n">PIT_IRQ</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">pit_irq</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">arch</span><span class="o">::</span><span class="n">pit_setphase</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">pit_irq</span><span class="p">(</span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">arch</span><span class="o">::</span><span class="n">state</span><span class="p">,</span><span class="w"> </span><span class="n">irq</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">sched</span><span class="o">::</span><span class="n">switchtask</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">arch</span><span class="o">::</span><span class="n">pic_eoi</span><span class="p">(</span><span class="n">arch</span><span class="o">::</span><span class="n">PIT_IRQ</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The PIT, or programmable interrupt timer, is a feature on x86_64 which provides
exactly what we need: periodic interrupts. This code configures it to tick at
100 Hz and sets up a little IRQ handler which calls sched::switchtask to perform
the actual context switch.</p>
<p>Recall that, by the time sched::switchtask is invoked, the CPU and interrupt
handler have already stashed all of the current task&rsquo;s registers into its state
struct. All we have to do now is pick out the next task and restore its state.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// see idle.s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">let</span><span class="w"> </span><span class="n">idle</span><span class="o">:</span><span class="w"> </span><span class="n">arch</span><span class="o">::</span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Switches to the next task.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">switchtask</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Save state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">arch</span><span class="o">::</span><span class="n">save</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">task</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">objects</span><span class="o">::</span><span class="n">taskstate</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">task</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">objects</span><span class="o">::</span><span class="n">vspace_activate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">task</span><span class="p">.</span><span class="n">vspace</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">arch</span><span class="o">::</span><span class="n">restore</span><span class="p">(</span><span class="o">&amp;</span><span class="n">task</span><span class="p">.</span><span class="n">regs</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="kt">null</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">arch</span><span class="o">::</span><span class="n">restore</span><span class="p">(</span><span class="o">&amp;</span><span class="n">idle</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">objects</span><span class="o">::</span><span class="n">taskstate</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">active</span><span class="p">.</span><span class="n">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">active</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kt">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tasks</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">cand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">next</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="o">*</span><span class="n">objects</span><span class="o">::</span><span class="n">taskstate</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">objects</span><span class="o">::</span><span class="n">task_schedulable</span><span class="p">(</span><span class="n">cand</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">cand</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cand</span><span class="p">.</span><span class="n">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">next</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="o">*</span><span class="n">objects</span><span class="o">::</span><span class="n">taskstate</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">objects</span><span class="o">::</span><span class="n">task_schedulable</span><span class="p">(</span><span class="n">next</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="kt">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Pretty straightforward. The scheduler <a href="https://git.sr.ht/~sircmpwn/helios/tree/673c27e57684deeedbe88e1e6b7b940fdca5fc87/item/sched/tasks.ha">maintains a linked list</a> of tasks,
picks the next one which is schedulable,<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> then runs it. If there are no
schedulable tasks, it runs the idle task.</p>
<p>Err, wait, what&rsquo;s the idle task? Simple: it&rsquo;s another state object (i.e. a set
of CPU registers) which essentially works as a statically allocated do-nothing
thread.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">idle_frame</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="kt">uintptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">pause</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Initializes the state for the idle thread.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">init_idle</span><span class="p">(</span><span class="n">idle</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">state</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="o">*</span><span class="n">idle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">cs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seg</span><span class="o">::</span><span class="n">KCODE</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ss</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seg</span><span class="o">::</span><span class="n">KDATA</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">rflags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">21</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">9</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">rip</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">pause</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">rbp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">idle_frame</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>&ldquo;pause&rdquo; is a simple loop:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="p">.</span><span class="n">global</span><span class="w"> </span><span class="n">arch</span><span class="p">.</span><span class="n">pause</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">arch</span><span class="p">.</span><span class="n">pause</span><span class="o">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">hlt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">jmp</span><span class="w"> </span><span class="n">arch</span><span class="p">.</span><span class="n">pause</span><span class="w">
</span></span></span></code></pre></div><p>In the situation where every task is blocking on I/O, there&rsquo;s nothing for the
CPU to do until the operation finishes. So, we simply halt and wait for the next
interrupt to wake us back up, hopefully unblocking some tasks so we can schedule
them again. A more sophisticated kernel might take this opportunity to go into a
lower power state, perhaps, but for now this is quite sufficient.</p>
<p>With this last piece in place, we now have a multi-threaded operating system.
But there is one more piece to consider: when a task yields its time slice.</p>
<p>Just because a task receives CPU time does not mean that it needs to use it. A
task which has nothing useful to do can yield its time slice back to the kernel
through the &ldquo;yieldtask&rdquo; syscall. On the face of it, this is quite simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Yields the current time slice and switches to the next task.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="nd">@noreturn</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">yieldtask</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">arch</span><span class="o">::</span><span class="n">sysret_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">active</span><span class="p">.</span><span class="n">regs</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">switchtask</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">arch</span><span class="o">::</span><span class="n">enteruser</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The &ldquo;sysret_set&rdquo; updates the registers in the task state which correspond with
system call return values to (0, 0), indicating a successful return from the
yield syscall. But we don&rsquo;t actually return at all: we switch to the next task
and then return to <em>that</em>.</p>
<p>In addition to being called from userspace, this is also useful whenever the
kernel blocks a thread on some I/O or IPC operation. For example, tasks can wait
on &ldquo;notification&rdquo; objects, which another task can signal to wake them up —
a simple synchronization primitive. The implementation makes good use of
sched::yieldtask:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Blocks the active task until this notification is signalled. Does not return
</span></span></span><span class="line"><span class="cl"><span class="c1">// if the operation is blocking.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">wait</span><span class="p">(</span><span class="n">note</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">caps</span><span class="o">::</span><span class="n">capability</span><span class="p">)</span><span class="w"> </span><span class="kt">uint</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">nbwait</span><span class="p">(</span><span class="n">note</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">word</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">word</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">would_block</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">note</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">note_getstate</span><span class="p">(</span><span class="n">note</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">assert</span><span class="p">(</span><span class="n">note</span><span class="p">.</span><span class="n">recv</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w"> </span><span class="c1">// TODO: support multiple receivers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="n">note</span><span class="p">.</span><span class="n">recv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sched</span><span class="o">::</span><span class="n">active</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">sched</span><span class="o">::</span><span class="n">active</span><span class="p">.</span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">task_status</span><span class="o">::</span><span class="n">BLOCKED</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">sched</span><span class="o">::</span><span class="n">yieldtask</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Finally, that&rsquo;s the last piece.</p>
<h3 id="threads-in-userspace">Threads in userspace</h3>
<p>Phew! That was a lot of kernel pieces to unpack. And now for userspace&hellip; in the
next post! This one is getting pretty long. Here&rsquo;s what you have to look forward
to:</p>
<ul>
<li>Preparing the task and all of the objects it needs (such as a stack)</li>
<li>High-level operations: join, detach, exit, suspend, etc</li>
<li>Thread-local storage&hellip;
<ul>
<li>in the Hare compiler</li>
<li>in the ELF loader</li>
<li>at runtime</li>
</ul>
</li>
<li>Putting it all together to test the kernel</li>
</ul>
<p>We&rsquo;ll see you next time!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Jokes aside, for those curious about multi-threading and Hare: our
official stance is not actually as strict as &ldquo;no threads, period&rdquo;, though in
practice for many people it might amount to that. There is nothing stopping
you from linking to pthreads or calling clone(2) to spin up threads in a Hare
program, but the standard library explicitly provides no multi-threading
support, synchronization primitives, or re-entrancy guarantees. That&rsquo;s not to
say, however, that one could not build their own Hare standard library which
does offer these features — and, in fact, that is exactly what the
Vulcan test framework for Helios provides in its Hare libraries.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Capabilities are essentially references to kernel objects. The kernel
object for a task is the taskstate struct, and there can be many task
capabilities which refer to this. Any task which possesses a task capability in
its capability space can invoke operations against this task, such as reading
or writing its registers.<br /><br />
The link field is used to create a linked list of capabilities across the
system. It has a doubly linked list for the next and previous capability, and
a link to its parent capability, such as the memory capability from which the
task state was allocated. The list is organized such that copies of the same
capability are always adjacent to one another, and children always follow
their parents.
<br /><br />
The answer to the XXX comment in task_status is yes, by the way. Something to
fix later.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Only x86_64 is supported for now, but a RISC-V port is in-progress and I
intend to do arm64 in the future.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>For now; in the future it will have one stack per CPU.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Man, I could just go on and on and on.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>A task is schedulable if it is configured properly (with a cspace, vspace,
and IPC buffer) and is not currently blocking (i.e. waiting on I/O or
something).&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 2 Oct 2022 00:00:00 +0000</pubDate></item><item><title>The phrase &quot;open source&quot; (still) matters</title><link>https://drewdevault.com/2022/09/16/Open-source-matters.html</link><description><![CDATA[<p>In 1988, &ldquo;Resin Identification Codes&rdquo; were introduced by the plastic industry.
These look exactly like the recycling symbol ♺, which is not trademarked or
regulated, except that a number is enclosed within the triangle. These symbols
simply identify what kind of plastic was used. The vast majority of plastic is
non-recyclable, but has one of these symbols on it to suggest otherwise. This is
a deceptive business practice which exploits the consumer&rsquo;s understanding of the
recycling symbol to trick them into buying more plastic products.</p>
<p>The meaning of the term &ldquo;open source&rdquo; is broadly understood to be defined by the
Open Source Initiative&rsquo;s <a href="https://opensource.org/osd">Open Source Definition</a>,
the &ldquo;OSD&rdquo;. Under this model, open source has enjoyed a tremendous amount of
success, such that virtually all software written today incorporates open source
components.</p>
<p>The main advantage of open source, to which much of this success can be
attributed, is that it is a product of many hands. In addition to the work of
its original authors, open source projects generally accept code contributions
from anyone who would offer them. They also enjoy numerous indirect benefits,
through the large community of Linux distros which package and ship the
software, or people who write docs or books or blog posts about it, or the many
open source dependencies it is likely built on top of.</p>
<p>Under this model, the success of an open source project is not entirely
attributable to its publisher, but to both the publisher and the community which
exists around the software. The software does not belong to its publisher, but
to its community. I mean this not only in a moral sense, but also in a legal
sense: every contributor to an open source project retains their copyright and
the project&rsquo;s ownership is held collectively between its community of
contributors.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>The OSD takes this into account when laying out the conditions for
commercialization of the software. An argument for exclusive commercialization
of software by its publishers can be made when the software is the result of
investments from that publisher alone, but this is not so for open source.
Because it is the product of its community as a whole, the community enjoys the
right to commercialize it, without limitation. This is a fundamental,
non-negotiable part of the open source definition.</p>
<p>However, we often see the odd company or organization trying to forward an
unorthodox definition of the &ldquo;open source&rdquo;. Generally, their argument goes
something like this: &ldquo;open&rdquo; is just an adjective, and &ldquo;source&rdquo; comes from
&ldquo;source code&rdquo;, so &ldquo;open source&rdquo; just means source code you can read, right?</p>
<p>This argument is wrong,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> but it usually conceals the speaker&rsquo;s real
motivations: they want a commercial monopoly over their project.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> Their
real reason is &ldquo;I should be able to make money from open source, but you
shouldn&rsquo;t&rdquo;. An argument for an unorthodox definition of &ldquo;open source&rdquo; from this
perspective is a form of <a href="https://en.wikipedia.org/wiki/Motivated_reasoning">motivated reasoning</a>.</p>
<p>Those making this argument have good reason to believe that they will enjoy more
business success if they get away with it. The open source brand is incredibly
strong — one of the most successful brands in the entire software
industry. Leveraging that brand will drive interest to their project, especially
if, on the surface, it looks like it fits the bill (generally by being <abbr
title="The appropriate term for software whose source code is available to the public, but which does not otherwise meet the Open Source Definition">source available</abbr>).</p>
<p>When you get down to it, this behavior is dishonest and anti-social. It
leverages the brand of open source, whose success has been dependent on the OSD
and whose brand value is associated with the user&rsquo;s understanding of open
source, but does not provide the same rights. The deception is motivated by
selfish reasons: to withhold those rights from the user for their own exclusive
use. This is wrong.</p>
<p>You can publish software under any terms that you wish, with or without
commercial rights, with or without source code, whatever — it&rsquo;s your
right. However, if it&rsquo;s not open source, it&rsquo;s wrong to call it open source.
There are better terms — &ldquo;source available&rdquo;, &ldquo;<a href="https://faircode.io/">fair code</a>&rdquo;, etc. If
you describe your project appropriately, whatever the license may be, then I
wish you nothing but success.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Except when a CLA is involved. A CLA is an explicit promise that the
steward of an open source project will pull the rug out later and make the
project proprietary. <em>Never sign a CLA</em>. Don&rsquo;t ask contributors to sign one,
either: consider the <a href="https://drewdevault.com/2021/04/12/DCO.html">DCO</a> instead.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This footnote used to explain why this argument is incorrect, but
after five paragraphs I decided to save it for another time, like when the
peanut gallery on Hacker News makes some form of this argument in the comments
on this article.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Sometimes these arguments have more to do with the
non-discrimination clause of the OSD. I have a
<a href="https://lists.sr.ht/~sircmpwn/public-inbox/%3CC125C6RFZ9JQ.2PYJMAKMD2F8A%40homura%3E">different set of arguments</a>
for this situation.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate></item><item><title>Status update, September 2022</title><link>https://drewdevault.com/2022/09/15/Status-update-September-2022.html</link><description><![CDATA[<p>I have COVID-19 and I am halfway through my stockpile of tissues, so I&rsquo;m gonna
keep this status update brief.</p>
<p>In Hare news, I finally put the last pieces into place to make <a href="https://harelang.org/blog/2022-09-06-cross-builds-with-hare/">cross
compiling</a> as easy as possible. Nothing else particularly world-shattering
going on here. I have a bunch of new stuff in my patch queue to review once I&rsquo;m
feeling better, however, including bigint stuff — a big step towards
TLS support. Unrelatedly, TLS support seems to be progressing upstream in qbe.
(See what I did there?)</p>
<p><a href="https://git.sr.ht/~sircmpwn/powerctl">powerctl</a> is a small new project I wrote
to configure power management states on Linux. I&rsquo;m pretty pleased with how it
turned out. It makes for a good <a href="https://drewdevault.com/2022/08/28/powerctl-a-hare-case-study.html">case study</a> on Hare for systems programming.</p>
<p>In Helios, I have been refactoring the hell out of everything, rewriting or
redesigning large parts of it from scratch. Presently this means that a lot of
the functionality which was previously present was removed, and is being slowly
re-introduced with substantial changes. The key is reworking these features to
take better consideration of the full object lifecycle — creating,
copying, and destroying capabilities. An improvement which ended up being useful
in the course of this work is adding address space IDs (PCIDs on x86_64), which
is going to offer a substantial performance boost down the line.</p>
<p>Alright, time for a nap. Bye!</p>]]></description><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate></item><item><title>Notes from kernel hacking in Hare, part 1</title><link>https://drewdevault.com/2022/09/07/Kernel-hacking-with-Hare-part-1.html</link><description><![CDATA[<p>One of the goals for the <a href="https://harelang.org/">Hare</a> programming language is to be able to write
kernels, such as my <a href="https://git.sr.ht/~sircmpwn/helios">Helios</a> project. Kernels are complex beasts which exist
in a somewhat unique problem space and have constraints that many userspace
programs are not accustomed to. To illustrate this, I&rsquo;m going to highlight a
scenario where Hare&rsquo;s low-level types and manual memory management approach
shines to enable a difficult use-case.</p>
<p>Helios is a micro-kernel. During system initialization, its job is to load the
initial task into memory, prepare the initial set of kernel objects for its use,
provide it with information about the system, then jump to userspace and fuck
off until someone needs it again. I&rsquo;m going to focus on the &ldquo;providing
information&rdquo; step here.</p>
<p>The information the kernel needs to provide includes details about the
capabilities that init has access to (such as working with I/O ports),
information about system memory, the address of the framebuffer, and so on. This
information is provided to init in the bootinfo structure, which is mapped into
its address space, and passed to init via a register which points to this
structure.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// The bootinfo structure.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">bootinfo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">argv</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Capability ranges
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">memory</span><span class="o">:</span><span class="w"> </span><span class="n">cap_range</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">devmem</span><span class="o">:</span><span class="w"> </span><span class="n">cap_range</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">userimage</span><span class="o">:</span><span class="w"> </span><span class="n">cap_range</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">stack</span><span class="o">:</span><span class="w"> </span><span class="n">cap_range</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">bootinfo</span><span class="o">:</span><span class="w"> </span><span class="n">cap_range</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">unused</span><span class="o">:</span><span class="w"> </span><span class="n">cap_range</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Other details
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">arch</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">arch_bootinfo</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ipcbuf</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">modules</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">module_desc</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">memory_info</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">memory_desc</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">devmem_info</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">memory_desc</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">tls_base</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">tls_size</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Parts of this structure are static (such as the capability number ranges for
each capability assigned to init), and others are dynamic - such as structures
describing the memory layout (N items where N is the number of memory regions),
or the kernel command line. But, we&rsquo;re in a kernel &ndash; dynamically allocating
data is not so straightforward, especially for units smaller than a page!<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>
Moreover, the data structures allocated here need to be visible to userspace,
and kernel memory is typically not available to userspace. A further
complication is the three different address spaces we&rsquo;re working with here: a
bootinfo object has a physical memory address, a kernel address, and a userspace
address — three addresses to refer to a single object in different
contexts.</p>
<p>Here&rsquo;s an example of what the code shown in this article is going to produce:</p>
<p><img src="https://redacted.moe/f/ad558439.png" alt="A 64 by 64 grid of cells representing a page of physical memory. The first set
of cells are colored blue; the next set green; then purple; the remainder are
brown."></p>
<p>This is a single page of physical memory which has been allocated for the
bootinfo data, where each cell is a byte. The bootinfo structure itself comes
first, in blue. Following this is an arch-specific bootinfo structure, in green:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// x86_64-specific boot information
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">arch_bootinfo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Page table capabilities
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">pdpt</span><span class="o">:</span><span class="w"> </span><span class="n">cap_range</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pd</span><span class="o">:</span><span class="w"> </span><span class="n">cap_range</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pt</span><span class="o">:</span><span class="w"> </span><span class="n">cap_range</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// vbe_mode_info physical address from multiboot (or zero)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">vbe_mode_info</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>After this, in purple, is the kernel command line. These three structures are
always consistently allocated for any boot configuration, so the code which
sets up the bootinfo page (the code we&rsquo;re going to read now) always provisions
them. Following these three items is a large area of free space (indicated in
brown) which will be used to populate further dynamically allocated bootinfo
structures, such as descriptions of physical memory regions.</p>
<p>The code to set this up is <code>bootinfo_init</code>, which is responsible for allocating
a suitable page, filling in the bootinfo structure, and preparing a vector to
dynamically allocate additional data on this page. It also sets up the arch
bootinfo and argv, so the page looks like this diagram when the function
returns. And here it is, in its full glory:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Initializes the bootinfo context.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">bootinfo_init</span><span class="p">(</span><span class="n">heap</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">heap</span><span class="p">,</span><span class="w"> </span><span class="n">argv</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="n">bootinfo_ctx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">cslot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">caps</span><span class="o">::</span><span class="n">cslot</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">objects</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">ctype</span><span class="o">::</span><span class="n">PAGE</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cslot</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">heap</span><span class="p">.</span><span class="n">memory</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">phys</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">objects</span><span class="o">::</span><span class="n">page_phys</span><span class="p">(</span><span class="n">page</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mem</span><span class="o">::</span><span class="n">phys_tokernel</span><span class="p">(</span><span class="n">phys</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">bootinfo</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">bisz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="n">bootinfo</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">bootvec</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">info</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">)[</span><span class="n">bisz</span><span class="p">..</span><span class="n">arch</span><span class="o">::</span><span class="n">PAGESIZE</span><span class="p">][..</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">ctx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bootinfo_ctx</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cslot</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">info</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">arch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">null</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">arch_bootinfo</span><span class="p">,</span><span class="w"> </span><span class="c1">// Fixed up below
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="n">bootvec</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bootvec</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="p">(</span><span class="n">vec</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mkbootvec</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="n">arch_bootinfo</span><span class="p">),</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="kt">uintptr</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ctx</span><span class="p">.</span><span class="n">arch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">arch_bootinfo</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">info</span><span class="p">.</span><span class="n">arch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">user</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">arch_bootinfo</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="p">(</span><span class="n">vec</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mkbootvec</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">argv</span><span class="p">),</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">vec</span><span class="p">[..]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">toutf8</span><span class="p">(</span><span class="n">argv</span><span class="p">)[..];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">info</span><span class="p">.</span><span class="n">argv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">types</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">user</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">argv</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">capacity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">argv</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">str</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">ctx</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The first three lines are fairly straightforward. Helios uses capability-based
security, similar in design to <a href="https://sel4.systems/">seL4</a>. All kernel objects — such as
pages of physical memory — are utilized through the capability system. The
first two lines set aside a slot to store the page capability in, then allocate
a page using that slot. The next two lines grab the page&rsquo;s physical address and
use <code>mem::phys_tokernel</code> to convert it to an address in the kernel&rsquo;s virtual
address space, so that the kernel can write data to this page.</p>
<p>The next two lines are where it starts to get a little bit interesting:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">bisz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="n">bootinfo</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">bootvec</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">info</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">)[</span><span class="n">bisz</span><span class="p">..</span><span class="n">arch</span><span class="o">::</span><span class="n">PAGESIZE</span><span class="p">][..</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>This casts the &ldquo;info&rdquo; variable (of type *bootinfo) to a pointer to an
<em>unbounded</em> array of bytes (*[*]u8). This is a little bit dangerous! Hare&rsquo;s
arrays are bounds tested by default and using an unbounded type disables this
safety feature. We want to get a bounded slice again soon, which is what the
first slicing operator here does: <code>[bisz..arch::PAGESIZE]</code>. This obtains a
<em>bounded</em> slice of bytes which starts from the end of the bootinfo structure and
continues to the end of the page.</p>
<p>The last expression, another slicing expression, is a little bit unusual. A
slice type in Hare has the following internal representation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">slice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">data</span><span class="o">:</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="kt">void</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">length</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">capacity</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>When you slice an unbounded array, you get a slice whose length and capacity
fields are equal to the length of the slicing operation, in this case
<code>arch::PAGESIZE - bisz</code>. But when you slice a <em>bounded</em> slice, the length field
takes on the length of the slicing expression but the capacity field is
calculated from the original slice. So by slicing our new bounded slice to the
0th index ([..0]), we obtain the following slice:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="n">slice</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="p">(</span><span class="n">info</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="n">bootinfo</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">capacity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arch</span><span class="o">::</span><span class="n">PAGESIZE</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">bisz</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>In plain English, this is a slice whose base address is the address following
the bootinfo structure and whose capacity is the remainder of the free space on
its page, with a length of zero. This is something we can use <span
class="rainbow">static append</span> with!<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<style>
.rainbow {
  background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);
  background-clip: text;
  background-size: 800% 800%;
  animation: rainbow 8s ease infinite;
  -webkit-text-fill-color: transparent;
}

@keyframes rainbow { 
    0%{background-position:0% 50%}
    50%{background-position:100% 25%}
    100%{background-position:0% 50%}
}
</style>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Allocates a buffer in the bootinfo vector, returning the kernel vector and a
</span></span></span><span class="line"><span class="cl"><span class="c1">// pointer to the structure in the init vspace.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">mkbootvec</span><span class="p">(</span><span class="n">info</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">bootinfo_ctx</span><span class="p">,</span><span class="w"> </span><span class="n">sz</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w"> </span><span class="n">al</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">)</span><span class="w"> </span><span class="p">([]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">prevlen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">bootvec</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">padding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">prevlen</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">al</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">padding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">al</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">prevlen</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">al</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">static</span><span class="w"> </span><span class="k">append</span><span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">bootvec</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">],</span><span class="w"> </span><span class="n">sz</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">padding</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">vec</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">info</span><span class="p">.</span><span class="n">bootvec</span><span class="p">[</span><span class="n">prevlen</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">padding</span><span class="p">..];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">vec</span><span class="p">,</span><span class="w"> </span><span class="n">INIT_BOOTINFO_ADDR</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="n">bootinfo</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="n">prevlen</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>In Hare, slices can be dynamically grown and shrunk using the <em>append</em>,
<em>insert</em>, and <em>delete</em> keywords. This is pretty useful, but not applicable for
our kernel — remember, no dynamic memory allocation. Attempting to use
append in Helios would cause a linking error because the necessary runtime code
is absent from the kernel&rsquo;s Hare runtime. However, you can also <em>statically</em>
append to a slice, as shown here. So long as the slice has a sufficient capacity
to store the appended data, a static append or insert will succeed. If not, an
assertion is thrown at runtime, much like a normal bounds test.</p>
<p>This function makes good use of it to dynamically allocate memory from the
bootinfo page. Given a desired size and alignment, it statically appends a
suitable number of zeroes to the page, takes a slice of the new data, and
returns both that slice (in the kernel&rsquo;s address space) and the address that
data will have in the user address space. If we return to the earlier function,
we can see how this is used to allocate space for the arch_bootinfo structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="p">(</span><span class="n">vec</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mkbootvec</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="n">arch_bootinfo</span><span class="p">),</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="kt">uintptr</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">ctx</span><span class="p">.</span><span class="n">arch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">arch_bootinfo</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">info</span><span class="p">.</span><span class="n">arch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">user</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">arch_bootinfo</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>The &ldquo;ctx&rdquo; variable is used by the kernel to keep track of its state while
setting up the init task, and we stash the kernel&rsquo;s pointer to this data
structure in there, and the user&rsquo;s pointer in the bootinfo structure itself.</p>
<p>This is also used to place argv into the bootinfo page:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="p">(</span><span class="n">vec</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mkbootvec</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">argv</span><span class="p">),</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">vec</span><span class="p">[..]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">toutf8</span><span class="p">(</span><span class="n">argv</span><span class="p">)[..];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">info</span><span class="p">.</span><span class="n">argv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">types</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">user</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">argv</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">capacity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">argv</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">str</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Here we allocate a vector whose length is the length of the argument string,
with an alignment of one, and then copy argv into it as a UTF-8 slice. Slice
copy expressions like this one are a type-safe and memory-safe way to memcpy in
Hare. Then we do something a bit more interesting.</p>
<p>Like slices, strings have an internal representation in Hare which includes a
data pointer, length, and capacity. The types module provides a struct with this
representation so that you can do low-level string manipulation in Hare should
the task call for it. Hare&rsquo;s syntax allows us to take the address of a literal
value, such as a types::string struct, using the &amp; operator. Then we cast it to
a pointer to a string and dereference it. Ta-da! We set the bootinfo argv field
to a str value which uses the user address of the argument vector.</p>
<p>Some use-cases call for this level of fine control over the precise behavior of
your program. Hare&rsquo;s goal is to accommodate this need with little fanfare. Here
we&rsquo;ve drawn well outside of the lines of Hare&rsquo;s safety features, but sometimes
it&rsquo;s useful and necessary to do so. And Hare provides us with the tools to get
the safety harness back on quickly, such as we saw with the construction of the
bootvec slice. This code is pretty weird but to an experienced Hare programmer
(which, I must admit, the world has very few of) it should make sense.</p>
<p>I hope you found this interesting! I&rsquo;m going back to kernel hacking. Next up is
loading the userspace ELF image into its address space. I had this working
before but decided to rewrite it. Wish me good luck!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>%rdi, if you were curious. Helios uses the System-V ABI, where %rdi is
used as the first parameter to a function call. This isn&rsquo;t exactly a function
call but the precedent is useful.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>4096 bytes.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Thanks to <a href="https://w3bits.com/rainbow-text/">Rahul of W3Bits</a> for this CSS.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 7 Sep 2022 00:00:00 +0000</pubDate></item><item><title>In praise of qemu</title><link>https://drewdevault.com/2022/09/02/2022-09-02-In-praise-of-qemu.html</link><description><![CDATA[<p><a href="https://www.qemu.org/">qemu</a> is another in a long line of great software started by <a href="https://bellard.org/">Fabrice
Bellard</a>. It provides virtual machines for a wide variety of software
architectures. Combined with KVM, it forms the foundation of nearly all cloud
services, and it runs SourceHut in our self-hosted datacenters. Much like
Bellard&rsquo;s ffmpeg revolutionized the multimedia software industry, qemu
revolutionized virtualisation.</p>
<p>qemu comes with a large variety of studiously implemented virtual devices, from
standard real-world hardware like e1000 network interfaces to accelerated
virtual hardware like virtio drives. One can, with the right combination of
command line arguments, produce a virtual machine of essentially any
configuration, either for testing novel configurations or for running
production-ready virtual machines. Network adapters, mouse &amp; keyboard, IDE or
SCSI or SATA drives, sound cards, graphics cards, serial ports — the
works. Lower level, often arch-specific features, such as AHCI devices, SMP,
NUMA, and so on, are also available and invaluable for testing any conceivable
system configurations. And these configurations <em>work</em>, and work reliably.</p>
<p>I have relied on this testing quite a bit when working on kernels, particularly
on <a href="https://drewdevault.com/2022/06/13/helios.html">my own Helios kernel</a>. With a little bit of command line magic, I can run
a fully virtualised system with a serial driver connected to the parent
terminal, with a hardware configuration appropriate to whatever I happen to be
testing, in a manner such that running and testing my kernel is no different
from running any other program. With -gdb I can set up gdb remote debugging and
even debug my kernel as if it were a typical program. Anyone who remembers osdev
in the Bochs days — or even earlier — understands the unprecedented
luxury of such a development environment. Should I ever find myself working on a
hardware configuration which is unsupported by qemu, my very first step will be
patching qemu to support it. In my reckoning, qemu support is nearly as
important for bringing up a new system as a C compiler is.</p>
<p>And qemu&rsquo;s implementation in C is simple, robust, and comprehensive. On the
several occasions when I&rsquo;ve had to read the code, it has been a pleasure.
Furthermore, the comprehensive approach allows you to build out a virtualisation
environment tuned precisely to your needs, whatever they may be, and it is
accommodating of many needs. Sure, it&rsquo;s low level — running a qemu command
line is certainly more intimidating than, say, VirtualBox — but the
trade-off in power afforded to the user opens up innumerable use-cases that are
simply not available on any other virtualisation platform.</p>
<p>One of my favorite, lesser-known features of qemu is qemu-user, which allows you
to register a <a href="https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html">binfmt</a> handler to run executables compiled for an arbitrary
architecture on Linux. Combined with a little chroot, this has made cross-arch
development easier than it has ever been before, something I frequently rely on
when working on <a href="https://harelang.org/">Hare</a>. If you do cross-architecture work and you haven&rsquo;t set
up qemu-user yet, you&rsquo;re missing out.</p>
<pre tabindex="0"><code>$ uname -a
Linux taiga 5.15.63-0-lts #1-Alpine SMP Fri, 26 Aug 2022 07:02:59 +0000 x86_64 GNU/Linux
$ doas chroot roots/alpine-riscv64/ /bin/sh
# uname -a
Linux taiga 5.15.63-0-lts #1-Alpine SMP Fri, 26 Aug 2022 07:02:59 +0000 riscv64 Linux
</code></pre><!-- Inline styles because lazy -->
<p><small style="
text-align: center;
display: block;
color: #555;
">This is amazing.</small></p>
<p>qemu also holds a special place in my heart as one of the first projects I
contributed to over email 🙂 And they still use email today, and even <a href="https://qemu.readthedocs.io/en/v6.2.0/devel/submitting-a-patch.html#if-you-cannot-send-patch-emails">recommend
SourceHut</a> to make the process easier for novices.</p>
<p>So, to Fabrice, and the thousands of other contributors to qemu, I offer my
thanks. qemu is one of my favorite pieces of software.</p>]]></description><pubDate>Fri, 2 Sep 2022 00:00:00 +0000</pubDate></item><item><title>powerctl: A small case study in Hare for systems programming</title><link>https://drewdevault.com/2022/08/28/powerctl-a-hare-case-study.html</link><description><![CDATA[<p><a href="https://sr.ht/~sircmpwn/powerctl/">powerctl</a> is a little weekend project I put
together to provide a simple tool for managing power states on Linux. I had
previously put my laptop into suspend with a basic &ldquo;echo mem | doas tee
/sys/power/state&rdquo;, but this leaves a lot to be desired. I have to use doas to
become root, and it&rsquo;s annoying to enter my password — not to mention
difficult to use in a script or to attach to a key binding. powerctl is the
solution: a small 500-line Hare program which provides comprehensive support for
managing power states on Linux for non-privileged users.</p>
<p>This little project ended up being a useful case-study in writing a tight
systems program in Hare. It has to do a few basic tasks which Hare shines in:</p>
<ul>
<li>setuid binaries</li>
<li>Group lookup from /etc/group</li>
<li>Simple string manipulation</li>
<li>Simple I/O within sysfs constraints</li>
</ul>
<p>Linux documents these features <a href="https://www.kernel.org/doc/html/latest/admin-guide/pm/sleep-states.html">here</a>, so it&rsquo;s a simple matter of rigging it
up to a nice interface. Let&rsquo;s take a look at how it works.</p>
<p>First, one of the base requirements for this tool is to run as a non-privileged
user. However, since writing to sysfs requires root, this program will have to
be setuid, so that it runs as root regardless of who executes it. To prevent any
user from suspending the system, I added a &ldquo;power&rdquo; group and only users who are
in this group are allowed to use the program. Enabling this functionality in
Hare is quite simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">unix</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">unix</span><span class="o">::</span><span class="n">passwd</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">POWER_GROUP</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;power&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Determines if the current user is a member of the power group.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">checkgroup</span><span class="p">()</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">uid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unix</span><span class="o">::</span><span class="n">getuid</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">euid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unix</span><span class="o">::</span><span class="n">geteuid</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uid</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">euid</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error: this program must be installed with setuid (chmod u+s)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">passwd</span><span class="o">::</span><span class="n">getgroup</span><span class="p">(</span><span class="n">POWER_GROUP</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">grent</span><span class="o">:</span><span class="w"> </span><span class="n">passwd</span><span class="o">::</span><span class="n">grent</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">grent</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error: {} group missing from /etc/group&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">POWER_GROUP</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">passwd</span><span class="o">::</span><span class="n">grent_finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">group</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">gids</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unix</span><span class="o">::</span><span class="n">getgroups</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">gids</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">gids</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">group</span><span class="p">.</span><span class="n">gid</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The POWER_GROUP variable allows distributions that package powerctl to
configure exactly which group is allowed to use this tool. Following this, we
compare the uid and effective uid. If the uid is zero, we&rsquo;re already running
this tool as root, so we move on. Otherwise, if the euid is nonzero, we lack the
permissions to continue, so we bail out and tell the user to fix their
installation.</p>
<p>Then we fetch the details for the power group from /etc/group. Hare&rsquo;s standard
library includes <a href="https://docs.harelang.org/unix/passwd">a module</a> for working
with this file. Once we have the group ID from the string, we check the current
user&rsquo;s supplementary group IDs to see if they&rsquo;re a member of the appropriate
group. Nice and simple. This is also the only place in powerctl where dynamic
memory allocation is required, to store the group details, which are freed with
&ldquo;defer passwd::grent_finish&rdquo;.</p>
<p>The tool also requires some simple string munging to identify the supported set
of states. If we look at /sys/power/disk, we can see the kind of data we&rsquo;re
working with:</p>
<pre tabindex="0"><code>$ cat /sys/power/disk 
[platform] shutdown reboot suspend test_resume 
</code></pre><p>These files are a space-separated list of supported states, with the currently
enabled state enclosed in square brackets. Parsing these files is a simple
matter for Hare. We start with a simple utility function which reads the file
and prepares a <a href="https://docs.harelang.org/strings#tokenize">string tokenizer</a>
which splits the string on spaces:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">read_states</span><span class="p">(</span><span class="n">path</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">tokenizer</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">static</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">512</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">os</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">read</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">z</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">z</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">abort</span><span class="p">(</span><span class="s">&#34;Unexpected EOF from sysfs&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">rtrim</span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">fromutf8</span><span class="p">(</span><span class="n">buf</span><span class="p">[..</span><span class="n">z</span><span class="p">]),</span><span class="w"> </span><span class="sc">&#39;\n&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">tokenize</span><span class="p">(</span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="s">&#34; &#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The error handling here warrants a brief note. This function can fail if the
file does not exist or if there is an I/O error when reading it. I don&rsquo;t think
that I/O errors are possible in this specific case (they can occur when
<em>writing</em> to these files, though), but we bubble it up regardless using
&ldquo;io::read()?&rdquo;. The file might not exist if these features are not supported by
the current kernel configuration, in which case it&rsquo;s bubbled up as
&ldquo;errors::noentry&rdquo; via &ldquo;os::open()?&rdquo;. These cases are handled further up the call
stack. The other potential error site is &ldquo;io::close&rdquo;, which can fail but only in
certain circumstances (such as closing the same file twice), and we use the
error assertion operator (&quot;!&quot;) to indicate that the programmer believes this
case cannot occur. The compiler will check our work and abort at runtime should
this assumption be proven wrong in practice.</p>
<p>In the happy path, we read the file, trim off the newline, and return a
tokenizer which splits on spaces. The storage for this string is borrowed from
&ldquo;buf&rdquo;, which is statically allocated.</p>
<p>The usage of this function to query supported disk suspend behaviors is here:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">read_disk_states</span><span class="p">()</span><span class="w"> </span><span class="p">((</span><span class="n">disk_state</span><span class="p">,</span><span class="w"> </span><span class="n">disk_state</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">read_states</span><span class="p">(</span><span class="s">&#34;/sys/power/disk&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">states</span><span class="o">:</span><span class="w"> </span><span class="n">disk_state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">active</span><span class="o">:</span><span class="w"> </span><span class="n">disk_state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">next_token</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">s</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">s</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">trimmed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">trim</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;[&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;]&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">trimmed</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;platform&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">disk_state</span><span class="o">::</span><span class="n">PLATFORM</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;shutdown&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">disk_state</span><span class="o">::</span><span class="n">SHUTDOWN</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;reboot&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">disk_state</span><span class="o">::</span><span class="n">REBOOT</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;suspend&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">disk_state</span><span class="o">::</span><span class="n">SUSPEND</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;test_resume&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">disk_state</span><span class="o">::</span><span class="n">TEST_RESUME</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">states</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">trimmed</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">tok</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">active</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">states</span><span class="p">,</span><span class="w"> </span><span class="n">active</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This function returns a tuple which includes all of the supported disk states
OR&rsquo;d together, and a value which indicates which state is currently enabled. The
loop iterates through each of the tokens from the tokenizer returned by
<code>read_states</code>, trims off the square brackets, and adds the appropriate state
bits. We also check the trimmed token against the original token to detect which
state is currently active.</p>
<p>There&rsquo;s two edge cases to be taken into account here: what happens if Linux adds
more states in the future, and what happens if none of the states are active? In
the former case, we have the <code>continue</code> branch of the switch statement mid-loop.
Hare requires all switch statements to be exhaustive, so the compiler forces us
to consider this edge case. For the latter case, the return value will be zero,
simply indicating that none of these states are active. This is not actually
possible given the invariants for this kernel interface, but we could end up in
this situation if the kernel adds a new disk mode <em>and</em> that disk mode is active
when this code runs.</p>
<p>When the time comes to modify these states, either to put the system to sleep or
to configure its behavior when put to sleep, we use the following function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">write_state</span><span class="p">(</span><span class="n">path</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">os</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">flags</span><span class="o">::</span><span class="n">WRONLY</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">flags</span><span class="o">::</span><span class="n">TRUNC</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">128</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">bufio</span><span class="o">::</span><span class="n">buffered</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="p">[],</span><span class="w"> </span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintln</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This code is working within a specific constraint of sysfs: it must complete
the write operation in a single syscall. One of Hare&rsquo;s design goals is giving
you sufficient control over the program&rsquo;s behavior to plan for such concerns.
The means of opening the file — WRONLY | TRUNC — was also chosen
deliberately. The &ldquo;single syscall&rdquo; is achieved by using a buffered file, which
soaks up writes until the buffer is full and then flushes them out all at once.
The buffered stream flushes automatically on newlines by default, so the &ldquo;ln&rdquo; of
&ldquo;fprintln&rdquo; causes the write to complete in a single call.</p>
<p>With this helper in place, we can write power states. The ones which configure
the kernel, but don&rsquo;t immediately sleep, are straightforward:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Sets the current mem state.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">set_mem_state</span><span class="p">(</span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="n">mem_state</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">write_state</span><span class="p">(</span><span class="s">&#34;/sys/power/mem_sleep&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">mem_state_unparse</span><span class="p">(</span><span class="n">state</span><span class="p">))</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The star of the show, however, has some extra concerns:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Sets the current sleep state, putting the system to sleep.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">set_sleep_state</span><span class="p">(</span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="n">sleep_state</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Sleep briefly so that the keyboard driver can process the key up if
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// the user runs this program from the terminal.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">time</span><span class="o">::</span><span class="n">sleep</span><span class="p">(</span><span class="mi">250</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">time</span><span class="o">::</span><span class="n">MILLISECOND</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">write_state</span><span class="p">(</span><span class="s">&#34;/sys/power/state&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">sleep_state_unparse</span><span class="p">(</span><span class="n">state</span><span class="p">))</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>If you enter sleep with a key held down, key repeat will kick in for the
duration of the sleep, so when running this from the terminal you&rsquo;ll resume to
find a bunch of new lines. The time::sleep call is a simple way to avoid this,
by giving the system time to process your key release event before sleeping. A
more sophisticated solution could open the uinput devices and wait for all keys
to be released, but that doesn&rsquo;t seem entirely necessary.</p>
<p>Following this, we jump into the dark abyss of a low-power coma.</p>
<p>And that&rsquo;s all there is to it! A few hours of work and 500 lines of code later
and we have a nice little systems program to make suspending my laptop easier. I
was pleasantly surprised to find out how well this little program plays to
Hare&rsquo;s strengths. I hope you found it interesting! And if you happen to need a
simple tool for suspending your Linux machines,
<a href="https://sr.ht/~sircmpwn/powerctl">powerctl</a> might be the program for you.</p>]]></description><pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate></item><item><title>A review of postmarketOS on the Xiaomi Poco F1</title><link>https://drewdevault.com/2022/08/25/pmOS-on-xiaomi-poco-f1.html</link><description><![CDATA[<p>I have recently had cause to start looking into mainline Linux phones which fall
outside of the common range of grassroots phones like the PinePhone (which was
my daily driver for the past year). The <a href="https://wiki.postmarketos.org/wiki/Devices">postmarketOS wiki</a> is a great place
to research candidate phones for this purpose, and the phone I landed on is the
<a href="https://wiki.postmarketos.org/wiki/Xiaomi_Poco_F1_(xiaomi-beryllium)">Xiaomi Poco F1</a>, which I picked up on Amazon.nl (for ease of return in case
it didn&rsquo;t work out) for 270 Euro. Phones of this nature have a wide range of
support from Linux distros like postmarketOS, from &ldquo;not working at all&rdquo; to
&ldquo;mostly working&rdquo;. The essential features I require in a daily driver phone are
(1) a working modem and telephony support, (2) mobile data, and (3) reasonably
good performance and battery life; plus of course some sane baseline
expectations like a working display and touchscreen driver.</p>
<p>The use of mainline Linux on a smartphone requires a certain degree of bullshit
tolerance, and the main question is whether or not the bullshit exceeds your
personal threshold. The Poco F1 indeed comes with some bullshit, but I&rsquo;m pleased
to report that it falls short of my threshold and represents a significant
quality-of-life improvement over the PinePhone setup I have been using up to
now.</p>
<p>The bullshit I have endured for the Poco F1 setup can be categorized into two
parts: initial setup and ongoing problems. Of the two, the initial setup is by
far the worst. These phones are designed to run Android first, rather than the
mainline Linux first approach seen in devices like the PinePhone and Librem 5.
This means that it&rsquo;s back to dealing with things like Android recovery,
fastboot, and so on, during the initial setup. The most severe pain point for
Xiaomi phones is unlocking the bootloader.</p>
<p>The only officially supported means of doing this is via a Windows-only
application published by Xiaomi. A <a href="https://github.com/francescotescari/XiaoMiToolV2">reverse engineered</a> Java application
supposedly provides support for completing this process on Linux. However, this
approach comes with the typical bullshit of setting up a working Java
environment, and, crucially, Xiaomi appears to have sabotaged this effort via a
deliberate attempt to close the hole by returning error messages from this
reverse engineered API which direct the user to the official tool instead. On
top of this, Xiaomi requires you to associate the phone to be unlocked with a
user account on their services, paired to a phone number, and has a 30-day
waiting period between unlocks. I ultimately had to resort to a Windows 10 VM
with USB passthrough to get the damn thing unlocked. This is very frustrating
and far from the spirit of free software; Xiaomi earns few points for openness
in my books.</p>
<p>Once unlocked, the &ldquo;initial setup bullshit&rdquo; did not cease. The main issue is
that the postmarketOS flashing tool (which is just a wrapper around fastboot)
seemed to have problems writing a consistent filesystem. I was required to apply
a level of Linux expertise which exceeds that of even most enthusiasts to obtain
a shell in the initramfs, connect to it over postmarketOS&rsquo;s telnet debugging
feature, and run fsck.ext4 to fix the filesystem. Following this, I had to again
apply a level of Alpine Linux expertise which exceeds that of many enthusiasts
to repair installed packages and get everything up to a baseline of workitude.
Overall, it took me the better part of a day to get to a baseline of &ldquo;running a
working installation of postmarketOS&rdquo;.</p>
<p>However: following the &ldquo;initial setup bullshit&rdquo;, I found a very manageable scale
of &ldquo;ongoing problems&rdquo;. The device&rsquo;s base performance is excellent, far better
than the PinePhone — it just performs much like I would expect from a
normal phone. PostmarketOS is, as always, brilliant, and all of the usual
mainline Alpine Linux trimmings I would expect are present — I can SSH in,
I easily connected it to my personal VPN, and I&rsquo;m able to run most of the
software I&rsquo;m already used to from desktop Linux systems (though, of course, GUI
applications range widely in their ability to accomodate touch screens and a
portrait mobile form-factor). I transferred my personal data over from my
PinePhone using a method which is 100% certifiably absent of bullshit, namely
just rsyncing over my home directory. Excellent!</p>
<p>Telephony support also works pretty well. Audio profiles are a bit buggy, and I
can often find my phone using my headphone output while I don&rsquo;t have them
plugged in instead of the speakers, having to resort to manually switching
between them from time to time. However, I have never had an issue with the
audio profiles being wrong during a phone call (the modem works, by the way);
earpiece and speakerphone both work as expected. That said, I have heard
complaints from recipients of my phone calls about hearing an echo of their own
voice. Additionally, DTMF tones do not work, but <a href="https://gitlab.freedesktop.org/mobile-broadband/ModemManager/-/merge_requests/823">the fix</a> has already been
merged and is expected in the next release of ModemManager. SMS and mobile data
work fine, and mobile data works with a lesser degree of bullshit than I was
prepared to expect after reading the pmOS wiki page for this device.</p>
<p>Another problem is that the phone&rsquo;s onboard cameras do not work at all, and it
seems unlikely that this will be solved in the near future. This is not really
an issue for me. Another papercut is that Phosh handles the display notch
poorly, and though pmOS provides a &ldquo;tweak&rdquo; tool which can move the clock over
from behind the notch, it leaves something to be desired. The <a href="https://gitlab.gnome.org/World/Phosh/phosh/-/issues/552">relevant
issue</a> is being discused on the Phosh issue tracker and a fix is presumably
coming soon — it doesn&rsquo;t seem particularly difficult to solve. I have also
noted that, though GPS works fine, Mepo <a href="https://redacted.moe/f/40dd2e96.png">renders incorrectly</a> and Gnome Maps
has (less severe) <a href="https://redacted.moe/f/ce6414d5.png">display issues</a> as well.</p>
<p>The battery life is not as good as the PinePhone, which itself is not as good as
most Android phones. However, it meets my needs. It seems to last anywhere from
8 to 10 hours depending on usage, following a full night&rsquo;s charge. As such, I
can leave it off of the juice when I go out without too much fear. That said, I
do keep a battery bank in my backpack just in case, but that&rsquo;s also just a
generally useful thing to have around. I think I&rsquo;ve lent it to others more than
I&rsquo;ve used it myself.</p>
<p>There are many other apps which work without issues. I found that <a href="https://johnfactotum.github.io/foliate/">Foliate</a>
works great for reading e-books and <a href="https://wiki.gnome.org/Apps/Evince">Evince</a> works nicely for PDFs (two
use-cases which one might perceive as related, but which I personally have
different UI expectations for). Firefox has far better performance on this
device than on the PinePhone and allows for very comfortable web browsing. I
also discovered <a href="https://gfeeds.gabmus.org/">Gnome Feeds</a> which, while imperfect, accommodates my needs
regarding an RSS feed reader. All of the &ldquo;standard&rdquo; mobile Linux apps that
worked fine on the PinePhone also work fine here, such as Lollypop for music and
the Porfolio file manager.</p>
<p>I was pleasantly surprised that, after enduring some more bullshit, I was able
to get <a href="https://waydro.id/">Waydroid</a> to work, allowing me to run Android applications on this
phone. My expectations for this were essentially non-existent, so any degree of
workitude was a welcome surprise, and any degree of non-workitude was the
expected result. On the whole, I&rsquo;m rather impressed, but don&rsquo;t expect anything
near perfection. The most egregious issue is that I found that internal storage
simply doesn&rsquo;t work, so apps cannot store or read common files (though they seem
to be able to persist their own private app data just fine). The camera does not
work, so the use-case I was hoping to accommodate here — running my bank&rsquo;s
Android app — is not possible. However, I was able to install F-Droid and
a small handful of Android apps that work with a level of performance which is
indistinguishable from native Android performance. It&rsquo;s not quite there yet, but
Waydroid has a promising future and will do a lot to bridge the gap between
Android and mainline Linux on mobile.</p>
<p>On the whole, I would rate the Poco F1&rsquo;s bullshit level as follows:</p>
<ul>
<li>Initial setup: miserable</li>
<li>Ongoing problems: minor</li>
</ul>
<p>I have a much higher tolerance for &ldquo;initial setup&rdquo; bullshit than for ongoing
problems bullshit, so this is a promising result for my needs. I have found that
this device is ahead of the PinePhone that I had been using previously in almost
all respects, and I have switched to it as my daily driver. In fact, this phone,
once the initial bullshit is addressed, is complete enough that it may be the
first mainline Linux mobile experience that I might recommend to others as a
daily driver. I&rsquo;m glad that I made the switch.</p>]]></description><pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate></item><item><title>PINE64 has let its community down</title><link>https://drewdevault.com/2022/08/18/PINE64-let-us-down.html</link><description><![CDATA[<p>Context for this post:</p>
<ul>
<li><a href="https://drewdevault.com/2022/01/18/Pine64s-weird-priorities.html">Pine64 should re-evaluate their community priorities</a></li>
<li><a href="https://tuxphones.com/pine-formula/">The Pine Formula</a></li>
<li><a href="https://blog.brixit.nl/why-i-left-pine64/">Why I left PINE64</a></li>
<li><a href="https://www.pine64.org/2022/08/18/a-response-to-martijns-blog/">A response to Martijn’s blog</a></li>
</ul>
<hr>
<p>I know that apologising and taking responsibility for your mistakes is
difficult. It seems especially difficult for commercial endeavours, which have
fostered a culture of cold disassociation from responsibility for their actions,
where admitting to wrongdoing is absolutely off the table. I disagree with this
culture, but I understand where it comes from, and I can empathise with those
who find themselves in the position of having to reconsider their actions in the
light of the harm they have done. It&rsquo;s not easy.</p>
<p>But, the reckoning must come. I have been a long-time supporter of PINE64. On
this blog I have written positively about the <a href="https://drewdevault.com/2019/12/18/PinePhone-review.html">PinePhone</a> and <a href="https://drewdevault.com/2021/05/14/Pinebook-Pro-review.html">PineBook
Pro</a>.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> I believed that PINE64 was doing the right thing and was offering
something truly revolutionary on the path towards getting real FOSS systems into
phones. I use a PinePhone as my daily driver,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and I also own a PineBook Pro,
two RockPro64s, a PinePhone Pro, and a PineNote as well. All of these devices
have issues, some of them crippling, but PINE64&rsquo;s community model convinced me
to buy these with confidence in the knowledge that they would be able to work
with the community to address these flaws given time.</p>
<p>However, PINE64&rsquo;s treatment of its community has been in a steady decline for
the past year or two, culminating in postmarketOS developer Martijn Braam&rsquo;s
<a href="https://blog.brixit.nl/why-i-left-pine64/">blog post</a> outlining a stressful and frustrating community to participate
in, a lack of respect from PINE64 towards this community, and a model moving
from a diverse culture that builds working software together to a Manjaro
mono-culture that doesn&rsquo;t. PINE64 offered a <a href="https://www.pine64.org/2022/08/18/a-response-to-martijns-blog/">disappointing response</a>. In
their blog post, they dismiss the problems Martijn brings up, paint his post as
misguided at best and disingenuous at worst, and fail to take responsibility for
their role in any of these problems.</p>
<p>The future of PINE64&rsquo;s Manjaro mono-culture is dim. Manjaro is a very poorly
run Linux distribution with a history of financial mismanagement, ethical
violations, security incidents, shipping broken software, and disregarding the
input of its peers in the distribution community. Just this morning they allowed
their SSL certificates to expire — for the fourth time. An <a href="https://dont-ship.it/">open
letter</a>, signed jointly by 16 members of the Linux
mobile community, called out bad behaviors which are largely attributable to
Manjaro. I do not respect their privileged position in the PINE64 community,
which I do not expect to be constructive or in my best interests. I have never
been interested in running Manjaro on a PINE64 device and once they turn their
back on the lush ecosystem they promised, I no longer have any interest in the
platform.</p>
<p>It&rsquo;s time for PINE64 to take responsibility for these mistakes, and make clear
plans to correct them. To be specific:</p>
<ul>
<li>Apologise for mistreatment of community members.</li>
<li>Make a tangible commitment to honoring and respecting the community.</li>
<li>Rescind their singular commitment to Manjaro.</li>
<li>Re-instate community editions and expand the program.</li>
<li>Deal with this stupid SPI problem. The community is right, listen to them.</li>
</ul>
<p>I understand that it&rsquo;s difficult to acknowledge our mistakes. But it is also
necessary, and important for the future of PINE64 and the future of mobile Linux
in general. I call on TL Lim, Marek Kraus, and Lukasz Erecinski to personally
answer for these problems.</p>
<p>There are three possible outcomes to this controversy, depending on PINE64&rsquo;s
response. If PINE64 refuses to change course, the community will continue to
decay and fail — the community PINE64 depends on to make its devices
functional and useful. Even the most mature PINE64 products still need a lot of
work, and none of the new products are even remotely usable. This course of
events will be the end of PINE64 and deal a terrible blow to the mobile FOSS
movement.</p>
<p>The other option for PINE64 to change its behavior. They do this with grace, or
without. If they crumble under public pressure and, for example, spitefully
agree to re-instate community editions without accepting responsibility for
their wrongdoings, it does not bode well for addressing the toxic environment
which is festering in the PINE64 community. This may be better than the worst
case, but may not be enough. New community members may hesitate to join,
maligned members may not offer their forgiveness, and PINE64&rsquo;s reputation will
suffer for a long time.</p>
<p>The last option is for PINE64 to act with grace and humility. Acknowledge your
mistakes and apologise to those who have been hurt. Re-commit to honoring your
community and treating your peers with respect. Remember, the community are
volunteers. They have no obligation to make peace, so it&rsquo;s on you to mend these
wounds. It will still be difficult to move forward, but doing it with humility,
hand in hand with the community, will set PINE64 up with the best chance of
success. We&rsquo;re counting on you to do the right thing.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The latter post, dated in May 2021, also mentions the u-Boot SPI issue
that PINE64&rsquo;s push-back on ultimately led Martijn to quit the PINE64
community. PINE64&rsquo;s justification is &ldquo;based on the fact that for years
SPI was largely unused on PINE64 devices&rdquo;, but people have been arguing that
SPI <em>should</em> be used for years, too.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Though it has and has always had serious issues that would prevent me from
recommending it to others. It still needs work.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate></item><item><title>Status update, August 2022</title><link>https://drewdevault.com/2022/08/16/Status-update-August-2022.html</link><description><![CDATA[<p>It is a blessedly cool morning here in Amsterdam. I was busy moving house
earlier this month, so this update is a bit quieter than most.</p>
<p>For a fun off-beat project this month, I started working on a <a href="https://git.sr.ht/~sircmpwn/hdmg">GameBoy
emulator</a> written in Hare. No promises on when
it will be functional or how much I plan on working on it &ndash; just doing it for
fun. In more serious Hare news, I have implemented Thread-Local Storage (TLS)
for qbe, our compiler backend. Hare&rsquo;s standard library does not support
multi-threading, but I needed this for Helios, whose driver library does support
threads. It will also presumably be of use for cproc once it lands upstream.</p>
<p>Speaking of Helios, it received the runtime components for TLS support on
x86_64, namely the handling of %fs and its base register MSR in the context
switch, and updates to the ELF loader for handling .tdata/.tbss sections.
I have also implemented support for moving and copying capabilities, which will
be useful for creating new processes in userspace. Significant progress towards
capability destructors was also made, with some capabilities — pages and
page tables in particular — being reclaimable now. Next goal is to finish
up all of this capability work so that you can freely create, copy, move, and
destroy capabilities, then use all of these features to implement a simple
shell. There is also some refactoring due at some point soon, so we&rsquo;ll see about
that.</p>
<p>Other Hare progress has been slow this month, as I&rsquo;m currently looking at a
patch queue 123 emails backed up. When I&rsquo;m able to sit down and get through
these, we can expect a bunch of updates in short order.</p>
<p>SourceHut news will be covered in the &ldquo;what&rsquo;s cooking&rdquo; post later today. That&rsquo;s
all for now! Thanks for tuning in.</p>]]></description><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate></item><item><title>How I wish I could organize my thoughts</title><link>https://drewdevault.com/2022/08/10/Organizing-my-thoughts.html</link><description><![CDATA[<p>I keep a pen &amp; notebook on my desk, which I make liberal use of to jot down my
thoughts. It works pretty well: ad-hoc todo lists, notes on problems I&rsquo;m working
on, tables, flowcharts, etc. It has some limitations, though. Sharing anything
out of my notebook online is an awful pain in the ass. I can&rsquo;t draw a straight
line to save my life, so tables and flowcharts are a challenge. No edits,
either, so lots of crossed-out words and redrawn or rewritten pages. And of
course, my handwriting sucks and I can type much more efficiently than I can
write. I wish this was a digital medium, but there are not any applications
available which can support the note-taking paradigm that I wish I could have.
What would that look like?</p>
<p>Well, like this (click for full size):</p>
<p><a href="https://redacted.moe/f/920d5d58.png"><img src="https://redacted.moe/f/920d5d58.png" alt="A mock-up of an application. A4 pages are arranged ad-hoc on a grid.
Handwritten notes and drawings appear in red across the grid and over the pages.
A flowchart is shown outside of a page."></a></p>
<p>I don&rsquo;t have the bandwidth to take on a new project of this scope, so I&rsquo;ll
describe what I think this should look like in the hopes that it will inspire
another team to work on something like this. Who knows!</p>
<p>The essential interface would be an infinite grid on which various kinds of
objects can be placed by the user. The most important of these objects would be
pages, at a page size configurable by the user (A4 by default). You can zoom in
on a page (double click it or something) to make it your main focus, zooming in
automatically to an appropriate level for editing, then type away. A simple
WYSIWYG paradigm would be supported here, perhaps supporting only headings,
bold/italic text, and ordered and unordered lists — enough to express your
thoughts but not a full blown document editor/typesetter.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> When you run out
of page, another is generated next to the current page, either to the right or
below — configurable.</p>
<p>Other objects would include flowcharts, tables, images, hand-written text and
drawings, and so on. These objects can be placed free form on the grid, or
embedded in a page, or moved between each mode.</p>
<p>The user input paradigm should embrace as many modes of input as the user wants
to provide. Mouse and keyboard: middle click to pan, scroll to zoom in or out,
left click and drag to move objects around, shift+click to select objects, etc.
A multi-point trackpad should support pinch to zoom, two finger pan, etc. Touch
support is fairly obvious. <a href="https://en.wikipedia.org/wiki/Graphics_tablet">Drawing tablet</a> support is also important: the
user should be able to use one to draw and write free-form. I&rsquo;d love to be able
to make flowcharts by drawing boxes and arrows and having the software recognize
them and align them to the grid as first-class vector objects. Some drawing
tablets support trackpad and touch-screen-like features as well — so all
of those interaction options should just werk.</p>
<p>Performance is important here. I should be able to zoom in and out and pan
around while all of the objects rasterize themselves in real-time, never making
the user suffer through stuttery interactions. There should also be various ways
to export this content. A PDF exporter should let me arrange the pages in the
desired linear order. SVG exporters should be able to export objects like
flowcharts and diagrams. Other potential features includes real-time
collaboration or separate templates for presentations.</p>
<p>Naturally this application should be free software and should run on Linux.
However, I would be willing to pay a premium price for this tool — a
one-time fee of as much as $1000, or subscriptions on the order of $100/month if
real-time collaboration or cloud synchronization are included. If you&rsquo;d like
some ideas for how to monetize free software projects like this, feel free to
swing by <a href="https://hackmeeting.org/hackit22/schedule.html#talk-a2eb7aa1-90ac-48b9-8ac9-b16235eb2daf">my talk on the subject</a> in Italy early this September to talk about
it.</p>
<p>Well, that&rsquo;s enough dreaming for now. I hope this inspired you, and in the
meantime it&rsquo;s back to pen and paper for me.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Though perhaps you could import pages from an external PDF, so you can
typeset stuff in LaTeX or whatever and then work with those documents inside
of this tool. Auto-reload from the source PDFs and so on would be a bonus for
sure.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate></item><item><title>Conciseness</title><link>https://drewdevault.com/2022/07/26/Conciseness.html</link><description><![CDATA[<p>Conciseness is often considered a virtue among hackers and software engineers.
FOSS maintainers in particular generally prefer to keep bug reports, questions
on mailing lists, discussions in IRC channels, and so on, close to the point and
with minimal faff. It&rsquo;s not considered impolite to skip the formalities —
quite the opposite. So: keep your faffery to a minimum. A quick &ldquo;thanks!&rdquo; at the
end of a discussion will generally suffice. And, when someone is being direct
with you, don&rsquo;t interpret it as a slight: simply indulge in the blissful freedom
of a discussion absent of faffery.</p>]]></description><pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate></item><item><title>Code review at the speed of email</title><link>https://drewdevault.com/2022/07/25/Code-review-with-aerc.html</link><description><![CDATA[<p>I&rsquo;m a big proponent of the email workflow for patch submission and code review.
I have previously published some content (<a href="https://spacepub.space/w/no6jnhHeUrt2E5ST168tRL">How to use git.sr.ht&rsquo;s send-email
feature</a>, <a href="https://spacepub.space/w/3JhBcvEYbminv8ji4k84gx">Forks &amp; pull requests vs email</a>, <a href="https://git-send-email.io">git-send-email.io</a>) which
demonstrates the contributor side of this workflow, but it&rsquo;s nice to illustrate
the advantages of the maintainer workflow as well. For this purpose, I&rsquo;ve
recorded a short video demonstrating how I manage code review as an
email-oriented maintainer.</p>
<p><em>Disclaimer: I am the founder of <a href="https://sourcehut.org">SourceHut</a>, a platform built on this
workflow which competes with platforms like GitHub and GitLab. This article&rsquo;s
perspective is biased.</em></p>
<iframe title="Code review at the speed of email" src="https://spacepub.space/videos/embed/385c414a-2bdc-4bf3-82a0-76fcb15093e9" allowfullscreen="" sandbox="allow-same-origin allow-scripts allow-popups" width="560" height="315" frameborder="0"></iframe>
<p class="text-center">
  <em>
  This blog post provides additional material to supplement this video, and also
  includes all of the information from the video itself. For those who prefer
  reading over watching, you can just stick to reading this blog post. Or, you
  can watch the video and skim the post. Or you can just do something else! When
  was the last time you called your grandmother?
  </em>
</p>
<p>With hundreds of hours of review experience on GitHub, GitLab, and SourceHut, I
can say with confidence the email workflow allows me to work much faster than
any of the others. I can review small patches in seconds, work quickly with
multiple git repositories, easily test changes and make tweaks as necessary,
rebase often, and quickly chop up and provide feedback for larger patches.
Working my way through a 50-email patch queue usually takes me about 20 minutes,
compared to an hour or more for the same number of merge requests.</p>
<p>This workflow also works entirely offline. I can read and apply changes locally,
and even reply with feedback or to thank contributors for their patch. My mail
setup automatically downloads mail from IMAP using <a href="https://isync.sourceforge.io/">isync</a> and outgoing mails
are queued with <a href="http://www.postfix.org/">postfix</a> until the network is ready. I have often worked
through my patch queue on an airplane or a train with spotty or non-functional
internet access without skipping a beat. Working from low-end devices like a
Pinebook or a phone are also no problem — aerc is very lightweight in the
terminal and the SourceHut web interface is <a href="https://forgeperf.org">much lighter &amp; faster</a> than any
other web forge.</p>
<p>The centerpiece of my setup is an email client I wrote specifically for software
development using this workflow: <a href="https://aerc-mail.org/">aerc</a>.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> The stock configuration of aerc
is pretty good, but I make a couple of useful additions specifically for
development on SourceHut. Specifically, I add a few keybindings to
<code>~/.config/aerc/binds.conf</code>:</p>
<pre tabindex="0"><code>[messages]
ga = :flag&lt;Enter&gt;:pipe -mb git am -3&lt;Enter&gt;
gp = :term git push&lt;Enter&gt;
gl = :term git log&lt;Enter&gt;

rt = :reply -a -Tthanks&lt;Enter&gt;
Rt = :reply -qa -Tquoted_thanks&lt;Enter&gt;

[compose::review]
V = :header -f X-Sourcehut-Patchset-Update NEEDS_REVISION&lt;Enter&gt;
A = :header -f X-Sourcehut-Patchset-Update APPLIED&lt;Enter&gt;
R = :header -f X-Sourcehut-Patchset-Update REJECTED&lt;Enter&gt;
</code></pre><p>The first three commands, ga, gp, and gl, are for invoking git commands. &ldquo;ga&rdquo;
applies the current email as a patch, using <a href="https://git-scm.com/docs/git-am">git am</a>, and &ldquo;gp&rdquo; simply runs
git push. &ldquo;gl&rdquo; is useful for quickly reviewing the git log. ga also flags the
email so that it shows up in the UI as having been applied, which is useful as
I&rsquo;m jumping all over a patch queue. I also make liberal use of \ (:filter) to
filter my messages to patches applicable to specific projects or goals.</p>
<p>rt and Rt use aerc templates installed at <code>~/.config/aerc/templates/</code> to reply
to emails after I&rsquo;ve finished reviewing them. The &ldquo;thanks&rdquo; template is:</p>
<pre tabindex="0"><code>X-Sourcehut-Patchset-Update: APPLIED

Thanks!

{{exec &#34;{ git remote get-url --push origin; git reflog -2 origin/master --pretty=format:%h | xargs printf &#39;%s\n&#39; | tac; } | xargs printf &#39;To %s\n   %s..%s  master -&gt; master&#39;&#34; &#34;&#34;}}
</code></pre><p>And quoted_thanks is:</p>
<pre tabindex="0"><code>X-Sourcehut-Patchset-Update: APPLIED

Thanks!

{{exec &#34;{ git remote get-url --push origin; git reflog -2 origin/master --pretty=format:%h | xargs printf &#39;%s\n&#39; | tac; } | xargs printf &#39;To %s\n   %s..%s  master -&gt; master&#39;&#34; &#34;&#34;}}

On {{dateFormat (.OriginalDate | toLocal) &#34;Mon Jan 2, 2006 at 3:04 PM MST&#34;}}, {{(index .OriginalFrom 0).Name}} wrote:
{{wrapText .OriginalText 72 | quote}}
</code></pre><p>Both of these add a magic &ldquo;X-Sourcehut-Patchset-Update&rdquo; header, which updates
the status of the patch on the mailing list. They also include a shell pipeline
which adds some information about the last push from this repository, to help
the recipient understand what happened to their patch. I often make some small
edits to request the user follow-up with a ticket for some future work, or add
other timely comments. The second template, quoted_reply, is also particularly
useful for this: it quotes the original message so I can reply to specific parts
of it, in the commit message, timely commentary, or the code itself, often
pointing out parts of the code that I made some small tweaks to before applying.</p>
<p>And that&rsquo;s basically it! You can browse all of my dotfiles <a href="https://git.sr.ht/~sircmpwn/dotfiles">here</a> to see more
details about my system configuration. With this setup I am able to work my way
through a patch queue easier and faster than ever before. That&rsquo;s why I like the
email workflow so much: for power users, no alternative is even close in terms
of efficiency.</p>
<p>Of course, this is the power user workflow, and it can be intimidating to learn
all of these things. This is why we offer more novice-friendly tools, which lose
some of the advantages but are often more intuitive. For instance, we are
working on user interface on the web for patch review, mirroring our existing
<a href="https://spacepub.space/w/no6jnhHeUrt2E5ST168tRL">web interface for patch submission</a>. But, in my opinion, it doesn&rsquo;t get
better than this for serious FOSS maintainers.</p>
<p>Feel free to reach out on IRC in #sr.ht.watercooler on Libera Chat, or <a href="mailto:sir@cmpwn.com">via
email</a>, if you have any questions about this workflow and
how you can apply it to your own projects. Happy hacking!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Don&rsquo;t want to switch from your current mail client? Tip: You can use more than one 🙂 I usually fire up multiple aerc instances in any case, one &ldquo;main&rdquo; instance and more ephemeral processes for working in specific projects. The startup time is essentially negligible, so this solution is very cheap and versatile.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate></item><item><title>The past and future of open hardware</title><link>https://drewdevault.com/2022/07/25/Open-hardware-graveyard.html</link><description><![CDATA[<p>They say a sucker is born every day, and at least on the day of my birth, that
certainly may have been true. I have a bad habit of spending money on open
hardware projects that ultimately become vaporware or seriously under-deliver on
their expectations. In my ledger are EOMA68, DragonBox Pyra, the Jolla Tablet
— which always had significant non-free components — and the Mudita
Pure, though I did successfully receive a refund for the latter two.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>There are some success stories, though. My Pine64 devices work great —
though they have non-free components — and I have a HiFive Unmatched that
I&rsquo;m reasonably pleased with. Raspberry Pi is going well, if you can find one
— also with non-free components — and Arduino and products like it
are serving their niche pretty well. I hear the MNT Reform went well, though by
then I had learned to be a bit more hesitant to open my wallet for open
hardware, so I don&rsquo;t have one myself. Pebble worked, until it didn&rsquo;t. Caveats
abound in all of these projects.</p>
<p>What does open hardware need to succeed, and why have many projects failed?
And why do the successful products often have non-free components and poor
stock? We can&rsquo;t blame it all on the chip shortage and/or COVID: it&rsquo;s been an
issue for a long time.</p>
<p>I don&rsquo;t know the answers, but I hope we start seeing improvements. I hope that
the successful projects will step into a mentorship role to provide
up-and-comers with tips on how they made their projects work, and that we see a
stronger focus on liberating non-free components. Perhaps Crowd Supply can do
some work in helping to secure investment<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> for open hardware projects, and
continue the good work they&rsquo;re already doing on guiding them through the
development and production processes.</p>
<p>Part of this responsibility comes down to the consumer: spend your money on free
projects, and don&rsquo;t spend your money on non-free projects. But, we also need to
look closely at the viability of each project, and open hardware projects need
to be transparent about their plans, lest we get burned again. Steering the open
hardware movement out of infancy will be a challenge for all involved.</p>
<p>Are you working on a cool open hardware project? <a href="mailto:sir@cmpwn.com">Let me know</a>. Explain how
you plan on making it succeed and, if I&rsquo;m convinced that your idea has promise,
I&rsquo;ll add a link here.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I reached out to DragonBox recently and haven&rsquo;t heard back yet, so let&rsquo;s
give them the benefit of the doubt. EOMA68, however, is, uh, not going so well.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Ideally with careful attention paid to making sure that the resulting device does not serve its investors needs better than its users needs.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate></item><item><title>Status update, July 2022</title><link>https://drewdevault.com/2022/07/18/Status-update-July-2022.html</link><description><![CDATA[<p>Hello there! It&rsquo;s been a hot July week in Amsterdam, and I expect hotter days
are still to come. I wish air conditioning was more popular in Europe, but alas.
This month of FOSS development enjoyed a lot of small improvements in a lot of
different projects.</p>
<p>For Hare, I have introduced a number of improvements. I wrote a new standard
library module for string templates, <a href="https://docs.harelang.org/strings/template">strings::template</a>, and a new third-party
library for working with pixel buffers, <a href="https://git.sr.ht/~sircmpwn/pixbuf">pixbuf</a>. The templating is pretty
simple — as is typical for the standard library — but allows a
fairly wide range of formatting options. We&rsquo;ll be extending this a little bit
more in the future, but it will not be a complete solution like you see in
things like Jinja2. Nevertheless, it makes some use-cases, like code generation,
a lot cleaner, without introducing a weighty or complex dependency.</p>
<p>pixbuf is pretty neat, and is the first in a line of work I have planned for
graphics on Hare. It&rsquo;s similar to pixman, but with a much smaller scope —
it only deals with pixel buffers, handling pixel format conversions and doing
small operations like fill and copy. In the future I will add simple buffer
compositing as well, and extending modules like <a href="https://git.sr.ht/~sircmpwn/hare-png">hare-png</a> to support loading
data into these buffers. Later, I plan on writing a simple vector graphics
library, capable at least of rendering <a href="https://tinyvg.tech">TinyVG</a> images and perhaps later TinySVG
as well. I&rsquo;m also working on <a href="https://git.sr.ht/~sircmpwn/hare-wayland">hare-wayland</a> again, to provide a place to display
these buffers.</p>
<p>I also introduced <a href="https://docs.harelang.org/format/tar">format::tar</a>, which will serve as the basis of
initramfs-alike functionality for Helios. On the subject of Helios, much work
has been completed. I have implemented a PCI driver and a small proof-of-concept
AHCI driver (for reading from SATA disks). Alexey Yerin has also been hard at
work on the RISC-V port, and has successfully implemented an e1000 ethernet
driver which can send and receive ICMP (ping) packets. I also completed IRQ
control for userspace, so that userspace device drivers can process interrupts,
and used it to write a keyboard driver for a functional <a href="https://drewdevault.com/2022/07/01/Porting-DOOM-to-Helios.html">DOOM port</a>. The full
DOOM port required a fair bit of work — check out that blog post for the
complete details. The idle thread was also added, so that all processes can be
blocked waiting on interrupts, signals, endpoints, etc. Non-blocking send,
receive, and wait syscalls were also added this month.</p>
<p>I&rsquo;m working on splitting memory capabilities into separate device- and
general-purpose capabilities, then adding support for destroying capabilities
when they&rsquo;re no longer required. I also implemented pre-emptive multi-tasking
early this month, and the vulcan test suite now has several multi-threaded tests
to verify IPC functionality. However, a couple of pieces are missing — the
ability to create and work with new cspaces and vspaces — in order to
spawn new processes. I&rsquo;ll be focusing on these tasks in the coming weeks. With
these pieces in place, we can start working on Mercury and Vulcan: the driver
system.</p>
<p>I&rsquo;ll save the SourceHut news for the &ldquo;what&rsquo;s cooking&rdquo; post later today, so
that&rsquo;s all for now. Until next time!</p>]]></description><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate></item><item><title>The Fediverse can be pretty toxic</title><link>https://drewdevault.com/2022/07/09/Fediverse-toxicity.html</link><description><![CDATA[<p>Mastodon, inspired by GNU social, together with Pleroma, form the most popular
components of what we know as the &ldquo;Fediverse&rdquo; today. All of them are, in
essence, federated, free software Twitter clones, interoperable with each other
via the ActivityPub protocol.</p>
<p>In many respects, the Fediverse is a liberating force for good. Its federated
design distributes governance and costs across many independent entities,
something I view as a very strong design choice. Its moderation tools also do a
pretty good job of keeping neo-nazis out of your feeds and providing a
comfortable space to express yourself in, especially if your form of expression
is maligned by society. Large groups of Fediverse members have found in it a
home for self-expression which is denied to them elsewhere on the basis of their
sexuality, gender expression, politics, or other characteristics. It&rsquo;s also
essentially entirely free from commercial propaganda.</p>
<p>But it&rsquo;s still just a Twitter clone, and many of the social and psychological
ills which come with that are present in the Fediverse. It&rsquo;s a feed of other
people&rsquo;s random thoughts, often unfiltered, presented to you without value
judgement — even when a value judgement may be wise. Features like
boosting and liking posts, chasing after follower counts and mini-influencers,
these rig up dopamine reinforcement like any other social network does. The
increased character limit does not really help; most posts are pretty short and
no one wants to read an essay aggressively word-wrapped in a narrow column.</p>
<p>The Fediverse is an environment optimized for flame wars. Arguments in this
medium are held under these constraints, in public, with the peanut gallery of
followers from either side stepping in and out to reinforce their position and
flame the opponents. Progress is measured in gains of ideological territory and
in the rising and falling swells of participants dotting their comments
throughout huge threads. You are not just arguing your position, but performing
it to your audience, and to your opponent&rsquo;s audience.</p>
<p>Social networks are not good for you. The Fediverse brought out the worst in me,
and it can bring out the worst in you, too. The behaviors it encourages are
plainly defined as harassment, a behavior which is not unique to any ideological
condition. People get hurt on the Fediverse. Keep that in mind. Consider taking
a look in the mirror and asking yourself if your relationship with the platform
is healthy for you and for the people around you.</p>]]></description><pubDate>Sat, 9 Jul 2022 00:00:00 +0000</pubDate></item><item><title>Porting Doom to Helios</title><link>https://drewdevault.com/2022/07/01/Porting-DOOM-to-Helios.html</link><description><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a> was an incredibly popular video game by Id software which, six years
following its release, was made <a href="https://github.com/id-Software/DOOM">open source</a> under the GPLv2 license. Thanks to
this release, combined with the solid software design and lasting legacy of
backwards compatibility in C, Doom has been ported to countless platforms by
countless programmers. And I recently added myself to this number :)</p>
<p><video src="https://redacted.moe/f/588e2fbd.webm" controls muted autoplay></video></p>
<p>I&rsquo;m working on a new kernel called <a href="https://sr.ht/~sircmpwn/helios">Helios</a>, and I thought that porting Doom
would present a good opportunity for proving the kernel design — you never
know if you have a good design until you try to use it for real. Doom is a good
target because it does not require much to get working, but it is a useful (and
fun) program to port. It calls for the following features:</p>
<ol>
<li>A working C programming environment</li>
<li>Dynamic memory allocation</li>
<li>A place to draw the screen (a framebuffer)</li>
<li>Keyboard input</li>
</ol>
<p>As I was working, I gradually came to understand that Helios was pretty close to
supporting all of these features, and thought that the time to give Doom a shot
was coming soon. In my <a href="https://drewdevault.com/2022/06/15/Status-update-June-2022.html">last status update</a>, I shared a picture of a Helios
userspace program utilizing the framebuffer provided by multiboot, ticking one
box. We&rsquo;ve had dynamic memory allocation in userspace working since June 8th.
The last pieces were a keyboard driver and a C library.</p>
<p>I started with the keyboard driver, since that would let me continue to work on
Hare for a little bit longer, providing a more direct benefit to the long-term
goals (rather than the short-term goal of &ldquo;get Doom to work&rdquo;). Since Helios is a
micro-kernel, the keyboard driver is implemented in userspace. A PS/2 keyboard
driver requires two features which are reserved to ring 0: I/O ports and IRQ
handling. To simplify the interface to the essentials for this use-case,
pressing or releasing a key causes IRQ 1 to be fired on the PIC, then reading
from port 0x60 provides a scancode. We already had support for working with I/O
ports in userspace, so the blocker here was IRQ handling.</p>
<p>Helios implements IRQs similarly to seL4, by using a &ldquo;notification&rdquo; object (an
IPC primitive) which is signalled by the kernel when an IRQ occurs. I was
pleased to have this particular blocker, as developing out our IPC
implementation further was a welcome task. The essential usage of a notification
involves two operations: wait and signal. The former blocks until the
notification is signalled, and the later signals the notification and unblocks
any tasks which are waiting on it. Unlike sending messages to endpoints, signal
never blocks.</p>
<p>After putting these pieces together, I was able to write a simple PS/2 keyboard
driver which echos pressed keys to the kernel console:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">irq1_notify</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">newnotification</span><span class="p">()</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">irq1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">irqcontrol_issue</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">INIT_CAP_IRQCONTROL</span><span class="p">,</span><span class="w"> </span><span class="n">irq1_notify</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">ps2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">iocontrol_issue</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">INIT_CAP_IOCONTROL</span><span class="p">,</span><span class="w"> </span><span class="mh">0x60</span><span class="p">,</span><span class="w"> </span><span class="mh">0x64</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">wait</span><span class="p">(</span><span class="n">irq1_notify</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">scancode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">helios</span><span class="o">::</span><span class="n">ioport_in8</span><span class="p">(</span><span class="n">ps2</span><span class="p">,</span><span class="w"> </span><span class="mh">0x60</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">helios</span><span class="o">::</span><span class="n">irq_ack</span><span class="p">(</span><span class="n">irq1</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This creates a notification capability to wait on IRQs, then creates a
capability for IRQ 1 registered for that notification. It also issues an I/O
port capability for the PS/2 ports, 0x60-0x64 (inclusive). Then it loops,
waiting until an interrupt occurs, reading the scancode from the port, and
printing it. Simple!</p>
<p>I now turned my attention to a C library for Doom. The first step for writing
userspace programs in C for a new operating system is to produce a suitable C
cross-compiler toolchain. I adapted the instructions from <a href="https://wiki.osdev.org/GCC_Cross-Compiler">this OSdev wiki
tutorial</a> for my needs and produced
the working patches for <a href="https://git.sr.ht/~sircmpwn/binutils/commit/b104dee8b4d5f6fb57d585132775e22f0eba80df">binutils</a> and <a href="https://git.sr.ht/~sircmpwn/gcc/commit/20df2b4d99670f2db51f84dc57d2253fd71d0b2b">gcc</a>. I started on a simple C library
that included <a href="https://git.sr.ht/~sircmpwn/mercury/tree/f80bb66373ab12a66a9a86894d212cbbdfcf53bf/item/libc/syscall.s">some assembly glue</a> for syscalls, <a href="https://git.sr.ht/~sircmpwn/mercury/tree/f80bb66373ab12a66a9a86894d212cbbdfcf53bf/item/libc/crt">an entry point</a>, and
<a href="https://git.sr.ht/~sircmpwn/mercury/tree/1217b54b7bd09bebcd672d1e9cdae14f2e2e545f/item/libc/syscalls.c">a couple of syscall wrappers</a>. With great anticipation, I wrote the
following C program and loaded it into Helios:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;helios/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello from userspace in C!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">sys_writecons</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="nf">strlen</span><span class="p">(</span><span class="n">message</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><pre tabindex="0"><code>$ qemu-system-x86_64 -m 1G -no-reboot -no-shutdown \
	-drive file=boot.iso,format=raw \
	-display none \
	-chardev stdio,id=char0 \
	-serial chardev:char0
Booting Helios kernel
Hello from userspace in C!
</code></pre><p>Woohoo! After a little bit more work setting up the basics, I started rigging
<a href="https://github.com/ozkl/doomgeneric">doomgeneric</a> (a Doom fork designed to be easy to port) up to my cross
environment and seeing what would break.</p>
<p>As it turned out, a lot of stuff would break. doomgeneric is designed to be
portable, but it actually depends on a lot of stuff to be available from the C
environment: stdio, libmath, string.h stuff, etc. Not too much, but more than I
cared to write from scratch. So, I started pulling in large swaths of <a href="https://musl.libc.org">musl
libc</a>, trimming out as much as I could, and wriggling it into a buildable state.
I also wrote a lot of shims to fake out having a real Unix system to run it in,
like this code for defining stdout &amp; stderr to just write to the kernel console:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">size_t</span> <span class="nf">writecons</span><span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">sys_writecons</span><span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">wbase</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">wpos</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">wbase</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">sys_writecons</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">f</span><span class="o">-&gt;</span><span class="n">wend</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">buf</span> <span class="o">+</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">buf_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">f</span><span class="o">-&gt;</span><span class="n">wpos</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">wbase</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#undef stdout
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">stdoutbuf</span><span class="p">[</span><span class="n">BUFSIZ</span><span class="o">+</span><span class="n">UNGET</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="n">hidden</span> <span class="n">FILE</span> <span class="n">__stdout_FILE</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">buf</span> <span class="o">=</span> <span class="n">stdoutbuf</span><span class="o">+</span><span class="n">UNGET</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">buf_size</span> <span class="o">=</span> <span class="k">sizeof</span> <span class="n">stdoutbuf</span><span class="o">-</span><span class="n">UNGET</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">fd</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">flags</span> <span class="o">=</span> <span class="n">F_PERM</span> <span class="o">|</span> <span class="n">F_NORD</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">lbf</span> <span class="o">=</span> <span class="sc">&#39;\n&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">write</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">writecons</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">seek</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">close</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">lock</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE</span> <span class="o">*</span><span class="k">const</span> <span class="n">stdout</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">__stdout_FILE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE</span> <span class="o">*</span><span class="k">volatile</span> <span class="n">__stdout_used</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">__stdout_FILE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#undef stderr
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">stderrbuf</span><span class="p">[</span><span class="n">UNGET</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="n">hidden</span> <span class="n">FILE</span> <span class="n">__stderr_FILE</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">buf</span> <span class="o">=</span> <span class="n">stderrbuf</span><span class="o">+</span><span class="n">UNGET</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">buf_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">fd</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">flags</span> <span class="o">=</span> <span class="n">F_PERM</span> <span class="o">|</span> <span class="n">F_NORD</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">lbf</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">write</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">writecons</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">seek</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">close</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">.</span><span class="n">lock</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE</span> <span class="o">*</span><span class="k">const</span> <span class="n">stderr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">__stderr_FILE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE</span> <span class="o">*</span><span class="k">volatile</span> <span class="n">__stderr_used</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">__stderr_FILE</span><span class="p">;</span>
</span></span></code></pre></div><p>The result of all of this hacking and slashing is quite a mess, and none of this
is likely to be useful in the long term. I did this work over the course of a
couple of afternoons just to get everything &ldquo;working&rdquo; enough to support Doom,
but an actual useful C programming environment for Helios is likely some ways
off. Much of the near-term work will be in Mercury, which will be a Hare
environment for writing drivers, and we won&rsquo;t see a serious look at better C
support until we get to Luna, the POSIX compatibility layer a few milestones
away.</p>
<p>Anyway, in addition to pulling in lots of musl libc, I had to write some
original code to create C implementations of the userspace end for working with
Helios kernel services. Some of this is pretty straightforward, such as the
equivalent of the helios::ioport_issue code from the keyboard driver you saw
earlier:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">cap_t</span>
</span></span><span class="line"><span class="cl"><span class="nf">iocontrol_issue</span><span class="p">(</span><span class="kt">cap_t</span> <span class="n">ctrl</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">min</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">max</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint64_t</span> <span class="n">tag</span> <span class="o">=</span> <span class="nf">mktag</span><span class="p">(</span><span class="n">IO_ISSUE</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kt">cap_t</span> <span class="n">cap</span> <span class="o">=</span> <span class="nf">capalloc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">ipc_buffer</span><span class="o">-&gt;</span><span class="n">caddr</span> <span class="o">=</span> <span class="n">cap</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">sysret</span> <span class="n">ret</span> <span class="o">=</span> <span class="nf">sys_send</span><span class="p">(</span><span class="n">ctrl</span><span class="p">,</span> <span class="n">tag</span><span class="p">,</span> <span class="n">min</span><span class="p">,</span> <span class="n">max</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">assert</span><span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">cap</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A more complex example is the code which maps a page of physical memory into the
current process&rsquo;s virtual address space. In Helios, similar to L4, userspace
must allocate its own page tables. However, these page tables are semantically
<em>owned</em> by userspace, but they&rsquo;re not actually <em>reachable</em> by userspace —
the page tables themselves are not mapped into their address space (for obvious
reasons, I hope). A consequence of this is that the user cannot examine the page
tables to determine which, if any, intermediate page tables have to be allocated
in order to perform a desired memory mapping. The solution is to try the mapping
anyway, and if the page tables are missing, the kernel will reply telling you
which table it needs to complete the mapping request. You allocate the
appropriate table and try again.</p>
<p>Some of this workload falls on userspace. I had already done this part in Hare,
but I had to revisit it in C:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">sysret</span>
</span></span><span class="line"><span class="cl"><span class="nf">page_map</span><span class="p">(</span><span class="kt">cap_t</span> <span class="n">page</span><span class="p">,</span> <span class="kt">cap_t</span> <span class="n">vspace</span><span class="p">,</span> <span class="kt">uintptr_t</span> <span class="n">vaddr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint64_t</span> <span class="n">tag</span> <span class="o">=</span> <span class="nf">mktag</span><span class="p">(</span><span class="n">PAGE_MAP</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">ipc_buffer</span><span class="o">-&gt;</span><span class="n">caps</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">vspace</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">sys_send</span><span class="p">(</span><span class="n">page</span><span class="p">,</span> <span class="n">tag</span><span class="p">,</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">vaddr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">map_table</span><span class="p">(</span><span class="kt">uintptr_t</span> <span class="n">vaddr</span><span class="p">,</span> <span class="k">enum</span> <span class="n">pt_type</span> <span class="n">kind</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">cap_t</span> <span class="n">table</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="p">(</span><span class="n">kind</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">PT_PDPT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">r</span> <span class="o">=</span> <span class="nf">retype</span><span class="p">(</span><span class="o">&amp;</span><span class="n">table</span><span class="p">,</span> <span class="n">CT_PDPT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">PT_PD</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">r</span> <span class="o">=</span> <span class="nf">retype</span><span class="p">(</span><span class="o">&amp;</span><span class="n">table</span><span class="p">,</span> <span class="n">CT_PD</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">PT_PT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">r</span> <span class="o">=</span> <span class="nf">retype</span><span class="p">(</span><span class="o">&amp;</span><span class="n">table</span><span class="p">,</span> <span class="n">CT_PT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">		<span class="nf">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">assert</span><span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">sysret</span> <span class="n">ret</span> <span class="o">=</span> <span class="nf">page_map</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">INIT_CAP_VSPACE</span><span class="p">,</span> <span class="n">vaddr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="o">-</span><span class="n">MISSING_TABLES</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">map_table</span><span class="p">(</span><span class="n">vaddr</span><span class="p">,</span> <span class="n">ret</span><span class="p">.</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nf">map_table</span><span class="p">(</span><span class="n">vaddr</span><span class="p">,</span> <span class="n">kind</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">map</span><span class="p">(</span><span class="kt">cap_t</span> <span class="n">page</span><span class="p">,</span> <span class="kt">uintptr_t</span> <span class="n">vaddr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">struct</span> <span class="n">sysret</span> <span class="n">ret</span> <span class="o">=</span> <span class="nf">page_map</span><span class="p">(</span><span class="n">page</span><span class="p">,</span> <span class="n">INIT_CAP_VSPACE</span><span class="p">,</span> <span class="n">vaddr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="o">-</span><span class="n">MISSING_TABLES</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">map_table</span><span class="p">(</span><span class="n">vaddr</span><span class="p">,</span> <span class="n">ret</span><span class="p">.</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">assert</span><span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">vaddr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Based on this work, I was able to implement a very stupid malloc, which rounds
all allocations up to 4096 and never frees them. Hey! It works, okay?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uintptr_t</span> <span class="n">base</span> <span class="o">=</span> <span class="mh">0x8000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">cap_t</span>
</span></span><span class="line"><span class="cl"><span class="nf">page_alloc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">cap_t</span> <span class="n">page</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">retype</span><span class="p">(</span><span class="o">&amp;</span><span class="n">page</span><span class="p">,</span> <span class="n">CT_PAGE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">assert</span><span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">page</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">malloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">4096</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">n</span> <span class="o">+=</span> <span class="mi">4096</span> <span class="o">-</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">4096</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">base</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">cap_t</span> <span class="n">page</span> <span class="o">=</span> <span class="nf">page_alloc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="nf">map</span><span class="p">(</span><span class="n">page</span><span class="p">,</span> <span class="n">base</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">base</span> <span class="o">+=</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">n</span> <span class="o">-=</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>There is also <a href="https://git.sr.ht/~sircmpwn/mercury/tree/f80bb66373ab12a66a9a86894d212cbbdfcf53bf/item/libc/helios/device.c">devmap</a>, which you can read in your own time, which is used for
mapping device memory into your address space. This is neccessary to map the
framebuffer. It&rsquo;s more complex because it has to allocate a <em>specific</em> physical
page address into userspace, rather than whatever page happens to be free.</p>
<p>So, to revisit our progress, we have:</p>
<p>✓ A working C programming environment</p>
<p>✓ Dynamic memory allocation</p>
<p>✓ A place to draw the screen (a framebuffer)</p>
<p>✓ Keyboard input</p>
<p>It&rsquo;s time for Doom, baby. Doomgeneric expects the porter to implement the
following functions:</p>
<ul>
<li>DG_Init</li>
<li>DG_DrawFrame</li>
<li>DG_GetKey</li>
<li>DG_SetWindowTitle</li>
<li>DG_SleepMs</li>
<li>DG_GetTicksMs</li>
</ul>
<p>Easy peasy. Uh, except for that last one. I forgot that our requirements list
should have included a means of sleeping for a specific period of time.
Hopefully that won&rsquo;t be a problem later.</p>
<p>I started with DG_Init, allocating the pieces that we&rsquo;ll need and stashing the
important bits in some globals.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">fb_width</span><span class="p">,</span> <span class="n">fb_height</span><span class="p">,</span> <span class="n">fb_pitch</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">uint8_t</span> <span class="o">*</span><span class="n">fb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">cap_t</span> <span class="n">irq1_notify</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">cap_t</span> <span class="n">irq1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">cap_t</span> <span class="n">ps2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">DG_Init</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="n">vbeaddr</span> <span class="o">=</span> <span class="n">bootinfo</span><span class="o">-&gt;</span><span class="n">arch</span><span class="o">-&gt;</span><span class="n">vbe_mode_info</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="n">vbepage</span> <span class="o">=</span> <span class="n">vbeaddr</span> <span class="o">/</span> <span class="mi">4096</span> <span class="o">*</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">vbe_mode_info</span> <span class="o">*</span><span class="n">vbe</span> <span class="o">=</span> <span class="nf">devmap</span><span class="p">(</span><span class="n">vbepage</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">vbeaddr</span> <span class="o">%</span> <span class="mi">4096</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">fb_width</span> <span class="o">=</span> <span class="n">vbe</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">fb_height</span> <span class="o">=</span> <span class="n">vbe</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">fb_pitch</span> <span class="o">=</span> <span class="n">vbe</span><span class="o">-&gt;</span><span class="n">pitch</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">assert</span><span class="p">(</span><span class="n">vbe</span><span class="o">-&gt;</span><span class="n">bpp</span> <span class="o">==</span> <span class="mi">32</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">npage</span> <span class="o">=</span> <span class="p">(</span><span class="n">vbe</span><span class="o">-&gt;</span><span class="n">pitch</span> <span class="o">*</span> <span class="n">vbe</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">fb</span> <span class="o">=</span> <span class="nf">devmap</span><span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">vbe</span><span class="o">-&gt;</span><span class="n">framebuffer</span><span class="p">,</span> <span class="n">npage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">irq1_notify</span> <span class="o">=</span> <span class="nf">mknotification</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">irq1</span> <span class="o">=</span> <span class="nf">irqcontrol_issue</span><span class="p">(</span><span class="n">INIT_CAP_IRQCONTROL</span><span class="p">,</span> <span class="n">irq1_notify</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">ps2</span> <span class="o">=</span> <span class="nf">iocontrol_issue</span><span class="p">(</span><span class="n">INIT_CAP_IOCONTROL</span><span class="p">,</span> <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>If the multiboot loader is configured to set up a framebuffer, it gets handed
off to the kernel, and Helios provides it to userspace as mappable device
memory, so that saves us from doing all of the annoying VBE crap (or heaven
forbid, write an actual video driver). This lets us map the framebuffer into our
process. Second, we do the same notification+IRQ+IOControl thing we did from the
keyboard driver you saw earlier, except in C, so that we can process scancodes
later.</p>
<p>Next is DG_DrawFrame, which is pretty straightforward. We just copy scanlines
from the internal buffer to the framebuffer whenever it asks us to.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">DG_DrawFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">DOOMGENERIC_RESY</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">memcpy</span><span class="p">(</span><span class="n">fb</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">fb_pitch</span><span class="p">,</span> <span class="n">DG_ScreenBuffer</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">DOOMGENERIC_RESX</span><span class="p">,</span> <span class="n">DOOMGENERIC_RESX</span> <span class="o">*</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Then we have DG_GetKey, similar to our earlier keyboard driver, plus actually
interpeting the scancodes we get, plus making use of a new non-blocking wait
syscall I added to Helios:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">DG_GetKey</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">pressed</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">doomKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">sysret</span> <span class="n">ret</span> <span class="o">=</span> <span class="nf">sys_nbwait</span><span class="p">(</span><span class="n">irq1_notify</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">status</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">scancode</span> <span class="o">=</span> <span class="nf">ioport_in8</span><span class="p">(</span><span class="n">ps2</span><span class="p">,</span> <span class="mh">0x60</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">irq_ack</span><span class="p">(</span><span class="n">irq1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="n">pressed</span> <span class="o">=</span> <span class="p">(</span><span class="n">scancode</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">scancode</span> <span class="o">=</span> <span class="n">scancode</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">mask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="p">(</span><span class="n">scancode</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">K_AD05</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="n">doomKey</span> <span class="o">=</span> <span class="n">KEY_ENTER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">K_AE08</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="n">doomKey</span> <span class="o">=</span> <span class="n">KEY_UPARROW</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">K_AD07</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="n">doomKey</span> <span class="o">=</span> <span class="n">KEY_LEFTARROW</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">K_AD08</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="n">doomKey</span> <span class="o">=</span> <span class="n">KEY_DOWNARROW</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">K_AD09</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="n">doomKey</span> <span class="o">=</span> <span class="n">KEY_RIGHTARROW</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">K_AB03</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="n">doomKey</span> <span class="o">=</span> <span class="n">KEY_FIRE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nl">K_AB06</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="n">doomKey</span> <span class="o">=</span> <span class="n">KEY_USE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="n">doomKey</span> <span class="o">=</span> <span class="n">KEY_ESCAPE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">*</span><span class="n">doomKey</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Then, uh, we have a problem. Here&rsquo;s what I ended up doing for DG_SleepMs:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint32_t</span> <span class="n">ticks</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">DG_SleepMs</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">ms</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// TODO: sleep properly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int64_t</span> <span class="n">_ms</span> <span class="o">=</span> <span class="n">ms</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="n">_ms</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">sys_yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">ticks</span> <span class="o">+=</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">_ms</span> <span class="o">-=</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">uint32_t</span> <span class="nf">DG_GetTicksMs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">ticks</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Some fellow on IRC said he&rsquo;d implement a sleep syscall for Helios, but didn&rsquo;t
have time before I was ready to carry on with this port. So instead of trampling
on his feet, I just yielded the thread (which immediately returns to the caller,
since there are no other threads at this point) and pretend it took 5ms to do
so, hoping for the best. It does not work! This port plays at wildly different
speeds depending on the performance of the hardware you run it on.</p>
<p>I&rsquo;m not too torn up about it, though. My goal was not to make a particularly
nice or fully featured port of Doom. The speed is problematic, I hardcoded the
shareware doom1.wad as the only supported level, you can&rsquo;t save the game, and it
crashes when you try to pick up the shotgun. But it does its job: it
demonstrates the maturity of the kernel&rsquo;s features thus far and provides good
feedback on the API design and real-world utility.</p>
<p>If you&rsquo;d like to try it, you can <a href="https://redacted.moe/f/0f2b716a.iso">download a bootable ISO</a>.</p>
<p>You can run it on qemu like so:</p>
<pre tabindex="0"><code>$ qemu-system-x86_64 -m 1G -no-reboot -no-shutdown \
		-drive file=doom.iso,format=raw \
		-display sdl \
		-chardev stdio,id=char0 \
		-serial chardev:char0
</code></pre><p>Enter to start, WASD to move, right shift to fire, space to open doors. It
<em>might</em> work on real hardware, but the framebuffer stuff is pretty hacky and not
guaranteed to work on most stuff, and the PS/2 keyboard driver will only work
with a USB keyboard if you have legacy USB emulation configured in your BIOS,
and even then it might not work well. YMMV. It works on my ThinkPad X230. Have
fun!</p>]]></description><pubDate>Fri, 1 Jul 2022 00:00:00 +0000</pubDate></item><item><title>GitHub Copilot and open source laundering</title><link>https://drewdevault.com/2022/06/23/Copilot-GPL-washing.html</link><description><![CDATA[<p><em>Disclaimer: I am the founder of a company which competes with GitHub. I am also
a long-time advocate for and developer of free and open source software, with a
broad understanding of free and open source software licensing and philosophy. I
will not name my company in this post to reduce the scope of my conflict of
interest.</em></p>
<p>We have seen an explosion in machine learning in the past decade, alongside an
explosion in the popularity of free software. At the same time as FOSS has come
to dominate software and found its place in almost all new software products,
machine learning has increased dramatically in sophistication, facilitating more
natural interactions between humans and computers. However, despite their
parallel rise in computing, these two domains remain philosophically distant.</p>
<p>Though some audaciously-named companies might suggest otherwise, the machine
learning space has enjoyed almost none of the freedoms forwarded by the free and
open source software movement. Much of the actual code related to machine
learning is publicly available, and there are many public access research
papers available for anyone to read. However, the key to machine learning is
access to a high-quality dataset and heaps of computing power to process that
data, and these two resources are still kept under lock and key by almost all
participants in the space.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>The essential barrier to entry for machine learning projects is overcoming these
two problems, which are often very costly to secure. A high-quality, well tagged
data set generally requires thousands of hours of labor to produce,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> a task
which can potentially cost millions of dollars. Any approach which lowers this
figure is thus very desirable, even if the cost is making ethical compromises.
With Amazon, it takes the form of gig economy exploitation. With GitHub, it
takes the form of disregarding the terms of free software licenses. In the
process, they built a tool which facilitates the large-scale laundering of free
software into non-free software by their customers, who GitHub offers plausible
deniability through an inscrutable algorithm.</p>
<p>Free software is not an unqualified gift. There are terms for its use and
re-use. Even so-called &ldquo;liberal&rdquo; software licenses impose requirements on
re-use, such as attribution. To quote the MIT license:</p>
<blockquote>
<p>Permission is hereby granted [&hellip;] subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.</p></blockquote>
<p>Or the equally &ldquo;liberal&rdquo; BSD license:</p>
<blockquote>
<p>Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:</p>
<p>Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.</p></blockquote>
<p>On the other end of the spectrum, copyleft licenses such as GNU General Public
License or Mozilla Public License go further, demanding not only attribution for
derivative works, but that such derived works are <em>also released</em> with the same
license. Quoting GPL:</p>
<blockquote>
<p>You may convey a work based on the Program, or the modifications to produce it
from the Program, in the form of source code under the terms of section 4,
provided that you also meet all of these conditions:</p>
<p>[&hellip;]</p>
<p>You must license the entire work, as a whole, under this License to anyone who
comes into possession of a copy.</p></blockquote>
<p>And MPL:</p>
<blockquote>
<p>All distribution of Covered Software in Source Code Form, including any
Modifications that You create or to which You contribute, must be under the
terms of this License. You must inform recipients that the Source Code Form of
the Covered Software is governed by the terms of this License, and how they
can obtain a copy of this License. You may not attempt to alter or restrict
the recipients&rsquo; rights in the Source Code Form.</p></blockquote>
<p>Free software licenses impose obligations on the user through terms governing
attribution, sublicensing, distribution, patents, trademarks, and relationships
with laws like the Digital Millennium Copyright Act. The free software community
is no stranger to the difficulties in enforcing compliance with these
obligations, which some groups view as too onerous. But as onerous as one may
view these obligations to be, one is nevertheless required to comply with them.
If you believe that the force of copyright should protect your proprietary
software, then you must agree that it equally protects open source works,
despite the inconvenience or cost associated with this truth.</p>
<p>GitHub&rsquo;s Copilot is trained on software governed by these terms, and it fails to
uphold them, and enables customers to accidentally fail to uphold these terms
themselves. Some argue about the risks of a &ldquo;copyleft surprise&rdquo;, wherein someone
incorporates a GPL licensed work into their product and is surprised to find
that they are obligated to release their product under the terms of the GPL as
well. Copilot institutionalizes this risk and any user who wishes to use it to
develop non-free software would be well-advised not to do so, else they may find
themselves legally liable to uphold these terms, perhaps ultimately being
required to release their works under the terms of a license which is
undesirable for their goals.</p>
<p>Essentially, the argument comes down to whether or not the model constitutes a
derivative work of its inputs. Microsoft argues that it does not. However, these
licenses are not specific regarding the means of derivation; the classic
approach of copying and pasting from one project to another need not be the only
means for these terms to apply. The model exists as the result of applying an
algorithm to these inputs, and thus the model itself is a derivative work of its
inputs. The model, then used to create new programs, forwards its obligations to
those works.</p>
<p>All of this assumes the best interpretation of Microsoft&rsquo;s argument, with a
heavy reliance on the fact that the model becomes a general purpose programmer,
having meaningfully learned from its inputs and applying this knowledge to
produce original work. Should a human programmer take the same approach,
studying free software and applying those lessons, but not the code itself, to
original projects, I would agree that their applied knowledge is not creating
derivative works. However, that is not how machine learning works. Machine
learning is essentially a glorified pattern recognition and reproduction engine,
and does not represent a genuine generalization of the learning process. It is
perhaps capable of a limited amount of originality, but is also capable of
degrading to the simple case of copy and paste. Here is an example of Copilot
reproducing, verbatim, a function which is governed by the GPL, and would thus
be governed by its terms:</p>
<p><video
src="https://redacted.moe/f/dd1d5a73.mp4"
muted autoplay controls></video></p>
<div class="text-center">
  <small>
    Source: <a href="https://twitter.com/mitsuhiko/status/1410886329924194309">
    Armin Ronacher</a> via Twitter
  </small>
</div>
<p>The license reproduced by Copilot is not correct, neither in form nor function.
This code was not written by V. Petkov and the GPL imposes much stronger
obligations than those suggested by the comment. This small example was
deliberately provoked with a suggestive prompt (this famous function is known as
the &ldquo;<a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root">fast inverse square root</a>&rdquo;) and the &ldquo;float Q_&rdquo;, but it&rsquo;s not a stretch to
assume someone can accidentally do something similar with any particularly
unlucky English-language description of their goal.</p>
<p>Of course, the use of a suggestive prompt to convince Copilot to print GPL
licensed code suggests another use: deliberately laundering FOSS source code. If
Microsoft&rsquo;s argument holds, then indeed the only thing which is necessary to
legally circumvent a free software license is to teach a machine learning
algorithm to regurgitate a function you want to use.</p>
<p>This is a problem. I have two suggestions to offer to two audiences: one for
GitHub, and another for free software developers who are worried about Copilot.</p>
<p>To GitHub: this is your Oracle v Google moment. You&rsquo;ve invested in building a
platform on top of which the open source revolution was built, and leveraging
this platform for this move is a deep betrayal of the community&rsquo;s trust. The law
applies to you, and banking on the fact that the decentralized open source
community will not be able to mount an effective legal challenge to your $7.5B
Microsoft war chest does not change this. The open source community is
astonished, and the astonishment is slowly but surely boiling over into rage as
our concerns fall on deaf ears and you push forward with the Copilot release. I
expect that if the situation does not change, you will find a group motivated
enough to challenge this. The legitimacy of the free software ecosystem may rest
on this problem, and there are many companies who are financially incentivized
to see to it that this legitimacy stands. I am certainly prepared to join a
class action lawsuit as a maintainer, or alongside other companies with
interests in free software making use of our financial resources to facilitate a
lawsuit.</p>
<p>The tool can be improved, probably still in time to avoid the most harmful
effects (harmful to your business, that is) of Copilot. I offer the following
specific suggestions:</p>
<ol>
<li>Allow GitHub users and repositories to opt-out of being incorporated into the
model. Better, allow them to opt-in. Do not tie this flag into unrelated
projects like Software Heritage and the Internet Archive.</li>
<li>Track the software licenses which are incorporated into the model and inform
users of their obligations with respect to those licenses.</li>
<li>Remove copyleft code from the model entirely, unless you want to make the
model and its support code free software as well.</li>
<li>Consider compensating the copyright owners of free software projects
incorporated into the model with a margin from the Copilot usage fees, in
exchange for a license permitting this use.</li>
</ol>
<p>Your current model probably needs to be thrown out. The GPL code incorporated
into it entitles anyone who uses it to receive a GPL&rsquo;d copy of the model for
their own use. It entitles these people to commercial use, to build a competing
product with it. But, it presumably also includes works under incompatible
licenses, such as the CDDL, which is&hellip; problematic. The whole thing is a legal
mess.</p>
<p>I cannot speak for the rest of the community that have been hurt by this
project, but for my part, I would be okay with not pursuing the answers to any
of these questions with you in court if you agreed to resolve these problems
now.</p>
<p>And, my advice to free software maintainers who are pissed that their licenses
are being ignored. First, don&rsquo;t use GitHub and your code will not make it into
the model (for now). <a href="https://drewdevault.com/2022/03/29/free-software-free-infrastructure.html">I&rsquo;ve written before</a> about why it&rsquo;s generally important
for free software projects to use free software infrastructure, and this only
re-enforces that fact. Furthermore, the old &ldquo;vote with your wallet&rdquo; approach is
a good way to show your disfavor. That said, if it occurs to you that you
<em>don&rsquo;t</em> actually pay for GitHub, then you may want to take a moment to consider
if the incentives created by that relationship explain this development and may
lead to more unfavorable outcomes for you in the future.</p>
<p>You may also be tempted to solve this problem by changing your software licenses
to prohibit this behavior. I&rsquo;ll say upfront that according to Microsoft&rsquo;s
interpretation of the situation (invoking fair use), it doesn&rsquo;t matter to them
which license you use: they&rsquo;ll use your code regardless. In fact, <a href="https://twitter.com/ChrisGr93091552/status/1539731632931803137">some
proprietary code</a> was found to have been incorporated into the model. However, I
still support your efforts to address this in your software licenses, as it
provides an even stronger legal foundation upon which we can reject Copilot.</p>
<p>I will caution you that the way you approach that clause of your license is
important. Whenever writing or changing a free and open source software license,
you should consider whether or not it will still qualify as free or open source
after your changes. To be specific, a clause which outright forbids the use of
your code for training a machine learning model will make your software
<em>non-free</em>, and I do not recommend this approach. Instead, I would update your
licenses to clarify that incorporating the code into a machine learning model is
considered a form of derived work, and that your license terms apply to the
model and any works produced with that model.</p>
<p>To summarize, I think that GitHub Copilot is a bad idea as designed. It
represents a flagrant disregard of FOSS licensing in of itself, and it enables
similar disregard — deliberate or otherwise — among its users. I
hope they will heed my suggestions, and I hope that my words to the free
software community offer some concrete ways to move forward with this problem.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Shout-out to Mozilla Common Voice, one of the few exceptions to this rule,
which is an excellent project that has produced a high-quality, freely
available dataset of voice samples, and used it to develop free models and
software for text-to-speech and speech recognition.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Typically exploitative labor from low-development countries which the tech
industry often pretends isn&rsquo;t a hair&rsquo;s breadth away from slavery.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate></item><item><title>Introducing the Himitsu keyring &amp; password manager for Unix</title><link>https://drewdevault.com/2022/06/20/Himitsu.html</link><description><![CDATA[<p><a href="https://himitsustore.org">Himitsu</a> is a new approach to storing secret information on Unix systems, such
as passwords or private keys, and I released version 0.1 this morning. It&rsquo;s
available on <a href="https://wiki.alpinelinux.org/wiki/Himitsu">Alpine Linux</a> community and the <a href="https://wiki.archlinux.org/title/Himitsu">Arch User Repository</a>, with <a href="https://repology.org/project/himitsu/versions">more
distributions</a> hopefully on the way soon.</p>
<p>So, what is Himitsu and what makes it special? The following video introduces
the essential concepts and gives you an idea of what&rsquo;s possible:</p>
<p><video src="https://himitsustore.org/intro.mp4" controls></video></p>
<p>If you prefer reading to watching, this blog post includes everything that&rsquo;s in
the video.</p>
<h2 id="what-is-himitsu">What is Himitsu?</h2>
<p>Himitsu draws inspiration from Plan 9&rsquo;s <a href="http://man.9front.org/4/factotum">factotum</a>, but polished up and
redesigned for Unix. At its core, Himitsu is a key/value store and a simple
protocol for interacting with it. For example, a web login could be stored like
so:</p>
<pre tabindex="0"><code>proto=web host=example.org user=jdoe password!=hunter2
</code></pre><p>Himitsu has no built-in knowledge of web logins, it just stores arbitrary keys
and values. The bang (!) indicates that the password is a &ldquo;secret&rdquo; value, and
the &ldquo;proto&rdquo; key defines additional conventions for each kind of secret. For
proto=web, each key/value pair represents a form field on a HTML login form.</p>
<p>We can query the key store using the &ldquo;hiq&rdquo; command. For instance, we can obtain
the example key above by querying for any key with &ldquo;proto=web&rdquo;, any &ldquo;host&rdquo;,
&ldquo;user&rdquo;, and &ldquo;password&rdquo; value, and an optional &ldquo;comment&rdquo; value:</p>
<pre tabindex="0"><code>$ hiq proto=web host user password! comment?
proto=web host=example.org user=jdoe password!
</code></pre><p>You&rsquo;ll notice that the password is hidden here. In order to obtain it, we must
ask for the user&rsquo;s consent.</p>
<pre tabindex="0"><code>$ hiq -d proto=web host user password! comment?
</code></pre><p><img src="https://redacted.moe/f/85eb1b52.png" alt="A screenshot of a GTK+ dialog confirming the operation"></p>
<pre tabindex="0"><code>proto=web host=example.org user=jdoe password!=hunter2
</code></pre><p>You can also use hiq to add or delete keys, or incorporate it into a shell
pipeline:</p>
<pre tabindex="0"><code>$ hiq -dFpassword host=example.org
hunter2
</code></pre><h2 id="a-simple-extensible-protocol">A simple, extensible protocol</h2>
<p>The protocol is a simple line-oriented text protocol, which is documented in the
<a href="https://himitsustore.org/docs/himitsu-ipc.5.html">himitsu-ipc(5)</a> manual page. We can also use it via netcat:</p>
<pre tabindex="0"><code>$ nc -U $XDG_RUNTIME_DIR/himitsu
query host=example.org
key proto=web host=example.org user=jdoe password!
end
query -d host=example.org
key proto=web host=example.org user=jdoe password!=hunter2
end
</code></pre><p>The consent prompter also uses a standardized protocol, documented by
<a href="https://himitsustore.org/docs/himitsu-prompter.5.html">himitsu-prompter(5)</a>. Based on this, you can implement new prompters for Qt, or
the TTY, or any other technology appropriate to your system, or implement a more
novel approach, such as sending a push notification to your phone to facilitate
consent.</p>
<h2 id="additional-frontends">Additional frontends</h2>
<p>Based on these protocols, a number of additional integrations are possible.
Martijn Braam has written a nice GTK+ frontend called <a href="https://git.sr.ht/~martijnbraam/keyring/">keyring</a>:</p>
<p><img src="https://brixitcdn.net/metainfo/keyring.png" alt="A screenshot of the GTK+ frontend"></p>
<p>There&rsquo;s also a <a href="https://addons.mozilla.org/en-US/firefox/addon/himitsu-integration/">Firefox add-on</a> which auto-fills forms for keys with proto=web:</p>
<p><img src="https://redacted.moe/f/73328356.png" alt="Screenshot of himitsu-firefox"></p>
<p>We also have a package called <a href="https://git.sr.ht/~sircmpwn/himitsu-ssh">himitsu-ssh</a> which provides an SSH agent:</p>
<pre tabindex="0"><code>$ hissh-import &lt; ~/.ssh/id_ed25519
Enter SSH key passphrase: 
key proto=ssh type=ssh-ed25519 pkey=pF7SljE25sVLdWvInO4gfqpJbbjxI6j+tIUcNWzVTHU= skey! comment=sircmpwn@homura
$ ssh-add -l
256 SHA256:kPr5ZKTNE54TRHGSaanhcQYiJ56zSgcpKeLZw4/myEI sircmpwn@homura (ED25519)
$ ssh git@git.sr.ht
Hi sircmpwn! You&#39;ve successfully authenticated, but I do not provide an interactive shell. Bye!
Connection to git.sr.ht closed.
</code></pre><p>I hope to see an ecosystem of tools built around Himitsu to grow. New frontends
like keyring would be great, and new integrations like GPG agents would also be
nice to see.</p>
<h2 id="zero-configuration">Zero configuration</h2>
<p>Himitsu-aware software can discover your credentials and connection details
without any additional configuration. For example, a mail client might look for
<code>proto=imap</code> and <code>proto=smtp</code> and discover something like this:</p>
<pre tabindex="0"><code>proto=imap host=imap.migadu.com user=sir@cmpwn.com password! port=993 enc=tls
proto=smtp host=imap.migadu.com user=sir@cmpwn.com password! port=465 enc=tls
</code></pre><p>After a quick consent prompt, the software can load your IMAP and SMTP
configuration and get connected without any manual steps. With an agent like
himitsu-ssh, it could even connect without actually handling your credentials
directly — a use-case we want to support with improvements to the prompter
UI (to distinguish between a case where an application will <em>view</em> versus <em>use</em>
your credentials).</p>
<h2 id="the-cryptography">The cryptography</h2>
<p>Your key store is located at $XDG_DATA_HOME/himitsu/. The key is derived by
mixing your password with argon2, and the resulting key is used for AEAD with
XChaCha20+Poly1305. The &ldquo;index&rdquo; file contains a list of base64-encoded encrypted
blobs, one per line, enumerating the keys in the key store.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Secret keys are
encrypted and stored separately in files in this directory. If you like the pass
approach to storing your keys in git, you can easily commit this directory to a
git repository, or haul it along to each of your devices with whatever other
means is convenient to you.</p>
<p>Himitsu is written in Hare and uses cryptography primitives available from its
standard library. Note that these have not been audited.</p>
<h2 id="future-plans">Future plans</h2>
<p>I&rsquo;d like to expand on Himitsu in the future. One idea is to store your full disk
encryption password in Himitsu and stick a subset of your key store into the
initramfs, which you unlock during early boot, pull FDE keys out of, and then
pre-authorize the keyring for your desktop session - which you&rsquo;re logged in to
automatically on the basis that you were pre-authorized during boot.</p>
<p>We also want to add key sharing and synchronization tools. The protocol could
easily be moved to TCP and authorized with your existing key store key (we could
make an ed25519 key out of it, or generate and store one separately), so setting
up key synchronization might be as simple as:</p>
<pre tabindex="0"><code>$ hiq -a proto=sync host=himitsu.sr.ht
</code></pre><p>You could also use Himitsu for service discovery — imagine a key ring
running on your datacenter LAN with entries for your Postgres database, SMTP
credentials, and so on.</p>
<p>There are some other ideas that we could use your help with:</p>
<ul>
<li>himitsu-firefox improvements (web devs welcome!)</li>
<li>Chromium support (web devs welcome!)</li>
<li>Himitsu apps for phones (mobile devs welcome!)</li>
<li>More key management frontends (maybe a TUI?)</li>
<li>More security options — smart cards? U2F?</li>
<li>hare-ssh improvements (e.g. RSA keys)</li>
<li>PGP support</li>
<li>Anything else you can think of</li>
</ul>
<p>Please join us! We hang out on IRC in #himitsu on Libera Chat. Give Himitsu a
shot and let us know what you think.</p>
<p>Alright, back to kernel hacking. I got multi-tasking working yesterday!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This offers an improvement over pass, for example, by not storing the list of entries in plain text.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate></item><item><title>Status update, June 2022</title><link>https://drewdevault.com/2022/06/15/Status-update-June-2022.html</link><description><![CDATA[<p>Hello again! I would like to open this post by acknowledging the response to my
earlier post, &ldquo;bleh&rdquo;. Since it was published, I have received several hundred
emails expressing support and kindness. I initially tried to provide these with
thoughtful replies, then shorter replies, then I had to stop replying at all,
but I did read every one. Thank you, everyone, for sending these. I appreciate
it very much, and it means a lot to me.</p>
<p>I have actually had a lot more fun programming this month than usual, since I
decided to spend more time on experimental and interesting projects and less
time on routine maintenance or long-term developments. So, the feature you&rsquo;ve
been waiting for in SourceHut might be delayed, but in return, there&rsquo;s cool
progress on the projects that you didn&rsquo;t even know you were waiting for. Of
course, the SourceHut workload never dips below a dull roar, as I have to attend
to business matters and customer support promptly, and keep a handle on the
patch queue, and the other SourceHut staff and contributors are always hard at
work — so there&rsquo;ll be plenty to discuss in the &ldquo;what&rsquo;s cooking&rdquo; later.</p>
<p>The bulk of my focus has been on the Helios kernel this month, a project <a href="https://drewdevault.com/2022/06/13/helios.html">I
introduced</a> a couple of days ago. I spent a lot of time furiously
refactoring, reworking the existing kernel code for evalutaing features like
page allocation and virtual address space management into capability-oriented
kernel services that can be provided to userspace, then overhauling our startup
code to provision a useful set of capabilities for the init process to take
advantage of. I also implemented x86_64 I/O port services, which allowed for
the first few drivers to be written in userspace — serial ports and simple
VBE graphics. We also got interrupts working properly and brought up the PIT,
which is another major step towards multi-tasking. I also implemented a new
syscall ABI with error handling, and refactored a lot of the arch-specific code
to make new ports easier. The kernel is in a much better state now than it was a
month ago (and to think it&rsquo;s only three months old!).</p>
<p><img src="https://redacted.moe/f/7e43ce39.jpg" alt="A picture of Helios drawing to a framebuffer"></p>
<p>There was also a lot of progress on <a href="https://sr.ht/~sircmpwn/himitsu">Himitsu</a>, which I plan on presenting in a
video and blog post in a few days time. The Firefox add-on actually works now
(though some features remain to be done), and Alexey Yerin fixed several
important bugs and contributed several new features. The user is now prompted to
consent before deleting keys, and we have a new GTK+ prompter written in Python,
which is much more reliable and feature-full thanks to Martijn Braam&rsquo;s help
(rewriting it in C again is a long-term TODO item for any interested
contributor). I also made some progress towards what will ultimately become
full-disk encryption support.</p>
<p><img src="https://brixitcdn.net/metainfo/keyring.png" alt="himitsu-keyring, a new GTK+ keyring manager from Martijn Braam"></p>
<p>Hare also enjoyed many improvements this month. We have some new improvements to
date/time support, including fixes for Martian time ;) I also mostly implemented
cross-compiling, which you can try out with <code>hare build -t riscv64</code> or something
similar. The major outstanding pain point here is that the Hare cache is not
arch-aware, so you need to <code>rm -rf ~/.cache/hare</code> each time you switch
architectures for now. We now have complex number support, as well as
improvements to encoding::json and net::uri.</p>
<p><img src="https://redacted.moe/f/737ed5b7.png" alt="A screenshot of a fractal rendered with the aid of Hare&rsquo;s new complex number
support"></p>
<p>That&rsquo;s all for today. Until next time!</p>]]></description><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate></item><item><title>The Helios microkernel</title><link>https://drewdevault.com/2022/06/13/helios.html</link><description><![CDATA[<p>I&rsquo;ve been working on a cool project lately that I&rsquo;d like to introduce you to:
<a href="https://sr.ht/~sircmpwn/helios">the Helios microkernel</a>. Helios is written in <a href="https://harelang.org">Hare</a> and currently
targets x86_64, and riscv64 and aarch64 are on the way. It&rsquo;s very much a
work-in-progress: don&rsquo;t expect to pick this up and start building anything with
it today.</p>
<p><img src="https://redacted.moe/f/4d2d7b25.jpg" alt="A picture of a ThinkPad running Helios, demonstrating userspace memory allocation"></p>
<p>Drawing some inspiration from seL4, Helios uses a capability-based design for
isolation and security. The kernel offers primitives for allocating physical
pages, mapping them into address spaces, and managing tasks, plus features like
platform-specific I/O (e.g. reading and writing x86 ports). The entire system is
written in Hare, plus some necessary assembly for the platform bits (e.g.
configuring the GDT or IDT).</p>
<p>Things are still quite early, but I&rsquo;m pretty excited about this project. I
haven&rsquo;t had this much fun hacking in some time :) We have several kernel
services working, including memory management and virtual address spaces, and
I&rsquo;ve written a couple of simple drivers in userspace (serial and BIOS VGA
consoles). Next up is preemptive multi-tasking — we already have
interrupts working reliably, including the PIT, so all that&rsquo;s left for
multi-tasking is to actually implement the context switch. I&rsquo;d like to aim for
an seL4-style single-stack system, though some finageling will be required
to make that work.</p>
<p>Again, much of the design comes from seL4, but unlike seL4, we intend to build
upon this kernel and develop a userspace as well. Each of the planned components
is named after celestial bodies, getting further from the sun as they get
higher-level:</p>
<ul>
<li>Helios: the kernel</li>
<li>Mercury: low-level userspace services &amp; service bus</li>
<li>Venus: real-world driver collection</li>
<li>Gaia: high-level programming environment</li>
<li>Ares: a complete operating system; package management, GUI, etc</li>
</ul>
<p>A few other components are planned — &ldquo;Vulcan&rdquo; is the userspace kernel
testing framework, named for the (now disproved) hypothetical planet between
Mercury and the Sun, and &ldquo;Luna&rdquo; is the planned POSIX compatibility layer. One of
the goals is to be practical for use on real-world hardware. I&rsquo;ve been testing
it continuously on my ThinkPads to ensure real-world hardware support, and I
plan on writing drivers for its devices — Intel HD graphics, HD Audio, and
Intel Gigabit Ethernet at the least. A basic AMD graphics driver is also likely
to appear, and perhaps drivers for some SoC&rsquo;s, like Raspberry Pi&rsquo;s VideoCore. I
have some neat ideas for the higher-level components as well, but I&rsquo;ll save
those for later.</p>
<p>Why build a new operating system? Well, for a start, it&rsquo;s really fun. But I also
take most of my projects pretty seriously and aim for real-world usability,
though it remains to be seen if this will be achieved. This is a hugely
ambitious project, or, in other words, my favorite kind of project. Even if it&rsquo;s
not ultimately useful, it will drive the development of a lot of useful stuff.
We&rsquo;re planning to design a debugger that will be ported to Linux as well, and
we&rsquo;ll be developing DWARF support for Hare to facilitate this. The GUI toolkit
we want to build for Ares will also be generally applicable. And Helios and
Mercury together have a reasonably small scope and makes for an interesting and
useful platform in their own right, even if the rest of the stack never
completely materializes. If nothing else, it will probably be able to run DOOM
fairly soon.</p>
<p>The kernel <em>is</em> a microkernel, so it is fairly narrow in scope and will probably
be more-or-less complete in the foreseeable future. The next to-do items are
context switching, so we can set up multi-tasking, IPC, fault handling, and
userspace support for interrupts. We&rsquo;ll also need to parse the ACPI tables and
bring up PCI in the kernel before handing it off to userspace. Once these things
are in place, the kernel is essentially ready to be used to write most drivers,
and the focus will move to fleshing out Mercury and Venus, followed by a small
version of Gaia that can at least support an interactive shell. There are some
longer-term features which will be nice to have in the kernel at some point,
though, such as SMP, IOMMU, or VT-x support.</p>
<p>Feel free to pull down the code and check it out, though remember my warning
that it doesn&rsquo;t do too much yet. You can download the <a href="https://builds.sr.ht/~sircmpwn/helios/commits/master">latest ISO</a> from the CI,
if you want to reproduce the picture at the top of this post, and write it to a
flash drive to stick in the x86_64 computer of your choice (boot via legacy
BIOS). If you want to mess with the code, you could play around with the Vulcan
system to get simple programs running in userspace. The kernel serial driver is
write-only, but a serial driver written in userspace could easily be made to
support interactive programs. If you&rsquo;re feeling extra adventureous, it probably
wouldn&rsquo;t be too difficult to get a framebuffer online and draw some pixels
— ping me in #helios on Libera Chat for a few words of guidance if you
want to try it.</p>]]></description><pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate></item><item><title>bleh</title><link>https://drewdevault.com/2022/05/30/bleh.html</link><description><![CDATA[<p>A few weeks ago, the maintainer of a project on SourceHut stepped down from
their work, citing harassment over using SourceHut as their platform of choice.
It was a difficult day when I heard about that.</p>
<p>Over the past few weeks, I have been enduring a bit of a depressive episode.
It&rsquo;s a complex issue rooted in several different problems, but I think a major
source of it is the seemingly constant deluge of hate I find myself at the
receiving end of online. I had to grow a thick skin a long time ago, but lately
it has not been thick enough. I am finding it increasingly difficult to keep up
with my work.</p>
<p>Perhaps it this has something to do with the backlash, not just against me and
my work, but against others who use and participate in that work. It&rsquo;s not
enough to dislike my programming language, but the skeptics must publicly
denounce it and discourage others from using it. It&rsquo;s irresponsible, if not
immoral, to design a language without a borrow checker in 2022. SourceHut&rsquo;s
email-oriented approach might not be for everyone, and instead of simply not
using it, skeptics must harass any projects that do. This kind of harassment is
something I hear about often from many maintainers of projects on SourceHut. It
breaks my heart and I feel helpless to do anything about it.</p>
<p>I&rsquo;m also often dealing with harassment directed at me alone. When I complained
this week about being DDoSed by a company with over a billion dollars in annual
revenue, it was portrayed as righteous retribution and a sign of incompetence. I
can&rsquo;t even count the number of times someone has said they would refuse to use
SourceHut (and that you, too, dear reader, should avoid it) on the sole basis
that I&rsquo;m involved with it. There is a steady supply of vile comments about me
based on &ldquo;facts&rdquo; delivered from the end of a game of telephone in which every
participant hates my guts, all easily believable without further research
because I&rsquo;m such a villainous character. Every project I work on, every blog
post I write, even many of the benign emails to public lists or GitHub issues I
open — the response is just vitriol.</p>
<p>I have made no shortage of mistakes, and there are plenty of hurt feelings which
can be laid at my feet. I am regretful for my mistakes, and I have worked
actively to improve. I think that it has been working. Perhaps that&rsquo;s arrogant
of me to presume, but I&rsquo;m not sure what else to do. Must I resign myself to my
fate for stupid comments I made years ago? I&rsquo;m sorry, and I&rsquo;ve been working to
do better. Can I have another chance?</p>
<p>For some I think the answer is &ldquo;no&rdquo;. Many of my detractors just want me to shut
up. No more blog posts, no new projects. Just go away, Drew.</p>
<p>Well, I can&rsquo;t say it&rsquo;s not working. This stuff gets to me. At times like this I
have very little motivation to work. If you&rsquo;re looking for a strategy to get me
to shut up, just ensure that I have a constant flow of toxic comments to read.</p>
<p>I love writing code, at least most of the time. I believe in my principles and I
enjoy writing software that embodies them. I love doing it, and I&rsquo;m really good
at it, and thousands of people are depending on my work.</p>
<p>I&rsquo;m doing the work that I believe in, and working with people who share those
values. I have worked very hard for that privilege. I&rsquo;m sorry that it&rsquo;s not good
enough for many people. I&rsquo;m just trying to do my best. And if you must harass
anyone over it, at least harass me, and not anyone else. My inbox is at
<a href="mailto:sir@cmpwn.com">sir@cmpwn.com</a>, and I promise that I will read your email and cry, so that no one
else has to.</p>
<p>I&rsquo;ll close by thanking those who have sent me positive notes. Some of these
comments are very touching. If you&rsquo;ve sent one of these, you have my thanks.
Love you :)</p>]]></description><pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate></item><item><title>Google has been DDoSing SourceHut for over a year</title><link>https://drewdevault.com/2022/05/25/Google-has-been-DDoSing-sourcehut.html</link><description><![CDATA[<p>Just now, I took a look at the HTTP logs on git.sr.ht. Of the past 100,000 HTTP
requests received by git.sr.ht (representing about 2½ hours of logs), 4,774 have
been requested by GoModuleProxy — 5% of all traffic. And their requests
are not cheap: every one is a complete git clone. They come in bursts, so every
few minutes we get a big spike from Go, along with a constant murmur of Go
traffic.</p>
<p>This has been ongoing since around the release of Go 1.16, which came with some
changes to how Go uses modules. Since this release, following a gradual ramp-up
in traffic as the release was rolled out to users, git.sr.ht has had a constant
floor of I/O and network load for which the majority can be attributed to Go.</p>
<p>I started to suspect that something strange was going on when our I/O alarms
started going off in February 2021 (we eventually had to tune these alarms up
above the floor of I/O noise generated by Go), correlated with lots of activity
from a Go user agent. I was able to narrow it down with some effort, but to the
credit of the Go team they did <a href="https://github.com/golang/go/issues/44468">change their User-Agent to make more apparent
what was going on</a>. Ultimately, this proved to be the end of the Go team&rsquo;s
helpfulness in this matter.</p>
<p>I did narrow it down: it turns out that the Go Module Mirror runs some crawlers
that periodically clone Git repositories with Go modules in them to check for
updates. Once we had narrowed this down, I filed <a href="https://github.com/golang/go/issues/44577">a second ticket</a> to address
the problem.</p>
<p>I came to understand that the design of this feature is questionable. For a
start, I never really appreciated the fact that Go secretly calls home to Google
to fetch modules through a proxy (you can set <a href="https://drewdevault.com/2021/08/06/goproxy-breaks-go.html">GOPROXY=direct</a> to fix this).
Even taking the utility at face value, however, the implementation leaves much
to be desired. The service is distributed across many nodes which all crawl
modules independently of one another, resulting in very redundant git traffic.</p>
<pre tabindex="0"><code>140 8a42ab2a4b4563222b9d12a1711696af7e06e4c1092a78e6d9f59be7cb1af275
 57 9cc95b73f370133177820982b8b4e635fd208569a60ec07bd4bd798d4252eae7
 44 9e730484bdf97915494b441fdd00648f4198be61976b0569338a4e6261cddd0a
 44 80228634b72777eeeb3bc478c98a26044ec96375c872c47640569b4c8920c62c
 44 5556d6b76c00cfc43882fceac52537b2fdaa7dff314edda7b4434a59e6843422
 40 59a244b3afd28ee18d4ca7c4dd0a8bba4d22d9b2ae7712e02b1ba63785cc16b1
 40 51f50605aee58c0b7568b3b7b3f936917712787f7ea899cc6fda8b36177a40c7
 40 4f454b1baebe27f858e613f3a91dfafcdf73f68e7c9eba0919e51fe7eac5f31b
</code></pre><p>This is a sample from <a href="https://paste.sr.ht/~sircmpwn/b46ad0b13e864923df80cb8e8285bf1661e6f872">a larger set</a> which shows the hashes of git
repositories on the right (names were hashed for privacy reasons), and the
number of times they were cloned over the course of an hour. The main culprit is
the fact that the nodes all crawl independently and don&rsquo;t communicate with each
other, but the per-node stats are not great either: each IP address still clones
the same repositories 8-10 times per hour. <a href="https://github.com/golang/go/issues/44577#issuecomment-851079949">Another user</a> hosting their own
git repos noted a single module being downloaded over 500 times in a single day,
generating 4 GiB of traffic.</p>
<p>The Go team holds that this service is not a crawler, and thus they do not obey
robots.txt — if they did, I could use it to configure a more
reasonable &ldquo;Crawl-Delay&rdquo; to control the pace of their crawling efforts. I also
suggested keeping the repositories stored on-site and only doing a git fetch,
rather than a fresh git clone every time, or using shallow clones. They could
also just fetch fresh data when users request it, instead of pro-actively
crawling the cache all of the time. All of these suggestions fell on deaf ears,
the Go team has not prioritized it, and a year later I am still being DDoSed by
Google as a matter of course.</p>
<p>I was banned from the Go issue tracker for mysterious reasons,<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> so I cannot
continue to nag them for a fix. I can&rsquo;t blackhole their IP addresses, because
that would make all Go modules hosted on git.sr.ht stop working for default Go
configurations (i.e. without GOPROXY=direct). I tried to advocate for Linux
distros to patch out GOPROXY by default, citing privacy reasons, but I was
unsuccessful. I have no further recourse but to tolerate having our little-fish
service DoS&rsquo;d by a 1.38 trillion dollar company. But I will say that if I was in
their position, and my service was mistakenly sending an excessive amount of
traffic to someone else, I would make it my first priority to fix it. But I
suppose no one will get promoted for prioritizing that at Google.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In violation of Go&rsquo;s own Code of Conduct, by the way, which requires that participants are notified moderator actions against them and given the opportunity to appeal. I happen to be well versed in Go&rsquo;s CoC given that I was banned once before without notice — a ban which was later overturned on the grounds that the moderator was wrong in the first place. Great community, guys.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate></item><item><title>Status update, May 2022</title><link>https://drewdevault.com/2022/05/16/Status-update-May-2022.html</link><description><![CDATA[<p>This was an exciting month: <a href="https://harelang.org">the Hare programming language</a> is a secret no more!
You can now <a href="https://harelang.org/tutorials/introduction/">try out</a> the programming language I first teased <a href="https://drewdevault.com/2021/03/19/A-new-systems-language.html">over a year ago</a>
and <a href="mailto:sir@cmpwn.com">tell me what you think</a>. I hope you like it! I&rsquo;m
quite pleased with it so far.</p>
<p>One thing Hare has done is allow me to unshelve several projects which were
blocked pending the availability of a suitable language to write them in. I have
actually been working on several of these for a while now — and several
more are to come later — but I couldn&rsquo;t share them thanks to Hare&rsquo;s policy
of secrecy early in its development. Allow me to introduce you to a few
projects!</p>
<p><strong><a href="https://sr.ht/~sircmpwn/helios">Helios</a></strong> is a micro-kernel for x86_64, and ideally later for aarch64 and
riscv64 as well (and possibly other targets as Hare grows additional ports). We
have a few things working, such as paging and interrupts, and as of this morning
we have entered userspace. Next up is rigging up syscalls and scheduling, then
we&rsquo;re going to start fleshing out an L4-inspired API and writing some drivers in
userspace.</p>
<p><img src="https://redacted.moe/f/2c1f497a.png" alt="A screenshot showing Helios booting and entering userspace"></p>
<p><strong><a href="https://sr.ht/~sircmpwn/himitsu">Himitsu</a></strong> is a secret storage system. It can act as a password manager, but
it also stores other arbitrary secret data, such as private keys. Each key is a
set of key/value pairs, some of which can be secret. This allows you to store
additional data alongside your password (such as your username or email for
login), and also supports secret data other than passwords — like SSH
keys. An extensible consent and agent protocols allow you to expand it to
support a wide variety of use-cases for secure use of secrets.</p>
<p><video src="https://redacted.moe/f/09d422dd.webm" muted controls></video></p>
<p><strong><a href="https://sr.ht/~sircmpwn/btqd">btqd</a></strong>, or &ldquo;bittorrent queue daemon&rdquo;, is (going to be) a bittorrent daemon,
but it is still very early in development. The design is essentially that of a
process supervisor which manages a queue of torrents and fires up subprocesses
to seed or leech for a set of active torrents. Each subprocess, such as btlc
(bittorrent leech client), or btsc (bittorrent seed client), can also be used
separately from the queue daemon. Further development is blocked on net::http,
which is blocked on TLS support, for tracker announce requests. I may
temporarily unblock this by shelling out to curl instead.</p>
<p><strong><a href="https://sr.ht/~sircmpwn/scheduled">scheduled</a></strong> is also early in development. It is a replacement for crond (and
also <a href="https://linux.die.net/man/1/at">at(1)</a>) which is redesigned from the ground up. I have never been thrilled
with cron&rsquo;s design — it&rsquo;s very un-Unix like. scheduled will have better
error handling and logging, a much more flexible and understandable approach to
configuration, and a better approach to security, plus the ability to do ad-hoc
scheduling from the command line. This was designed prior to date/time support
landing in Hare, and was blocked for a while, but is now unblocked. However, it
is not my highest priority.</p>
<hr>
<p>Each of these projects will spawn more blog posts (or talks) going into greater
depth on their design goals and rationale later on. For now, with the
introductions out of the way, allow me to fill you in on the things which got
done in this past month in particular.</p>
<p>I&rsquo;ll keep the SourceHut news short, and expand upon it in the &ldquo;what&rsquo;s cooking&rdquo;
post later today. For my own part, I spent some time working on <a href="https://sr.ht/~emersion/hut">hut</a> to add
support for comprehensive account data import/export. This will allow you to
easily take all of your data out of sourcehut and import it into another
instance, or any compatible software — your git repos are just git repos
and your mailing lists are just mbox files, so you could push them to GitHub or
import them into GNU Mailman, for example. This work is also a step towards
self-service account deletion and renaming, both prioritized for the beta.</p>
<p>Regarding Hare itself, there are many important recent developments. Over 300
commits landed this month, so I&rsquo;ll have to leave some details out. An OpenBSD
port is underway by Brian Callahan, and the initial patches have landed for the
Hare compiler. The crypto module grew <a href="https://docs.harelang.org/crypto/blowfish">blowfish</a> and <a href="https://docs.harelang.org/crypto/bcrypt">bcrypt</a> support, both
useful mainly for legacy compatibility, as well as the more immediately useful
<a href="https://docs.harelang.org/crypto/x25519">x25519</a> and <a href="https://docs.harelang.org/encoding/pem">pem</a> implementations. There is also a new <a href="https://docs.harelang.org/encoding/json">encoding::json</a>
module,<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and a number of fixes and improvements have been steadily
flowing in for <a href="https://docs.harelang.org/regex">regex</a>, <a href="https://docs.harelang.org/bufio">bufio</a>, <a href="https://docs.harelang.org/net">net</a>, <a href="https://docs.harelang.org/net/uri">net::uri</a>, and <a href="https://docs.harelang.org/datetime">datetime</a>, along with
dozens of others.</p>
<p>For Himitsu, I developed <a href="https://sr.ht/~sircmpwn/hare-ssh">hare-ssh</a> this month to facilitate the addition of
<a href="https://git.sr.ht/~sircmpwn/himitsu-ssh">himitsu-ssh</a>, which provides SSH tooling that integrates with Himitsu (check
out the video above for a demo). The &ldquo;hissh-import&rdquo; command decodes OpenSSH
private keys and loads them into the Himitsu keystore, and the &ldquo;hissh-agent&rdquo;
command runs an SSH agent that performs authentication with the private keys
stored in Himitsu. Future additions will include &ldquo;hissh-export&rdquo;, for getting
your private keys back out in a useful format, and &ldquo;hissh-keygen&rdquo;, for skipping
the import/export step entirely. Presently only ed25519 keys are supported; more
will be added as the necessary primitives are added to Hare upstream.</p>
<p>I did some work on Helios this weekend, following a brief hiatus. I wrote a more
generalized page table implementation which can manage multiple page tables
(necessary to have separate address spaces for each process), and started
rigging up the kernel to userspace transition, which I briefly covered earlier
in the post. As of this morning, I have some code running in userspace —
one variant attempts to <code>cli</code>, causing a general protection fault (as expected),
and another just runs a busy loop, which works without any faults. Next steps
are syscalls and scheduling.</p>
<p>That&rsquo;s all the news for today. Hare! Woo! Thanks for reading, and be sure to
check out — and maybe contribute to? — some of these projects. Take
care!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Which is likely to be moved to the extended library in the future.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate></item><item><title>A Hare code generator for finding ioctl numbers</title><link>https://drewdevault.com/2022/05/14/generating-ioctls.html</link><description><![CDATA[<p>Modern Unix derivatives have this really bad idea called <a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/ioctl.html">ioctl</a>. It&rsquo;s a
function which performs arbitrary operations on a file descriptor. It is
essentially the kitchen sink of modern Unix derivatives, particularly Linux, in
which they act almost like a second set of extra syscalls. For example, to get
the size of the terminal window, you use an ioctl specific to TTY file
descriptors:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">wsz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">winsize</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">ioctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">TIOCGWINSZ</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">wsz</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">void</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">e</span><span class="o">:</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">errno</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">EBADFD</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">ENOTTY</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">unsupported</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">abort</span><span class="p">(</span><span class="s">&#34;Unexpected error from ioctl&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">case</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">ttysize</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">rows</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wsz</span><span class="p">.</span><span class="n">ws_row</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">columns</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wsz</span><span class="p">.</span><span class="n">ws_col</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This code performs the ioctl syscall against the provided file descriptor &ldquo;fd&rdquo;,
using the &ldquo;TIOCGWINSZ&rdquo; operation, and setting the parameter to a pointer to a
winsize structure. There are thousands of ioctls provided by Linux, and each of
them is assigned a constant like TIOCGWINSZ (0x5413). Some constants, including
this one, are assigned somewhat arbitrarily. However, some are assigned with
some degree of structure.</p>
<p>Consider for instance the ioctl TUNSETOWNER, which is used for tun/tap network
devices. This ioctl is assigned the number 0x400454cc, but this is not selected
arbitrarily. It&rsquo;s assigned with a macro, which we can find in
/usr/include/linux/if_tun.h:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define TUNSETOWNER   _IOW(&#39;T&#39;, 204, int)
</span></span></span></code></pre></div><p>The _IOW macro, along with similar ones like _IO, _IOR, and _IOWR, are
defined in /usr/include/asm-generic/ioctl.h. They combine this letter, number,
and parameter type (or rather its size), and the direction (R, W, WR, or
neither), OR&rsquo;d together into an unsigned 32-bit number:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define _IOC_WRITE	1U
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define _IOC_TYPECHECK(t) (sizeof(t))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define _IOC(dir,type,nr,size) \
</span></span></span><span class="line"><span class="cl"><span class="cp">	(((dir)  &lt;&lt; _IOC_DIRSHIFT) | \
</span></span></span><span class="line"><span class="cl"><span class="cp">	 ((type) &lt;&lt; _IOC_TYPESHIFT) | \
</span></span></span><span class="line"><span class="cl"><span class="cp">	 ((nr)   &lt;&lt; _IOC_NRSHIFT) | \
</span></span></span><span class="line"><span class="cl"><span class="cp">	 ((size) &lt;&lt; _IOC_SIZESHIFT))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define _IOW(type,nr,size)	_IOC(_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))
</span></span></span></code></pre></div><p>It would be useful to define ioctl numbers in a similar fashion for Hare
programs. However, Hare lacks macros, so we cannot re-implement this in exactly
the same manner. Instead, we can use code generation.</p>
<p><em><a href="https://harelang.org">Hare</a> is a new systems programming language I&rsquo;ve been
working on for a couple of years. Check out the <a href="https://harelang.org/blog/2022-04-25-announcing-hare/">announcement</a> for more
detail.</em></p>
<p>Again using the tun interface as an example, our goal is to turn the following
input file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">sock_filter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">code</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">jt</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">jf</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">k</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">sock_fprog</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">length</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">filter</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">sock_filter</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETNOCSUM</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETDEBUG</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">201</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETIFF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">202</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETPERSIST</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">203</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETOWNER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">204</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETLINK</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">205</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETGROUP</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">206</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETFEATURES</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">207</span><span class="p">,</span><span class="w"> </span><span class="kt">uint</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETOFFLOAD</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">208</span><span class="p">,</span><span class="w"> </span><span class="kt">uint</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETTXFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">209</span><span class="p">,</span><span class="w"> </span><span class="kt">uint</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETIFF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">210</span><span class="p">,</span><span class="w"> </span><span class="kt">uint</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETSNDBUF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">211</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETSNDBUF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">212</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNATTACHFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">213</span><span class="p">,</span><span class="w"> </span><span class="n">sock_fprog</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNDETACHFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">214</span><span class="p">,</span><span class="w"> </span><span class="n">sock_fprog</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETVNETHDRSZ</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">215</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETVNETHDRSZ</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">216</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETQUEUE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">217</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETIFINDEX</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">218</span><span class="p">,</span><span class="w"> </span><span class="kt">uint</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">219</span><span class="p">,</span><span class="w"> </span><span class="n">sock_fprog</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETVNETLE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">220</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETVNETLE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">221</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETVNETBE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">222</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETVNETBE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">223</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETSTEERINGEBPF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">224</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETFILTEREBPF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">225</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETCARRIER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">226</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETDEVNETNS</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IO</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">227</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Into the following output file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">sock_filter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">code</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">jt</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">jf</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">k</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">sock_fprog</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">length</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">filter</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">sock_filter</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETNOCSUM</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454c8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETDEBUG</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454c9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETIFF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454ca</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETPERSIST</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454cb</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETOWNER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454cc</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETLINK</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454cd</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETGROUP</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454ce</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETFEATURES</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x800454cf</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETOFFLOAD</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454d0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETTXFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454d1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETIFF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x800454d2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETSNDBUF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x800454d3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETSNDBUF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454d4</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNATTACHFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x401054d5</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNDETACHFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x401054d6</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETVNETHDRSZ</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x800454d7</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETVNETHDRSZ</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454d8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETQUEUE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454d9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETIFINDEX</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454da</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x801054db</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETVNETLE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454dc</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETVNETLE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x800454dd</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETVNETBE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454de</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETVNETBE</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x800454df</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETSTEERINGEBPF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x800454e0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETFILTEREBPF</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x800454e1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNSETCARRIER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x400454e2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNGETDEVNETNS</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x54e3</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>I wrote the <a href="https://git.sr.ht/~sircmpwn/hare/tree/master/item/cmd/ioctlgen/main.ha">ioctlgen</a> tool for this purpose, and since it demonstrates a number
of interesting Hare features, I thought it would make for a cool blog post. This
program must do the following things:</p>
<ul>
<li>Scan through the file looking for @_IO* constructs</li>
<li>Parse these @_IO* constructs</li>
<li>Determine the size of the type specified by the third parameter</li>
<li>Compute the ioctl number based on these inputs</li>
<li>Write the computed constant to the output</li>
<li>Pass everything else through unmodified</li>
</ul>
<p>The implementation begins thusly:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">ioctlre</span><span class="o">:</span><span class="w"> </span><span class="n">regex</span><span class="o">::</span><span class="n">regex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">regex</span><span class="o">::</span><span class="n">regex</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">typedefre</span><span class="o">:</span><span class="w"> </span><span class="n">regex</span><span class="o">::</span><span class="n">regex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">regex</span><span class="o">::</span><span class="n">regex</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@init</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">init</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ioctlre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">regex</span><span class="o">::</span><span class="n">compile</span><span class="p">(</span><span class="s">`@(_IO[RW]*)\((.*)\)`</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">typedefre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">regex</span><span class="o">::</span><span class="n">compile</span><span class="p">(</span><span class="s">`^(export )?type `</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@fini</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">fini</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">regex</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ioctlre</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">regex</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">typedefre</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This sets aside two regular expressions: one that identifies type aliases (so
that we can parse them to determine their size later), and one that identifies
our @_IO* pseudo-macros. I also defined some types to store each of the
details necessary to compute the ioctl assignment:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">IO</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">IOW</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">IOR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">IOWR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IOW</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">IOR</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">ioctl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="w"> </span><span class="kt">rune</span><span class="p">,</span><span class="w"> </span><span class="kt">u32</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">types</span><span class="o">::</span><span class="n">_type</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Hare&rsquo;s standard library includes tools for parsing and analyzing Hare programs
in the <a href="https://docs.harelang.org/hare">hare namespace</a>. We&rsquo;ll need to use these to work with types in this
program. At the start of the program, we initialize a &ldquo;type store&rdquo; from
hare::types, which provides a mechanism with which Hare types can be processed
and stored. The representation of Hare types varies depending on the
architecture (for example, pointer types have different sizes on 32-bit and
64-bit systems), so we have to specify the architecture we want. In the future
it will be necessary to make this configurable, but for now I just hard-coded
x86_64:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">store</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">store</span><span class="p">(</span><span class="n">types</span><span class="o">::</span><span class="n">x86_64</span><span class="p">,</span><span class="w"> </span><span class="kt">null</span><span class="p">,</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">defer</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">store_free</span><span class="p">(</span><span class="n">store</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>The two &ldquo;null&rdquo; parameters are not going to be used here, but are designed to
facilitate evaluating expressions in type definitions, such as <code>[8 * 16]int</code>.
Leaving them null is permissible, but disables the ability to do this sort of
thing.</p>
<p>Following this, we enter a loop which processes the input file line-by-line,
testing each line against our regular expressions and doing some logic on them
if they match. Let&rsquo;s start with the code for handling new types:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">bufio</span><span class="o">::</span><span class="n">scanline</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdin</span><span class="p">)</span><span class="o">!</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">line</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">fromutf8</span><span class="p">(</span><span class="n">line</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">line</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">regex</span><span class="o">::</span><span class="n">test</span><span class="p">(</span><span class="o">&amp;</span><span class="n">typedefre</span><span class="p">,</span><span class="w"> </span><span class="n">line</span><span class="p">)</span><span class="o">!</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">bufio</span><span class="o">::</span><span class="n">unreadrune</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdin</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;\n&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">bufio</span><span class="o">::</span><span class="n">unread</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdin</span><span class="p">,</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">toutf8</span><span class="p">(</span><span class="n">line</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">loadtype</span><span class="p">(</span><span class="n">store</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// ...to be continued...
</span></span></span></code></pre></div><p>If we encounter a line which matches our type declaration regular expression,
then we unread that line back into the (buffered) standard input stream, then
call this &ldquo;loadtype&rdquo; function to parse and load it into the type store.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ha" data-lang="ha"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">loadtype</span><span class="p">(</span><span class="n">store</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">types</span><span class="o">::</span><span class="n">typestore</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">tee</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">tee</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdin</span><span class="p">,</span><span class="w"> </span><span class="n">os</span><span class="o">::</span><span class="n">stdout</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">lex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tee</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&lt;ioctl&gt;&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">decl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">parse</span><span class="o">::</span><span class="n">decl</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lex</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">parse</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error parsing type declaration:&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">parse</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">decl</span><span class="o">:</span><span class="w"> </span><span class="n">ast</span><span class="o">::</span><span class="n">decl</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">decl</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">tdecl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">decl</span><span class="p">.</span><span class="n">decl</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="p">[]</span><span class="n">ast</span><span class="o">::</span><span class="n">decl_type</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">tdecl</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Multiple type declarations are unsupported&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">tdecl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tdecl</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">lookup</span><span class="p">(</span><span class="n">store</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tdecl</span><span class="p">.</span><span class="n">_type</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">types</span><span class="o">::</span><span class="n">newalias</span><span class="p">(</span><span class="n">store</span><span class="p">,</span><span class="w"> </span><span class="n">tdecl</span><span class="p">.</span><span class="n">ident</span><span class="p">,</span><span class="w"> </span><span class="n">of</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Hare includes a Hare lexer and parser in the standard library, which we&rsquo;re
making use of here. The first thing we do is use <a href="https://docs.harelang.org/io#tee">io::tee</a> to copy any data the
parser reads into stdout, passing it through to the output file. Then we set up
a lexer and parse the type declaration. A type declaration looks something like
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">sock_fprog</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">length</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">filter</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">sock_filter</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The types::lookup call looks up the struct type, and newalias creates a new
type alias based on that type with the given name (sock_filter). Adding this to
the type store will let us resolve the type when we encounter it later on, for
example in this line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">def</span><span class="w"> </span><span class="n">TUNGETFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOR</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">219</span><span class="p">,</span><span class="w"> </span><span class="n">sock_fprog</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Back to the main loop, we have another regex test to check if we&rsquo;re looking at a
line with one of these pseudo-macros:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">groups</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">regex</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ioctlre</span><span class="p">,</span><span class="w"> </span><span class="n">line</span><span class="p">)</span><span class="o">!</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">case</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="n">line</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">cap</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">regex</span><span class="o">::</span><span class="n">capture</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">yield</span><span class="w"> </span><span class="n">cap</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">groups</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">groups</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">content</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">case</span><span class="w"> </span><span class="s">&#34;_IO&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">yield</span><span class="w"> </span><span class="n">dir</span><span class="o">::</span><span class="n">IO</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">case</span><span class="w"> </span><span class="s">&#34;_IOR&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">yield</span><span class="w"> </span><span class="n">dir</span><span class="o">::</span><span class="n">IOR</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">case</span><span class="w"> </span><span class="s">&#34;_IOW&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">yield</span><span class="w"> </span><span class="n">dir</span><span class="o">::</span><span class="n">IOW</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">case</span><span class="w"> </span><span class="s">&#34;_IOWR&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">yield</span><span class="w"> </span><span class="n">dir</span><span class="o">::</span><span class="n">IOWR</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatalf</span><span class="p">(</span><span class="s">&#34;Unknown ioctl direction {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">groups</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">content</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">ioctl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parseioctl</span><span class="p">(</span><span class="n">store</span><span class="p">,</span><span class="w"> </span><span class="n">dir</span><span class="p">,</span><span class="w"> </span><span class="n">groups</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">content</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Recall that the regex from earlier is <code>@(_IO[RW]*)\((.*)\)</code>. This has two
capture groups: one for &ldquo;_IO&rdquo; or &ldquo;_IOW&rdquo; and so on, and another for the list of
&ldquo;parameters&rdquo; (the zeroth &ldquo;capture group&rdquo; is the entire match string). We use the
first capture group to grab the ioctl direction, then we pass that into
&ldquo;parseioctl&rdquo; along with the type store and the second capture group.</p>
<p>This &ldquo;parseioctl&rdquo; function is kind of neat:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">parseioctl</span><span class="p">(</span><span class="n">store</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">types</span><span class="o">::</span><span class="n">typestore</span><span class="p">,</span><span class="w"> </span><span class="n">d</span><span class="o">:</span><span class="w"> </span><span class="n">dir</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="n">ioctl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">fixed</span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">toutf8</span><span class="p">(</span><span class="n">params</span><span class="p">),</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">mode</span><span class="o">::</span><span class="n">READ</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">lex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&lt;ioctl&gt;&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">rn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">LIT_RUNE</span><span class="p">).</span><span class="mi">1</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="kt">rune</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">expect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">COMMA</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">LIT_ICONST</span><span class="p">).</span><span class="mi">1</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="kt">i64</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">d</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">dir</span><span class="o">::</span><span class="n">IO</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="w"> </span><span class="n">rn</span><span class="p">,</span><span class="w"> </span><span class="n">num</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="p">,</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">expect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">COMMA</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">ty</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">parse</span><span class="o">::</span><span class="n">_type</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lex</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">ty</span><span class="o">:</span><span class="w"> </span><span class="n">ast</span><span class="o">::</span><span class="n">_type</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">ty</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">parse</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error:&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">parse</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">ty</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">types</span><span class="o">::</span><span class="n">lookup</span><span class="p">(</span><span class="n">store</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ty</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error:&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">deferred</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error: this tool does not support forward references&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">ty</span><span class="o">:</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="o">*</span><span class="n">types</span><span class="o">::</span><span class="n">_type</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">ty</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="w"> </span><span class="n">rn</span><span class="p">,</span><span class="w"> </span><span class="n">num</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="p">,</span><span class="w"> </span><span class="n">ty</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">expect</span><span class="p">(</span><span class="n">lex</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">lex</span><span class="o">::</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">want</span><span class="o">:</span><span class="w"> </span><span class="n">ltok</span><span class="p">)</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">token</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">lex</span><span class="o">::</span><span class="n">lex</span><span class="p">(</span><span class="n">lex</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error:&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="o">:</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">token</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">tok</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">want</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">fmt</span><span class="o">::</span><span class="n">fatalf</span><span class="p">(</span><span class="s">&#34;Error: unexpected {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">tokstr</span><span class="p">(</span><span class="n">tok</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">tok</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Here we&rsquo;ve essentially set up a miniature parser based on a Hare lexer to parse
our custom parameter list grammar. We create a <a href="https://docs.harelang.org/bufio#fixed">fixed reader</a> from the capture
group string, then create a lexer based on this and start pulling tokens out of
it. The first parameter is a rune, so we grab a LIT_RUNE token and extract the
Hare rune value from it, then after a COMMA token we repeat this with
LIT_ICONST to get the integer constant. dir::IO ioctls don&rsquo;t have a type
parameter, so can return early in this case.</p>
<p>Otherwise, we use <a href="https://docs.harelang.org/hare/parse#_type">hare::parse::_type</a> to parse the type parameter, producing
a <a href="https://docs.harelang.org/hare/ast#_type">hare::ast::_type</a>. We then pass this to the type store to look up technical
details about this type, such as its size, alignment, storage representation,
and so on. This converts the AST type — which only has lexical information
— into an actual type, including semantic information about the type.</p>
<p>Equipped with this information, we can calculate the ioctl&rsquo;s assigned number:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">def</span><span class="w"> </span><span class="n">IOC_NRBITS</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IOC_TYPEBITS</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IOC_SIZEBITS</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">14</span><span class="p">;</span><span class="w"> </span><span class="c1">// XXX: Arch-specific
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">def</span><span class="w"> </span><span class="n">IOC_DIRBITS</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"> </span><span class="c1">// XXX: Arch-specific
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IOC_NRSHIFT</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IOC_TYPESHIFT</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IOC_NRSHIFT</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">IOC_NRBITS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IOC_SIZESHIFT</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IOC_TYPESHIFT</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">IOC_TYPEBITS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">IOC_DIRSHIFT</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IOC_SIZESHIFT</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">IOC_SIZEBITS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">ioctlno</span><span class="p">(</span><span class="n">io</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">ioctl</span><span class="p">)</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">typesz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">ty</span><span class="o">:</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="o">*</span><span class="n">types</span><span class="o">::</span><span class="n">_type</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">ty</span><span class="p">.</span><span class="n">sz</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="kt">null</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="mi">0</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">IOC_DIRSHIFT</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="mi">1</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">IOC_TYPESHIFT</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="mi">2</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">IOC_NRSHIFT</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="n">typesz</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">IOC_SIZESHIFT</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>And, back in the main loop, print it to the output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">prefix</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">sub</span><span class="p">(</span><span class="n">line</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">groups</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">start</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">fmt</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;{}0x{:x};&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">prefix</span><span class="p">,</span><span class="w"> </span><span class="n">ioctlno</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ioctl</span><span class="p">))</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Now we have successfully converted this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">sock_filter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">code</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">jt</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">jf</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">k</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">sock_fprog</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">length</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">filter</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">sock_filter</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">TUNATTACHFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="n">_IOW</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">213</span><span class="p">,</span><span class="w"> </span><span class="n">sock_fprog</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Into this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">def</span><span class="w"> </span><span class="n">TUNATTACHFILTER</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x401054d5</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>A quick C program verifies our result:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;linux/ioctl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;linux/if_tun.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;TUNATTACHFILTER: 0x%lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">TUNATTACHFILTER</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>And:</p>
<pre tabindex="0"><code>TUNATTACHFILTER: 0x401054d5
</code></pre><p>It works!</p>
<hr>
<p>Critics may draw attention to the fact that we could have saved ourselves much
of this work if Hare had first-class macros, but macros are not aligned with
Hare&rsquo;s design goals, so an alternative solution is called for. This particular
program is useful only in a small set of specific circumstances (and mainly for
Hare developers themselves, less so for most users), but it solves the problem
pretty neatly given the constraints it has to work within.</p>
<p>I think this is a nice case study in a few useful features available from the
Hare standard library. In addition to POSIX Extended Regular Expression support
via the <a href="https://docs.harelang.org/regex">regex</a> module, the <a href="https://docs.harelang.org/hare">hare namespace</a> offers many tools to provide Hare
programs with relatively deep insights into the language itself. We can use
hare::lex to parse the custom grammar for our pseudo-macros, use hare::parse to
parse type declarations, and use hare::types to compute the semantic details
of each type. I also like many of the &ldquo;little things&rdquo; on display here, such as
unreading data back into the buffered stdin reader, or using io::tee to copy
data to stdout during parsing.</p>
<p>I hope you found it interesting!</p>]]></description><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate></item><item><title>When will we learn?</title><link>https://drewdevault.com/2022/05/12/Supply-chain-when-will-we-learn.html</link><description><![CDATA[<p>Congratulations to Rust for its first (but not its last) supply-chain attack
this week! They join a growing club of broken-by-design package managers which
publish packages uploaded by vendors directly, with no review step, and ship
those packages directly to users with no further scrutiny.</p>
<h2 id="timeline-of-major-incidents-on-npmcratespypietc">Timeline of major incidents on npm/Crates/PyPI/etc</h2>
<ul>
<li>2022-05-10: Cargo: <a href="https://blog.rust-lang.org/2022/05/10/malicious-crate-rustdecimal.html">rustdecimal</a> ships with malicious code</li>
<li>2022-05-09: npm: <a href="https://mastodon.social/@lrvick/108274062191145538">foreach</a> is taken over via an expired email domain</li>
<li>2022-03-17: npm: <a href="https://www.bleepingcomputer.com/news/security/big-sabotage-famous-npm-package-deletes-files-to-protest-ukraine-war/">node-ipc</a> ships malware targeting Russia and Belarus</li>
<li>2022-01-09: npm: <a href="https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/">colors and faker</a> are deliberately sabotaged</li>
<li>2021-11-19: PyPI: <a href="https://arstechnica.com/information-technology/2021/11/malware-downloaded-from-pypi-41000-times-was-surprisingly-stealthy/">11 malicious packages</a> discovered</li>
<li>2021-11-04: npm: <a href="https://github.com/advisories/GHSA-g2q5-5433-rhrf">rc</a> ships malicious code</li>
<li>2021-11-04: npm: <a href="https://www.bleepingcomputer.com/news/security/popular-coa-npm-library-hijacked-to-steal-user-passwords/">coa</a> steals your passwords</li>
<li>2021-10-22: npm: <a href="https://github.com/advisories/GHSA-pjwm-rvh2-c87w">ua-parser-js</a> ships malicious code</li>
<li>2021-10-11: PyPI: <a href="https://twitt.re/maximilianhils/status/1447525552370458625?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1447525552370458625%7Ctwgr%5E%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fwww.bleepingcomputer.com%2Fnews%2Fsecurity%2Fpypi-removes-mitmproxy2-over-code-execution-concerns%2F">mitmproxy2</a> typo-squats mitmproxy with an added RCE</li>
<li>2021-07-30: PyPI: <a href="https://arstechnica.com/gadgets/2021/07/malicious-pypi-packages-caught-stealing-developer-data-and-injecting-code/">8 malicious packages</a> discovered</li>
<li>2020-12-16: RubyGems: <a href="https://blog.sonatype.com/rubygems-laced-with-bitcoin-stealing-malware">pretty_color</a> (and one other) steals bitcoin from victims</li>
<li>2020-09-11: npm: <a href="https://github.com/advisories?query=https%3A%2F%2Fjs-metrics.com%2Fminjs.php">dozens of packages</a> steal your user&rsquo;s credit card number</li>
<li>2020-09-03: npm: <a href="https://github.com/advisories/GHSA-vm6v-w6q2-mrrq">bb-builder</a> steals your password</li>
<li>2020-04-16: RubyGems: <a href="https://blog.reversinglabs.com/blog/mining-for-malicious-ruby-gems">760+ malicious packages</a> found stealing bitcoin</li>
<li>2018-11-28: npm: <a href="https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident">event-stream</a> ships with a bitcoin theft kit</li>
<li>2018-10-21: PyPI: <a href="https://scribe.rip/medium.com/@bertusk/cryptocurrency-clipboard-hijacker-discovered-in-pypi-repository-b66b8a534a8">colourama</a> sneaks bitcoin addresses into your clipboard</li>
<li>2018-10-13: PyPI: <a href="https://scribe.rip/medium.com/@bertusk/detecting-cyber-attacks-in-the-python-package-index-pypi-61ab2b585c67">more typo-squatting malware</a> attempts various attacks</li>
<li>2018-07-12: npm: <a href="https://github.com/eslint/eslint-scope/issues/39">eslint-scope</a> ships with malicious code</li>
<li>2018-07-08: AUR: <a href="https://lists.archlinux.org/pipermail/aur-general/2018-July/034151.html">acroread</a> is compromised</li>
<li>2018-05-11: Snap: <a href="https://github.com/canonical-web-and-design/snapcraft.io/issues/651">a 2048 clone</a> ships a cryptocurrency miner</li>
<li>2017-09-09: PyPI: <a href="https://www.nbu.gov.sk/skcsirt-sa-20170909-pypi/">typo-squatted packages</a> published by researchers</li>
<li>2016-07-22: npm: <a href="https://www.infoworld.com/article/3047177/how-one-yanked-javascript-package-wreaked-havoc.html">left-pad</a> incident</li>
</ul>
<p>There are hundreds of additional examples. I had to leave many of them out.
<a href="https://github.com/advisories?query=type%3Areviewed+malicious+package+severity%3Acritical">Here&rsquo;s a good source</a>
if you want to find more.</p>
<h2 id="timeline-of-similar-incidents-in-official-linux-distribution-repositories">Timeline of similar incidents in official Linux distribution repositories</h2>
<div class="text-center" style="color: #777; margin: 3rem 0">
  (this space deliberately left blank)
</div>
<h2 id="why-is-this-happening">Why is this happening?</h2>
<p>The correct way to ship packages is with your distribution&rsquo;s package manager.
These have a separate review step, completely side-stepping typo-squatting,
establishing a long-term relationship of trust between the vendor and the
distribution packagers, and providing a dispassionate third-party to act as an
intermediary between users and vendors. Furthermore, they offer stable
distributions which can be relied upon for an extended period of time, provide
cohesive whole-system integration testing, and unified patch distribution and
CVE notifications for your entire system.</p>
<p>For more details, see my previous post, <a href="https://drewdevault.com/2021/09/27/Let-distros-do-their-job.html">Developers: Let distros do their
job</a>.</p>
<h2 id="can-these-package-managers-do-it-better">Can these package managers do it better?</h2>
<p>I generally feel that overlay package managers (a term I just made up for npm et
al) are redundant. However, you may feel otherwise, and wonder what they could
do better to avoid these problems.</p>
<p>It&rsquo;s simple: they should organize themselves more like a system package manager.</p>
<ol>
<li>Establish package maintainers independent of the vendors</li>
<li>Establish a review process for package updates</li>
</ol>
<p>There&rsquo;s many innovations that system package managers have been working on which
overlay package managers could stand to learn from as well, such as:</p>
<ul>
<li>Universal package signatures and verification</li>
<li>Reproducible builds</li>
<li>Mirrored package distribution</li>
</ul>
<p>For my part, I&rsquo;ll stick to the system package manager. But if you think that the
overlay package manager can do it better: prove it.</p>]]></description><pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate></item><item><title>Implementing an SSH agent in Hare</title><link>https://drewdevault.com/2022/05/09/hare-ssh.html</link><description><![CDATA[<p><em>Cross-posted from <a href="https://harelang.org/blog/2022-05-09-hare-ssh/">the Hare blog</a></em></p>
<p>In the process of writing an SSH agent for <a href="https://sr.ht/~sircmpwn/himitsu">Himitsu</a>, I needed to implement many
SSH primitives from the ground up in Hare, now available via <a href="https://sr.ht/~sircmpwn/hare-ssh">hare-ssh</a>. Today,
I&rsquo;m going to show you how it works!</p>
<p><strong>Important</strong>: This blog post deals with cryptography-related code. The code
you&rsquo;re going to see today is incomplete, unaudited, and largely hasn&rsquo;t even seen
any code review. Let me begin with a quote from the &ldquo;crypto&rdquo; module&rsquo;s
documentation in the Hare standard library:</p>
<blockquote>
<p>Cryptography is a difficult, high-risk domain of programming. The life and
well-being of your users may depend on your ability to implement cryptographic
applications with due care. Please carefully read all of the documentation,
double-check your work, and seek second opinions and independent review of
your code. Our documentation and API design aims to prevent easy mistakes from
being made, but it is no substitute for a good background in applied
cryptography.</p></blockquote>
<p>Do your due diligence before repurposing anything you see here.</p>
<h2 id="decoding-ssh-private-keys">Decoding SSH private keys</h2>
<p>Technically, you do not need to deal with OpenSSH private keys when implementing
an SSH agent. However, my particular use-case includes dealing with this format,
so I started here. Unlike much of SSH, the OpenSSH private key format (i.e. the
format of the file at ~/.ssh/id_ed25519) is, well, private. It&rsquo;s not
documented and I had to get most of the details from reverse-engineering the
OpenSSH C code. The main area of interest is sshkey.c. I&rsquo;ll spare you from
reading it yourself and just explain how it works.</p>
<p>First of all, let&rsquo;s just consider what an SSH private key looks like:</p>
<pre tabindex="0"><code>-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABDTIm/zSI
7zeHAs4rIXaOD1AAAAEAAAAAEAAAAzAAAAC3NzaC1lZDI1NTE5AAAAIE7qq/pMk9VrRupn
9j4/tNHclJnKgJAE1pfUecRNT1fAAAAAoEcx6mnJmFlYXx1eYztw6SZ5yuL6T1LWfj+bpg
7zNQBoqJW1j+Q17PUMtXj9wDDOQx+6OE7JT/RrK3Vltp4oXmFI4FgsYbE9RbNXSC2xvLaX
fplmx+eAOir9UTZGTIbOGy1cVho8LzDLLo4WiGYbpxtIvkJE72f0YdTm8RrNVkLlAy7ayV
uFcoq1JBrjIAa7UtqIr9SG8b76ALJZb9jPc3A=
-----END OPENSSH PRIVATE KEY-----
</code></pre><p>We can immediately tell that this is a <a href="https://docs.harelang.org/encoding/pem">PEM</a> file (<a href="https://www.rfc-editor.org/rfc/rfc7468">RFC 7468</a>). The first step
to read this file was to implement a decoder for the PEM format, which has been
on our to-do list for a while now, and is also needed for many other use-cases.
Similar to many other formats provided in the standard library, you can call
<a href="https://docs.harelang.org/encoding/pem#newdecoder">pem::newdecoder</a> to create a PEM decoder for an arbitrary I/O source, returning
the decoder state on the stack. We can then call <a href="https://docs.harelang.org/encoding/pem#next">pem::next</a> to find the next
PEM header (<code>-----BEGIN...</code>), which returns a decoder for that specific PEM blob
(this design accommodates PEM files which have several PEM segments concatenated
together, or intersperse other data in the file alongside the PEM bits. This is
common for other PEM use-cases). With this secondary decoder, we can simply read
from it like any other I/O source and it decodes the base64-encoded data and
returns it to us as bytes.</p>
<p>Based on this, we can examine the contents of this key with a simple program.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">encoding</span><span class="o">::</span><span class="n">hex</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">encoding</span><span class="o">::</span><span class="n">pem</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">io</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">os</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">dec</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pem</span><span class="o">::</span><span class="n">newdecoder</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdin</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">pem</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">reader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">pem</span><span class="o">::</span><span class="n">next</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">reader</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">pem</span><span class="o">::</span><span class="n">pemdecoder</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">reader</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">reader</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">stream</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">reader</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stream</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;PEM data &#39;{}&#39;:&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">bytes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">drain</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stream</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">hex</span><span class="o">::</span><span class="n">dump</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdout</span><span class="p">,</span><span class="w"> </span><span class="n">bytes</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Running this program on our sample key yields the following:</p>
<pre tabindex="0"><code>PEM data &#39;OPENSSH PRIVATE KEY&#39;:
00000000  6f 70 65 6e 73 73 68 2d  6b 65 79 2d 76 31 00 00  |openssh-key-v1..|
00000010  00 00 0a 61 65 73 32 35  36 2d 63 74 72 00 00 00  |...aes256-ctr...|
00000020  06 62 63 72 79 70 74 00  00 00 18 00 00 00 10 d3  |.bcrypt.........|
00000030  22 6f f3 48 8e f3 78 70  2c e2 b2 17 68 e0 f5 00  |&#34;o.H..xp,...h...|
00000040  00 00 10 00 00 00 01 00  00 00 33 00 00 00 0b 73  |..........3....s|
00000050  73 68 2d 65 64 32 35 35  31 39 00 00 00 20 4e ea  |sh-ed25519... N.|
00000060  ab fa 4c 93 d5 6b 46 ea  67 f6 3e 3f b4 d1 dc 94  |..L..kF.g.&gt;?....|
00000070  99 ca 80 90 04 d6 97 d4  79 c4 4d 4f 57 c0 00 00  |........y.MOW...|
00000080  00 a0 47 31 ea 69 c9 98  59 58 5f 1d 5e 63 3b 70  |..G1.i..YX_.^c;p|
00000090  e9 26 79 ca e2 fa 4f 52  d6 7e 3f 9b a6 0e f3 35  |.&amp;y...OR.~?....5|
000000a0  00 68 a8 95 b5 8f e4 35  ec f5 0c b5 78 fd c0 30  |.h.....5....x..0|
000000b0  ce 43 1f ba 38 4e c9 4f  f4 6b 2b 75 65 b6 9e 28  |.C..8N.O.k+ue..(|
000000c0  5e 61 48 e0 58 2c 61 b1  3d 45 b3 57 48 2d b1 bc  |^aH.X,a.=E.WH-..|
000000d0  b6 97 7e 99 66 c7 e7 80  3a 2a fd 51 36 46 4c 86  |..~.f...:*.Q6FL.|
000000e0  ce 1b 2d 5c 56 1a 3c 2f  30 cb 2e 8e 16 88 66 1b  |..-\V.&lt;/0.....f.|
000000f0  a7 1b 48 be 42 44 ef 67  f4 61 d4 e6 f1 1a cd 56  |..H.BD.g.a.....V|
00000100  42 e5 03 2e da c9 5b 85  72 8a b5 24 1a e3 20 06  |B.....[.r..$.. .|
00000110  bb 52 da 88 af d4 86 f1  be fa 00 b2 59 6f d8 cf  |.R..........Yo..|
00000120  73 70                                             |sp|
</code></pre><p>OpenSSH private keys begin with a magic string, &ldquo;openssh-key-v1\0&rdquo;, which we can
see here. Following this are a number of binary encoded fields which are
represented in a manner similar to the SSH wire protocol, most often as strings
prefixed by their length, encoded as a 32-bit big-endian integer. In order, the
fields present here are:</p>
<ul>
<li>Cipher name (aes256-ctr)</li>
<li>KDF name (bcrypt)</li>
<li>KDF data</li>
<li>Public key data</li>
<li>Private key data (plus padding)</li>
</ul>
<p>We parse this information like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">sshprivkey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cipher</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">kdfname</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">kdf</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pubkey</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">privkey</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">decodesshprivate</span><span class="p">(</span><span class="n">in</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">sshprivkey</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">pem</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pem</span><span class="o">::</span><span class="n">newdecoder</span><span class="p">(</span><span class="n">in</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">dec</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">pem</span><span class="o">::</span><span class="n">next</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pem</span><span class="p">)</span><span class="o">?</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">dec</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">pem</span><span class="o">::</span><span class="n">pemdecoder</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">dec</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s">&#34;OPENSSH PRIVATE KEY&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">dec</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">magicbuf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">readall</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">,</span><span class="w"> </span><span class="n">magicbuf</span><span class="p">)</span><span class="o">?</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">bytes</span><span class="o">::</span><span class="n">equal</span><span class="p">(</span><span class="n">magicbuf</span><span class="p">,</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">toutf8</span><span class="p">(</span><span class="n">magic</span><span class="p">)))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sshprivkey</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">cipher</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readstr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">kdfname</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readstr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">kdf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readslice</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">readall</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">nkey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">endian</span><span class="o">::</span><span class="n">begetu32</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nkey</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">// OpenSSH currently hard-codes the number of keys to 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">pubkey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readslice</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">privkey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readslice</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Add padding bytes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">append</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">privkey</span><span class="p">,</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">drain</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dec</span><span class="p">)</span><span class="o">?...</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">key</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>However, to get at the actual private key — so that we can do
cryptographic operations with it — we first have to decrypt this inner
data. Those three fields — cipher name, KDF name, and KDF data — are
our hint. In essence, this data is encrypted by OpenSSH by using a variant of
<a href="https://en.wikipedia.org/wiki/Bcrypt">bcrypt</a> as a <a href="https://en.wikipedia.org/wiki/Key_derivation_function">key derivation function</a>, which turns your password (plus a salt)
into a symmetric encryption key. Then it uses <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES 256</a> in <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR)">CTR mode</a> with this
symmetric key to encrypt the private key data. With the benefit of hindsight, I
might question these primitives, but that&rsquo;s what they use so we&rsquo;ll have to work
with it.</p>
<p>Prior to starting this work, Hare already had support for <a href="https://docs.harelang.org/crypto/aes">AES</a> and <a href="https://docs.harelang.org/crypto/cipher#ctr">CTR</a>,
though they gained some upgrades during the course of this work, since using an
interface for real-world code is the best way to evaluate its design. This
leaves us to implement bcrypt.</p>
<p>bcrypt is a password hashing algorithm invented by OpenBSD based on the
<a href="https://en.wikipedia.org/wiki/Blowfish_(cipher)">Blowfish</a> cipher, and it is pretty badly designed. However, Blowfish was fairly
straightforward to implement. I&rsquo;ll spare you the details, but here&rsquo;s the
<a href="https://docs.harelang.org/crypto/blowfish">documentation</a> and
<a href="https://git.sr.ht/~sircmpwn/hare/tree/master/crypto/blowfish">implementation</a>
for your consideration. I also implemented the standard bcrypt hash at
<a href="https://docs.harelang.org/crypto/bcrypt">crypto::bcrypt</a>, whose implementation is
<a href="https://git.sr.ht/~sircmpwn/hare/tree/master/crypto/bcrypt">here</a> (for now).
This isn&rsquo;t especially relevant for us, however, since OpenSSH uses a modified
form of bcrypt as a key derivation function.</p>
<p>The <a href="https://git.sr.ht/~sircmpwn/hare-ssh/tree/master/item/format/ssh/bcrypt.ha">implementation</a>
the bcrypt KDF in Hare is fairly straightforward. To write it, I referenced
OpenSSH portable&rsquo;s vendored OpenBSD implementation at
<code>openbsd-compat/bcrypt_pbkdf.c</code>, as well as the Go implementation in
<code>golang.org/x/crypto</code>. Then, with these primitives done, we can implement the
actual key decryption.</p>
<p>First, not all keys are encrypted with a passphrase, so a simple function tells
us if this step is required:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Returns true if this private key is encrypted with a passphrase.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">isencrypted</span><span class="p">(</span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">sshprivkey</span><span class="p">)</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">key</span><span class="p">.</span><span class="n">kdfname</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s">&#34;none&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The &ldquo;decrypt&rdquo; function is used to perform the actual decryption. It begins by
finding the symmetric key, like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">decrypt</span><span class="p">(</span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">sshprivkey</span><span class="p">,</span><span class="w"> </span><span class="n">pass</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">isencrypted</span><span class="p">(</span><span class="n">key</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">cipher</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getcipher</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">cipher</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">ckey</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">([</span><span class="mi">0</span><span class="o">...</span><span class="p">],</span><span class="w"> </span><span class="n">cipher</span><span class="p">.</span><span class="n">keylen</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">cipher</span><span class="p">.</span><span class="n">ivlen</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">bytes</span><span class="o">::</span><span class="n">zero</span><span class="p">(</span><span class="n">ckey</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">free</span><span class="p">(</span><span class="n">ckey</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">kdfbuf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">fixed</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">kdf</span><span class="p">,</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">mode</span><span class="o">::</span><span class="n">READ</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">kdfname</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;bcrypt&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">salt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readslice</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kdfbuf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">salt</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">rounds</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readu32</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kdfbuf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">bcrypt_pbkdf</span><span class="p">(</span><span class="n">ckey</span><span class="p">,</span><span class="w"> </span><span class="n">pass</span><span class="p">,</span><span class="w"> </span><span class="n">salt</span><span class="p">,</span><span class="w"> </span><span class="n">rounds</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">badcipher</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The &ldquo;KDF data&rdquo; field I mentioned earlier uses a format private to each KDF mode,
though at the present time the only supported KDF is this bcrypt one. In this
case, it serves as the salt. The &ldquo;getcipher&rdquo; function returns some data from a
<a href="https://git.sr.ht/~sircmpwn/hare-ssh/tree/master/item/format/ssh/cipher.ha">static table of supported ciphers</a>, which provides us with the
required size of the cipher&rsquo;s key and IV parameters. We allocate sufficient
space to store these, create a <a href="https://docs.harelang.org/bufio#fixed">bufio reader</a> from the KDF field,
read out the salt and hashing rounds, and hand all of this over to the bcrypt
function to produce our symmetric key (and I/V) in the &ldquo;ckey&rdquo; variable.</p>
<p>We may then use these parameters to decrypt the private key area.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">secretbuf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">fixed</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">privkey</span><span class="p">,</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">mode</span><span class="o">::</span><span class="n">READ</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">cipher</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cipher</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">secretbuf</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ckey</span><span class="p">[..</span><span class="n">cipher</span><span class="p">.</span><span class="n">keylen</span><span class="p">],</span><span class="w"> </span><span class="n">ckey</span><span class="p">[</span><span class="n">cipher</span><span class="p">.</span><span class="n">keylen</span><span class="p">..]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">cipher_free</span><span class="p">(</span><span class="n">cipher</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">([</span><span class="mi">0</span><span class="o">...</span><span class="p">],</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">privkey</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io</span><span class="o">::</span><span class="n">readall</span><span class="p">(</span><span class="n">cipher</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">endian</span><span class="o">::</span><span class="n">begetu32</span><span class="p">(</span><span class="n">buf</span><span class="p">[..</span><span class="mi">4</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">endian</span><span class="o">::</span><span class="n">begetu32</span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="mi">4</span><span class="p">..</span><span class="mi">8</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">badpass</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">privkey</span><span class="p">[..]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">buf</span><span class="p">[..];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">free</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">kdf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">free</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">kdfname</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">free</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">cipher</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">kdfname</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">dup</span><span class="p">(</span><span class="s">&#34;none&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">cipher</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">dup</span><span class="p">(</span><span class="s">&#34;none&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">kdf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The &ldquo;cipher.init&rdquo; function is an abstraction that allows us to support more
ciphers in the future. For this particular cipher mode, it&rsquo;s implemented fairly
simply:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">aes256ctr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">st</span><span class="o">:</span><span class="w"> </span><span class="n">cipher</span><span class="o">::</span><span class="n">ctr_stream</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">block</span><span class="o">:</span><span class="w"> </span><span class="n">aes</span><span class="o">::</span><span class="n">ct64_block</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">aes</span><span class="o">::</span><span class="n">CTR_BUFSIZE</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">aes256ctr_init</span><span class="p">(</span><span class="n">handle</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">iv</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="n">io</span><span class="o">::</span><span class="n">stream</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">(</span><span class="n">aes256ctr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">block</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aes</span><span class="o">::</span><span class="n">ct64</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">aes</span><span class="o">::</span><span class="n">ct64_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">state</span><span class="p">.</span><span class="n">block</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">state</span><span class="p">.</span><span class="n">st</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cipher</span><span class="o">::</span><span class="n">ctr</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">state</span><span class="p">.</span><span class="n">block</span><span class="p">,</span><span class="w"> </span><span class="n">iv</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="p">.</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">state</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Within this private key data section, once decrypted, are several fields. First
is a random 32-bit integer which is written twice — comparing that these
are equal to one another allows us to verify the user&rsquo;s password. Once verified,
we overwrite the private data field in the key structure with the decrypted
data, and update the cipher and KDF information to indicate that the key is
unencrypted. We could decrypt it directly into the existing private key buffer,
without allocating a second buffer, but this would overwrite the encrypted data
with garbage if the password was wrong — you&rsquo;d have to decode the key all
over again if the user wants to try again.</p>
<p>So, what does this private key blob look like once decrypted? The hare-ssh
repository includes a little program at <code>cmd/sshkey</code> which dumps all of the
information stored in an SSH key, and it provides us with this peek at the
private data:</p>
<pre tabindex="0"><code>00000000  fb 15 e6 16 fb 15 e6 16  00 00 00 0b 73 73 68 2d  |............ssh-|
00000010  65 64 32 35 35 31 39 00  00 00 20 4e ea ab fa 4c  |ed25519... N...L|
00000020  93 d5 6b 46 ea 67 f6 3e  3f b4 d1 dc 94 99 ca 80  |..kF.g.&gt;?.......|
00000030  90 04 d6 97 d4 79 c4 4d  4f 57 c0 00 00 00 40 17  |.....y.MOW....@.|
00000040  bf 87 74 0b 2a 74 d5 29  d0 14 10 3f 04 5d 88 c6  |..t.*t.)...?.]..|
00000050  32 fa 21 9c e9 97 b0 5a  e7 7e 5c 02 72 35 72 4e  |2.!....Z.~\.r5rN|
00000060  ea ab fa 4c 93 d5 6b 46  ea 67 f6 3e 3f b4 d1 dc  |...L..kF.g.&gt;?...|
00000070  94 99 ca 80 90 04 d6 97  d4 79 c4 4d 4f 57 c0 00  |.........y.MOW..|
00000080  00 00 0e 73 69 72 63 6d  70 77 6e 40 74 61 69 67  |...sircmpwn@taig|
00000090  61 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  |a...............|
</code></pre><p>We can see upfront these two 32-bit verification numbers I mentioned, and
following this are several fields in a similar format to earlier —
length-prefixed strings. The fields are:</p>
<ul>
<li>Key type (&ldquo;ssh-ed25519&rdquo; in this case)</li>
<li>Public key (in a format specific to each key type)</li>
<li>Private key (in a format specific to each key type)</li>
<li>Comment</li>
<li>Padding up to the cipher&rsquo;s block size (16)</li>
</ul>
<p>This is a little bit weird in my opinion — the public key field is
redundant with the unencrypted data in this file, and the comment field is
probably not so secret as to demand encryption. I think these are just
consequences of the file format being private to OpenSSH&rsquo;s implementation; not
much thought has gone into it and implementation details (like the ability to
call the same &ldquo;dump private key&rdquo; function here as OpenSSH uses elsewhere) have
probably leaked through.</p>
<p>We can decode this data with the following Hare code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">decodeprivate</span><span class="p">(</span><span class="n">src</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">sshprivkey</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">key</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="o">!</span><span class="n">isencrypted</span><span class="p">(</span><span class="n">src</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">fixed</span><span class="p">(</span><span class="n">src</span><span class="p">.</span><span class="n">privkey</span><span class="p">,</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">mode</span><span class="o">::</span><span class="n">READ</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">verify</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io</span><span class="o">::</span><span class="n">read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="n">verify</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">endian</span><span class="o">::</span><span class="n">begetu32</span><span class="p">(</span><span class="n">verify</span><span class="p">[..</span><span class="mi">4</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">endian</span><span class="o">::</span><span class="n">begetu32</span><span class="p">(</span><span class="n">verify</span><span class="p">[</span><span class="mi">4</span><span class="p">..</span><span class="mi">8</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">badpass</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">keytype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readstr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">keytype</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">keytype</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;ssh-ed25519&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ed25519key</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">decode_ed25519_sk</span><span class="p">(</span><span class="o">&amp;</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">key</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">// TODO: Support additional key types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">badcipher</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// An ed25519 key pair.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">ed25519key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pkey</span><span class="o">:</span><span class="w"> </span><span class="n">ed25519</span><span class="o">::</span><span class="n">publickey</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">skey</span><span class="o">:</span><span class="w"> </span><span class="n">ed25519</span><span class="o">::</span><span class="n">privatekey</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">comment</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">decode_ed25519_pk</span><span class="p">(</span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">ed25519key</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">l</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readu32</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">ed25519</span><span class="o">::</span><span class="n">PUBLICKEYSZ</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io</span><span class="o">::</span><span class="n">readall</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">.</span><span class="n">pkey</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">decode_ed25519_sk</span><span class="p">(</span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">ed25519key</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">decode_ed25519_pk</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">l</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readu32</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">ed25519</span><span class="o">::</span><span class="n">PRIVATEKEYSZ</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io</span><span class="o">::</span><span class="n">readall</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">.</span><span class="n">skey</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Sanity check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">pkey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ed25519</span><span class="o">::</span><span class="n">skey_getpublic</span><span class="p">(</span><span class="o">&amp;</span><span class="n">key</span><span class="p">.</span><span class="n">skey</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">bytes</span><span class="o">::</span><span class="n">equal</span><span class="p">(</span><span class="n">pkey</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">.</span><span class="n">pkey</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="p">.</span><span class="n">comment</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readstr</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Fairly straightforward! Finally, we have extracted the actual private key from
the file. For this SSH key, in base64, the cryptographic keys are:</p>
<pre tabindex="0"><code>Public key:  Tuqr+kyT1WtG6mf2Pj+00dyUmcqAkATWl9R5xE1PV8A=
Private key: F7+HdAsqdNUp0BQQPwRdiMYy+iGc6ZewWud+XAJyNXJO6qv6TJPVa0bqZ/Y+P7TR3JSZyoCQBNaX1HnETU9XwA==
</code></pre><h2 id="signing-and-verification-with-ed25519">Signing and verification with ed25519</h2>
<p>Using these private keys, implementing signatures and signature verification are
pretty straightforward. We can stop reading the OpenSSH code at this point
— <a href="https://datatracker.ietf.org/doc/html/rfc8709">RFC 8709</a> standardizes this format for ed25519 signatures.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">crypto</span><span class="o">::</span><span class="n">ed25519</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">io</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Signs a message using the provided key, writing the message signature in the
</span></span></span><span class="line"><span class="cl"><span class="c1">// SSH format to the provided sink.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">sign</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">sink</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">msg</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">signature</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ed25519</span><span class="o">::</span><span class="n">sign</span><span class="p">(</span><span class="o">&amp;</span><span class="n">key</span><span class="p">.</span><span class="n">skey</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">writestr</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;ssh-ed25519&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">writeslice</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span><span class="w"> </span><span class="n">signature</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Reads an SSH wire signature from the provided I/O handle and verifies that it
</span></span></span><span class="line"><span class="cl"><span class="c1">// is a valid signature for the given message and key. If valid, void is
</span></span></span><span class="line"><span class="cl"><span class="c1">// returned; otherwise [[badsig]] is returned.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">verify</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">source</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">msg</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sigtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readstr</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">sigtype</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sigtype</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">keytype</span><span class="p">(</span><span class="n">key</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">badsig</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sig</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readslice</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">sig</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">sigtype</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;ssh-ed25519&#34;</span><span class="p">);</span><span class="w"> </span><span class="c1">// TODO: other key types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">sig</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">ed25519</span><span class="o">::</span><span class="n">SIGNATURESZ</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">badsig</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sig</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sig</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="n">ed25519</span><span class="o">::</span><span class="n">SIGNATURESZ</span><span class="p">]</span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">ed25519</span><span class="o">::</span><span class="n">verify</span><span class="p">(</span><span class="o">&amp;</span><span class="n">key</span><span class="p">.</span><span class="n">pkey</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">,</span><span class="w"> </span><span class="n">sig</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">badsig</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This implementation writes and reads signatures in the SSH wire format, which is
generally how they will be most useful in this context. This code will be
expanded in the future with additional keys, such as RSA, once the necessary
primitives are implemented for Hare&rsquo;s standard library.</p>
<h2 id="the-ssh-agent-protocol">The SSH agent protocol</h2>
<p>The agent protocol is also standardized (albeit in draft form), so we refer to
<a href="https://tools.ietf.org/id/draft-miller-ssh-agent-11.html">draft-miller-ssh-agent-11</a> from this point onwards. It&rsquo;s fairly
straightforward. The agent communicates over an unspecified protocol (Unix
sockets in practice) by sending messages in the SSH wire format, which, again,
mainly comes in the form of strings prefixed by their 32-bit length in network
order.</p>
<p>The first step for implementing net::ssh::agent starts with adding types for all
of the data structures and enums for all of the constants, which you can find in
<a href="https://git.sr.ht/~sircmpwn/hare-ssh/tree/master/item/net/ssh/agent/types.ha">types.ha</a>. Each message begins with its length, then a message type (one byte)
and a message payload; the structure of the latter varies with the message type.</p>
<p>I started to approach this by writing some functions which, given a byte buffer
that contains an SSH agent message, either parses it or asks for more data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="n">msg</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">message</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">invalid</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">ln</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">endian</span><span class="o">::</span><span class="n">begetu32</span><span class="p">(</span><span class="n">msg</span><span class="p">[..</span><span class="mi">4</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ln</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ln</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">mtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">msg</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">fixed</span><span class="p">(</span><span class="n">msg</span><span class="p">[</span><span class="mi">5</span><span class="p">..],</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">mode</span><span class="o">::</span><span class="n">READ</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">mtype</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">messagetype</span><span class="o">::</span><span class="n">REQUEST_IDENTITIES</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">request_identities</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">messagetype</span><span class="o">::</span><span class="n">SIGN_REQUEST</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">parse_sign_request</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">messagetype</span><span class="o">::</span><span class="n">ADD_IDENTITY</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">parse_add_identity</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// ...trimmed for brevity, and also because it&#39;s full of TODOs...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Each individual message payload includes its own parser, except for some
messages (such as <code>REQUEST_IDENTITIES</code>), which have no payload. Here&rsquo;s what the
parser for <code>SIGN_REQUEST</code> looks like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">parse_sign_request</span><span class="p">(</span><span class="n">src</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">sign_request</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">invalid</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">sign_request</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readslice</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">?</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readslice</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">?</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readu32</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">?:</span><span class="w"> </span><span class="n">sigflag</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Pretty straightforward! A more complex one is <code>ADD_IDENTITY</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">parse_add_identity</span><span class="p">(</span><span class="n">src</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">handle</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">add_identity</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">invalid</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">keytype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readstr</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// TODO: Support more key types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="n">ssh</span><span class="o">::</span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">keytype</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="s">&#34;ssh-ed25519&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ssh</span><span class="o">::</span><span class="n">ed25519key</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">npub</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readu32</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">npub</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">pkey</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">io</span><span class="o">::</span><span class="n">readall</span><span class="p">(</span><span class="n">src</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">.</span><span class="n">pkey</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">npriv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readu32</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">npriv</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">skey</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">io</span><span class="o">::</span><span class="n">readall</span><span class="p">(</span><span class="n">src</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">.</span><span class="n">skey</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">key</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">add_identity</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">keytype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">keytype</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">comment</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">readstr</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">?</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>One thing I&rsquo;m not thrilled with in this code is memory management. In Hare,
libraries like this one are not supposed to allocate memory if they can get away
with it, and if they must, they should do it as conservatively as possible. This
implementation does a lot of its own allocations, which is unfortunate. I might
refactor it in the future to avoid this. A more subtle issue here is the memory
leaks on errors — each of the readslice/readstr functions allocates data
for its return value, but if they return an error, the ? operator will return
immediately without freeing them. This is a known problem with Hare&rsquo;s language
design, and while we have some ideas for addressing it, we have not completed
any of them yet. This is one of a small number of goals for Hare which will
likely require language changes prior to 1.0.</p>
<p>We have a <a href="https://git.sr.ht/~sircmpwn/hare-ssh/tree/master/item/net/ssh/agent/agent.ha">little bit more code</a>
in net::ssh::agent, which you can check out if you like, but this covers most of
it — time to move onto the daemon implementation.</p>
<h2 id="completing-our-ssh-agent">Completing our SSH agent</h2>
<p>The <a href="https://git.sr.ht/~sircmpwn/hare-ssh/tree/master/item/cmd/ssh-agent/main.ha">ssh-agent</a> command in the hare-ssh tree is a simple (and non-production)
implementation of an SSH agent based on this work. Let&rsquo;s go over its code to see
how this all comes together to make it work.</p>
<p>First, we set up a Unix socket, and somewhere to store our application state.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">running</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">identity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">comment</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">privkey</span><span class="o">:</span><span class="w"> </span><span class="n">ssh</span><span class="o">::</span><span class="n">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pubkey</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">identities</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">identity</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sockpath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;./socket&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">listener</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unix</span><span class="o">::</span><span class="n">listen</span><span class="p">(</span><span class="n">sockpath</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">net</span><span class="o">::</span><span class="n">shutdown</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">os</span><span class="o">::</span><span class="n">remove</span><span class="p">(</span><span class="n">sockpath</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">os</span><span class="o">::</span><span class="n">chmod</span><span class="p">(</span><span class="n">sockpath</span><span class="p">,</span><span class="w"> </span><span class="mo">0o700</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">log</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;Listening at {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">sockpath</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>We also need a main loop, but we need to clean up that Unix socket when we
terminate, so we&rsquo;ll also set up some signal handlers.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="w">	</span><span class="n">signal</span><span class="o">::</span><span class="n">handle</span><span class="p">(</span><span class="n">signal</span><span class="o">::</span><span class="n">SIGINT</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">handle_signal</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">signal</span><span class="o">::</span><span class="n">handle</span><span class="p">(</span><span class="n">signal</span><span class="o">::</span><span class="n">SIGTERM</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">handle_signal</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">running</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">// ...stay tuned...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">identities</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">ident</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="p">.</span><span class="n">identities</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ssh</span><span class="o">::</span><span class="n">key_finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ident</span><span class="p">.</span><span class="n">privkey</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">free</span><span class="p">(</span><span class="n">ident</span><span class="p">.</span><span class="n">pubkey</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">free</span><span class="p">(</span><span class="n">ident</span><span class="p">.</span><span class="n">comment</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">log</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;Terminated.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...elsewhere...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">handle_signal</span><span class="p">(</span><span class="n">sig</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w"> </span><span class="n">info</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">signal</span><span class="o">::</span><span class="n">siginfo</span><span class="p">,</span><span class="w"> </span><span class="n">ucontext</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">running</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The actual clean-up is handled by our &ldquo;defer&rdquo; statement at the start of &ldquo;main&rdquo;.
The semantics of signal handling on Unix are complex (and bad), and beyond the
scope of this post, so hopefully you already grok them. Our stdlib <a href="https://docs.harelang.org/unix/signal">provides
docs</a>, if you care to learn more, but
also includes this warning:</p>
<blockquote>
<p>Signal handling is stupidly complicated and easy to get wrong. The standard
library makes little effort to help you deal with this. Consult your local man
pages, particularly signal-safety(7) on Linux, and perhaps a local priest as
well. We advise you to get out of the signal handler as soon as possible, for
example via the &ldquo;self-pipe trick&rdquo;.</p></blockquote>
<p>We also provide signalfds on platforms that support them (such as Linux), which
is less fraught with issues. Good luck.</p>
<p>Next: the main loop. This code accepts new clients, prepares an agent for them,
and hands them off to a second function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">net</span><span class="o">::</span><span class="n">accept</span><span class="p">(</span><span class="n">listener</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">interrupted</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">net</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">log</span><span class="o">::</span><span class="n">fatalf</span><span class="p">(</span><span class="s">&#34;Error: accept: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">net</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">fd</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">file</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">fd</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">agent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">client</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">agent_finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">agent</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">run</span><span class="p">(</span><span class="o">&amp;</span><span class="n">state</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">agent</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>This is a really simple event loop for a network daemon, and comes with one
major limitation: no support for serving multiple clients connecting at once. If
you&rsquo;re curious what a more robust network daemon looks like in Hare, consult the
<a href="https://sr.ht/~sircmpwn/himitsu">Himitsu</a> code.</p>
<p>The &ldquo;run&rdquo; function simply reads SSH agent commands and processes them, until the
client disconnects.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">run</span><span class="p">(</span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">state</span><span class="p">,</span><span class="w"> </span><span class="n">agent</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">agent</span><span class="o">::</span><span class="n">agent</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">agent</span><span class="o">::</span><span class="n">readmsg</span><span class="p">(</span><span class="n">agent</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">msg</span><span class="o">:</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">message</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">msg</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">message_finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">request_identities</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">handle_req_ident</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="w"> </span><span class="n">agent</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">msg</span><span class="o">:</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">add_identity</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">handle_add_ident</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span><span class="w"> </span><span class="n">agent</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">msg</span><span class="o">:</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">sign_request</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">handle_sign_request</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span><span class="w"> </span><span class="n">agent</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">extension</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">const</span><span class="w"> </span><span class="n">answer</span><span class="o">:</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">extension_failure</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">agent</span><span class="o">::</span><span class="n">writemsg</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">answer</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">abort</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">res</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">yield</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">abort</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Again, this is non-production code, and, among other things, is missing good
error handling. The handlers for each message are fairly straightforward,
however. Here&rsquo;s the handler for <code>REQUEST_IDENTITIES</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">handle_req_ident</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">state</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">agent</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">agent</span><span class="o">::</span><span class="n">agent</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">idents</span><span class="o">:</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">identities_answer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">idents</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">identities</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">ident</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">state</span><span class="p">.</span><span class="n">identities</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">append</span><span class="p">(</span><span class="n">idents</span><span class="p">,</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">identity</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">pubkey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ident</span><span class="p">.</span><span class="n">pubkey</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">comment</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ident</span><span class="p">.</span><span class="n">comment</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">answer</span><span class="o">:</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">idents</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">agent</span><span class="o">::</span><span class="n">writemsg</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">answer</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The first one to do something interesting is <code>ADD_IDENTITY</code>, which allows the
user to supply SSH private keys to the agent to work with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">handle_add_ident</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">state</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">msg</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">agent</span><span class="o">::</span><span class="n">add_identity</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">agent</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">agent</span><span class="o">::</span><span class="n">agent</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">sink</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">dynamic</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">mode</span><span class="o">::</span><span class="n">WRITE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ssh</span><span class="o">::</span><span class="n">encode_pubkey</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sink</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">msg</span><span class="p">.</span><span class="n">key</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">append</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">identities</span><span class="p">,</span><span class="w"> </span><span class="n">identity</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">comment</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">dup</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">comment</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">privkey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">msg</span><span class="p">.</span><span class="n">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">pubkey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">buffer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sink</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">answer</span><span class="o">:</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">agent_success</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">agent</span><span class="o">::</span><span class="n">writemsg</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">answer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">log</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;Added key {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">.</span><span class="n">comment</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>With these two messages, we can start to get the agent to do something
relatively interesting: accepting and listing keys.</p>
<pre tabindex="0"><code>$ hare run cmd/ssh-agent/
[2022-05-09 17:39:12] Listening at ./socket
^Z[1]+  Stopped                    hare run cmd/ssh-agent/
$ bg
[1] hare run cmd/ssh-agent/
$ export SSH_AUTH_SOCK=./socket
$ ssh-add -l
The agent has no identities.
$ ssh-add ~/.ssh/id_ed25519
Enter passphrase for /home/sircmpwn/.ssh/id_ed25519: 
Identity added: /home/sircmpwn/.ssh/id_ed25519 (sircmpwn@homura)
2022-05-09 17:39:31] Added key sircmpwn@homura
$ ssh-add -l
256 SHA256:kPr5ZKTNE54TRHGSaanhcQYiJ56zSgcpKeLZw4/myEI sircmpwn@homura (ED25519)
</code></pre><p>With the last message handler, we can upgrade from something &ldquo;interesting&rdquo; to
something &ldquo;useful&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">handle_sign_request</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">state</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">msg</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">agent</span><span class="o">::</span><span class="n">sign_request</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">agent</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">agent</span><span class="o">::</span><span class="n">agent</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">identity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">identities</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">ident</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">state</span><span class="p">.</span><span class="n">identities</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">bytes</span><span class="o">::</span><span class="n">equal</span><span class="p">(</span><span class="n">ident</span><span class="p">.</span><span class="n">pubkey</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">.</span><span class="n">key</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ident</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">key</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">identity</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">key</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="kt">null</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">answer</span><span class="o">:</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">agent_failure</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">agent</span><span class="o">::</span><span class="n">writemsg</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">answer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">dynamic</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">mode</span><span class="o">::</span><span class="n">WRITE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ssh</span><span class="o">::</span><span class="n">sign</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">key</span><span class="p">.</span><span class="n">privkey</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">.</span><span class="n">data</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">answer</span><span class="o">:</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">agent</span><span class="o">::</span><span class="n">sign_response</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">signature</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">buffer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">agent</span><span class="o">::</span><span class="n">writemsg</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">answer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">log</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;Signed challenge with key {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">.</span><span class="n">comment</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>For performance reasons, it may be better to use a hash map in a production Hare
program (and, as many commenters will be sure to point out, Hare does not
provide a built-in hash map or generics). We select the desired key with a
linear search, sign the provided payload, and return the signature to the
client. Finally, the big pay-off:</p>
<pre tabindex="0"><code>$ ssh git@git.sr.ht
[2022-05-09 17:41:42] Signed challenge with key sircmpwn@homura
PTY allocation request failed on channel 0
Hi sircmpwn! You&#39;ve successfully authenticated, but I do not provide an interactive shell. Bye!
Connection to git.sr.ht closed.
</code></pre><h2 id="incorporating-it-into-himitsu">Incorporating it into Himitsu</h2>
<p><a href="https://sr.ht/~sircmpwn/himitsu">Himitsu</a> was the motivation for all of this work, and I have yet to properly
introduce it to the public. I will go into detail later, but in essence, Himitsu
is a key-value store that stores some keys in plaintext and some keys encrypted,
and acts as a more general form of a password manager. One of the things it can
do (at least as of this week) is store your SSH private keys and act as an SSH
agent, via a helper called <a href="https://git.sr.ht/~sircmpwn/himitsu-ssh">himitsu-ssh</a>. The user can import their private key
from OpenSSH&rsquo;s private key format via the &ldquo;hissh-import&rdquo; tool, and then the
&ldquo;hissh-agent&rdquo; daemon provides agent functionality via the Himitsu key store.</p>
<p>The user can import their SSH key like so:</p>
<pre tabindex="0"><code>$ hissh-import &lt; ~/.ssh/id_ed25519
Enter SSH key passphrase: 
key proto=ssh type=ssh-ed25519 pkey=pF7SljE25sVLdWvInO4gfqpJbbjxI6j+tIUcNWzVTHU= skey! comment=sircmpwn@homura

# Query the key store for keys matching proto=ssh:
$ hiq proto=ssh
proto=ssh type=ssh-ed25519 pkey=pF7SljE25sVLdWvInO4gfqpJbbjxI6j+tIUcNWzVTHU= skey! comment=sircmpwn@homura
</code></pre><p>Then, when running the agent:</p>
<p><video src="https://redacted.moe/f/09d422dd.webm" controls muted></video></p>
<p>(Yes, I know that the GUI has issues. I slapped it together in C in an afternoon
and it needs a lot of work. <a href="https://git.sr.ht/~sircmpwn/hiprompt-gtk">Help wanted!</a>)</p>
<p>Ta-da!</p>
<h2 id="whats-next">What&rsquo;s next?</h2>
<p>I accomplished my main goal, which was getting my SSH setup working with
Himitsu. The next steps for expanding hare-ssh are:</p>
<ol>
<li>Expanding the supported key types and ciphers (RSA, DSA, etc), which first
requires implementing the primitives in the standard library</li>
<li>Implement the SSH connection protocol, which requires primitives like ECDH in
the standard library. Some required primitives, like ChaCha, are already
supported.</li>
<li>Improve the design of the networking code. hare-ssh is one of a very small
number of network-facing Hare libraries, and it&rsquo;s treading new design ground
here.</li>
</ol>
<p>SSH is a relatively small target for a cryptography implementation to aim for.
I&rsquo;m looking forward to using it as a testbed for our cryptographic suite. If
you&rsquo;re interested in helping with any of these, <a href="https://harelang.org/community/">please get in
touch</a>! If you&rsquo;re curious about Hare in general, check out the
<a href="https://harelang.org/tutorials/introduction/">language introduction</a> to get started. Good luck!</p>]]></description><pubDate>Mon, 9 May 2022 00:00:00 +0000</pubDate></item><item><title>Announcing the Hare programming language</title><link>https://drewdevault.com/2022/04/25/Announcing-Hare.html</link><description><![CDATA[<p>The &ldquo;secret programming language&rdquo; I have been teasing for several months now is
finally here! It is called Hare, and you can read about it on the Hare blog:</p>
<p><a href="https://harelang.org/blog/2022-04-25-announcing-hare/">https://harelang.org/blog/2022-04-25-announcing-hare/</a></p>
<p>Check it out!</p>]]></description><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Status update, April 2022</title><link>https://drewdevault.com/2022/04/15/Status-update-April-2022.html</link><description><![CDATA[<p>This month marked my first time filing taxes in two countries, and I can assure
you it is the worst. I am now a single-issue voter in the US: stop taxing
expats! You can get some insight into the financials of SourceHut in the
recently-published <a href="https://sourcehut.org/blog/2022-04-08-2021-financial-report/">financial report</a>. But let&rsquo;s get right into the fun stuff:
free software development news.</p>
<p>There was some slowdown from me this month thanks to all of the business and
financial crap I had to put up with, but I was able to get some cool stuff done
and many other contributors have been keeping things moving. I&rsquo;ll start by
introducing a new/old project: Himitsu.</p>
<p>Essentially, Himitsu is a secret storage system whose intended use-case is to
provide features like password storage and SSH agent functionality. It draws
much of its inspiration from Plan 9&rsquo;s Factotum. You may have stumbled upon an
<a href="https://git.sr.ht/~sircmpwn/himitsu.old">early prototype</a> on git.sr.ht which introduces the basic idea and included
the start of an implementation in C. Ultimately I shelved this project for want
of a better programming language to implement it with, and then I made a better
programming language to implement it with. Over the past two weeks, I have
implemented something similar to where the C codebase was left, in fewer than
half the lines of code and much less than half the time. Here&rsquo;s a little peek at
what works now:</p>
<pre tabindex="0"><code>[12:18:31] taiga ~/s/himitsu $ ./himitsud 
Please enter your passphrase to unlock the keyring: 
[2022-04-15 12:18:56] himitsud running
^Z[1]+  Stopped                    ./himitsud
[12:18:57] taiga ~/s/himitsu $ bg
[1] ./himitsud
[12:18:58] taiga ~/s/himitsu $ nc -U ~/.local/state/himitsu/socket 
add proto=imap host=example.org user=sir@cmpwn.com password!=&#34;Hello world!&#34;
^C
[12:19:12] taiga ~/s/himitsu $ ls ~/.local/share/himitsu/
2849c1d5-61b3-4803-98cf-fc57fe5f69a6  index  key
[12:19:14] taiga ~/s/himitsu $ cat ~/.local/share/himitsu/index
YNfVlkORDX1GmXIfL8vOiiTgBJKh47biFsUaKrqzfMP2xfD4B9/lqSl2Y9OtIpVcYzrNjBBZOxcO81vNQdgnvxQ+xaCKaVpQS4Dh6DyaY0/lpq6rfowTY5GwcI155KkmTI4z1ABOVkL4z4XDsQ2DEiqClcQE5/+CxsQ/U/u9DthLJRjrjw==
[12:19:19] taiga ~/s/himitsu $ fg
./himitsud
^C[2022-04-15 12:19:22] himitsud terminated
[12:19:22] taiga ~/s/himitsu $ ./himitsud 
Please enter your passphrase to unlock the keyring: 
Loaded key proto=imap host=example.org user=sir@cmpwn.com password!=2849c1d5-61b3-4803-98cf-fc57fe5f69a6
[2022-04-15 12:19:29] himitsud running
^C[2022-04-15 12:19:31] himitsud terminated
[12:19:33] taiga ~/s/himitsu $ find . -type f | xargs wc -l | tail -n1
  895 total
</code></pre><p>This project is progressing quite fast and I hope to have it working for some
basic use-cases soon. I&rsquo;ll do a dedicated blog post explaining how it works and
why it&rsquo;s important later on, though it will remain mostly under wraps until the
language is released.</p>
<p>Speaking of the language, there were a number of exciting developments this
month. Two major standard library initiatives were merged: regex and datetime.
The regex implementation is simple, small, and fast, targeting POSIX ERE as a
reasonably sane conservative baseline regex dialect. The datetime implementation
is quite interesting as well, and it provides a pretty comprehensive API which
should address almost all use-cases for timekeeping in our language with a
robust and easy-to-use API. As a bonus, and a little flex at how robust our
design is, we&rsquo;ve included support for Martian time. I&rsquo;m very pleased with how
both of these turned out.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">datetime</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">os</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">time</span><span class="o">::</span><span class="n">chrono</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">now</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">datetime</span><span class="o">::</span><span class="n">in</span><span class="p">(</span><span class="n">chrono</span><span class="o">::</span><span class="n">MTC</span><span class="p">,</span><span class="w"> </span><span class="n">datetime</span><span class="o">::</span><span class="n">now</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">printf</span><span class="p">(</span><span class="s">&#34;Current Martian coordinated time: &#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">datetime</span><span class="o">::</span><span class="n">format</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdout</span><span class="p">,</span><span class="w"> </span><span class="n">datetime</span><span class="o">::</span><span class="n">STAMP</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">now</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">println</span><span class="p">()</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Other recent improvements include support for signal handling, glob, aes-ni, and
net::uri. Work has slowed down on cryptography — please get in touch if
you&rsquo;d like to help. Many readers will be happy to know that there are rumblings
about possibly going public soon; after a couple more milestones we&rsquo;ll be having
a meeting to nail down the most urgent priorities before going public and then
we&rsquo;ll get this language into your hands to play with.</p>
<p>I also started a bittorrent daemon in this language, but it&rsquo;s temporarily
blocked until we sort out HTTP/TLS. So, moving right along: SourceHut news?
Naturally I will leave most of it for the &ldquo;what&rsquo;s cooking&rdquo; post, but I&rsquo;ll offer
you a little tease of what we&rsquo;ve been working on: GraphQL. We landed support
this month for GraphQL-native webhooks in todo.sr.ht, as well as some new
improvements to the pages.sr.ht GQL API. hg.sr.ht is also now starting to see
some polish put on its GraphQL support, and some research is underway on GraphQL
Federation. Very soon we will be able to put a bow on this work.</p>
<p>That&rsquo;s all for today! Thanks again for reading and for your ongoing support. I
appreciate you!</p>]]></description><pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Announcing git snail-mail</title><link>https://drewdevault.com/2022/04/01/git-snail-mail.html</link><description><![CDATA[<blockquote>
<p>You&rsquo;ve heard of git-over-email thanks to <a href="https://git-send-email.io">git send-email</a> — now you
can enjoy <em>git snail-mail</em>: a new tool making it easier than ever to print out
git commits on paper and mail them to your maintainers.</p>
<p>Running <code>git snail-mail HEAD~2..</code> prepares the last two commits for post and
sends them directly to the system&rsquo;s default printer. Configuration options are
available for changing printer settings, paper size, and options for faxing or
printing envelopes automatically addressed to the maintainers based on address
info stored in your git config. Be sure to help the maintainers review your
work by including a return envelope and a stamp!</p>
<p>And for maintainers, code review has never been easier — just get out
your red marker and write your feedback directly on the patch! When you&rsquo;re
ready to import the patch into your repository, just place it on your scanner
and run <code>git scan-mail</code>.</p></blockquote>
<p><img src="https://redacted.moe/f/fa9d0b95.jpg" alt="A picture of a patch printed out on paper"></p>
<p>At least, this is what I&rsquo;d like to say, but I ended up cancelling the project
before it was ready for April Fool&rsquo;s. After my friend kline (a staffer at Libera
Chat) came up with this idea, I actually did write a lot of the code! Git is
mostly written in Perl, but I could not really rouse the enthusiasm for
implementing this idea in Perl. I did the prototype in $secretlang instead, and
got it mostly working, but decided not to try to do some sneaky half-private
joke release while trying to maintain the secrecy of the language.</p>
<p>Essentially how it works is this: I have a TeX template for patches:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-tex" data-lang="tex"><span class="line"><span class="cl"><span class="k">\documentclass</span><span class="nb">{</span>article<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span>[
</span></span><span class="line"><span class="cl">	a4paper,
</span></span><span class="line"><span class="cl">	top=1cm,
</span></span><span class="line"><span class="cl">	bottom=1cm,
</span></span><span class="line"><span class="cl">	left=1cm,
</span></span><span class="line"><span class="cl">	right=1cm,
</span></span><span class="line"><span class="cl">]<span class="nb">{</span>geometry<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>graphicx<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>fancyvrb<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\pagenumbering</span><span class="nb">{</span>gobble<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\section*</span><span class="nb">{</span>implement os::exec::peek<span class="k">\{</span>,any<span class="k">\}</span><span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">From: Bor Grošelj Simić <span class="k">\textless</span><span class="nb">{}</span>bor.groseljsimic@telemach.net<span class="k">\textgreater</span><span class="nb">{}</span> <span class="k">\\</span>
</span></span><span class="line"><span class="cl">Date: Fri, 25 Feb 2022 01:46:13 +0100
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\VerbatimInput</span><span class="nb">{</span>input.patch<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\newpage</span>
</span></span><span class="line"><span class="cl">Page 1 of 2 <span class="k">\\</span>
</span></span><span class="line"><span class="cl"><span class="k">\includegraphics</span><span class="na">[]</span><span class="nb">{</span>./output-1.png<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\newpage</span>
</span></span><span class="line"><span class="cl">Page 2 of 2 <span class="k">\\</span>
</span></span><span class="line"><span class="cl"><span class="k">\includegraphics</span><span class="na">[]</span><span class="nb">{</span>./output-2.png<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></span></code></pre></div><p>This is generated by my git snail-mail code and then run through pdflatex to
produce a file <a href="https://redacted.moe/f/3422cde8.pdf">like this</a>. It pipes it into lp(1) to send it to your printer
and ta-da!</p>
<p>I chose not to make the commit selection work like git send-email, because I
think that&rsquo;s one of the most confusing parts of git send-email. Instead I just
use a standard revision selection, so to print a single commit, you just name
it, and to print a range of commits you use &ldquo;..&rdquo;. Here&rsquo;s a peek at how that
works:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">get_commits</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">data</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">texdata</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">workdir</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">range</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">exec</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">exec</span><span class="o">::</span><span class="n">exit_status</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">fmt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">`--format=%H%x00%s%x00%aN%x00%aE%x00%aD`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">pipe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">exec</span><span class="o">::</span><span class="n">pipe</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">exec</span><span class="o">::</span><span class="n">cmd</span><span class="p">(</span><span class="s">&#34;git&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;show&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;-s&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">fmt</span><span class="p">,</span><span class="w"> </span><span class="n">range</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">exec</span><span class="o">::</span><span class="n">addfile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">,</span><span class="w"> </span><span class="n">os</span><span class="o">::</span><span class="n">stdout_file</span><span class="p">,</span><span class="w"> </span><span class="n">pipe</span><span class="p">.</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">proc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">exec</span><span class="o">::</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">pipe</span><span class="p">.</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">pipe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pipe</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">pipe</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">static</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">buffer</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">os</span><span class="o">::</span><span class="n">BUFSIZ</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">pipe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">bufio</span><span class="o">::</span><span class="n">buffered</span><span class="p">(</span><span class="n">pipe</span><span class="p">,</span><span class="w"> </span><span class="n">buffer</span><span class="p">[..],</span><span class="w"> </span><span class="p">[]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path</span><span class="o">::</span><span class="n">init</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">bufio</span><span class="o">::</span><span class="n">scanline</span><span class="p">(</span><span class="n">pipe</span><span class="p">)</span><span class="o">?</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">line</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">fromutf8</span><span class="p">(</span><span class="n">line</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">// XXX: This assumes git always does the thing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">tokenize</span><span class="p">(</span><span class="n">line</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;</span><span class="se">\0</span><span class="s">&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">commit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">commitdata</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">sha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">next_token</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">)</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">subject</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">next_token</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">)</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">author</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">next_token</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">)</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">email</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">next_token</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">)</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">date</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">next_token</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">)</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="o">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">path</span><span class="o">::</span><span class="n">set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">workdir</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">path</span><span class="o">::</span><span class="n">add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">commit</span><span class="p">.</span><span class="n">sha</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">commit</span><span class="p">.</span><span class="n">diff</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">dup</span><span class="p">(</span><span class="n">path</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">path</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">append</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">commits</span><span class="p">,</span><span class="w"> </span><span class="n">commit</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">os</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">commit</span><span class="p">.</span><span class="n">diff</span><span class="p">,</span><span class="w"> </span><span class="mo">0o644</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">file</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">parent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">concat</span><span class="p">(</span><span class="n">commit</span><span class="p">.</span><span class="n">sha</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;^&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">exec</span><span class="o">::</span><span class="n">cmd</span><span class="p">(</span><span class="s">&#34;git&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;diff&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">parent</span><span class="p">,</span><span class="w"> </span><span class="n">commit</span><span class="p">.</span><span class="n">sha</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">exec</span><span class="o">::</span><span class="n">addfile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">,</span><span class="w"> </span><span class="n">os</span><span class="o">::</span><span class="n">stdout_file</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">proc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">exec</span><span class="o">::</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">exec</span><span class="o">::</span><span class="n">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">proc</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">exec</span><span class="o">::</span><span class="n">check</span><span class="p">(</span><span class="o">&amp;</span><span class="n">status</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">exec</span><span class="o">::</span><span class="n">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">proc</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">exec</span><span class="o">::</span><span class="n">check</span><span class="p">(</span><span class="o">&amp;</span><span class="n">status</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The <code>--format</code> argument provided to git at the start here allows me to change
the format of git-show to use NUL delimited fields for easily picking out the
data I want. Point of note: this is minimum-effort coding for a joke, so there&rsquo;s
a lot of missing error handling and other lazy design choices here.</p>
<p>Anyway, I would have liked to have rewritten this in Perl and pitched it to the
git mailing list for inclusion upstream, but alas, after prototyping in
$secretlang I could not bring myself to rewrite it in Perl, and the joke fell
flat. Not every idea pans out, but they&rsquo;re still worth trying, anyway. If you
want to see some joke projects I&rsquo;ve made that actually work, check these out:</p>
<ul>
<li><a href="https://git.sr.ht/~sircmpwn/shit">shit</a>: a git implementation in POSIX shell</li>
<li><a href="https://git.sr.ht/~sircmpwn/bfbot">bfbot</a>: a working IRC bot written in brainfuck</li>
<li><a href="https://git.sr.ht/~sircmpwn/classic6">classic6</a>: a working Minecraft server written in 6 hours</li>
<li><a href="https://git.sr.ht/~sircmpwn/evilpass">evilpass</a>: a password strength checker that detects password reuse</li>
<li><a href="https://git.sr.ht/~sircmpwn/tw">tw</a>: a Wayland compositor for your terminal in 80 lines of &ldquo;code&rdquo;</li>
</ul>
<p>Take care!</p>]]></description><pubDate>Fri, 1 Apr 2022 00:00:00 +0000</pubDate></item><item><title>It is important for free software to use free software infrastructure</title><link>https://drewdevault.com/2022/03/29/free-software-free-infrastructure.html</link><description><![CDATA[<p><em>Disclaimer: I founded a project and a company that focuses on free software
infrastructure. I will elect not to name them in this post, and will only
recommend solutions I do not have a vested interest in.</em></p>
<p>Free and open source software (FOSS) projects need infrastructure. Somewhere to
host the code, to facilitate things like code review, end-user support, bug
tracking, marketing, and so on. A common example of this is the &ldquo;forge&rdquo;
platform: infrastructure which pitches itself as a one-stop shop for many of the
needs of FOSS projects in one place, such as code hosting and review, bug
tracking, discussions, and so on. Many projects will also reach for additional
platforms to provide other kinds of infrastructure: chat rooms, forums, social
media, and more.</p>
<p>Many of these needs have <abbr title="Projects which do not use a license compatible with the Free Software guidelines, i.e. non-FOSS.">non-free</abbr>,
proprietary solutions available. GitHub is a popular proprietary code forge, and
GitLab, the biggest competitor to GitHub, is partially non-free. Some projects
use Discord or Slack for chat rooms, Reddit as a forum, or Twitter and Facebook
for marketing, outreach, and support; all of these are non-free. In my opinion,
relying on these platforms to provide infrastructure for your FOSS project is a
mistake.</p>
<p>When your FOSS project chooses to use a non-free platform, you give it an
official vote of confidence on behalf of your project. In other words, you lend
some of your project&rsquo;s credibility and legitimacy to the platforms you choose.
These platforms are defined by network effects, and your choice is an investment
in that network. I would question this investment in and of itself, and the
wisdom of offering these platforms your confidence and legitimacy, but there&rsquo;s a
more concerning consequence of this choice as well: an investment in a non-free
platform is also a <em>divestment</em> from the free alternatives.</p>
<p>Again, network effects are the main driver of success in these platforms. Large
commercial platforms have a lot of advantages in this respect: large marketing
budgets, lots of capital from investors, and the incumbency advantage. The
larger the incumbent platform, the more difficult the task of competing with it
becomes. Contrast this with free software platforms, which generally don&rsquo;t have
the benefit of large amounts of investment or big marketing budgets. Moreover,
businesses are significantly more likely to play dirty to secure their foothold
than free software projects are. If your own FOSS projects compete with
proprietary commercial options, you should be very familiar with these
challenges.</p>
<p>FOSS platforms are at an inherent disadvantage, and your faith in them, or lack
thereof, carries a lot of weight. GitHub won&rsquo;t lose sleep if your project
chooses to host its code somewhere else, but choosing <a href="https://codeberg.org">Codeberg</a>, for example,
means a lot to them. In effect, your choice matters disproportionately to the
free platforms: choosing GitHub hurts Codeberg much more than choosing Codeberg
hurts GitHub. And why should a project choose to use your offering over the
proprietary alternatives if you won&rsquo;t extend them the same courtesy? FOSS
solidarity is important for uplifting the ecosystem as a whole.</p>
<p>However, for some projects, what ultimately matters to them has little to do
with the benefit of the ecosystem as a whole, but instead considers only the
potential for their project&rsquo;s individual growth and popularity. Many projects
choose to prioritize access to the established audience that large commercial
platforms provide, in order to maximize their odds of becoming popular, and
enjoying some of the knock-on effects of that popularity, such as more
contributions.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Such projects would prefer to exacerbate the network
effects problem rather than risk some of its social capital on a less popular
platform.</p>
<p>To me, this is selfish and unethical outright, though you may have different
ethical standards. Unfortunately, arguments against most commercial platforms
for any reasonable ethical standard are available in abundance, but they tend to
be easily overcome by confirmation bias. Someone who may loudly object to the
practices of the US Immigration and Customs Enforcement agency, for example, can
quickly find some justification to continue using GitHub despite their
collaboration with them. If this example isn&rsquo;t to your tastes, there are many
examples for each of many platforms. For projects that don&rsquo;t want to move, these
are usually swept under the rug.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>But, to be clear, I am not asking you to use inferior platforms for
philosophical or altruistic reasons. These are only one of many factors which
should contribute to your decision-making, and aptitude is another valid factor
to consider. That said, many FOSS platforms are, at least in my opinion,
functionally superior to their proprietary competition. Whether their
differences are better for your project&rsquo;s unique needs is something I must leave
for you to research on your own, but most projects don&rsquo;t bother with the
research at all. Rest assured: these projects are not ghettos living in the
shadow of their larger commercial counterparts, but exciting platforms in their
own right which offer many unique advantages.</p>
<p>What&rsquo;s more, if you need them to do something differently to better suit your
project&rsquo;s needs, you are empowered to improve them. You&rsquo;re not subservient to
the whims of the commercial entity who is responsible for the code, waiting for
them to prioritize the issue or even to care about it in the first place. If a
problem is important to you, that&rsquo;s enough for you to get it fixed on a FOSS
platform. You might not think you have the time or expertise to do so (though
maybe one of your collaborators does), but more importantly, this establishes a
mentality of collective ownership and responsibility over all free software as a
whole — popularize this philosophy and it could just as easily be you
receiving a contribution in a similar manner tomorrow.</p>
<p>In short, choosing non-free platforms is an individualist, short-term investment
which prioritizes your project&rsquo;s apparent access to popularity over the success
of the FOSS ecosystem as a whole. On the other hand, choosing FOSS platforms is
a collectivist investment in the long-term success of the FOSS ecosystem as a
whole, driving its overall growth. Your choice matters. You can help the FOSS
ecosystem by choosing FOSS platforms, or you can hurt the FOSS ecosystem by
choosing non-free platforms. Please choose carefully.</p>
<p>Here are some recommendations for free software tools that facilitate common
needs for free software projects:</p>
<ul>
<li>Code forges: <a href="https://codeberg.org">Codeberg</a>, <a href="https://gitea.io/en-us">Gitea</a>*, <a href="https://www.gerritcodereview.com">Gerrit</a>*, <a href="https://gitlab.com">GitLab</a>†</li>
<li>Instant messaging: <a href="https://matrix.org/">Matrix</a>, <a href="https://libera.chat">Libera Chat</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></li>
<li>Publishing: <a href="https://codeberg.page/">Codeberg pages</a>, <a href="https://write.as/">Write.as</a>, <a href="https://joinpeertube.org/">PeerTube</a></li>
<li>Social media: <a href="https://joinmastodon.org">Mastodon</a>, <a href="https://join-lemmy.org/">Lemmy</a></li>
<li>Mailing lists: <a href="https://www.freelists.org">FreeLists</a>, <a href="https://public-inbox.org/public-inbox-overview.html">public-inbox</a>*, <a href="http://www.list.org">Mailman</a>*</li>
</ul>
<p>* Self-hosted only <br>
† Partially non-free, recommended only if no other solutions are suitable</p>
<p>P.S. If your project is already established on non-free platforms, the easiest
time to revisit this choice is right now. It will only ever get more difficult
to move as your project grows and gets further established on proprietary
platforms. Please consider moving sooner rather than later.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I should note here that I&rsquo;m uncritically presenting &ldquo;popularity&rdquo; as a good thing for a project to have, which aligns, I think, with the thought processes of the projects I&rsquo;m describing. However, the truth is not quite so. Perhaps a topic for another day&rsquo;s blog post.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>A particularly egregious example is the <a href="https://ethicalsource.dev/">Ethical Source</a> movement. I disagree with them on many grounds, but pertinent to this article is the fact that they publish (non-free) software licenses which advocate for anti-capitalist sentiments like worker rights and ethical judgements such as non-violence, doing so on&hellip; GitHub and Twitter, private for-profit platforms with a myriad of published ethical violations.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I have made the arguments from this post to Libera staff many times, but they still rely on GitHub, Twitter, and Facebook. They were one of the motivations for writing this post. I hope that they have a change of heart someday.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate></item><item><title>The Netherlands so far</title><link>https://drewdevault.com/2022/03/24/Netherlands-update.html</link><description><![CDATA[<p><a href="https://drewdevault.com/2021/06/07/The-Netherlands.html">I moved to Amsterdam in July 2021</a>, and now that I&rsquo;ve had some time
to settle in I thought I&rsquo;d share my thoughts on how it&rsquo;s been so far. In short:
I love it here!</p>
<p>I did end up finding housing through the hacker community thanks to my earlier
post, which was a great blessing. I am renting an apartment from a member of the
<a href="https://techinc.nl">Techinc</a> hacker space, which I have joined as a member myself. One of my
biggest fears was establishing a new social network here in the Netherlands, but
making friends here has been easy. Through this hacker space and through other
connections besides, I have quickly met many wonderful, friendly, and welcoming
people, and I have never felt like a stranger in a strange land. For this I am
very grateful.</p>
<p>There are many other things to love about this place. One of my favorite things
about Amsterdam is getting around by bike. In Philadelphia, travelling by
bicycle is signing up for a death wish. In the Netherlands, 27% of all trips
utilize a bike, and in Amsterdam it&rsquo;s as much as 38%. Cyclists enjoy dedicated
cycling-first infrastructure, such as bike lanes separated entirely from the
roads and dedicated bike-only longer-distance artery roads. The city is designed
to reduce points of conflict between bikes and cars, and even when they have to
share the road they&rsquo;re almost always designed to slow cars down and give bikes
priority. The whole country is very flat, too, though Dutch people will be quick
to tell you about The Hill in their neighborhood, which is always no more than 2
meters tall.</p>
<p>Getting around without a bike is super pleasant as well. I have my choice of
bus, tram, metro, long-distance train, or even free ferries across the river,
all paid for with the same auto-recharging NFC card for a low price. Every line
runs frequent stops, so during the day you&rsquo;re generally not waiting more than 5
minutes to be picked up and at night you&rsquo;re probably not going to be waiting
more than 15 minutes at popular stops. When it gets really late, though, you
might wait as much as 30 minutes. The inter-city trains are amazing — I
can show up at any major station without a plan and there&rsquo;s probably a train
heading to where I want to go in less than 10 minutes. Compared to Amtrak, it&rsquo;s
simply mind boggling.</p>
<p>Little things no one here even thinks about have left an impression on me, too.
I see street cleaners out all of the time, in a little squad where workers use
leaf blowers and brooms to sweep trash and dirt from the sidewalks and squares
into the streets where sweepers come through to pick it up. The trash and
recycling bins are regularly collected, and when one of them in my neighborhood
broke, it was replaced within days. There are some areas where trash does tend
to accumulate, though, such as near benches in parks.</p>
<p>Isolated accumulations of trash aside, the parks are great. There&rsquo;s a lot more
of them throughout the city than you&rsquo;d get in a typical American city. I live
close to two large parks, Rembrandtpark and Vondelpark, plus the smaller
Erasmuspark, all of which are less than 5 minutes of cycling away. I like to
cycle there on cool summer days to read by the lakes or other water features, or
on one of the lawns. These parks also typically have a lot of large cycling-only
roads which act as little cycling highways throughout the city, which means many
of my cycling routes take me through nature even for intra-city travel. Several
of the parks also have public gym equipment available, with which you can get a
pretty good outdoor work-out for free.</p>
<p>The layout of the neighborhoods is quite nice as well. I have not just one but
four grocery stores within walking distance of my house, and I visit one
multiple times per week to pick up food, just a 3 or 4 minute walk away from my
place. Thanks to the ease of accessing good (and cheap) produce and other
ingredients, my diet has improved quite a bit — something I didn&rsquo;t expect
when I moved here. I can&rsquo;t get everything I want, though: finding genuinely
spicy chili peppers is a challenge.</p>
<p>The infamous Dutch bureaucracy is not as bad as people made it out to be. Going
through the immigration process was pretty stressful — as any process
which could end with being kicked out of the country might be — but it was
actually fairly straightforward for the kind of visa I wanted to get. Public
servants here are more helpful and flexible than their reputation suggests.</p>
<p>Something which is proving to be a bit of a challenge, however, is learning
Dutch. This surprised me given my existing background in languages; I thought it
would be pretty easy to pick up. I was able to quickly learn the basics, and I
can conduct many everyday affairs in Dutch, but I found it difficult to progress
beyond this point with self-study alone. I enrolled in a formal class, which
will hopefully help bridge that gap.</p>
<p>I could go on — experiences outside of Amsterdam and throughout the rest
of Europe, the vibes of the FOSS community and other communities I&rsquo;ve met,
serendipitously meeting people I knew in America who also moved to Europe, and
so on — but I think I&rsquo;ll stop here for this post. Every time I&rsquo;ve paused
to reflect on my relocation abroad, I&rsquo;ve come away smiling. So far, so good.
Hopefully that doesn&rsquo;t start to wear off!</p>]]></description><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Status update, March 2022</title><link>https://drewdevault.com/2022/03/15/Status-update-March-2022.html</link><description><![CDATA[<p>Greetings! The weather is starting to warm up again, eh? I&rsquo;m a bit disappointed
that we didn&rsquo;t get any snow this winter. Yadda yadda insert intro text here.
Let&rsquo;s get down to brass tacks. What&rsquo;s new this month?</p>
<p>I mainly focused on the programming language this month. I started writing a
kernel, which you can see a screenshot of below. This screenshot shows a
simulated page fault, demonstrating that we have a working interrupt handler,
and also shows something mildly interesting: backtraces. I need to incorporate
this approach into the standard library as well, so that we can dump useful
stack traces on assertion failures and such. I understand that someone is
working on DWARF support as well, so perhaps we&rsquo;ll soon be able to translate
function name + offset into a file name and line number.</p>
<p><img src="https://redacted.moe/f/848da9ff.png" alt="A redacted screenshot of a kernel showing a simulated page fault"></p>
<p>I also started working on a PNG decoder this weekend, which at the time of
writing can successfully decode 77 of the 161 PNG test vectors. I am quite
pleased with how the code turned out here: this library is a good demonstration
of the strengths of the language. It has simple code which presents a
comprehensive interface for the file format, has a strong user-directed memory
management model, takes good advantage of features like slices, and makes good
use of standard library features like compress::zlib and the I/O abstraction. I
will supplement this later with a higher level image API which handles things
like pixel format conversions and abstracting away format-specific details.</p>
<details>
  <summary>Expand for a sample from image::png</summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">bufio</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">bytes</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">compress</span><span class="o">::</span><span class="n">zlib</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">errors</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">io</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">idat_reader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">st</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">stream</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">src</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">chunk_reader</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">inflate</span><span class="o">:</span><span class="w"> </span><span class="n">zlib</span><span class="o">::</span><span class="n">reader</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">decoder</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">decoder</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Returns a new IDAT reader for a [[chunk_reader]], from which raw pixel data
</span></span></span><span class="line"><span class="cl"><span class="c1">// may be read via [[io::read]]. The user must prepare a [[decoder]] object
</span></span></span><span class="line"><span class="cl"><span class="c1">// along with a working buffer to store the decoder state. For information about
</span></span></span><span class="line"><span class="cl"><span class="c1">// preparing a suitable decoder, see [[newdecoder]].
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">new_idat_reader</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cr</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">chunk_reader</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">decoder</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">decoder</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">idat_reader</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">cr</span><span class="p">.</span><span class="n">ctype</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">IDAT</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Attempted to create IDAT reader for non-IDAT chunk&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">idat_reader</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">st</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">stream</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">reader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">idat_read</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="o">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">src</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">inflate</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">zlib</span><span class="o">::</span><span class="n">decompress</span><span class="p">(</span><span class="n">cr</span><span class="p">)</span><span class="o">?</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">decoder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">decoder</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">idat_read</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">st</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io</span><span class="o">::</span><span class="n">stream</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">size</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">ir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">st</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">idat_reader</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">ir</span><span class="p">.</span><span class="n">st</span><span class="p">.</span><span class="n">reader</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">&amp;</span><span class="n">idat_read</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">dec</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ir</span><span class="p">.</span><span class="n">decoder</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">dec</span><span class="p">.</span><span class="n">buffered</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">decoder_copy</span><span class="p">(</span><span class="n">dec</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">dec</span><span class="p">.</span><span class="n">filter</span><span class="w"> </span><span class="o">is</span><span class="w"> </span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">ft</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">bufio</span><span class="o">::</span><span class="n">scanbyte</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ir</span><span class="p">.</span><span class="n">inflate</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">idat_finish</span><span class="p">(</span><span class="n">ir</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">b</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="n">b</span><span class="o">:</span><span class="w"> </span><span class="n">filter</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ft</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">filter</span><span class="o">::</span><span class="n">PAETH</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">dec</span><span class="p">.</span><span class="n">filter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ft</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Read one scanline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">dec</span><span class="p">.</span><span class="n">read</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">dec</span><span class="p">.</span><span class="n">cr</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ir</span><span class="p">.</span><span class="n">inflate</span><span class="p">,</span><span class="w"> </span><span class="n">dec</span><span class="p">.</span><span class="n">cr</span><span class="p">[</span><span class="n">dec</span><span class="p">.</span><span class="n">read</span><span class="p">..])</span><span class="o">?</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="c1">// TODO: The rest of the scanline could be in the next
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">			</span><span class="c1">// IDAT chunk. However, if there is a partially read
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">			</span><span class="c1">// scanline in the decoder and no IDAT chunk in the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">			</span><span class="c1">// remainder of the file, we should probably raise an
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">			</span><span class="c1">// error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">idat_finish</span><span class="p">(</span><span class="n">ir</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">n</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">dec</span><span class="p">.</span><span class="n">read</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">applyfilter</span><span class="p">(</span><span class="n">dec</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">dec</span><span class="p">.</span><span class="n">read</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">dec</span><span class="p">.</span><span class="n">buffered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">dec</span><span class="p">.</span><span class="n">cr</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">decoder_copy</span><span class="p">(</span><span class="n">dec</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">idat_finish</span><span class="p">(</span><span class="n">ir</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">idat_reader</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Verify checksum
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">empty</span><span class="p">,</span><span class="w"> </span><span class="n">ir</span><span class="p">.</span><span class="n">src</span><span class="p">)</span><span class="o">?</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">// Extra data following zlib stream
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@test</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">idat_reader</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">src</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bufio</span><span class="o">::</span><span class="n">fixed</span><span class="p">(</span><span class="n">no_filtering</span><span class="p">,</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">mode</span><span class="o">::</span><span class="n">READ</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">read</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">newreader</span><span class="p">(</span><span class="o">&amp;</span><span class="n">src</span><span class="p">)</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="n">reader</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">chunk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nextchunk</span><span class="p">(</span><span class="o">&amp;</span><span class="n">read</span><span class="p">)</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="n">chunk_reader</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">ihdr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_ihdr_reader</span><span class="p">(</span><span class="o">&amp;</span><span class="n">chunk</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">ihdr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ihdr_read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ihdr</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">pixbuf</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">([</span><span class="mi">0</span><span class="o">...</span><span class="p">],</span><span class="w"> </span><span class="n">decoder_bufsiz</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ihdr</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">pixbuf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">decoder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">newdecoder</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ihdr</span><span class="p">,</span><span class="w"> </span><span class="n">pixbuf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">chunk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nextchunk</span><span class="p">(</span><span class="o">&amp;</span><span class="n">read</span><span class="p">)</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="n">chunk_reader</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">chunk_reader_type</span><span class="p">(</span><span class="o">&amp;</span><span class="n">chunk</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">IDAT</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">io</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">empty</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">chunk</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">idat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_idat_reader</span><span class="p">(</span><span class="o">&amp;</span><span class="n">chunk</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">decoder</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">pixels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">drain</span><span class="p">(</span><span class="o">&amp;</span><span class="n">idat</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">pixels</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">bytes</span><span class="o">::</span><span class="n">equal</span><span class="p">(</span><span class="n">pixels</span><span class="p">,</span><span class="w"> </span><span class="n">no_filtering_data</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div></details>
<p>In SourceHut news, I completed our migration to Alpine 3.15 this month after a
brief outage, including an upgrade to our database server, which is upgraded on
a less frequent cadance than the others. Thanks to Adnan&rsquo;s work, we&rsquo;ve also
landed many GraphQL improvements, mainly refactorings and other like
improvements, setting the stage for the next series of roll-outs. I plan on
transitioning back from focusing on the language to focusing on SourceHut for
the coming month, and I expect to see some good progress here.</p>
<p>That&rsquo;s all I have to share for today. Until next time!</p>]]></description><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate></item><item><title>It takes a village</title><link>https://drewdevault.com/2022/03/14/It-takes-a-village.html</link><description><![CDATA[<p>As a prolific maintainer of several dozen FOSS projects, I&rsquo;m often asked how I
can get so much done, being just one person. The answer is: I&rsquo;m not just one
person. I have enjoyed the help of thousands of talented people who have
contributed to these works. Without them, none of the projects I work on would
be successful.</p>
<p>I&rsquo;d like to take a moment to recognize and thank all of the people who have
participated in these endeavours. If you&rsquo;ve enjoyed any of the projects I&rsquo;ve
worked on, you owe thanks to some of these wonderful people. The following is an
incomplete list of authors who have contributed to one or more of the projects I
have started:</p>
<p>A Mak<br />
A. M. Joseph<br />
a3v<br />
Aaron Bieber<br />
Aaron Holmes<br />
Aaron Ouellette<br />
Abdelhakim Qbaich<br />
absrd<br />
Ace Eldeib<br />
Adam Kürthy<br />
Adam Mizerski<br />
Aditya Mahajan<br />
Aditya Srivastava<br />
Adnan Maolood<br />
Adrusi<br />
ael-code<br />
agr<br />
Aidan Epstein<br />
Aidan Harris<br />
Ajay R<br />
Ajay Raghavan<br />
Alain Greppin<br />
Aleksa Sarai<br />
Aleksander Usov<br />
Aleksei Bavshin<br />
Aleksis<br />
Alessio<br />
Alex Cordonnier<br />
Alex Maese<br />
Alex McGrath<br />
Alex Roman<br />
alex wennerberg<br />
Alex Xu<br />
Alexander &lsquo;z33ky&rsquo; Hirsch<br />
Alexander Bakker<br />
Alexander Dzhoganov<br />
Alexander Harkness<br />
Alexander Johnson<br />
Alexander Taylor<br />
Alexandre Oliveira<br />
Alexey Yerin<br />
Aljaz Gantar<br />
Alynx Zhou<br />
Alyssa Ross<br />
Amin Bandali<br />
amingin<br />
Amir Yalon<br />
Ammar Askar<br />
Ananth Bhaskararaman<br />
Anders<br />
Andreas Rammhold<br />
Andres Erbsen<br />
Andrew Conrad<br />
Andrew Jeffery<br />
Andrew Leap<br />
Andrey Kuznetsov<br />
Andri Yngvason<br />
Andy Dulson<br />
andyleap<br />
Anirudh Oppiliappan<br />
Anjandev Momi<br />
Anthony Super<br />
Anton Gusev<br />
Antonin Décimo<br />
aouelete<br />
apt-ghetto<br />
ARaspiK<br />
Arav K<br />
Ariadna Vigo<br />
Ariadne Conill<br />
Ariel Costas<br />
Ariel Popper<br />
Arkadiusz Hiler<br />
Armaan Bhojwani<br />
Armin Preiml<br />
Armin Weigl<br />
Arnaud Vallette d&rsquo;Osia<br />
Arsen Arsenović<br />
Art Wild<br />
Arthur Gautier<br />
Arto Jonsson<br />
Arvin Ignaci<br />
ascent12<br />
asdfjkluiop<br />
Asger Hautop Drewsen<br />
ash lea<br />
Ashkan Kiani<br />
Ashton Kemerling<br />
athrungithub<br />
Atnanasi<br />
Aviv Eyal<br />
ayaka<br />
azarus<br />
bacardi55<br />
barfoo1<br />
Bart Pelle<br />
Bart Post<br />
Bartłomiej Burdukiewicz<br />
bbielsa<br />
BearzRobotics<br />
Ben Boeckel<br />
Ben Brown<br />
Ben Burwell<br />
Ben Challenor<br />
Ben Cohen<br />
Ben Fiedler<br />
Ben Harris<br />
Benjamin Cheng<br />
Benjamin Halsted<br />
Benjamin Lowry<br />
Benjamin Riefenstahl<br />
Benoit Gschwind<br />
berfr<br />
bilgorajskim<br />
Bill Doyle<br />
Birger Schacht<br />
Bjorn Neergaard<br />
Björn Esser<br />
blha303<br />
bn4t<br />
Bob Ham<br />
bobtwinkles<br />
boos1993<br />
Bor Grošelj Simić<br />
boringcactus<br />
Brandon Dowdy<br />
BrassyPanache<br />
Brendan Buono<br />
Brendon Smith<br />
Brian Ashworth<br />
Brian Clemens<br />
Brian McKenna<br />
Bruno Pinto<br />
bschacht<br />
BTD Master<br />
buffet<br />
burrowing-owl<br />
Byron Torres<br />
calcdude84se<br />
Caleb Bassi<br />
Callum Brown<br />
Calvin Lee<br />
Cameron Nemo<br />
camoz<br />
Campbell Vertesi<br />
Cara Salter<br />
Carlo Abelli<br />
Cassandra McCarthy<br />
Cedric Sodhi<br />
Chang Liu<br />
Charles E. Lehner<br />
Charlie Stanton<br />
Charmander<br />
chickendude<br />
chr0me<br />
Chris Chamberlain<br />
Chris Kinniburgh<br />
Chris Morgan<br />
Chris Morris<br />
Chris Vittal<br />
Chris Waldon<br />
Chris Young<br />
Christoph Gysin<br />
Christopher M. Riedl<br />
Christopher Vittal<br />
chtison<br />
Clar Charr<br />
Clayton Craft<br />
Clément Joly<br />
cnt0<br />
coderkun<br />
Cole Helbling<br />
Cole Mickens<br />
columbarius<br />
comex<br />
Connor Edwards<br />
Connor Kuehl<br />
Conrad Hoffmann<br />
Cormac Stephenson<br />
Cosimo Cecchi<br />
cra0zy<br />
crondog<br />
Cuber<br />
curiousleo<br />
Cyril Levis<br />
Cédric Bonhomme<br />
Cédric Cabessa<br />
Cédric Hannotier<br />
D.B<br />
dabio<br />
Dacheng Gao<br />
Damien Tardy-Panis<br />
Dan ELKOUBY<br />
Dan Robertson<br />
Daniel Bridges<br />
Daniel De Graaf<br />
Daniel Eklöf<br />
Daniel Gröber<br />
Daniel Kessler<br />
Daniel Kondor<br />
Daniel Lockyer<br />
Daniel Lublin<br />
Daniel Martí<br />
Daniel Otero<br />
Daniel P<br />
Daniel Sockwell<br />
Daniel V<br />
Daniel V.<br />
Daniel Vidmar<br />
Daniel Xu<br />
Daniil<br />
Danilo<br />
Danilo Spinella<br />
Danny Bautista<br />
Dark Rift<br />
Darksun<br />
Dave Cottlehuber<br />
David Arnold<br />
David Blajda<br />
David Eklov<br />
David Florness<br />
David Hurst<br />
David Kraeutmann<br />
David Krauser<br />
David Zero<br />
David96<br />
db<br />
dbandstra<br />
dece<br />
delthas<br />
Denis Doria<br />
Denis Laxalde<br />
Dennis Fischer<br />
Dennis Schridde<br />
Derek Smith<br />
Devin J. Pohly<br />
Devon Johnson<br />
Dhruvin Gandhi<br />
Di Ma<br />
Dian M Fay<br />
Diane<br />
Diederik de Haas<br />
Dillen Meijboom<br />
Dimitris Triantafyllidis<br />
Dizigma<br />
Dmitri Kourennyi<br />
Dmitry Borodaenko<br />
Dmitry Kalinkin<br />
dogwatch<br />
Dominik Honnef<br />
Dominique Martinet<br />
Donnie West<br />
Dorota Czaplejewicz<br />
dudemanguy<br />
Dudemanguy911<br />
Duncaen<br />
Dylan Araps<br />
earnest ma<br />
Ed Younis<br />
EdOverflow<br />
EIREXE<br />
Ejez<br />
Ekaterina Vaartis<br />
Eli Schwartz<br />
Elias Naur<br />
Eloi Rivard<br />
elumbella<br />
Elyes HAOUAS<br />
Elyesa<br />
emersion<br />
Emerson Ferreira<br />
Emmanuel Gil Peyrot<br />
Enerccio<br />
Erazem Kokot<br />
Eric Bower<br />
Eric Drechsel<br />
Eric Engestrom<br />
Eric Molitor<br />
Erik Reider<br />
ernierasta<br />
espkk<br />
Ethan Lee<br />
Euan Torano<br />
EuAndreh<br />
Evan Allrich<br />
Evan Hanson<br />
Evan Johnston<br />
Evan Relf<br />
Eyal Sawady<br />
Ezra<br />
Fabian Geiselhart<br />
Fabio Alessandro Locati<br />
Falke Carlsen<br />
Fazlul Shahriar<br />
Felipe Cardoso Resende<br />
Fenveireth<br />
Ferdinand Bachmann<br />
FICTURE7<br />
Filip Sandborg<br />
finley<br />
Flakebi<br />
Florent de Lamotte<br />
florian.weigelt<br />
Francesco Gazzetta<br />
Francis Dinh<br />
Frank Smit<br />
Franklin &ldquo;Snaipe&rdquo; Mathieu<br />
Frantisek Fladung<br />
François Kooman<br />
Frode Aannevik<br />
frsfnrrg<br />
ftilde<br />
fwsmit<br />
Gabriel Augendre<br />
Gabriel Féron<br />
gabrielpatzleiner<br />
Galen Abell<br />
Garrison Taylor<br />
Gauvain &lsquo;GovanifY&rsquo; Roussel-Tarbouriech<br />
Gaël PORTAY<br />
gbear605<br />
Genki Sky<br />
Geoff Greer<br />
Geoffrey Casper<br />
George Craggs<br />
George Hilliard<br />
ggrote<br />
Gianluca Arbezzano<br />
gilbus<br />
gildarts<br />
Giuseppe Lumia<br />
Gokberk Yaltirakli<br />
Graham Christensen<br />
Greg Anders<br />
Greg Depoire&ndash;Ferrer<br />
Greg Farough<br />
Greg Hewgill<br />
Greg V<br />
Gregory Anders<br />
Gregory Mullen<br />
grossws<br />
Grégoire Delattre<br />
Guido Cella<br />
Guido Günther<br />
Guillaume Brogi<br />
Guillaume J. Charmes<br />
György Kurucz<br />
Gökberk Yaltıraklı<br />
Götz Christ<br />
Haelwenn (lanodan) Monnier<br />
Half-Shot<br />
Hans Brigman<br />
Haowen Liu<br />
Harish Krupo<br />
Harry Jeffery<br />
Heghedus Razvan<br />
Heiko Carrasco<br />
heitor<br />
Henrik Riomar<br />
Honza Pokorny<br />
Hoolean<br />
Hristo Venev<br />
Hubert Hirtz<br />
hugbubby<br />
Hugo Osvaldo Barrera<br />
Humm<br />
Hummer12007<br />
Ian Fan<br />
Ian Huang<br />
Ian Moody<br />
Ignas Kiela<br />
Igor Sviatniy<br />
Ihor Kalnytskyi<br />
Ilia Bozhinov<br />
Ilia Mirkin<br />
Ilja Kocken<br />
Ilya Lukyanov<br />
Ilya Trukhanov<br />
inwit<br />
io mintz<br />
Isaac Freund<br />
Issam E. Maghni<br />
Issam Maghni<br />
István Donkó<br />
Ivan Chebykin<br />
Ivan Fedotov<br />
Ivan Habunek<br />
Ivan Mironov<br />
Ivan Molodetskikh<br />
Ivan Tham<br />
Ivoah<br />
ixru<br />
j-n-f<br />
Jaanus Torp<br />
Jack Byrne<br />
jack gleeson<br />
Jacob Young<br />
jajo-11<br />
Jake Bauer<br />
Jakub Kopański<br />
Jakub Kądziołka<br />
Jamelly Ferreira<br />
James D. Marble<br />
James Edwards-Jones<br />
James Mills<br />
James Murphy<br />
James Pond<br />
James Rowe<br />
James Turner<br />
Jan Beich<br />
Jan Chren<br />
Jan Palus<br />
Jan Pokorný<br />
Jan Staněk<br />
JanUlrich<br />
Jared Baldridge<br />
Jarkko Oranen<br />
Jasen Borisov<br />
Jason Francis<br />
Jason Miller<br />
Jason Nader<br />
Jason Phan<br />
Jason Swank<br />
jasperro<br />
Jayce Fayne<br />
jdiez17<br />
Jeff Kaufman<br />
Jeff Martin<br />
Jeff Peeler<br />
Jeffas<br />
Jelle Besseling<br />
Jente Hidskes<br />
Jeremy Hofer<br />
Jerzi Kaminsky<br />
JerziKaminsky<br />
Jesin<br />
jhalmen<br />
Jiri Vlasak<br />
jman<br />
Joe Jenne<br />
johalun<br />
Johan Bjäreholt<br />
Johannes Lundberg<br />
Johannes Schramm<br />
John Axel Eriksson<br />
John Chadwick<br />
John Chen<br />
John Mako<br />
john muhl<br />
Jon Higgs<br />
Jonas Große Sundrup<br />
Jonas Hohmann<br />
Jonas Kalderstam<br />
Jonas Karlsson<br />
Jonas Mueller<br />
Jonas Platte<br />
Jonathan Bartlett<br />
Jonathan Buch<br />
Jonathan Halmen<br />
Jonathan Schleußer<br />
JonnyMako<br />
Joona Romppanen<br />
Joram Schrijver<br />
Jorge Maldonado Ventura<br />
Jose Diez<br />
Josef Gajdusek<br />
Josh Holland<br />
Josh Junon<br />
Josh Shone<br />
Joshua Ashton<br />
Josip Janzic<br />
José Expósito<br />
José Mota<br />
JR Boyens<br />
Juan Picca<br />
Julian P Samaroo<br />
Julian Samaroo<br />
Julien Moutinho<br />
Julien Olivain<br />
Julien Savard<br />
Julio Galvan<br />
Julius Michaelis<br />
Justin Kelly<br />
Justin Mayhew<br />
Justin Nesselrotte<br />
Justus Rossmeier<br />
Jøhannes Lippmann<br />
k1nkreet<br />
Kacper Kołodziej<br />
Kaleb Elwert<br />
kaltinril<br />
Kalyan Sriram<br />
Karl Rieländer<br />
Karmanyaah Malhotra<br />
Karol Kosek<br />
Kenny Levinsen<br />
kevin<br />
Kevin Hamacher<br />
Kevin Kuehler<br />
Kevin Sangeelee<br />
Kiril Vladimiroff<br />
Kirill Chibisov<br />
Kirill Primak<br />
Kiëd Llaentenn<br />
KoffeinFlummi<br />
Koni Marti<br />
Konrad Beckmann<br />
Konstantin Kharlamov<br />
Konstantin Pospelov<br />
Konstantinos Feretos<br />
kst<br />
Kurt Kartaltepe<br />
Kurt Kremitzki<br />
kushal<br />
Kévin Le Gouguec<br />
Lane Surface<br />
Langston Barrett<br />
Lars Hagström<br />
Laurent Bonnans<br />
Lauri<br />
lbonn<br />
Leon Henrik Plickat<br />
Leszek Cimała<br />
Liam Cottam<br />
Linus Heckemann<br />
Lio Novelli<br />
ljedrz<br />
Louis Taylor<br />
Lubomir Rintel<br />
Luca Weiss<br />
Lucas F. Souza<br />
Lucas M. Dutra<br />
Ludovic Chabant<br />
Ludvig Michaelsson<br />
Lukas Lihotzki<br />
Lukas Märdian<br />
Lukas Wedeking<br />
Lukas Werling<br />
Luke Drummond<br />
Luminarys<br />
Luna Nieves<br />
Lyle Hanson<br />
Lyndsy Simon<br />
Lyudmil Angelov<br />
M Stoeckl<br />
M. David Bennett<br />
Mack Straight<br />
madblobfish<br />
manio143<br />
Manuel Argüelles<br />
Manuel Mendez<br />
Manuel Stoeckl<br />
Marc Grondin<br />
Marcel Hellwig<br />
Marcin Cieślak<br />
Marco Sirabella<br />
Marian Dziubiak<br />
Marien Zwart<br />
Marius Orcsik<br />
Mariusz Bialonczyk<br />
Mark Dain<br />
Mark Stosberg<br />
Markus Ongyerth<br />
MarkusVolk<br />
Marten Ringwelski<br />
Martijn Braam<br />
Martin Dørum<br />
Martin Hafskjold Thoresen<br />
Martin Kalchev<br />
Martin Michlmayr<br />
Martin Vahlensieck<br />
Matias Lang<br />
Matrefeytontias<br />
matrefeytontias<br />
Matt Coffin<br />
Matt Critchlow<br />
Matt Keeter<br />
Matt Singletary<br />
Matt Snider<br />
Matthew Jorgensen<br />
Matthias Beyer<br />
Matthias Totschnig<br />
Mattias Eriksson<br />
Matías Lang<br />
Max Bruckner<br />
Max Leiter<br />
Maxime “pep” Buquet<br />
mbays<br />
MC42<br />
meak<br />
Mehdi Sadeghi<br />
Mendel E<br />
Merlin Büge<br />
Miccah Castorina<br />
Michael Anckaert<br />
Michael Aquilina<br />
Michael Forney<br />
Michael Struwe<br />
Michael Vetter<br />
Michael Weiser<br />
Michael Weiss<br />
Michaël Defferrard<br />
Michał Winiarski<br />
Michel Ganguin<br />
Michele Finotto<br />
Michele Sorcinelli<br />
Mihai Coman<br />
Mikkel Oscar Lyderik<br />
Mikkel Oscar Lyderik Larsen<br />
Milkey Mouse<br />
minus<br />
Mitchell Kutchuk<br />
mliszcz<br />
mntmn<br />
mnussbaum<br />
Moelf<br />
morganamilo<br />
Moritz Buhl<br />
Mrmaxmeier<br />
mteyssier<br />
Mukundan314<br />
muradm<br />
murray<br />
Mustafa Abdul-Kader<br />
mwenzkowski<br />
myfreeweb<br />
Mykola Orliuk<br />
Mykyta Holubakha<br />
n3rdopolis<br />
Naglis Jonaitis<br />
Nate Dobbins<br />
Nate Guerin<br />
Nate Ijams<br />
Nate Symer<br />
Nathan Rossi<br />
Nedzad Hrnjica<br />
NeKit<br />
nerdopolis<br />
ngenisis<br />
Nguyễn Gia Phong<br />
Niccolò Scatena<br />
Nicholas Bering<br />
Nick Diego Yamane<br />
Nick Paladino<br />
Nick White<br />
Nicklas Warming Jacobsen<br />
Nicolai Dagestad<br />
Nicolas Braud-Santoni<br />
Nicolas Cornu<br />
Nicolas Reed<br />
Nicolas Schodet<br />
Nicolas Werner<br />
NightFeather<br />
Nihil Pointer<br />
Niklas Schulze<br />
Nils ANDRÉ-CHANG<br />
Nils Schulte<br />
Nixon Enraght-Moony<br />
Noah Altunian<br />
Noah Kleiner<br />
Noah Loomans<br />
Noah Pederson<br />
Noam Preil<br />
Noelle Leigh<br />
NokiDev<br />
Nolan Prescott<br />
Nomeji<br />
Novalinium<br />
novenary<br />
np511<br />
nrechn<br />
NSDex<br />
Nuew<br />
nyorain<br />
nytpu<br />
Nícolas F. R. A. Prado<br />
oharaandrew314<br />
Oleg Kuznetsov<br />
Oliver Leaver-Smith<br />
oliver-giersch<br />
Olivier Fourdan<br />
Ondřej Fiala<br />
Orestis Floros<br />
Oscar Cowdery Lack<br />
Ossi Ahosalmi<br />
Owen Johnson<br />
Paco Esteban<br />
Parasrah<br />
Pascal Pascher<br />
Patrick Sauter<br />
Patrick Steinhardt<br />
Paul Fenwick<br />
Paul Ouellette<br />
Paul Riou<br />
Paul Spooren<br />
Paul W. Rankin<br />
Paul Wise<br />
Pedro Côrte-Real<br />
Pedro L. Ramos<br />
Pedro Lucas Porcellis<br />
Peroalane<br />
Peter Grayson<br />
Peter Lamby<br />
Peter Rice<br />
Peter Sanchez<br />
Phil Rukin<br />
Philip K<br />
Philip Woelfel<br />
Philipe Goulet<br />
Philipp Ludwig<br />
Philipp Riegger<br />
Philippe Pepiot<br />
Philz69<br />
Pi-Yueh Chuang<br />
Pierre-Albéric TROUPLIN<br />
Piper McCorkle<br />
pixelherodev<br />
PlusMinus0<br />
PoroCYon<br />
ppascher<br />
Pranjal Kole<br />
ProgAndy<br />
progandy<br />
Przemyslaw Pawelczyk<br />
psykose<br />
punkkeks<br />
pyxel<br />
Quantum<br />
Quentin Carbonneaux<br />
Quentin Glidic<br />
Quentin Rameau<br />
R Chowdhury<br />
r-c-f<br />
Rabit<br />
Rachel K<br />
Rafael Castillo<br />
rage 311<br />
Ragnar Groot Koerkamp<br />
Ragnis Armus<br />
Rahiel Kasim<br />
Raman Varabets<br />
Ranieri Althoff<br />
Ray Ganardi<br />
Raymond E. Pasco<br />
René Wagner<br />
Reto Brunner<br />
Rex Hackbro<br />
Ricardo Wurmus<br />
Richard Bradfield<br />
Rick Cogley<br />
rinpatch<br />
Robert Günzler<br />
Robert Johnstone<br />
Robert Kubosz<br />
Robert Sacks<br />
Robert Vollmert<br />
Robin Jarry<br />
Robin Kanters<br />
Robin Krahl<br />
Robin Opletal<br />
Robinhuett<br />
robotanarchy<br />
Rodrigo Lourenço<br />
Rohan Kumar<br />
Roman Gilg<br />
ROMB<br />
Ronan Pigott<br />
ronys<br />
Roosembert Palacios<br />
roshal<br />
Roshless<br />
Ross L<br />
Ross Schulman<br />
Rostislav Pehlivanov<br />
rothair<br />
RoughB Tier0<br />
Rouven Czerwinski<br />
rpigott<br />
Rune Morling<br />
russ morris<br />
Ryan Chan<br />
Ryan Dwyer<br />
Ryan Farley<br />
Ryan Gonzalez<br />
Ryan Walklin<br />
Rys Sommefeldt<br />
Réouven Assouly<br />
S. Christoffer Eliesen<br />
s0r00t<br />
salkin-mada<br />
Sam Newbold<br />
Sam Whited<br />
SatowTakeshi<br />
Sauyon Lee<br />
Scoopta<br />
Scott Anderson<br />
Scott Colby<br />
Scott Leggett<br />
Scott Moreau<br />
Scott O&rsquo;Malley<br />
Scott Stevenson<br />
sdilts<br />
Sebastian<br />
Sebastian Krzyszkowiak<br />
Sebastian LaVine<br />
Sebastian Noack<br />
Sebastian Parborg<br />
Seferan<br />
Sergeeeek<br />
Sergei Dolgov<br />
Sergi Granell<br />
sergio<br />
Seth Barberee<br />
Seán C McCord<br />
sghctoma<br />
Shaw Vrana<br />
Sheena Artrip<br />
Silvan Jegen<br />
Simon Barth<br />
Simon Branch<br />
Simon Ruderich<br />
Simon Ser<br />
Simon Zeni<br />
Siva Mahadevan<br />
skip-yell<br />
skuzzymiglet<br />
Skyler Riske<br />
Slowpython<br />
Sol Fisher Romanoff<br />
Solomon Victorino<br />
somdoron<br />
Sorcus<br />
sourque<br />
Spencer Michaels<br />
SpizzyCoder<br />
sqwishy<br />
Srivathsan Murali<br />
Stacy Harper<br />
Steef Hegeman<br />
Stefan Rakel<br />
Stefan Schick<br />
Stefan Tatschner<br />
Stefan VanBuren<br />
Stefan Wagner<br />
Stefano Ragni<br />
Stephan Hilb<br />
Stephane Chauveau<br />
Stephen Brennan<br />
Stephen Brown II<br />
Stephen Gregoratto<br />
Stephen Paul Weber<br />
Steve Jahl<br />
Steve Losh<br />
Steven Guikal<br />
Stian Furu Øverbye<br />
Streetwalrus Einstein<br />
Stuart Dilts<br />
Sudipto Mallick<br />
Sumner Evans<br />
Syed Amer Gilani<br />
sykhro<br />
Tadeo Kondrak<br />
Taiyu<br />
taiyu<br />
taminaru<br />
Tamir Zahavi-Brunner<br />
Tancredi Orlando<br />
Tanguy Fardet<br />
Tarmack<br />
Taryn Hill<br />
tastytea<br />
tcb<br />
Teddy Reed<br />
Tero Koskinen<br />
Tharre<br />
Thayne McCombs<br />
The Depressed Milkman<br />
TheAvidDev<br />
TheMachine02<br />
Theodor Thornhill<br />
thermitegod<br />
Thiago Mendes<br />
thirtythreeforty<br />
Thomas Bracht Laumann Jespersen<br />
Thomas Hebb<br />
Thomas Jespersen<br />
Thomas Karpiniec<br />
Thomas Merkel<br />
Thomas Plaçais<br />
Thomas Schneider<br />
Thomas Weißschuh<br />
Thomas Wouters<br />
Thorben Günther<br />
thuck<br />
Till Hofmann<br />
Tim Sampson<br />
Tim Schumacher<br />
Timidger<br />
Timmy Douglas<br />
Timothée Floure<br />
Ting-Wei Lan<br />
tiosgz<br />
toadicus<br />
Tobi Fuhrimann<br />
Tobias Blass<br />
Tobias Langendorf<br />
Tobias Stoeckmann<br />
Tobias Wölfel<br />
Tom Bereknyei<br />
Tom Lebreux<br />
Tom Ryder<br />
Tom Warnke<br />
tomKPZ<br />
Tommy Nguyen<br />
Tomáš Čech<br />
Tony Crisci<br />
Torstein Husebø<br />
Trannie Carter<br />
Trevor Slocum<br />
TriggerAu<br />
Tudor Brindus<br />
Tudor Roman<br />
Tuomas Siipola<br />
tuomas56<br />
Twan Wolthof<br />
Tyler Anderson<br />
Uli Schlachter<br />
Umar Getagazov<br />
unlimitedbacon<br />
unraised<br />
User Name<br />
v44r<br />
Valentin<br />
Valentin Hăloiu<br />
Vasilij Schneidermann<br />
Versus Void<br />
vexhack<br />
Vijfhoek<br />
vil<br />
vilhalmer<br />
Vincent Gu<br />
Vincent Vanlaer<br />
Vinko Kašljević<br />
Vitalij<br />
Vitalij Mikhailov<br />
Vlad Pănăzan<br />
Vlad-Stefan Harbuz<br />
Vyivel<br />
w1ke<br />
Wagner Riffel<br />
wagner riffel<br />
Wai Hon Law<br />
wb9688<br />
wdbw<br />
Whemoon Jang<br />
Wieland Hoffmann<br />
Wiktor Kwapisiewicz<br />
wil<br />
Will Daly<br />
Will Hunt<br />
willakat<br />
Willem Sonke<br />
William Casarin<br />
William Culhane<br />
William Durand<br />
William Moorehouse<br />
William Wold<br />
willrandship<br />
Willy Goiffon<br />
Wolf480pl<br />
Wouter van Kesteren<br />
Xaiier<br />
xdavidwu<br />
xPMo<br />
y0ast<br />
Yacine Hmito<br />
yankejustin<br />
Yasar<br />
Yash Srivastav<br />
Yong Joseph Bakos<br />
Yorick van Pelt<br />
yuiiio<br />
yuilib<br />
Yury Krivopalov<br />
Yuya Nishihara<br />
Yábir Benchakhtir<br />
Yábir García<br />
Zach DeCook<br />
Zach Sisco<br />
Zachary King<br />
Zandr Martin<br />
zccrs<br />
Zetok Zalbavar<br />
Zie<br />
Zoltan Kalmar<br />
Zuzana Svetlikova<br />
Éloi Rivard<br />
Érico Rolim<br />
Štěpán Němec<br />
наб<br />
حبيب الامين<br /></p>
<p>Each of these is a distinct person, with their own lives and aspirations, who
took time out of those lives to help build some cool software. I owe everything
to these wonderful, talented, dedicated people. Thank you, everyone. Let&rsquo;s keep
up the good work, together.</p>]]></description><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Why am I building a programming language in private?</title><link>https://drewdevault.com/2022/03/13/Why-am-I-working-in-private.html</link><description><![CDATA[<p>As many readers are aware, I have been working on designing and implementing a
systems programming language. This weekend, I&rsquo;ve been writing a PNG file decoder
in it, and over the past week, I have been working on a simple kernel with it as
well. I&rsquo;m very pleased with our progress so far — I recently remarked that
this language feels like the language I always wanted, and that&rsquo;s mission
accomplished by any definition I care to consider.</p>
<p>I started the project on December 27th, 2019, just over two years ago, and I
have kept it in a semi-private state since. Though I have not given its name in
public, the git repos, mailing lists, and bug trackers use sourcehut&rsquo;s
&ldquo;unlisted&rdquo; state, so anyone who knows the URL can see them. The website is also
public, though its domain name is also undisclosed, and it is full of
documentation, tutorials, and resources for developers. People can find the
language if they want to, though at this stage the community only welcomes
contributors, not users or onlookers. News of the project nominally spreads by
word of mouth and with calls-to-action on this blog, and to date a total of 30
people have worked on it over the course of 3,029 commits. It is a major,
large-scale project, secret though it may be.</p>
<p>And, though we&rsquo;ve invested a ton of work into this project together, it remains
as-of-yet unfinished. There is no major software written in our language, though
several efforts are underway. Several of our key goals have yet to be merged
upstream, such as date/time support, TLS, and regular expressions, though,
again, these efforts are well underway. Until we have major useful projects
written in our language, we cannot be confident in our design, and efforts in
these respects do a great deal to inform us regarding any changes which might be
necessary. And some changes are already in the pipeline: we have plans to make
several major revisions to the language and standard library design, which are
certain to require changes in downstream software.</p>
<p>When our community is small and private, these changes are fairly easy to reckon
with. Almost everyone who is developing a project based on our language is also
someone who has worked on the compiler or standard library. Often, the person
who implements a breaking change will also send patches to various downstreams
updating them to be compatible with this change, <em>for every extant software
project written in the language</em>. This is a task which can be undertaken by one
person. We all understand the need for these changes, participate in the
discussions and review the implementations, and have the expertise necessary to
make the appropriate changes to our projects.</p>
<p>Moreover, all of these people are also understanding of the in-development
nature of the project. All users of our language are equipped with the knowledge
that they are expected to help fix the bugs they identify, and with the skills
and expertise necessary to follow-up on this fact. We don&rsquo;t have to think about
users who stumble upon the project, spend a few hours trying to use it, then
encounter an under-developed part of the language and run out of enthusiasm. We
still lack DWARF support, so debugging is a chore. Sometimes the compiler
segfaults or aborts without printing a useful error message. It&rsquo;s a
work-in-progress, after all. These kinds of problems can discourage new learners
very fast, and often requires the developers to offer some of their precious
bandwidth to provide expert assistance. With the semi-private model, there are,
at any given time, a very small number of people involved who are new to the
language and require more hands-on support to help them through their problems.</p>
<p>A new programming language is a major undertaking. We&rsquo;re building one with an
explicit emphasis on simplicity and we&rsquo;re still not done after two years. When
most people hear about the project for the first time, I don&rsquo;t want them to find
a half-completed language which they will fail to apply to their problem because
it&rsquo;s not fleshed out for their use-case. The initial release will have
comprehensive documentation, a detailed specification, and stability guarantees,
so it can be picked up and used in production by curious users on day one. I
want to fast-forward to the phase where people study it to learn how to apply it
to their problems, rather than to learn <em>if they can</em> apply it to their
problems.</p>
<p>Even though it is under development in private, this project is both &ldquo;free
software&rdquo; and &ldquo;open source&rdquo;, according to my strict understanding of those terms
as defined by the FSF and OSI. &ldquo;Open source&rdquo; does not mean that the project has
a public face. The compiler is GPL 3.0 licensed, the standard library is MPL
2.0, and the specification is CC-BY-ND (the latter is notably less free, albeit
for good reasons), and these details are what matter. Every person who has
worked on the project, and every person who stumbles upon it, possesses the
right to lift the veil of secrecy and share it with the world. The reason they
don&rsquo;t is because I asked them not to, and we maintain a mutual understanding
regarding the need for privacy.</p>
<p>On a few occasions, someone has discovered the project and taken it upon
themselves to share it in public places, including Hacker News, Lemmy, and
4chan. While this is well within your rights, I ask you to respect our wishes
and allow us to develop this project in peace. I know that many readers are
excited to try it out, but please give us some time and space to ensure that you
are presented with a robust product. At the moment, we anticipate going public
early next year. Thank you for your patience.</p>
<p>Thank you for taking the time to read my thoughts as well. I welcome your
thoughts and opinions on the subject: <a href="mailto:sir@cmpwn.com">my inbox is always open</a>. If you
disagree, I would appreciate it if you reached out to me to discuss it before
posting about the project online. And, if you want to get involved, here is a
list of things we could use help with — email me to volunteer if you have
both the time and expertise necessary:</p>
<ul>
<li>Cryptography</li>
<li>Ports for new architectures or operating systems</li>
<li>Image &amp; pixel formats/conversions</li>
<li>SQL database adapters</li>
<li>Signal handling</li>
<li>JSON parsing &amp; encoding</li>
<li>Compression and decompression</li>
<li>Archive formats</li>
</ul>
<p>If you definitely don&rsquo;t want to wait for the language to go public, volunteering
in one of our focus areas is the best way to get involved. Get in touch! If not,
then the release will come around sooner than you think. We&rsquo;re depending on your
patience and trust.</p>
<hr>
<p><em>Update 2022-03-14</em></p>
<p>This blog post immediately generated detailed discussions on Hacker News and
Lobsters in which people posted the language&rsquo;s website and started tearing into
everything they don&rsquo;t like about it.</p>
<p>It&rsquo;s not done yet, and the current state of the language is not representative
of the project goals. This post was not a marketing stunt. It was a heartfelt
appeal to your better nature.</p>
<p>You know, I have a lot on my plate. All of it adds up to a lot of stress. I had
hoped that you would help relieve some of that stress by taking me seriously
when I explained my motivations and asked nicely for you to leave us be. I was
wrong.</p>]]></description><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Open Source is defined by the OSI&apos;s Open Source Definition</title><link>https://drewdevault.com/2022/03/01/Open-source-is-defined-by-the-OSD.html</link><description><![CDATA[<p>The <a href="https://opensource.org">Open Source Initiative</a> (OSI) publishes a document called the <a href="https://opensource.org/osd">Open Source
Definition</a> (OSD), which defines the term &ldquo;open source&rdquo;. However, there is a
small minority of viewpoints within the software community which wishes that
this were not so. The most concerning among them are those who wish open source
was more commercially favorable to <em>themselves</em>, and themselves alone, such as
companies like Elastic.</p>
<p>I disagree with this perspective, and I&rsquo;d like take a few minutes today to
explore several of the most common arguments in favor of this view, and explain
why I don&rsquo;t agree with them. One of the most frustrating complications in this
discussion is the context of <a href="https://en.wikipedia.org/wiki/Motivated_reasoning">motivated reasoning</a> (<a href="https://xkcd.com/2167">relevant xkcd</a>): most
people arguing in favor of an unorthodox definition of &ldquo;open source&rdquo; have a
vested interest in their alternative view.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> This makes it difficult to
presume good faith. For example, say someone wants to portray their software as
open source even if it prohibits commercial use by third parties, which would
normally disqualify it as such. Their interpretation serves to re-enforce their
commercialization plans, providing a direct financial incentive not only for
them to promote this definition of &ldquo;open source&rdquo;, but also for them to convince
you that their interpretation is valid.</p>
<p>I find this argument to be fundamentally dishonest. Let me illustrate this with
an analogy. Consider <a href="https://www.postgresql.org">PostgreSQL</a>. If I were to develop a new program called
Postgres which was similar to PostgreSQL, but different in some important ways
— let&rsquo;s say it&rsquo;s a proprietary, paid, hosted database service — that
would be problematic. The industry understands that &ldquo;Postgres&rdquo; refers to the
popular open source database engine, and by re-using their name I am diluting
the brand of Postgres. It can be inferred that my reasoning for this comes from
the desire to utilize their brand power for personal commercial gain. The terms
&ldquo;Postgres&rdquo; and &ldquo;PostgreSQL&rdquo; are trademarked, but even if they were not, this
approach would be dishonest and ethically wrong.</p>
<p>So too are the attempts to re-brand &ldquo;open source&rdquo; in a manner which is more
commercially exploitable for an individual person or organization equally
dishonest. The industry has an orthodox understanding of the meaning of &ldquo;open
source&rdquo;, i.e. that defined by the Open Source Initiative, which is generally
well-understood through the proliferation of software licenses which are
compatible with the OSD. When a project describes itself as &ldquo;open source&rdquo;,
this is a useful short-hand for understanding that the project adheres to a
specific set of values and offers a specific set of rights to its users and
contributors. When those rights are denied or limited, the OSD no longer applies
and thus neither does the term &ldquo;open source&rdquo;. To disregard this in the interests
of a financial incentive is dishonest, much like I would be dishonest for
selling &ldquo;cakes&rdquo; and fulfilling orders with used car tires with &ldquo;cake&rdquo; written on
them instead.</p>
<p>Critics of the OSD frequently point out that the OSI failed to register a
trademark on the term &ldquo;open source&rdquo;, but a trademark is not necessary for this
argument to hold. Language is defined by its usage, and the OSD is the popular
usage of the term &ldquo;open source&rdquo;, without relying on the trademark system. The
existence of a trademark on a specific term is not required for language which
misuses that term to be dishonest.</p>
<p>As language is defined by its usage, some may argue that they are as entitled as
anyone else to put forward an alternative usage. This is how language evolves.
They are not wrong, though I might suggest that their alternative usage of &ldquo;open
source&rdquo; requires a substantial leap in understanding which might not be as
agreeable to those who don&rsquo;t stand to benefit financially from that leap. Even
so, I argue that the mainstream definition of open source, that forwarded by the
OSI, is a <em>useful</em> term that is worth preserving in its current form. It is
useful to quickly understand the essential values and rights associated with a
piece of software as easily as stating that it is &ldquo;open source&rdquo;. I am not
prepared to accept a new definition which removes or reduces important rights in
service of your private financial interests.</p>
<p>The mainstream usage of &ldquo;open source&rdquo; under the OSD is also, in my opinion,
morally just. You may feel a special relationship with the projects you start
and invest into, and a sense of ownership with them, but they are not rightfully
yours once you receive outside contributions. The benefit of open source is in
the ability for the community to contribute directly to its improvements —
and once they do, the project is the sum of your efforts <em>and</em> the efforts of
the community. Thus, is it not right that the right to commercial exploitation
of the software is shared with that community? In the absence of a CLA,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>
contributors retain their copyright as well, and the software is legally jointly
owned by the sum of its contributors. And beyond copyright, the success of the
software is the sum of its code along with the community who learns about and
deploys it, offers each other support, writes blog posts and books about it,
sells consulting services for it, and together helps to popularize it. If you
wish to access all of these benefits of the open source model, you must play by
the open source rules.</p>
<p>It&rsquo;s not surprising that this would become a matter of contention among certain
groups within the industry. Open source is not just eating the world, but <em>has
eaten</em> the world. Almost all software developed today includes substantial open
source components. The open source brand is very strong, and there are many
interests who would like to leverage that brand without meeting its obligations.
But the constraints of the open source definition are <em>important</em>, played a
critical role in the ascension of open source in the software market, and worth
preserving into the future.</p>
<p>That&rsquo;s not to say that there isn&rsquo;t room for competing ideologies. If you feel
that the open source model does not work for you, then that&rsquo;s a valid opinion to
hold. I only ask that you market your alternative model honestly by using a
different name for it. Software for which the source code is available, but
which does not meet the requirements of the open source definition, is
rightfully called &ldquo;source available&rdquo;. If you want a sexier brand for it, make
one! &ldquo;Open core&rdquo; is also popular, though not exactly the same. Your movement has
as much right to success as the open source movement, but you need to earn that
success independently of the open source movement. Perhaps someday your
alternative model will supplant open source! I wish you the best of luck in this
endeavour.</p>
<p><em>A previous version of this blog post announced that I had submitted my
candidacy for the OSI board. Due to unforseen circumstances, I will be
postponing my candidacy until the next election. I apologise for the confusion.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Am I similarly biased? I also make my living from open source software,
but I take special care to place the community&rsquo;s interests above my own. I
advocate for open source and free software principles in all software,
including software I don&rsquo;t personally use or benefit from, and in my own
software I don&rsquo;t ask contributors to sign a CLA — keeping the copyrights
collectively held by the community at large, and limiting my access to
commercialization to the same rules of open source that are granted to all
contributors to and users of the software I use, write, and contribute to.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Such CLAs are also unjust in my view. Tools like the <a href="https://developercertificate.org">Developer
Certificate of Origin</a> are better for meeting the need to establish the
legitimate copyright of open source software without denying rights to its
community.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 1 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Plaid is an evil nightmare product from Security Hell</title><link>https://drewdevault.com/2022/02/19/Plaid-is-an-evil-nightmare-product.html</link><description><![CDATA[<p><a href="https://plaid.com">Plaid</a> is a business that has built a widget that can be embedded in any of
their customer&rsquo;s websites which allows their customers to configure integrations
with a list of third-party service providers. To facilitate this, Plaid pops up
a widget on their customer&rsquo;s domain which asks the end-user to <em>type in their
username and password</em> for the third-party service provider. If necessary, they
will ask for a 2FA code. This is done without the third party&rsquo;s permission,
presumably through a browser emulator and a provider-specific munging shim, and
collects the user&rsquo;s credentials on a domain which is operated by neither the
third party nor by Plaid.</p>
<p>The third-party service provider in question is the end-user&rsquo;s bank.</p>
<p>What the actual fuck!</p>
<p>Plaid has weighed on my mind for a while, though I might have just ignored them
if they hadn&rsquo;t been enjoying a sharp rise in adoption across the industry. For
decades, we have stressed the importance of double-checking the domain name and
the little TLS &ldquo;lock&rdquo; icon before entering your account details for anything. It
is perhaps the single most important piece of advice the digital security
community has tried to bring into the public conciousness. Plaid wants to throw
out all of those years of hard work and ask users to enter their freaking <em>bank
credentials</em> into a third-party form.</p>
<p>The raison d&rsquo;être for Plaid is that banks are infamously inflexible and slow on
the uptake for new technology. The status quo which Plaid aims to disrupt (ugh),
at least for US bank account holders, involves the user entering their routing
number and account number into a form. The service provider makes two small
(&lt;$1) deposits, and when they show up on the user&rsquo;s account statement a couple
of days later, the user confirms the amounts with the service provider, the
service provider withdraws the amounts again, and the integration is complete.
The purpose of this dance is to provide a sufficiently strong guarantee that the
account holder is same person who is configuring the integration.</p>
<p>This process is annoying. Fixing it would require banks to develop, deploy, and
standardize on better technology, and, well, good luck with that. And, honestly,
a company which set out with the goal of addressing this problem ethically would
have a laudable ambition. But even so, banks <em>are</em> modernizing around the world,
and tearing down the pillars of online security in exchange for a mild
convenience is ridiculous.</p>
<p>A convincing argument can be made that this platform violates the Computer Fraud
and Abuse Act. Last year, <a href="https://www.jurist.org/news/2021/08/plaid-agrees-to-pay-58-million-in-data-privacy-class-action-lawsuit/">they paid out $58M</a> in one of many lawsuits for
scraping and selling your bank data. Plaid thus joins the ranks of Uber, AirBnB,
and others like them in my reckoning as a &ldquo;move fast and break laws&rdquo; company.
This platform can only exist if they are either willfully malignant or grossly
incompetent. They&rsquo;ve built something that they know is wrong, and are hoping
that they can outrun the regulators.</p>
<p>This behavior is not acceptable. This company needs to be regulated into the
dirt and made an example of. Shame on you Plaid, and shame on everyone involved
in bringing this product to market. Shame on their B2B customers as well, who
cannot, such as they may like to, offload ethical due-diligence onto their
vendors. Please don&rsquo;t work for these start-ups. <a href="https://drewdevault.com/2020/05/05/We-are-complicit-in-our-employers-deeds.html">I hold employees complicit in
their employer&rsquo;s misbehavior</a>. You have options, please go make the world a
better place somewhere else.</p>]]></description><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Status update, February 2022</title><link>https://drewdevault.com/2022/02/15/Status-update-February-2022.html</link><description><![CDATA[<p>Hello once again! Another month of free software development goes by with lots
of progress in all respects.</p>
<p>I will open with some news about <a href="https://godocs.io">godocs.io</a>: version 1.0 of <a href="https://sr.ht/~sircmpwn/godocs.io">our fork of gddo</a>
has been released! Big thanks to Adnan Maolood for his work on this. I&rsquo;m very
pleased that, following our fork, we were not only able to provide continuity
for godoc.org, but also to simplify, refactor, and improve the underlying
software considerably. Check out <a href="https://adnano.co/2022/02/10/godocs.io-one-year-later/">Adnan&rsquo;s blog post</a> for more details.</p>
<p>In programming language news, we have had substantial progress in many respects.
One interesting project I&rsquo;ve started is a Redis protocol implementation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">redis</span><span class="o">::</span><span class="n">connect</span><span class="p">()</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">defer</span><span class="w"> </span><span class="n">redis</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="o">&amp;</span><span class="n">conn</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">fmt</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="s">&#34;=&gt; SET foo bar EX 10&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">redis</span><span class="o">::</span><span class="n">set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;foo&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;bar&#34;</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="o">:</span><span class="w"> </span><span class="n">redis</span><span class="o">::</span><span class="n">ex</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Another contributor has been working on expanding our graphics support,
including developing a backend for <a href="https://github.com/Dav1dde/glad">glad</a> to generate OpenGL bindings, and a
linear algebra library ala <a href="https://glm.g-truc.net/">glm</a> for stuff like vector and matrix manipulation.
Other new modules include a <a href="https://drewdevault.com/2022/01/28/Implementing-mime-in-xxxx.html">MIME database</a> and encoding::base32. Cryptography
progress continued with the introduction of XTS mode for AES, which is useful
for full disk encryption implementations, but has slowed while we develop bigint
support for future algorithms like RSA. I have also been rewriting the language
introduction tutorial with a greater emphasis on practical usage.</p>
<p>Before we move on from the language project: I need your help! I am looking for
someone to help develop terminal support. This is fairly straightforward, though
laborsome: it involves developing libraries in our language which provide the
equivalents of something like ncurses (or, better, <a href="http://www.leonerd.org.uk/code/libtickit/">libtickit</a>), as well as the
other end like <a href="http://www.leonerd.org.uk/code/libvterm/">libvterm</a> offers. Please <a href="mailto:sir@cmpwn.com">email me</a> if you want to help.</p>
<p>In SourceHut news, we have <a href="https://sourcehut.org/blog/2022-02-02-welcome-conrad/">hired</a> our third full-time engineer: Conrad
Hoffmann! Check out the blog post for details. The first major effort from
Adnan&rsquo;s NLnet-sponsored SourceHut work also landed yesterday, introducing
GraphQL-native webhooks to git.sr.ht alongside a slew of other improvements.
pages.sr.ht also saw some improvements that allow users to configure their
site&rsquo;s behavior more closely. Check out the &ldquo;What&rsquo;s cooking&rdquo; post later today
for all of the SourceHut news.</p>
<p>That&rsquo;s all for today, thanks for reading!</p>]]></description><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Framing accessibility in broader terms</title><link>https://drewdevault.com/2022/02/13/Framing-accessibility-in-broader-terms.html</link><description><![CDATA[<p>Upon hearing the term &ldquo;accessibility&rdquo;, many developers call to mind the HTML
<abbr title="Accessible Rich Internet Applications">ARIA</abbr> attributes and
little else. Those who have done some real accessibility work may think of the
<abbr title="Web Content Accessibility Guidelines">WCAG</abbr> guidelines. Some
FOSS developers<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> may think of <abbr title="Assistive Technology Service
Provider Interface">AT-SPI</abbr>. The typical user of these accessibility
features is, in the minds of many naive developers, a blind person. Perhaps for
those who have worked with WCAG, a slightly more sophisticated understanding of
the audience for accessibility tools may include users with a greater variety of
vision-related problems, motor impairments, or similar needs.</p>
<p>Many developers<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> frame accessibility in these terms, as a list of boxes to
tick off, or specific industry tools which, when used, magically create an
accessible product. This is not the case. In truth, a much broader understanding
of accessibility is required to create genuinely accessible software, and
because that understanding often raises uncomfortable questions about our basic
design assumptions, the industry&rsquo;s relationship with accessibility borders on
willful ignorance.</p>
<p>The typical developer&rsquo;s relationship with accessibility, if they have one at
all, is mainly concerned with making web pages work with screen readers. Even
considering this very narrow goal, most developers have an even narrower
understanding of the problem, and end up doing a piss-poor job of it. In
essence, the process of doing accessibility badly involves making a web page for
a sighted user, then using ARIA tags to hide cosmetic elements, adding alt tags,
and making other surface-level improvements for users of screen readers. If
they&rsquo;re serious, they may reach for the WCAG guidelines and do things like
considering contrast, font choices, and animations as well, but all framed
within the context of adding accessibility band-aids onto a UI designed for
sighted use.</p>
<p>A key insight here is that concerns like font choice and contrast involve making
changes which are apparent to &ldquo;typical&rdquo; users as well, but we&rsquo;ll expand on that
in a moment. Instead of designing for people like you and then patching it up
until it&rsquo;s semi-functional for people who are not like you, a wise developer
places themselves into the shoes of the person they&rsquo;re designing for and builds
something which speaks their design language. For visually impaired users, this
might mean laying out information in a more <em>logical</em> sense than in a <em>spatial</em>
sense.</p>
<p>Importantly, accessibility also means understanding that there are many other
kinds of users who have accessibility needs.</p>
<p>For instance, consider someone who cannot afford a computer as nice as the one
your developers are using. When your Electron <s>crapware</s> app eats up 8G of
RAM, it may be fine on your 32G developer workstation, but not so much for
someone who cannot afford anything other than a used $50 laptop from eBay.
Waking up the user&rsquo;s phone every 15 minutes to check in with your servers isn&rsquo;t
very nice for someone using a 5-year-old phone with a dying battery. Your huge
JavaScript bundle, unoptimized images, and always-on network requirements are
not accessible to users who are on low-bandwidth mobile connections or have a
data cap — you&rsquo;re essentially charging poorer users a tax to use your
website.</p>
<p>Localization is another kind of accessibility, and it requires more effort than
running your strings through gettext. Users in different locales speak not only
different natural languages, but different design languages. Users of
right-to-left languages like Arabic don&rsquo;t just reverse their strings but also
the entire layout of the page. Chinese and Japanese users are more familiar with
denser UIs than the typical Western user. And subtitles and transcripts are
important for Deaf users, but also useful for users who are consuming your
content in a second language.</p>
<p>Intuitiveness is another important detail. Not everyone understands what your
icons mean, for a start. They may not have the motor skill to hold their mouse
over the button and read the tool-tip, either, and might not know that they can
do that in the first place! Reliance on unfamiliar design language in general is
a kind of inaccessible design. Remember the &ldquo;save&rdquo; icon? 💾 Flashing banner ads
are also inaccessible for users with ADHD, and if we&rsquo;re being honest, for
everyone else, too. Software which is not responsive on many kinds of devices
(touch, mouse and keyboard, different screen sizes, aspect ratios, orientations)
is not accessible. Software which requires the latest and greatest technologies
to use (such as a modern web browser) is also not accessible.</p>
<p>Adequate answers to these problems are often expensive and uncomfortable, so no
one wants to think about them. Social-media-esque designs which are deliberately
addictive are not accessible, and also not moral. The mountain of gross
abstractions on which much software is built is cheap, but causes it to suck up
all the user&rsquo;s resources (RAM, CPU, battery, etc) on 10-year-old
devices.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> And ads are inaccessible <em>by design</em>, but good luck
explaining that to your boss.</p>
<p>It is a fool&rsquo;s errand to aim for perfect accessibility for all users, but we
need to understand that our design choices are excluding people from using our
tools. We need to design our software with accessibility in mind from the ground
up, and with a broad understanding of accessibility that acknowledges that
simple, intuitive software is the <em>foundation</em> of accessibility which works for
everyone, including you and me — and not retroactively adding half-assed
tools to fundamentally unusable software. I want UI designers to be thinking in
these terms, and less in terms of aesthetic properties, profitable designs, and
dark patterns. Design with empathy first.</p>
<p>As someone who works exclusively in free software, I have to acknowledge the
fact that free software is pretty pathetic when it comes to accessibility. In
our case, this does not generally come from the perverse incentives that cause
businesses to cut costs or even deliberately undermine accessibility for
profit,<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> but instead comes from laziness (or, more charitably, lack of free
time and enthusiasm), and generally from free software&rsquo;s struggles to build
software for people who are not like its authors. I think that we can change
this. We do not have the profit motive, and we can choose to take pride in
making better software for everyone. Let&rsquo;s do better.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Vanishingly few.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Including me, once upon a time.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Not to mention that the model of wasteful consumerism required to
keep up with modern software is destroying the planet.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Though I am saddened to admit that many free software developers, after
years of exposure to these dark patterns, will often unwittingly re-implement
them in free software themselves without understanding their sinister nature.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Free software licenses explained: MIT</title><link>https://drewdevault.com/2022/02/07/Free-software-licenses-MIT.html</link><description><![CDATA[<p>This is the first in a series of posts I intend to write explaining how various
free and open source software licenses work, and what that means for you as a
user or developer of that software. Today we&rsquo;ll look at the MIT license, also
sometimes referred to as the X11 or Expat license.</p>
<p>The MIT license is:</p>
<ul>
<li>Both <a href="https://www.gnu.org/philosophy/free-sw.en.html">free software</a> and <a href="https://opensource.org/osd">open source</a></li>
<li>Permissive (and thus non-copyleft and non-viral)</li>
</ul>
<p>This means that the license upholds the four essential freedoms of free software
(the right to run, copy, distribute, study, change and improve the software) and
all of the terms of the open source definition (largely the same). Further more,
it is classified on the permissive/copyleft spectrum as a permissive license,
meaning that it imposes relatively few obligations on the recipient of the
license.</p>
<p>The full text of the license is quite short, so let&rsquo;s read it together:</p>
<blockquote>
<p>The MIT License (MIT)</p>
<p>Copyright (c) &lt;year&gt; &lt;copyright holders&gt;</p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &ldquo;Software&rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED &ldquo;AS IS&rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p></blockquote>
<p>The first paragraph of the license enumerates the rights which you, as a
recipient of the software, are entitled to. It&rsquo;s this section which qualifies
the license as free and open source software (assuming the later sections don&rsquo;t
disqualify it). The key grants are the right to &ldquo;use&rdquo; the software (freedom 0),
to &ldquo;modify&rdquo; and &ldquo;merge&rdquo; it (freedom 1), and to &ldquo;distribute&rdquo; and &ldquo;sell&rdquo; copies
(freedoms 2 and 3), &ldquo;without restriction&rdquo;. We also get some bonus grants, like
the right to sublicense the software, so you could, for instance, incorporate it
into a work which uses a less permissive license like the GPL.</p>
<p>All of this is subject to the conditions of paragraph two, of which there is
only one: you must include the copyright notice and license text in any
substantial copies or derivatives of the software. Thus, the MIT license
requires <em>attribution</em>. This can be achieved by simply including the full
license text (copyright notice included) somewhere in your project. For a
proprietary product, this is commonly hidden away in a menu somewhere. For a
free software project, where the source code is distributed alongside the
product, I often include it as a comment in the relevant files. You can also add
your name or the name of your organization to the list of copyright holders when
contributing to MIT-licensed projects, at least in the absence of a CLA.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>The last paragraph sets the expectations for the recipient, and it is very
important. This <em>disclaimer of warranty</em> is ubiquitous in nearly all free and
open source software licenses. The software is provided &ldquo;as is&rdquo;, which is to
say, in whatever condition you found it in, for better or worse. There is no
expectation of warranty (that is to say, any support you receive is from the
goodwill of the authors and not from a contractual obligation), and there is no
guarantee of &ldquo;merchantability&rdquo; (that you can successfully sell it), fitness for
a particular purpose (that you can successfully use it to solve your problem),
or noninfringement (such as with respect to relevant patents). That last detail
may be of particular importance: the MIT license disclaims all liability for
patents that you might infringe upon by using the software. Other licenses often
address this case differently, such as Apache 2.0.</p>
<p>MIT is a good fit for projects which want to impose very few limitations on the
use or reuse of the software by others. However, the permissibility of the
license permits behaviors you might not like, such as creating a proprietary
commercial fork of the software and selling it to others without supporting
upstream. Note that the right to sell the software is an inalienable requirement
of the free software and open source definitions, but other licenses can level
the playing field a bit with strategies like copyleft and virality, on the other
end of the permissibility spectrum. I&rsquo;ll cover some relevant licenses in the
future.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You should not sign a CLA which transfers your copyright to the publisher.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 7 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Implementing a MIME database in XXXX</title><link>https://drewdevault.com/2022/01/28/Implementing-mime-in-xxxx.html</link><description><![CDATA[<p><em>This is a (redacted) post from the internal blog of a new systems
programming language we&rsquo;re developing. The project is being kept under wraps
until we&rsquo;re done with it, so for this post I&rsquo;ll be calling it <span
class="redacted">XXXX</span>. If you are interested in participating, <a
href="mailto:sir@cmpwn.com">send me an email</a> with some details about your
background and I&rsquo;ll get back to you.</em></p>
<style>
.redacted {
  color: black;
  background: black;
}
</style>
<p>Recently, I have been working on implementing a parser for media types (commonly
called MIME types) and a database which maps media types to file extensions and
vice-versa. I thought this would be an interesting module to blog about, given
that it&rsquo;s only about 250 lines of code, does something useful and interesting,
and demonstrates a few interesting <span class="redacted">xxxx</span> concepts.</p>
<p>The format for media types is more-or-less defined by <a href="https://datatracker.ietf.org/doc/html/rfc2045">RFC 2045</a>, specifically
<a href="https://datatracker.ietf.org/doc/html/rfc2045#section-5.1">section 5.1</a>. The specification is not great. The grammar shown here is copied
and pasted from parts of larger grammars in older RFCs, RFCs which are equally
poorly defined. For example, the quoted-string nonterminal is never defined
here, but instead comes from RFC 822, which defines it but also states that it
can be &ldquo;folded&rdquo;, which technically makes the following a valid Media Type:</p>
<pre tabindex="0"><code>text/plain;charset=&#34;hello
 world&#34;
</code></pre><p>Or so I would presume, but the qtext terminal &ldquo;cannot include CR&rdquo;, which is the
mechanism by which folding is performed in the first place, and&hellip; bleh. Let&rsquo;s
just implement a &ldquo;reasonable subset&rdquo; of the spec instead and side-step the whole
folding issue.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> This post will first cover parsing media types, then address
our second goal: providing a database which maps media types to file extensions
and vice versa.</p>
<h2 id="parsing-media-types">Parsing Media Types</h2>
<p>So, here&rsquo;s what we&rsquo;re going to implement today: we want to parse the following
string:</p>
<pre tabindex="0"><code>text/plain; charset=utf-8; foo=&#34;bar baz&#34;
</code></pre><p>The code for that I came up with for is as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Parses a Media Type, returning a tuple of the content type (e.g.
</span></span></span><span class="line"><span class="cl"><span class="c1">// &#34;text/plain&#34;) and a parameter parser object, or [[errors::invalid]] if the
</span></span></span><span class="line"><span class="cl"><span class="c1">// input cannot be parsed.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// To enumerate the Media Type parameter list, pass the type_params object into
</span></span></span><span class="line"><span class="cl"><span class="c1">// [[next_param]]. If you do not need the parameter list, you can safely discard
</span></span></span><span class="line"><span class="cl"><span class="c1">// the object. Note that any format errors following the &#34;;&#34; token will not
</span></span></span><span class="line"><span class="cl"><span class="c1">// cause [[errors::invalid]] to be returned unless [[next_param]] is used to
</span></span></span><span class="line"><span class="cl"><span class="c1">// enumerate all of the parameters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="n">in</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">type_params</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">cut</span><span class="p">(</span><span class="n">in</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;;&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">mtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">items</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">cut</span><span class="p">(</span><span class="n">mtype</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;/&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">typevalid</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">typevalid</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">mtype</span><span class="p">,</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">tokenize</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;;&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This function accepts a string as input, then returns a tagged union which
contains either a tuple of <code>(str, type_params)</code>, or a syntax error.</p>
<p>I designed this with particular attention to the memory management semantics.
<span class="redacted">xxxx</span> uses manual memory management, and if possible it&rsquo;s desirable to avoid
allocating any additional memory so that the user of our APIs remains in control
of the memory semantics. The return value is a sub-string borrowed from the
&ldquo;text/plain&rdquo; part, as well as a tokenizer which is prepared to split the
remainder of the string along the &ldquo;;&rdquo; tokens.</p>
<p>Inspiration for strings::cut comes from <a href="https://github.com/golang/go/issues/46336">Go</a>:</p>
<div class="highlight"><pre class="chroma"><code class="language-hare" data-lang="hare"><span class="err">$</span> <span class="n"><span class="redacted">xxxx</span>doc</span> <span class="n">strings</span><span class="o">::</span><span class="n">cut</span>
<span class="c1">// Returns a string "cut" along the first instance of a delimiter, returning
</span><span class="c1">// everything up to the delimiter, and everything after the delimiter, in a
</span><span class="c1">// tuple.
</span><span class="c1">//
</span><span class="c1">//      strings::cut("hello=world=foobar", "=") // ("hello", "world=foobar")
</span><span class="c1">//      strings::cut("hello world", "=")        // ("hello world", "")
</span><span class="c1">//
</span><span class="c1">// The return value is borrowed from the 'in' parameter.
</span><span class="c1"></span><span class="k">fn</span> <span class="n">cut</span><span class="p">(</span><span class="n">in</span><span class="o">:</span> <span class="kt">str</span><span class="p">,</span> <span class="n">delim</span><span class="o">:</span> <span class="kt">str</span><span class="p">)</span> <span class="p">(</span><span class="kt">str</span><span class="p">,</span> <span class="kt">str</span><span class="p">);</span>
</code></pre></div>
<p>And strings::tokenize works like so:</p>
<div class="highlight"><pre class="chroma"><code class="language-hare" data-lang="hare"><span class="err">$</span> <span class="n"><span class="redacted">xxxx</span>doc</span> <span class="n">strings</span><span class="o">::</span><span class="n">tokenize</span>
<span class="c1">// Returns a tokenizer which yields sub-strings tokenized by a delimiter.
</span><span class="c1">//
</span><span class="c1">//      let tok = strings::tokenize("hello, my name is drew", " ");
</span><span class="c1">//      assert(strings::next_token(tok) == "hello,");
</span><span class="c1">//      assert(strings::next_token(tok) == "my");
</span><span class="c1">//      assert(strings::next_token(tok) == "name");
</span><span class="c1">//      assert(strings::remaining_tokens(tok) == "is drew");
</span><span class="c1"></span><span class="k">fn</span> <span class="n">tokenize</span><span class="p">(</span><span class="n">s</span><span class="o">:</span> <span class="kt">str</span><span class="p">,</span> <span class="n">delim</span><span class="o">:</span> <span class="kt">str</span><span class="p">)</span> <span class="n">tokenizer</span><span class="p">;</span>
</code></pre></div>
<p>The RFC limits the acceptable characters for the media type and subtype, which
we test with the typevalid function.</p>
<p>The user of this module often only cares about the media type and not its type
parameters, so the tokenizer can be safely abandoned on the stack to get cleaned
up when the stack frame exits if they don&rsquo;t care about the rest.</p>
<p>This is enough to write a little test:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="nd">@test</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">parse</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;text/plain&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;text/plain&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;image/png&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;image/png&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;application/svg+xml; charset=utf-8; foo=</span><span class="se">\&#34;</span><span class="s">bar baz</span><span class="se">\&#34;</span><span class="s">&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;application/svg+xml&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><pre>$ <span class="redacted">xxxx</span> test mime::parse
mime::parse..................................... OK

1 passed; 0 failed; 1 tests completed in 0.10s</pre>
<p>To handle the type parameters in the third case, we add this function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Returns the next parameter as a (key, value) tuple from a [[type_params]]
</span></span></span><span class="line"><span class="cl"><span class="c1">// object that was prepared via [[parse]], void if there are no remaining
</span></span></span><span class="line"><span class="cl"><span class="c1">// parameters, and [[errors::invalid]] if a syntax error was encountered.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">next_param</span><span class="p">(</span><span class="n">in</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">type_params</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">next_token</span><span class="p">(</span><span class="n">in</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">s</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="c1">// empty parameter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="n">s</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">cut</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;=&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// The RFC does not permit whitespace here, but whitespace is very
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// common in the wild. ¯\_(ツ)_/¯
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">items</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">trim</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">trim</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">hasprefix</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;</span><span class="se">\&#34;</span><span class="s">&#34;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">quoted</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">items</span><span class="p">.</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This returns a (key, value) tuple and advances to the next parameter, or returns
void if there are no further parameters (or, if necessary, an error). This is
pretty straightforward: the tokenizer prepared by parse is splitting the string
on <code>;</code> tokens, so we first fetch the next token. We then use strings::cut again
to split it over the <code>=</code> token, and after a quick trim to fix another RFC
oversight, we can return it to the caller. Unless it&rsquo;s using this pesky
quoted-string terminal, which is where our implementation starts to show its
weaknesses:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">quoted</span><span class="p">(</span><span class="n">in</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">str</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// We have only a basic implementation of quoted-string. It has a couple
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// of problems:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// 1. The RFC does not define it very well
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// 2. The parts of the RFC which are ill-defined are rarely used
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// 3. Implementing quoted-pair would require allocating a new string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// This implementation should handle most Media Types seen in practice
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// unless they&#39;re doing something weird and ill-advised with them.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">in</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">trim</span><span class="p">(</span><span class="n">in</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;&#34;&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">contains</span><span class="p">(</span><span class="n">in</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;</span><span class="se">\\</span><span class="s">&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="o">||</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">contains</span><span class="p">(</span><span class="n">in</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;</span><span class="se">\r</span><span class="s">&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="o">||</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">contains</span><span class="p">(</span><span class="n">in</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">in</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>I think this implementation speaks for itself. It could be a bit faster if we
didn&rsquo;t do 3 × O(n) strings::contains calls, but someone will send a patch
if they care. The completed test for this is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="nd">@test</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">parse</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;text/plain&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;text/plain&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;image/png&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;image/png&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;application/svg+xml; charset=utf-8; foo=</span><span class="se">\&#34;</span><span class="s">bar baz</span><span class="se">\&#34;</span><span class="s">&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;application/svg+xml&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">res</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">param</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">next_param</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">)</span><span class="o">!</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="p">(</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="kt">str</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">param</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;charset&#34;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">param</span><span class="p">.</span><span class="mi">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;utf-8&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">param</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">next_param</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">)</span><span class="o">!</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="p">(</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="kt">str</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">param</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;foo&#34;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">param</span><span class="p">.</span><span class="mi">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;bar baz&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">next_param</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">)</span><span class="w"> </span><span class="o">is</span><span class="w"> </span><span class="kt">void</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;hi&#34;</span><span class="p">)</span><span class="w"> </span><span class="o">is</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;text/ spaces &#34;</span><span class="p">)</span><span class="w"> </span><span class="o">is</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;text/@&#34;</span><span class="p">)</span><span class="w"> </span><span class="o">is</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parse</span><span class="p">(</span><span class="s">&#34;text/plain;charset&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;text/plain&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">next_param</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">is</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">invalid</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><h2 id="the-media-type-database">The Media Type database</h2>
<p>The second part of this module is the Media Type database. This comes in two
parts:</p>
<ol>
<li>An internal database which is populated by <span class="redacted">xxxx</span> modules. For example, an
image::png module might register the &ldquo;image/png&rdquo; mimetype with the internal
MIME database, similar to protocol registration for net::dial.</li>
<li>A system-provided database, usually via /etc/mime.types, which is more
comprehensive, but may not be available at runtime.</li>
</ol>
<p>I plan on doing the second part later on, so for now we&rsquo;ll just focus on the
first; most of the interesting bits are there anyway.</p>
<p>Again, special consideration is given to memory management here. The essence of
a good <span class="redacted">xxxx</span> program or API design can be ascertained from how well it handles
memory management. As such, I have set aside separate lists to handle statically
allocated MIME info (such as those provided by image::png et al) versus the
forthcoming dynamically-allocated system database.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// A pair of a Media Type and a list of file extensions associated with it. The
</span></span></span><span class="line"><span class="cl"><span class="c1">// extension list does not include the leading &#39;.&#39; character.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">mimetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">mime</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">exts</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// List of media types with statically allocated fields (though the list itself
</span></span></span><span class="line"><span class="cl"><span class="c1">// is dynamically allocated).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">let</span><span class="w"> </span><span class="n">static_db</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">mimetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// List of media types with heap-allocated fields, used when loading mime types
</span></span></span><span class="line"><span class="cl"><span class="c1">// from the system database.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">let</span><span class="w"> </span><span class="n">heap_db</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">mimetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">builtins</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="k">_</span><span class="p">]</span><span class="n">mimetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">mimetype</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">mime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;text/plain&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">exts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="s">&#34;txt&#34;</span><span class="p">],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">mimetype</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">mime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;text/x-xxxx&#34;</span><span class="p">,</span><span class="w"> </span><span class="c1">// redacted for public blog post
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="n">exts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="s">&#34;xx&#34;</span><span class="p">],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@init</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">init</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">register</span><span class="p">(</span><span class="n">builtins</span><span class="o">...</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@fini</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">fini</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">heap_db</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">free</span><span class="p">(</span><span class="n">heap_db</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mime</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">strings</span><span class="o">::</span><span class="n">freeall</span><span class="p">(</span><span class="n">heap_db</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">exts</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">free</span><span class="p">(</span><span class="n">heap_db</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">free</span><span class="p">(</span><span class="n">static_db</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The register function will be used from @init functions like this one to
register media types with the internal database. This code has minimal
allocations for the internal database, but we do actually do some allocating
here to store the &ldquo;static_db&rdquo; slice. In theory we could eliminate this by
statically provisioning a small number of slots to store the internal database
in, but for this use-case the trade-off makes sense. There are use-cases where
the trade-off does not make as much sense, however. For example, here&rsquo;s how the
command line arguments are stored for your program in the &ldquo;os&rdquo; module:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// The command line arguments provided to the program. By convention, the first
</span></span></span><span class="line"><span class="cl"><span class="c1">// member is usually the name of the program.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">let</span><span class="w"> </span><span class="n">args</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Statically allocate arg strings if there are few enough arguments, saves a
</span></span></span><span class="line"><span class="cl"><span class="c1">// syscall if we don&#39;t need it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">let</span><span class="w"> </span><span class="n">args_static</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="kt">str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="s">&#34;&#34;</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@init</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">init_environ</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">argc</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">args_static</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">args</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">args_static</span><span class="p">[..</span><span class="n">rt</span><span class="o">::</span><span class="n">argc</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">argc</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">fromc</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">args</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">([],</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">argc</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">argc</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">append</span><span class="p">(</span><span class="n">args</span><span class="p">,</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">fromc</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@fini</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">fini_environ</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">argc</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">args_static</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">free</span><span class="p">(</span><span class="n">args</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>A similar approach is also used on yyp&rsquo;s RISC-V kernel for <a href="https://paste.sr.ht/~sircmpwn/acaa1e61e6bcb3e22e8b4bce7f233dcd844565eb">storing serial
devices</a> without any runtime memory allocations.</p>
<p>The internal database is likely to be small, but the system database is likely
to have a lot of media types and file extensions registered, so it makes sense
to build out an efficient means of accessing them. For this purpose I have
implemented a simple hash map. <span class="redacted">xxxx</span> does not have a built-in map construct, nor
generics. The design constraints of <span class="redacted">xxxx</span> are closer to C than to anything else,
and as such, the trade-offs for first-class maps are similar to C, which is to
say that they don&rsquo;t make sense with our design. However, this use-case does not
call for much sophistication, so a simple map will suffice.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">hash</span><span class="o">::</span><span class="n">fnv</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">MIME_BUCKETS</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">256</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Hash tables for efficient database lookup by mimetype or extension
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">let</span><span class="w"> </span><span class="n">mimetable</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">MIME_BUCKETS</span><span class="p">][]</span><span class="o">*</span><span class="n">mimetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[[]</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">exttable</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">MIME_BUCKETS</span><span class="p">][]</span><span class="o">*</span><span class="n">mimetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[[]</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Registers a Media Type and its extensions in the internal MIME database. This
</span></span></span><span class="line"><span class="cl"><span class="c1">// function is designed to be used by @init functions for modules which
</span></span></span><span class="line"><span class="cl"><span class="c1">// implement new Media Types.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">register</span><span class="p">(</span><span class="n">mime</span><span class="o">:</span><span class="w"> </span><span class="n">mimetype</span><span class="o">...</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">static_db</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">append</span><span class="p">(</span><span class="n">static_db</span><span class="p">,</span><span class="w"> </span><span class="n">mime</span><span class="o">...</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">static_db</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">static_db</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fnv</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">mime</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">mimetable</span><span class="p">[</span><span class="n">hash</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">mimetable</span><span class="p">)];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">append</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span><span class="w"> </span><span class="n">item</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">exts</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">const</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fnv</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">exts</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">let</span><span class="w"> </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">exttable</span><span class="p">[</span><span class="n">hash</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">exttable</span><span class="p">)];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">append</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span><span class="w"> </span><span class="n">item</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>A fixed-length array of slices is a common approach to hash tables in <span
class="redacted">xxxx</span>. It&rsquo;s
not a great design for hash tables whose size is not reasonably predictable in
advance or which need to be frequently resized and rehashed, but it is pretty
easy to implement and provides sufficient performance for use-cases like this. A
re-sizable hash table, or tables using an alternate hash function, or the use of
linked lists instead of slices, and so on — all of this is possible if the
use-case calls for it, but must be written by hand.</p>
<p>Finally, we implement the look-up functions, which are very simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Looks up a Media Type based on the mime type string, returning null if
</span></span></span><span class="line"><span class="cl"><span class="c1">// unknown.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">lookup_mime</span><span class="p">(</span><span class="n">mime</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">mimetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fnv</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">mime</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">mimetable</span><span class="p">[</span><span class="n">hash</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">mimetable</span><span class="p">)];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">bucket</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">mime</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">mime</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">item</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="kt">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Looks up a Media Type based on a file extension, with or without the leading
</span></span></span><span class="line"><span class="cl"><span class="c1">// &#39;.&#39; character, returning null if unknown.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">lookup_ext</span><span class="p">(</span><span class="n">ext</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">mimetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">ltrim</span><span class="p">(</span><span class="n">ext</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;.&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fnv</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">ext</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">exttable</span><span class="p">[</span><span class="n">hash</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">exttable</span><span class="p">)];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">bucket</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">exts</span><span class="p">);</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">exts</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ext</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">return</span><span class="w"> </span><span class="n">item</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="kt">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>For the sake of completeness, here are the tests:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="nd">@test</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">lookup_mime</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">lookup_mime</span><span class="p">(</span><span class="s">&#34;foo/bar&#34;</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lookup_mime</span><span class="p">(</span><span class="s">&#34;text/plain&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">mimetype</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">mime</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;text/plain&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">exts</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">exts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;txt&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lookup_mime</span><span class="p">(</span><span class="s">&#34;text/x-xxxx&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">mimetype</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">mime</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;text/x-xxxx&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">exts</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">exts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;xx&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@test</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">lookup_ext</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">lookup_ext</span><span class="p">(</span><span class="s">&#34;foo&#34;</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">lookup_ext</span><span class="p">(</span><span class="s">&#34;.foo&#34;</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lookup_ext</span><span class="p">(</span><span class="s">&#34;txt&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">mimetype</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">mime</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;text/plain&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">exts</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">exts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;txt&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lookup_ext</span><span class="p">(</span><span class="s">&#34;.txt&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">mimetype</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">mime</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;text/plain&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lookup_ext</span><span class="p">(</span><span class="s">&#34;xx&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">mimetype</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">mime</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;text/x-xxxx&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">exts</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">exts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;xx&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>There you have it! I will later implement some code which parses /etc/mime.types
in @init and fills up the heap_db slice, and this lookup code should work with
it without any additional changes.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Any time we implement a &ldquo;reasonable subset&rdquo; of a specification rather than the whole specification, I add the module to the list of modules likely to be moved out of the standard library and into a standalone module at some point prior to release. Another module on this list is our XML parser.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Pine64 should re-evaluate their community priorities</title><link>https://drewdevault.com/2022/01/18/Pine64s-weird-priorities.html</link><description><![CDATA[<p>Pine64 has a really interesting idea: make cheap hardware with low margins, get
it into the hands of the FOSS community, and let them come up with the software.
No one has ever done this before, at least not on this scale, and it&rsquo;s a really
neat idea! Pine64 is doing a lot to support the FOSS community bringing up its
hardware, but I&rsquo;m afraid that I have to ask them to do a bit more.</p>
<p>There&rsquo;s a handful of different roles that need to be filled in on the software
side of things to get this ecosystem going. Ordered from most to least
important, these are (broadly speaking) as follows:</p>
<ol>
<li>Implementing and upstreaming kernel drivers, u-Boot support, etc</li>
<li>Building out a robust telephony stack for Linux</li>
<li>Building a mobile user interface for Linux</li>
<li>Maintaining distros that tie it all together</li>
</ol>
<p>Again, this is ordered from most to least important, but in practice, the
ecosystem prioritizes them in reverse. Pine64 themselves contribute no labor to
any of these focus areas, and though they provide some funding, they provide it
from the bottom of this list up, putting most of it into distros and very little
into the kernel, bootloaders, or telephony. This is nice, but&hellip; why fund the
distros at all? Distros are not the ones getting results in these focus areas.
Their job is to <em>distribute</em> the results of community efforts.</p>
<p>Don&rsquo;t get me wrong, the distros do an important job and they ought to get the
funding they need, but this is just creating fragmentation in the ecosystem. As
one example, we could be installing the Linux distribution of our choice on the
Pinebook Pro using a standard aarch64 UEFI ISO installer, just like we do for
any other laptop, if someone spent a couple of weeks upstreaming the last 6
patches to mainline Linux and put together a suitable u-Boot payload to flash on
the SPI flash chip. But, instead of one working solution for everyone, we have
20+ Linux distros publishing Pine64-specific images to flash to microSD cards.</p>
<p>The favorites, which is apparently Manjaro,<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> compete for funding and then
spend it each according to their own discretion working on the same problems. If
we instead spent it on the focus areas directly, then Manjaro and all of the
other distros would benefit from this work for free. The telephony stack is
equally important, and equally sharable between distros, but isn&rsquo;t really
getting any dedicated funding. You can&rsquo;t have a phone without telephony. The
mobile UI is also important, but it&rsquo;s the easiest part to build, and a working
phone with a shitty UI is better than a phone with a pretty UI that doesn&rsquo;t
work.</p>
<p>The work is getting done, to be fair, but it&rsquo;s getting done very slowly. Many of
the distros targetting Linux for mobile devices have people working on the
important focus areas, but as a matter of necessity: to accomplish their goals
when no one else is working on these problems, they had to become experts and
divide their limited volunteer time between distro maintenance and software
development. As a result, they&rsquo;ve become experts with specific allegiances and
incentives, and though there&rsquo;s some patch sharing and collaboration between
distros, it&rsquo;s done informally across a dozen independent organizational
structures with varying degrees of collaboration based on a model which was
stapled onto an inherently backwards system of priorities. In a system with
limited resources (funding, developer time, etc), these inefficiencies can be
very wasteful.</p>
<p>After I got my hands on the PineNote hardware, I quickly understood that it was
likely going to suffer even moreso from this problem. A course change is called
for if Pine64 wants to maximize their odds of success with their current and
future product lines. I think that the best strategic decision would be to hire
just one full-time software developer to specifically focus on development and
upstreaming in Linux mainline, u-Boot mainline, ModemManager, etc, and on
writing docs, collaborating with other projects, and so on. This person should
be figuring out how to get generalized software solutions to unlock the
potential of the hardware, focusing on getting it to the right upstreams, and
distributing these solutions to the whole ecosystem.</p>
<p>It&rsquo;s <em>awesome</em> that Pine64 is willing to financially support the FOSS community
around their devices, and as the ones actually selling the devices, they&rsquo;re the
only entity in this equation with the budget to actually do so. Pine64 is doing
some really amazing work! However, a better financial strategy is called for
here. Give it some thought, guys.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I will go on the record as saying that Manjaro Linux is a bad Linux
distribution and a bad place to send this money. They have a history of
internal corruption, a record of questionable spending, and a plethora of
technical issues and problematic behavior in the FOSS ecosystem. What limited
budget there is to go around was wasted in their hands.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Status update, January 2022</title><link>https://drewdevault.com/2022/01/17/Status-update-January-2022.html</link><description><![CDATA[<p>Happy New Year! I had a lovely time in Amsterdam. No one had prepared me for the
(apparently infamous) fireworks culture of the Netherlands. I thought it was
really cool.</p>
<p>Our programming language continues to improve apace. Our cryptography suite now
includes Argon2, Salsa20/XSalsa20, ChaCha20/XChaCha20, and Poly1305, and based
on these functions we have added libsodium-style high-level cryptographic
utilities for AEAD and key derivation, with stream encryption, message signing
and verification, and key exchange coming soon. We have also laid out the
priorities for future crypto work towards supporting TLS, and on the way we
expect to have ed25519/x25519 and Diffie-Hellman added soon. Perhaps enough to
implement an SSH client?</p>
<p>I also implemented an efficient path manipulation module for the standard
library (something I would really have liked to have in C!), and progress
continues on date/time support. We also have a new MIME module (just for Media
Types, not all of MIME) and I expect a patch implementing net::uri to arrive in
my inbox soon. I also finished up cmsg support (for sendmsg and recvmsg), which
is necessary for the Wayland implementation I&rsquo;m working on (and was a major pain
in the ass). I spent some time working with another collaborator, who is
developing a RISC-V kernel in our language, implementing a serial driver for the
SiFive UART, plus improving the device tree loader and UEFI support.</p>
<p>One of the standard library contributors also wrote a side-project to implement
<a href="https://raytracing.github.io/">Ray Tracing in One Weekend</a> in our language:</p>
<p><img src="https://git.sr.ht/~turminal/raytracing/blob/master/example.png" alt="A ray-traced image of many small, colorful balls with three large spheres, two
of which have a mirrored surface that reflects the other
balls."></p>
<p>In other words, language development has been very busy in the past few weeks.
Another note: I have prepared <a href="https://fosdem.org/2022/schedule/event/lg_qbe/">a lightning talk</a> for FOSDEM which talks about
the backend that we&rsquo;re using: <a href="https://c9x.me/compile">qbe</a>. Check it out!</p>
<p>In SourceHut news, we have brought on a new full-time contributor, Adnan
Maolood, thanks to <a href="https://sourcehut.org/blog/2022-01-10-nlnet-graphql-funding/">a generous grant from NLNet</a>. We also have another
full-time software engineer starting on February 1st (on our own dime), so I&rsquo;m
very much looking forward to that. Adnan will be helping us with the GraphQL
work, and the new engineer will be working similarly to Simon and I on FOSS
projects generally (and, hopefully, with GraphQL et al as well). Speaking of
GraphQL, I&rsquo;m putting the finishing touches on the todo.sr.ht writable API this
week: legacy webhooks. These are nearly done, and following this we need to do
the security review and acceptance testing, then we can ship. Adnan has been
hard at work on adding GraphQL-native webhooks to git.sr.ht, which should also
ship pretty soon.</p>
<p>That&rsquo;s all for today. Thanks for reading! I&rsquo;ll see you again in another month.</p>]]></description><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate></item><item><title>The RISC-V experience</title><link>https://drewdevault.com/2022/01/15/2022-01-15-The-RISC-V-experience.html</link><description><![CDATA[<p>I&rsquo;m writing to you from a Sway session on Alpine Linux, which is to say from a
setup quite similar to the one I usually write blog posts on, save for one
important factor: a RISC-V CPU.</p>
<p>I&rsquo;ll state upfront that what I&rsquo;m using is not a very practical system. What I&rsquo;m
going to describe is all of the impractical hacks and workarounds I have used to
build a &ldquo;useful&rdquo; RISC-V system on which I can mostly conduct my usual work. It
has been an interesting exercise, and it bodes well for the future of RISC-V,
but for all practical purposes the promise of RISC-V still lives in tomorrow,
not today.</p>
<p>In <a href="https://drewdevault.com/2018/12/20/Porting-Alpine-Linux-to-RISC-V.html">December of 2018</a>, I wrote an article about the process of bootstrapping
Alpine Linux for RISC-V on the HiFive Unleashed board. This board was
essentially a crappy SoC built around a RISC-V CPU: a microSD slot, GPIO pins,
an ethernet port, a little bit of RAM, and the CPU itself, in a custom
form-factor.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Today I&rsquo;m writing this on the HiFive Unmatched, which
is a big step up: it&rsquo;s a Mini-ITX form factor (that is, it fits in a
standardized PC case) with 16G of RAM, and the ethernet, microSD, and GPIO ports
are complemented with a very useful set of additional I/O via two M.2 slots, a
PCIe slot, and a USB 3 controller, plus an SPI flash chip. I have an NVMe drive
with my root filesystem on it and an AMD Radeon Pro WX 2100 GPU installed. In
form, it essentially functions like a standard PC workstation.</p>
<p>I have been gradually working on bringing this system up to the standards that I
expect from a useful PC, namely that it can run upstream Alpine Linux with
minimal fuss. This was not really possible on the previous SiFive hardware, but
I have got pretty close on this machine. I had to go to some lengths to get
u-Boot to provide a working UEFI environment,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and I had to patch grub as
well, but the result is that I can write a standard Alpine ISO to a USB stick,
then boot it and install Alpine onto an NVMe normally, which then boots itself
with UEFI with no further fiddling. I interact with it through three means: the
on-board UART via a micro-USB cable (necessary to interact with u-Boot, grub, or
the early Linux environment), or ethernet (once sshd is up), or with keyboard,
mouse, and displays connected to the GPU.</p>
<p>Another of the standards I expect is that everything runs with upstream free
software, perhaps with a few patches, but not from a downstream or proprietary
tree. I&rsquo;m pleased to report that I am running an unpatched mainline Linux
5.15.13 build. I am running mainline u-Boot with one patch to correct the name
of a device tree node to match a change in Linux upstream. I have a patched grub
build, but the relevant patches have been proposed for grub upstream. I have a
spattering of patches applied to a small handful of userspace programs and
libraries, but all of them only call for one or two patches applied to the
upstream trees. Overall, this is quite good for something this bleeding edge
— my Pinephone build is worse.</p>
<p>I have enclosed the system in a mini-ITX case and set it down on top of my usual
x86_64 workstation, then moved a few of my peripherals and displays over to it
to use it as my workstation for the day.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> I was able to
successfully set up almost all of my standard workstation loadout on it, with
some notable exceptions. Firefox is the most painful omission —
bootstrapping Rust is an utter nightmare<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> and no one has managed to
do it for Alpine Linux riscv64 yet (despite many attempts and lots of hours
wasted), so anything which depends on it does not work. librsvg is problematic
for the same reason; I had to patch a number of things to be configured without
it. For web browsing I am using <a href="https://sr.ht/~sircmpwn/visurf">visurf</a>, which is based on Netsurf, and which
works for many of the lightweight websites that I generally prefer to use, but
not for most others.  For instance, I was unable to address an issue that was
raised on GitLab today because I cannot render GitLab properly on this browser.
SourceHut mostly works, of course, but it&rsquo;s not exactly pleasant — I still
haven&rsquo;t found time to improve the SourceHut UI for NetSurf.</p>
<a href="https://redacted.moe/f/6ad3d811.jpg">
  <img src="https://redacted.moe/f/6ad3d811.jpg" alt="A picture of two computers stacked on on top of the other." style="max-width: 70%" />
</a>
<div class="text-center"><small>The lower computer is my typical x86_64
workstation, and the upper computer is the RISC-V machine. The USB ports on the
side are not connected to the board, so I pulled a USB extension cord around
from the back. This is mainly useful for rapid iteration when working on a
RISC-V kernel that a colleague has been developing using our new programming
language. I can probably get netboot working later, but this works for
now.</small></div>
<p>Complicating things is the fact that my ordinary workstation uses two 4K
displays. For example, my terminal emulator of choice is <a href="https://codeberg.org/dnkl/foot">foot</a>, but it uses CPU
rendering and the 4K window is noticeably sluggish. Alacritty, which renders on
the GPU, would probably fare better — but Rust spoils this again. I
settled for <a href="https://st.suckless.org/">st</a>, which has acceptable performance (perhaps in no small part
thanks to being upscaled from 1080p on this setup). visurf also renders on the
CPU and is annoyingly slow; as a workaround I have taken to resizing the window
to be much smaller while actively navigating and then scaling it back up to full
size to read the final page.</p>
<p>CPU-bound programs can be a struggle. However, this system has a consumer
workstation GPU plugged into its PCIe slot. Any time I can get the GPU to pick
up the slack, it works surprisingly effectively. For example, I watched Dune
(2021) today in 4K on this machine — buttery smooth, stunningly beautiful
4K playback — a feat that my Pinebook Pro couldn&rsquo;t dream of. The GPU has a
hardware HEVC decoder, and mpv and Sway can use dmabufs such that the GPU
decodes and displays each frame without it ever having to touch the CPU, and
meanwhile the NVMe is fast enough to feed it data at a suitable bandwidth. A
carefully configured obs-studio is also able to record my 4K display at 30 FPS
and encode it on the GPU with VAAPI with no lag, something that I can&rsquo;t even do
on-CPU on x86_64 very reliably. The board does not provide onboard audio, but
being an audiophile I have a USB DAC available that works just fine.</p>
<p>I was able to play Armagetron Advanced at 120+ FPS in 4K, but that&rsquo;s not exactly
a demanding game. I also played SuperTuxKart, a more demanding game, at 1080p
with all of the settings maxed out at a stable 30 FPS. I cannot test any
commercial games, since I&rsquo;m reasonably certain that there are no proprietary
games that distribute a riscv64 build for Linux. If Ethan Lee is reading this,
please get in touch so that we can work together on testing out a Celeste build.</p>
<p>My ordinary workday needs are mostly met on this system. For communication, my
mail setup with aerc and postfix works just fine, and my normal Weechat setup
works great for IRC.<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> Much like any other day, I reviewed a few patches
and spent some time working on a shell I&rsquo;ve been writing in our new programming
language. The new language is quite performant, so no issues there. I think if I
had to work on SourceHut today, it might be less pleasant to work with Python
and Go, or to work on the web UI without a performant web browser. Naturally,
browsing Geminispace with gmnlm works great.</p>
<p>So, where does this leave us? I have unusually conservative demands of my
computers. Even on high-end, top-of-the-line systems, I run a very lightweight
environment, and that&rsquo;s the way I like it. Even so, my modest demands stress the
limits of this machine. If I relied more on a web browser, or on more GUI
applications, or used a heavier desktop environment, or heavier programming
environments, I would not be able to be productive on this system. Tomorrow, I
expect to return to my x86_64 machine as my daily workstation and continue to
use this machine as I have before, for RISC-V development and testing over
serial and SSH. There are few use-cases for which this hardware, given its
limitations, is adequate.</p>
<p>Even so, this is a very interesting system. The ability to incorporate more
powerful components like DDR4 RAM, PCIe GPUs, NVMe storage, and so on, can make
up for the slow CPU in many applications. Though many use-cases for this system
must be explained under strict caveats, one use-case it certainly offers is a
remarkably useful system with which to advance the development of the RISC-V
FOSS ecosystem. I&rsquo;m using it to work on Alpine Linux, on kernel hacking
projects, compiler development, and more, on a CPU that is designed in adherence
to an open ISA standard and runs on open source firmware. This is a fascinating
product that promises great things for the future of RISC-V as a platform.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Plus an expansion slot which was ultimately entirely useless.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I have u-Boot installed on a microSD card which the firmware boots to,
which then runs grub, which runs Linux. I could theoretically install u-Boot
to the SPI Flash and then I would not have to use a microSD card for this
process, but my initial attempts were not met with success and I didn&rsquo;t debug
it any further. I think other people have managed to get it working, though,
and someone is working on making Alpine handle this for you. In future
hardware from SiFive I hope that they will install a working u-Boot UEFI
environment on the SPI before shipping so that you can just install standard
ISOs from a flash drive like you would with any other PC.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I use this machine fairly often for RISC-V testing, particularly
for the new programming language I&rsquo;m working on, but I usually just SSH into
it instead of connecting my displays and peripherals to it directly.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Incidentally, my new language can be fully bootstrapped on this
machine in 272 seconds, including building and running the test suite. For
comparison, it takes about 10 seconds on my x86_64 workstation. Building LLVM
on this machine, let alone Rust, takes upwards of 12+ hours. You can
cross-compile it, but this is difficult and it still takes <em>ages</em>, and it&rsquo;s so
complicated and brittle that you&rsquo;re going to waste a huge amount of time
troubleshooting between every attempt.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>There&rsquo;s not a snowball&rsquo;s chance in hell of using Discord or Slack on this system, for the record.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Breaking down a small language design proposal</title><link>https://drewdevault.com/2021/12/30/Language-design-considerations.html</link><description><![CDATA[<style>
.redacted { background: black; color: black; }
</style>
<p>We are developing a new systems programming language. The name is a secret, so
we&rsquo;ll call it <span class="redacted">xxxx</span> instead. In <span
class="redacted">xxxx</span>, we have a general requirement that all variables
must be initialized. This is fine for the simple case, such as &ldquo;let x: int =
10&rdquo;. But, it does not always work well. Let&rsquo;s say that you want to set aside a
large buffer for I/O:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// ...
</span></span></span></code></pre></div><p>This can clearly get out of hand. To address this problem, we added the &ldquo;&hellip;&rdquo;
operator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">y</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">([</span><span class="mi">0</span><span class="o">...</span><span class="p">]);</span><span class="w">
</span></span></span></code></pre></div><p>This example demonstrates both <em>stack</em> allocation of a buffer and <em>heap</em>
allocation of a buffer initialized with 1024 zeroes.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> This &ldquo;&hellip;&rdquo;
operator neatly solves our problem. However, another problem occurs to me: what
if you want to allocate a buffer of a variable size?</p>
<p>In addition to arrays, <span class="redacted">xxxx</span> supports slices, which
stores a data pointer, a length, and a capacity. The data pointer refers to an
array whose length is equal to or greater than &ldquo;capacity&rdquo;, and whose values are
initialized up to &ldquo;length&rdquo;. We have additional built-ins, &ldquo;append&rdquo;, &ldquo;insert&rdquo;,
and &ldquo;delete&rdquo;, which can dynamically grow and shrink a slice.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">);</span><span class="w"> </span><span class="c1">// x = [1, 2, 3, 4, 5]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">delete</span><span class="p">(</span><span class="n">x</span><span class="p">[..</span><span class="mi">2</span><span class="p">]);</span><span class="w">           </span><span class="c1">// x = [3, 4, 5]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">insert</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w">       </span><span class="c1">// x = [1, 2, 3, 4, 5]
</span></span></span></code></pre></div><p>You can also allocate a slice whose capacity is set to an arbitrary value, but
whose length is only equal to the number of initializers you provide. This is
done through a separate case in the &ldquo;alloc&rdquo; grammar:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">types</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">],</span><span class="w"> </span><span class="mi">10</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">assert</span><span class="p">((</span><span class="o">&amp;</span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">types</span><span class="o">::</span><span class="n">slice</span><span class="p">).</span><span class="n">capacity</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">10</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>This is useful if you know how long the slice will eventually be, so that you
can fill it with &ldquo;append&rdquo; without re-allocating (which could be costly
otherwise). However, setting the capacity is not the same thing as setting the
length: all of the items between the length and capacity are uninitialized. How
do we zero-initialize a large buffer in the heap?</p>
<p>Until recently, you simply couldn&rsquo;t. You had to use a rather bad
work-around:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">rt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">sz</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1024</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">data</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">malloc</span><span class="p">(</span><span class="n">sz</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span><span class="w"> </span><span class="c1">// [*] is an array of undefined length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">data</span><span class="p">[..</span><span class="n">sz</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>This is obviously not great. We lose type safety, the initialization guarantee,
and bounds checking, and we add a footgun (multiplying by the member type size),
and it&rsquo;s simply not very pleasant to use. To address this, we added the
following syntax:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">sz</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1024</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">([</span><span class="mi">0</span><span class="o">...</span><span class="p">],</span><span class="w"> </span><span class="n">sz</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Much better! Arriving at this required untangling a lot of other problems that I
haven&rsquo;t mentioned here, but this isn&rsquo;t the design I want to focus on for this
post. Instead, there&rsquo;s a new question this suggests: what about appending a
variable amount of data to a slice? I want to dig into this problem to explore
some of the concerns we think about when working on the language design.</p>
<p>The first idea I came up with was the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">],</span><span class="w"> </span><span class="mi">10</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>This would append ten zeroes to &ldquo;x&rdquo;. This has a problem, though. Consider our
earlier example of &ldquo;append&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>The grammar for this looks like the following:<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p><img src="https://redacted.moe/f/d37abdd8.png" alt="A screenshot of the language spec showing the grammar for append expressions."></p>
<p>So, the proposed &ldquo;append(x, [0&hellip;], 10)&rdquo; expression is <em>parsed</em> like this:</p>
<pre><code>slice-mutation-expression: append
    object-selector: x
    append-items:
        [0...]
        10
</code></pre>
<p>In other words, it looks like &ldquo;append the values [0&hellip;] and 10 to x&rdquo;. This
doesn&rsquo;t make sense, but we don&rsquo;t know this until we get to the type checker.
What it really means is &ldquo;append ten zeroes to x&rdquo;, and we have to identify this
case in the type checker through, essentially, heuristics. Not great! If we dig
deeper into this we find even more edge cases, but I will spare you from the
details.</p>
<p>So, let&rsquo;s consider an alternative design:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">]);</span><span class="w">   </span><span class="c1">// Previously append(x, 1, 2, 3);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">],</span><span class="w"> </span><span class="mi">10</span><span class="p">);</span><span class="w">  </span><span class="c1">// New feature
</span></span></span></code></pre></div><p>The grammar for this is much better:</p>
<p><img src="https://redacted.moe/f/b0e56d79.png" alt="A screenshot of the revised grammar for this design."></p>
<p>Now we can distinguish between these cases while parsing, so the first example
is parsed as:</p>
<pre><code>append-expression
    object-selector: x
    expression: [1, 2, 3]   // Items to append
</code></pre>
<p>The second is parsed as:</p>
<pre><code>append-expression
    object-selector: x
    expression: [0...]    // Items to append
    expression: 10        // Desired length
</code></pre>
<p>This is a big improvement, but it comes with one annoying problem. The most
common case for append in regular use in <span class="redacted">xxxx</span> is
appending a single item, and this case has worsened thanks to this change:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="mi">42</span><span class="p">]);</span><span class="w">  </span><span class="c1">// Previously append(x, 42);
</span></span></span></code></pre></div><p>In fact, appending several items at once is exceptionally uncommon: there are no
examples of it in the standard library. We should try to avoid making the common
case worse for the benefit of the uncommon case.</p>
<p>A pattern we <em>do</em> see in the standard library is appending one slice to another,
which is a use-case we&rsquo;ve ignored up to this point. This use-case looks
something like the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">...</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Why don&rsquo;t we lean into this a bit more?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="mi">42</span><span class="p">);</span><span class="w">              </span><span class="c1">// x = [42]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="o">...</span><span class="p">);</span><span class="w">    </span><span class="c1">// x = [42, 1, 2, 3]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="p">],</span><span class="w"> </span><span class="mi">6</span><span class="p">);</span><span class="w">       </span><span class="c1">// x = [42, 1, 2, 3, 0...]
</span></span></span></code></pre></div><p>Using the <code>append(x, y...)</code> syntax to generally handle appending several items
neatly solves all of our problems. We have arrived at design which:</p>
<ul>
<li>Is versatile and utilitarian</li>
<li>Addresses the most common cases with a comfortable syntax</li>
<li>Is unambiguous at parse time without type heuristics</li>
</ul>
<p>I daresay that, in addition to fulfilling the desired new feature, we have
improved the other cases as well. The final grammar for this is the following:</p>
<p><img src="https://redacted.moe/f/1d400f58.png" alt="Formal grammar showing the final state of the design proposal"></p>
<p>If you&rsquo;re curious to see more, I&rsquo;ve extracted the relevant page of the
specification for you to read: <a href="https://redacted.moe/f/9c48d5d4.pdf">download it here</a>. I
hope you found that interesting and insightful!</p>
<p><em>Note: Much of these details are subject to change, and we have future
improvements planned which will affect these features — particularly with
respect to handling allocation failures. Additionally, some of the code samples
were simplified for illustrative purposes.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You can also use <em>static</em> allocation, which is not shown here.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Disregard the second case of &ldquo;append-values&rdquo;; it&rsquo;s not relevant here.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate></item><item><title>Please don&apos;t use Discord for FOSS projects</title><link>https://drewdevault.com/2021/12/28/Dont-use-Discord-for-FOSS.html</link><description><![CDATA[<p>Six years ago, I wrote a post speaking out against the use of Slack for the
instant messaging needs of FOSS projects. In retrospect, this article is not
very good, and in the years since, another proprietary chat fad has stepped up
to bat: Discord. It&rsquo;s time to revisit this discussion.</p>
<p>In short, using Discord for your free software/open source (FOSS) software
project is a very bad idea. Free software matters — that&rsquo;s why you&rsquo;re
writing it, after all. Using Discord partitions your community on either side of
a walled garden, with one side that&rsquo;s willing to use the proprietary Discord
client, and one side that isn&rsquo;t. It sets up users who are passionate about free
software — i.e. your most passionate contributors or potential
contributors — as second-class citizens.</p>
<p>By choosing Discord, you also lock out users with accessibility needs, for whom
the proprietary Discord client is often a nightmare to use.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Users who cannot
afford new enough hardware to make the resource-intensive client pleasant to use
are also left by the wayside. Choosing Discord is a choice that excludes poor
and disabled users from your community. Users of novel or unusual operating
systems or devices (i.e. innovators and early adopters) are also locked out of
the client until Discord sees fit to port it to their platform. Discord also
declines service to users in countries under US sanctions, such as Iran.
Privacy-concious users will think twice before using Discord to participate in
your project, or will be denied outright if they rely on Tor or VPNs. All of
these groups are excluded from your community.</p>
  </blockquote>
<p>These problems are driven by a conflict of interest between you and Discord.
Ownership over your chat logs, the right to set up useful bots, or to moderate
your project&rsquo;s space according to your discretion; all of these are rights
reserved by Discord and denied to you. The FOSS community, including users with
accessibility needs or low-end computing devices, are unable to work together to
innovate on the proprietary client, or to build improved clients which better
suit their needs, because Discord insists on total control over the experience.
Discord seeks to <a href="https://seirdy.one/2021/01/27/whatsapp-and-the-domestication-of-users.html">domesticate its users</a>, where FOSS treats users as peers
and collaborators. These ideologies are fundamentally in conflict with one
another.</p>
<p>You are making an investment when you choose to use one service over another.
When you choose Discord, you are legitimizing their platform and divesting from
FOSS platforms. Even if you think they have a bigger reach and a bigger
audience,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> choosing them is a short-term, individualist play which signals a
lack of faith in and support for the long-term goals of the FOSS ecosystem as a
whole. The FOSS ecosystem needs your investment. FOSS platforms generally don&rsquo;t
have access to venture capital or large marketing budgets, and are less willing
to use dark patterns and predatory tactics to secure their market segment. They
need your support to succeed, and you need theirs. Why should someone choose to
use your FOSS project when you refused to choose theirs? Solidarity and mutual
support is the key to success.</p>
<p>There are great FOSS alternatives to Discord or Slack. SourceHut has been
investing in IRC by building more accessible services like <a href="https://sourcehut.org/blog/2021-11-29-announcing-the-chat.sr.ht-public-beta/">chat.sr.ht</a>. Other
great options include <a href="https://matrix.org">Matrix</a> and <a href="https://zulip.com">Zulip</a>. Please consider these services
before you reach for their proprietary competitors.</p>
<p>Perceptive readers might have noticed that most of these arguments can be
generalized. This article is much the same if we replace &ldquo;Discord&rdquo; with
&ldquo;GitHub&rdquo;, for instance, or &ldquo;Twitter&rdquo; or &ldquo;YouTube&rdquo;. If your project depends on
proprietary infrastructure, I want you to have a serious discussion with your
collaborators about why. What do your choices mean for the long-term success of
your project and the ecosystem in which it resides? Are you making smart
investments, or just using tools which are popular or that you&rsquo;re already used
to?</p>
<p>If you use GitHub, consider <a href="https://sourcehut.org">SourceHut</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> or
<a href="https://codeberg.org">Codeberg</a>. If you use Twitter, consider <a href="https://joinmastodon.org">Mastodon</a> instead. If you use YouTube,
try <a href="https://joinpeertube.org">PeerTube</a>. If you use Facebook&hellip; don&rsquo;t.</p>
<p>Your choices matter. Choose wisely.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Discord <a href="https://www.lflegal.com/2021/10/discord-agreement/">had to be
sued</a> to take this
seriously. Updated at 2021-12-28 15:00 UTC: I asked a correspondent of mine who works on accessibility to
comment:<br /><blockquote>I&rsquo;ve tried Discord on a few occasions, but haven&rsquo;t seriously tried to
get proficient at navigating it with a screen reader. I remember finding
it cumbersome to move around, but it&rsquo;s been long enough since the last
time I tried it, a few months ago, that I couldn&rsquo;t tell you exactly why.
I think the general problem, though, is that the UI of the
desktop-targeted web app is complex enough that trying to move through
it an element at a time is overwhelming. I found that the same was true
of Slack and Zulip. I haven&rsquo;t tried Matrix yet. Of course, IRC is great,
because there&rsquo;s a wide variety of clients to choose from.<br /><br />
However, you shouldn&rsquo;t take my experience as representative, even though
I&rsquo;m a developer working on accessibility. As you may recall, I have some
usable vision, and I often use my computer visually, though I do depend
on a screen reader when using my phone. I didn&rsquo;t start routinely using a
GUI screen reader until around 2004, when I started writing a screen
reader as part of my job. And that screen reader was targeted at
beginners using simple UIs. So it&rsquo;s possible that I never really
mastered more advanced screen reader usage.<br /><br />
What I can tell you is that, to my surprise, Discord&rsquo;s accessibility has
apparently improved in recent years, and more blind people are using it now. One
of my blind friends told me that most Discord functionality is very accessible
and several blind communities are using it. He also told me about a group of
young blind programmers who are using Discord to discuss the development of a
new open-source screen reader to replace the current Orca screen reader for
GNOME.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Discord appears to inflate its participation numbers compared to other services. It shows all users who have ever joined the server, rather than all users who are actively using the server. Be careful not to optimize for non-participants when choosing your tools.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Disclaimer: I am the founder of SourceHut.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate></item><item><title>Please use me as a resource</title><link>https://drewdevault.com/2021/12/25/Use-me-as-a-resource.html</link><description><![CDATA[<p>I write a lot of blog posts about my ideas,<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> some of which are even good
ideas. Some of these ideas stick, and many readers have attempted to put them
into practice, taking on challenges like starting a business in FOSS or stepping
up to be leaders in their communities. It makes me proud to see the difference
you&rsquo;re making, and I&rsquo;m honored to have inspired many of you.</p>
<p>I&rsquo;m sitting here on my soapbox shouting into the void, but I also want to work
with you one-on-one. Here are some things people have reached out to me for:</p>
<ul>
<li>Pitching their project/business ideas for feedback</li>
<li>Sharing something they&rsquo;re proud of</li>
<li>Cc&rsquo;ing me in mailing list discussions, GitHub/GitLab threads, etc, for input</li>
<li>Clarifying finer points in my blog posts</li>
<li>Asking for feedback on drafts of their own blog posts</li>
<li>Offering philosophical arguments about FOSS</li>
<li>Asking for advice on dealing with a problem in their community</li>
</ul>
<p>I have my own confidants that I rely on for these same problems. None of us goes
it alone, and for this great FOSS experiment to succeed, we need to rely on each
other.</p>
<p>I want to be personally available to you. My email address is <a href="mailto:sir@cmpwn.com">sir@cmpwn.com</a>. I
read every email I receive, and try to respond to most of them, though it can
sometimes take a while. Please consider me a resource for your work in FOSS. I
hope I can help!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>84 in 2021, and counting. Wow!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate></item><item><title>Sustainable creativity in a world without copyright</title><link>https://drewdevault.com/2021/12/23/Sustainable-creativity-post-copyright.html</link><description><![CDATA[<p>I don&rsquo;t believe in copyright. I argue that we need to get rid of copyright, or
at least dramatically reform it. <a href="https://drewdevault.com/2020/08/24/Alice-in-Wonderland.html">The public domain has been stolen from us</a>,
and I want it back. Everyone reading this post has grown up in a creative world
defined by capitalism, in which adapting and remixing works — a
fundamental part of the creative process — is illegal. The commons is
dead, and we suffer for it. But, this is all we&rsquo;ve ever known. It can be
difficult to imagine a world without copyright.</p>
<p>When I present my arguments on the subject, the most frequent argument I hear in
response is something like the following: &ldquo;artists have to eat, too&rdquo;. The answer
to this argument is so mind-bogglingly obvious that, in the absence of
understanding, it starkly illuminates just how successful capitalism has been in
corrupting a broad human understanding of empathy. So, I will spell the answer
out: why do we have a system which will, for any reason, deny someone access to
food? How unbelievably cruel is a system which will let someone starve because
they cannot be productive within the terms of capitalism?</p>
<p>My argument is built on the more fundamental understanding that the access to
fundamental human rights such as food, shelter, security, and healthcare are not
contingent on their ability to be productive under the terms of capitalism. And
I emphasize the &ldquo;terms of capitalism&rdquo; here deliberately: how much creativity is
stifled because it cannot be expressed profitably? The system is not just cruel,
but it also limits the potential of human expression, which is literally the
only thing that creative endeavours are concerned with.</p>
<p>The fact that the &ldquo;starving artist&rdquo; is such a common trope suggests to us that
artists aren&rsquo;t putting food on the table under the copyright regime, either.
Like in many industries under capitalism, artists are often not the owners of
the products of their labor. Copyright protects the rights holder, not the
author. The obscene copyright rules in the United States, for example, are not
doing much benefit for the artist when the term ends 70 years after their death.
Modern copyright law was bought, paid for, and written by corporate copyright
owners, not artists. What use is the public domain to anyone when something
published today cannot be legally remixed by even our great-great-grandchildren?</p>
<p>Assume that we address both of these problems: we create an empathetic system
which never denies a human being of their fundamental right to live, and we
eliminate copyright. Creativity will thrive under these conditions. How?</p>
<p>Artists are free to spend their time at their discretion under the new
copyright-free regime. They can devote themselves to their work without concern
for whether or not it will sell, opening up richer and more experimental forms
of expression. Their peers will be working on similar terms, freeing them to
more frequent collaborations of greater depth. They will build upon each other&rsquo;s
work to create a rich commons of works and derivative works.</p>
<p>There&rsquo;s no escaping the fact that derivation and remixing is a fundamental part
of the creative process, and that copyright interferes with this process. Every
artist remixes the works of other artists: this is how art is made. Under the
current copyright regime, this practice ranges from grey-area to illegal, and
because money makes right, rich and powerful artists aggressively defend their
work, extracting rent from derivative works, while shamelessly ripping off works
from less powerful artists who cannot afford to fight them in court. Eliminating
copyright rids us of this mess and acknowledges that remixing is part of the
creative process, freeing artists to build on each other&rsquo;s work.</p>
<p>This is not a scenario in which artists stop making money, or in which the world
grinds to a halt because no one is incentivized to work anymore. The right to
have your fundamental needs met does not imply that we must provide everyone
with a luxurious lifestyle. If you want a nicer house, more expensive food, to
go out to restaurants and buy fancy clothes — you need to work for it. If
you want to commercialize your art, you can sell CDs and books, prints or
originals, tickets to performances, and so on. You can seek donations from
your audience through crowdfunding platforms, court wealthy patrons of the arts,
or take on professional work making artistic works like buildings and art
installations for public and private sector. You could even get a side job
flipping burgers or take on odd jobs to cover the costs of materials like paint
or musical instruments — but not your dinner or apartment. The money you
earn stretches longer, not being eaten away by health insurance or rent or
electricity bills. You invest your earnings into your art, not into your
livelihood.</p>
<p>Copyright is an absurd system. Ideas do not have intrinsic value. Labor has
value, and goods have value. Ideas are not scarce. By making them artificially
so, we sabotage the very process by which ideas are made. Copyright is
illegitimate, and we can, and ought to, get rid of it.</p>
<hr>
<p>Aside: I came across a couple of videos recently that I thought were pretty
interesting and relevant to this topic. Check them out:</p>
<ul>
<li><a href="https://redirect.invidious.io/watch?v=MZ2GuvUWaP8">Everything is a Remix Part 1 (2021), by Kirby Ferguson</a></li>
<li><a href="https://redirect.invidious.io/watch?v=ZZ3F3zWiEmc">The Art Market is a Scam (And Rich People Run It)</a></li>
</ul>]]></description><pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate></item><item><title>On commercial forks of FOSS projects</title><link>https://drewdevault.com/2021/12/18/Commercial-forks-of-FOSS-projects.html</link><description><![CDATA[<p>The gaming and live streaming industry is a lucrative and rapidly growing
commercial sector with a unique understanding of copyright and intellectual
property, and many parties with conflicting interests and access to different
economic resources.</p>
<p>The understanding of intellectual property among gamers and the companies which
serve them differs substantailly from that of free software, and literacy in the
values and philosophy of free software among this community is very low. It is
then of little surprise that we see abuse of free software from this community,
namely in the recent (and illegal) commercial forks of a popular FOSS streaming
platform called <a href="https://obsproject.com">OBS Studio</a> by companies like TikTok.</p>
<p>These forks are in violation of the software license of OBS Studio, which is
both illegal and unethical. But the &ldquo;why&rdquo; behind this is interesting for a
number of reasons. For one, there <em>is</em> a legitimate means through which
commercial entities can repurpose free software projects, up to and including
reskinning and rebranding and selling them. The gaming community also has an
unusual perspective on copyright which colors their understanding of the
situation. Consider, for instance, the modding community.</p>
<p>Game modifications (mods) exist in a grey area with respect to copyright.
Modding in general is entirely legal, though some game companies do not
understand this (or choose not to understand this) and take action against them.
Modders also often use assets of dubious provenance in their work. Many people
believe that, because this is all given away for free, the use is legitimate,
and though they are morally correct, they are not legally correct. Additionally,
since most mods are free (as in beer),<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> the currency their authors receive
for their work is credit and renown. Authors of these mods tend to defend their
work fiercely against its &ldquo;theft&rdquo;. Modders also tend to be younger, and grew up
after the internet revolution and the commoditization of software.</p>
<p>On the other hand, the conditions under which free software can be &ldquo;stolen&rdquo; are
quite different, because the redistribution, reuse, and modification of free
software, including for commercial purposes, is an explicit part of the social
and legal contract of FOSS. This freedom comes, however, with some conditions.
The nature of these conditions varies from liberal to strict. For instance,
software distributed with the MIT license requires little more than crediting
the original authors in any derivative works. On the other end of this spectrum,
copyleft licenses like the GPL family require that any derivative works of the
original project are <em>also</em> released under the GPL license. OBS Studio uses the
GPL license, and it is in this respect that all of these forks have made a legal
misstep.</p>
<p>If a company like TikTok wants to use OBS Studio to develop its own streaming
software, they are <em>allowed to do this</em>, though the degree to which they are
<em>encouraged</em> to do this is the subject of some debate.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> However, they must
release the source code for their modifications under the same GPL license. They
can repurpose and rebrand OBS Studio only if their repurposed and rebranded
version is made available to the free software community under the same terms.
Then OBS Studio can take any improvements they like from the TikTok version and
incorporate them into the original OBS Studio software, so that everyone shares
the benefit — TikTok, OBS users, StreamLabs, and StreamElements alike, as
well as anyone else who wants in on the game.</p>
<p>This happens fairly often with free software and often forms a healthy
relationship by establishing an incentive and a pool of economic resources to
provide for the upkeep and development of that software. Many developers of a
project like this are often hired by such companies to do their work. Sometimes,
this relationship is viewed more negatively, but that&rsquo;s a subject for another
post. It works best when all of the players view each other as collaborators,
not competitors.</p>
<p>That&rsquo;s not what happening here, though. What we&rsquo;re seeing instead is the brazen
theft of free software by corporations who believe that, because their legal
budget exceeds the resources available to the maintainers, might makes right.</p>
<p>Free software is designed to be used commercially, but you have to do it
correctly. This is a resource which is made available to companies who want to
exploit it, but they must do so according to the terms of the licenses. It&rsquo;s not
a free lunch.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I think that this is likely the case specifically to dis-incentivize legal action by the gaming companies (who would likely be wrong, but have a lot of money) or from the owners of dubiously repurposed assets (who would likely be right, and also have a lot of money). One notable exception is the Black Mesa mod, which received an explicit blessing from Valve for its sale.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>For my part, I&rsquo;m in the &ldquo;this is encouraged&rdquo; camp.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate></item><item><title>Status update, December 2021</title><link>https://drewdevault.com/2021/12/15/Status-update-December-2021.html</link><description><![CDATA[<p>Greetings! It has been a cold and wet month here in Amsterdam, much like the
rest of them, as another period of FOSS progress rolls on by. I have been taking
it a little bit easier this month, and may continue to take some time off in the
coming weeks, so I can have a bit of a rest for the holidays. However, I do
have some progress to report, so let&rsquo;s get to it.</p>
<p>In programming language progress, we&rsquo;ve continued to see improvement in
cryptography, with more AES cipher modes and initial work on AES-NI support for
Intel processors, as well as support for HMAC and blake2b. Improved support for
linking with C libraries has also landed, which is the basis of a few
third-party libraries which are starting to appear, such as bindings to <a href="https://github.com/andlabs/libui">libui</a>.
I have also started working on bindings to SDL2, which I am using to make a
little tetromino game (audio warning):</p>
<p><video src="https://redacted.moe/f/182e81ce.webm" controls></video></p>
<p>I am developing this to flesh out the SDL wrapper and get a feel for game
development in the new language, but I also intend to take it on as a serious
project to make a game which is fun to play. I also started working on an IRC
protocol library for our language, but this does not link to C.</p>
<p>Also, the reflection support introduced a few months ago has been removed.</p>
<p>My other main focus has been SourceHut, where I have been working on
todo.sr.ht&rsquo;s GraphQL API. This one ended up being a lot of work. I expect to
require another week or two to finish it.</p>
<p>visurf also enjoyed a handful of improvements this month, thanks to some
contributors, the most prolific of whom was Pranjal Kole. Thanks Pranjal!
Improvements landed this month include tab rearranging, next and previous page
navigation, and an improvement to all of the new-tab logic, along with many bug
fixes and smaller improvements. I also did some of the initial work on command
completions, but there is a lot left to do in this respect.</p>
<p>That&rsquo;s all for today. Thanks for your continued support! Until next time.</p>]]></description><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate></item><item><title>Impressions of Linux Mint &amp; elementary OS</title><link>https://drewdevault.com/2021/12/14/Linux-Mint-and-elementary-OS.html</link><description><![CDATA[<p>In a <a href="https://drewdevault.com/2021/12/05/What-desktop-Linux-needs.html">recent post</a>, I spoke about some things that Linux distros need to do
better to accommodate end-users. I was reminded that there are some Linux distros
which are, at least to some extent, following my recommended playbook, and have
been re-evaluating two of them over the past couple of weeks: <a href="https://linuxmint.com">Linux Mint</a> and
<a href="https://elementary.io">elementary OS</a>. I installed these on one of my laptops and used it as my daily
driver for a day or two each.</p>
<p>Both of these distributions are similar in a few ways. For one, both distros
required <em>zero</em> printer configuration: it just worked. I was very impressed with
this. Both distros are also based on Ubuntu, though with different levels of
divergence from their base. Ubuntu is a reasonably good choice: it is very
stable and mature, and commercially supported by Canonical.</p>
<p>I started with elementary OS, which does exactly what I proposed in my earlier
article: charge users for the OS.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> The last time I tried elementary, I was
less than impressed, but they&rsquo;ve been selling the OS for a while now so I hoped
that with a consistent source of funding and a few years to improve they would
have an opportunity to impress me. However, my overall impressions were mixed,
and maybe even negative.</p>
<p>The biggest, showstopping issue is a problem with their full disk encryption
setup. I was thrilled to see first-class FDE support in the installer, but upon
first boot, I was presented with a blank screen. It took me a while to figure
out that a different TTY had cryptsetup running, waiting for me to enter the
password. This is <em>totally</em> unacceptable, and no average user would have any
clue what to do when presented with this. This should be a little GUI baked into
the initramfs which prompts for your password on boot, and should be a regularly
tested part of the installer before each elementary release ships.</p>
<p>The elementary store was also disappointing, though I think there&rsquo;s improvements
on the horizon. The catalogue is <em>very</em> sparse, and would benefit a lot by
sourcing packages from the underlying Ubuntu repositories as well. I think
they&rsquo;re planning on a first-class Flatpak integration in a future release, which
should improve this situation. I also found the apps a bit <em>too</em> elementary,
haha, in that they were lacking in a lot of important but infrequently used
features. In general elementary is quite basic, though it is also very polished.
Also, the default wallpaper depicts a big rock covered in bird shit, which I
thought was kind of funny.</p>
<p>There is a lot to like about elementary, though. The installer is really
pleasant to use, and I really appreciated that it includes important
accessibility features during the install process. The WiFi configuration is
nice and easy, though it prompted me to set up online accounts <em>before</em>
prompting me to set up WiFi. All of the apps are intuitive, consistently
designed, and beautiful. I also noticed that long-running terminal processes I
had in the background would pop-up a notification upon completion, which is a
nice touch. Overall, it&rsquo;s promising, but I had hoped for more. My suggestions to
elementary are to consider that completeness is a kind of polish, to work on
software distribution, and to offer first-class options for troubleshooting,
documentation, and support within the OS.</p>
<p>I tried Linux Mint next. Several years ago, I actually used Mint as my daily
driver for about a year — it was the last &ldquo;normal&rdquo; distribution I used
before moving to Arch and later Alpine, which is what I use now. Overall, I was
pretty impressed with Mint after a couple of days of use.</p>
<p>Let&rsquo;s start again with the bad parts. The installer is not quite as nice as
elementary&rsquo;s, though it did work without any issues. At one point I was asked if
I wanted to &ldquo;enable multimedia codecs&rdquo; with no extra context, which would
confuse me if I didn&rsquo;t understand what they were. I was also pretty pissed to
see the installer advertising nonfree, predatory services like Netflix and
YouTube to me — distributions have no business advertising this kind of
shit. Mint also has encryption options, but it&rsquo;s based on ecryptfs rather than
LUKS, and I find that this is an inferior approach. Mint should move to
full-disk encryption.</p>
<p>I also was a bit concerned about the organizational structure of Linux Mint.
It&rsquo;s unclear who is responsible for Linux Mint, how end-users can participate,
or how donations are spent or how other financial concerns are addressed. I
think that Linux Mint needs to be more transparent, and should also consider how
its allegiance with proprietary services like Netflix acts as a long-term
divestment from the FOSS ecosystem it relies on.</p>
<p>That said, the actual experience of using Linux Mint is very good. Unlike
elementary OS, the OS feels much more <em>comprehensive</em>. Most of the things a
typical user would need are there, work reliably, and integrate well with the
rest of the system. Software installation and system upkeep are very easy on
Linux Mint. The aesthetic is very pleasant and feels like a natural series of
improvements to the old Gnome 2 lineage that Cinnamon can be traced back to,
which has generally moved more in the direction that I would have liked Gnome
upstream to. The system is tight, complete, and robust. Nice work.</p>
<p>In conclusion, Linux Mint will be my recommendation for &ldquo;normal&rdquo; users going
forward, and I think there is space for elementary OS for some users if they
continue to improve.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I downloaded it for free, however, because I did not anticipate that I would continue to use it for more than a couple of days.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate></item><item><title>How new Linux users can increase their odds of success</title><link>https://drewdevault.com/2021/12/05/How-new-Linux-users-succeed.html</link><description><![CDATA[<p>The <a href="https://redirect.invidious.io/channel/UCXuqSBlHAE6Xw-yeJA0Tunw">Linus Tech Tips</a> YouTube channel has been putting out a series of videos
called the <a href="https://redirect.invidious.io/playlist?list=PL8mG-RkN2uTyhe6fxWpnsHv53Y1I-K3yu">Switching to Linux Challenge</a> that has been causing a bit of a stir
in the Linux community. I&rsquo;ve been keeping an eye on these developments, and
thought it was a good time to weigh in with my thoughts. This article focuses on
how new Linux users can increase their odds for success — I have also
written a companion article, &ldquo;<a href="https://drewdevault.com/2021/12/05/What-desktop-Linux-needs.html">What desktop Linux needs to succeed in the
mainstream</a>&rdquo;, which looks at the other side of the problem.</p>
<p>Linux is, strictly speaking, an operating system <em>kernel</em>, which is a small
component of a larger system. However, in the common usage, Linux refers to a
family of operating systems which are based on this kernel, such as Ubuntu,
Fedora, Arch Linux, Alpine Linux, and so on, which are referred to as
<em>distributions</em>. Linux is used in other contexts, such as Android, but the
common usage is generally limited to this family of Linux &ldquo;distros&rdquo;. Several of
these distros have positioned themselves for various types of users, such as
office workers or gamers. However, the most common Linux user is much different.
What do they look like?</p>
<p>The key distinction which sets Linux apart from more common operating systems
like Windows and macOS is that Linux is <em>open source</em>. This means that the
general public has access to the <em>source code</em> which makes it tick, and that
anyone can modify it or improve it to suit their needs. However, to make
meaningful modifications to Linux requires programming skills, so,
consequentially, the needs which Linux best suits are the needs of programmers.
Linux is the preeminent operating system for programmers and other highly
technical computer users, for whom it can be suitably molded to purpose in a
manner which is not possible using other operating systems. As such, it has
been a resounding success on programmer&rsquo;s workstations, on servers in the cloud,
for data analysis and science, in embedded workloads like internet-of-things,
and other highly technical domains where engineering talent is available and a
profound level of customization is required.</p>
<p>The Linux community has also developed Linux as a solution for desktop users,
such as the mainstream audience of Windows and macOS. However, this work is
mostly done by enthusiasts, rather than commercial entities, so it can vary in
quality and generally any support which is available is offered on a
community-run, best-effort basis. Even so, there have always been a lot of
volunteers interested in this work — programmers want a working desktop,
too. Programmers also want to play games, so there has been interest in getting
a good gaming setup working on Linux. In the past several years, there has
also been a commercial interest with the budget to move things forward: Valve
Software. Valve has been instrumental in developing more sophisticated gaming
support on Linux, and uses Linux as the basis of a commercial product, the Steam
Deck.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Even so, I must emphasize the following point:</p>
<p><strong>The best operating system for gaming is Windows.</strong></p>
<p>Trying to make Linux do all of the things you&rsquo;re used to from Windows or macOS
is not going to be a successful approach. It is <em>possible</em> to run games on
Linux, and it is <em>possible</em> to run some Windows software on Linux, but it is not
<em>designed</em> to do these things, and you will likely encounter some papercuts on
the way. Many advanced Linux users with a deep understanding of the platform and
years of experience under their belt can struggle for days to get a specific
game running. However, thanks to Valve, and the community at large, many games
— but not all games — run out-of-the-box with much less effort than
was once required of Linux gamers.</p>
<p>Linux users are excited about improved gaming support because it brings gaming
to a platform that they already want to use <em>for other reasons</em>. Linux is not
Windows, and offers an inferior gaming experience to Windows, but it <em>does</em>
offer a superior experience in many other regards! If you are trying out Linux,
you should approach it with an open mind, prepared to learn about what makes
Linux special and <em>different</em> from Windows. You&rsquo;ll learn about new software, new
usability paradigms, and new ways of using your computer. If you just want to do
all of the same things on Linux that you&rsquo;re already doing on Windows, why switch
in the first place? The value of Linux comes from what it can do differently.
Given time, you will find that there are many things that Linux can do that
Windows cannot. Leave your preconceptions at the door and seek to learn what
makes Linux special.</p>
<p>I think that so-called &ldquo;power users&rdquo; are especially vulnerable to this trap, and
I&rsquo;ve seen it happen many times. A power user is someone who deeply understands
the system that they&rsquo;re using, knows about every little feature, knows all of
the keyboard shortcuts, and integrates all of these details into their daily
workflow. Naturally, it will take you some time to get used to a new system. You
can be a power user on Linux — I am one such user myself — but
you&rsquo;re essentially starting from zero, and you will learn about different
features, different nuances, and different shortcuts, all of which ultimately
sums to an entirely <em>different</em> power user.</p>
<p>The latest LTT video in the Linux series shows the team going through a set of
common computer tasks on Linux. However, these tasks do little to nothing to
show off what makes Linux special. Watching a 4K video is nice, sure, and you
can do it on Linux, but how does that teach you anything interesting about
Linux?</p>
<p>Let me offer a different list of challenges for a new Linux user to attempt,
hand-picked to show off the things which set Linux <em>apart</em> in my opinion.</p>
<ol>
<li><strong>Learn how to use the shell.</strong> A lot of new Linux users are intimidated by
the terminal, and a lot of old Linux users are understandably frustrated
about this. The terminal is one of the <em>best</em> things about Linux! We praise
it for a reason, intimidating as it may be. <a href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview">Here&rsquo;s a nice tutorial to start
with</a>.</li>
<li><strong>Find and install packages from the command line.</strong> On Linux, you install
software by using a &ldquo;package manager&rdquo;, a repository of software controlled by
the Linux distribution. Think of it kind of like an app store, but
non-commercial and without malware, adware, or spyware. If you are
downloading Linux software from a random website, it&rsquo;s probably the wrong
thing to do. See if you can figure out the package manager instead!</li>
<li><strong>Try out a tiling window manager,</strong> especially if you consider yourself a
power user. I would recommend <a href="https://swaywm.org">sway</a>, though I&rsquo;m biased because I started
this project. Tiling window managers change the desktop usability paradigm by
organizing windows <em>for you</em> and letting you navigate and manipulate them
using keyboard shortcuts alone. These are big productivity boosters.</li>
<li><strong>Compile a program from source.</strong> This generally is not how you will usually
find and use software, but it is an interesting experience that you cannot do
on Windows or Mac. Pick something out and figure out where the source code is
and how to compile it yourself. Maybe you can make a little change to it,
too!</li>
<li><strong>Help someone else out online.</strong> Linux is a community of volunteers
supporting each other. Take what you&rsquo;ve learned to <a href="https://reddit.com/r/linuxquestions">/r/linuxquestions</a> or
your distro&rsquo;s chat rooms, forums, wikis, or mailing lists, and make them a
better place for everyone else. The real magic of Linux comes from the
collaborative, grassroots nature of the project, which is something you
really cannot get from Windows or Mac.</li>
</ol>
<p>Bonus challenge: complete all of the challenges from the LTT video, but only
using the command line.</p>
<p>All of these tasks might take a lot longer than 15 minutes to do, but remember:
embrace the unfamiliar. You don&rsquo;t learn anything by doing the things you already
know how to do. If you want to know why Linux is special, you&rsquo;ll have to step
outside of your comfort zone. Linux is free, so there&rsquo;s no risk in trying 🙂
Good luck, and do not be afraid to ask for help if you get stuck!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Full disclosure: I represent a company which has a financial relationship with Valve and is involved in the development of software used by the Steam Deck.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 5 Dec 2021 00:00:00 +0000</pubDate></item><item><title>What desktop Linux needs to succeed in the mainstream</title><link>https://drewdevault.com/2021/12/05/What-desktop-Linux-needs.html</link><description><![CDATA[<p>The <a href="https://redirect.invidious.io/channel/UCXuqSBlHAE6Xw-yeJA0Tunw">Linus Tech Tips</a> YouTube channel has been putting out a series of videos
called the <a href="https://redirect.invidious.io/playlist?list=PL8mG-RkN2uTyhe6fxWpnsHv53Y1I-K3yu">Switching to Linux Challenge</a> that has been causing a bit of a stir
in the Linux community. I&rsquo;ve been keeping an eye on these developments, and
thought it was a good time to weigh in with my thoughts. This article focuses on
what Linux needs to do better — I have also written a companion article,
&ldquo;<a href="https://drewdevault.com/2021/12/05/How-new-Linux-users-succeed.html">How new Linux users can increase their odds of success</a>&rdquo;, which looks at the
other side of the problem.</p>
<p>Linux is <em>not</em> accessible to the average user today, and I didn&rsquo;t need to watch
these videos to understand that. I do not think that it is reasonable today to
expect a non-expert user to successfully install and use Linux for their daily
needs without a &ldquo;Linux friend&rdquo; holding their hand every step of the way.</p>
<p>This is not a problem unless we want it to be. It is entirely valid to build
software which is accommodating of experts only, and in fact this is the kind of
software I focus on in my own work. I occasionally use the racecar analogy: you
would not expect the average driver to be able to drive a Formula 1 racecar.
It is silly to suggest that Formula 1 vehicle designs ought to accommodate
non-expert drivers, or that professional racecar drivers should be driving
mini-vans on the circuit. However, it is equally silly to design a professional
racing vehicle and market it to soccer moms.</p>
<p>I am one of the original developers of the <a href="https://swaywm.org">Sway</a> desktop environment for
Linux. I am very proud of Sway, and I believe that it represents one of the
best desktop experiences on Linux. It is a rock-solid, high-performance,
extremely stable desktop which is polished on a level that is competitive with
commercial products. However, it is designed for <em>me</em>: a professional,
expert-level Linux user. I am under no illusions that it is suitable for my
grandmother.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>This scenario is what the incentives of the Linux ecosystem favors most. Linux
is one of <em>the best</em> operating systems for professional programmers and
sysadmins, to such an extraordinary degree that most programmers I know treat
Windows programmers and sysadmins as the object of well-deserved ridicule. Using
Windows for programming or production servers is essentially as if the race car
driver from my earlier metaphor <em>did</em> bring a mini-van to the race track. Linux
is the operating system developed by programmers, for programmers, to suit <em>our</em>
needs, and we have succeeded tremendously in this respect.</p>
<p>However, we have failed to build an operating system for people who are <em>not</em>
like us.</p>
<p>If this is not our goal, then that&rsquo;s fine. But, we can build things for
non-experts if we choose to. If we set &ldquo;accessible to the average user&rdquo; as a
goal, then we must take certain steps to achieve it. We need to make major
improvements in the following areas: robustness, intuitiveness, and community.</p>
<p>The most frustrating moments for a user is when the software they&rsquo;re using does
something inexplicable, and it&rsquo;s these moments that they will remember the most
vividly as part of their experience. Many Linux desktop and distribution
projects are spending their time on shiny new features, re-skins, and expanding
their scope further and further. This is a fool&rsquo;s errand when the project is not
reliable at its current scope. A small, intuitive, reliable program is better
than a large, unintuitive, unreliable program. Put down the paint brush and pick
up the polishing stone. I&rsquo;m looking at you, KDE.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>A user-friendly Linux desktop system should not crash. It should not be possible
to install a package which yeets gnome-desktop and dumps them into a getty. The
smallest of interactions must be intuitive and reliable, so that when Linus
drags files from the decompression utility into a directory in Dolphin, it does
the right thing. This will require a greater degree of cooperation and unity
between desktop projects. Unrelated projects with common goals need to be
reaching out to one another and developing robust standards for achieving those
goals. I&rsquo;m looking at you, Gnome.</p>
<p>Linux is a box of loosely-related tools held together with staples and glue.
This is fine when the user understands the tools and is holding the glue bottle,
but we need to make a more cohesive, robust, and reliable system out of this
before it can accommodate average end-users.</p>
<p>We also have a lot of work to do in the Linux community. The discussion on the
LTT video series has been exceptionally toxic and downright embarrassing. There
is a major problem of elitism within the Linux community. Given a hundred ways
of doing things on Linux (✓), there will be 99 assholes ready to tell you that
your way sucks (✓). Every Linux user is responsible for doing better in this
regard, especially the moderators of Linux-adjacent online spaces. Wouldn&rsquo;t it
be better if we took pride in being a friendly, accessible community? Don&rsquo;t
flame the noobs.</p>
<p>Don&rsquo;t flame the experts, either. When Pop!_OS removed gnome-desktop upon
installing Steam, the Linux community rightly criticised them for it. This was a
major failure mode of the system in one of its flagship features, and should
have never shipped. It illuminates systemic failures in the areas I have drawn
our attention to in this article such as robustness and intuitiveness, and
Pop!_OS is responsible for addressing the problem. None of that excuses the
toxic garbage which was shoveled into the inboxes of Pop!_OS developers and
users. Be better people.</p>
<p>Beyond the toxicity, there are further issues with the Linux community. There
are heaps and heaps of blogs shoveling out crappy non-solutions to problems
noobs might be Googling, most of which will fuck up their Linux system in some
way or another. It&rsquo;s very easy to find bad advice for Linux, and very hard to
find good advice for Linux. The blog spammers need to cut it out, and we need to
provide better, more accessible resources for users to figure out their issues.
End-user-focused Linux distributions need to take responsibility for making
certain that their users understand the best ways to get help for any issues
they run into, so they don&rsquo;t go running off to the Arch Linux forums blindly
running terminal commands which will break their Ubuntu installation.</p>
<p>End-user software also needs to improve in this respect. In the latest LTT
video, Luke wanted to install OBS, and the right thing to do was install it from
their package manager. However, <a href="https://obsproject.com/download">the OBS website</a> walks them through
installing a PPA instead, and has a big blue button for building it from source,
which is definitely not what an average end-user should be doing.</p>
<p>→ Related: <a href="https://drewdevault.com/2021/09/27/Let-distros-do-their-job.html">Developers: Let distros do their job</a></p>
<p>One thing that we do not need to do is &ldquo;be more like Windows&rdquo;, or any other OS.
I think that this is a common fallacy found in end-user Linux software. We
should develop a system which is intuitive in its own right without having to
crimp off of Windows. Let&rsquo;s focus on what makes Linux interesting and useful,
and try to build a robust, reliable system which makes those interesting and
useful traits accessible to users. Chasing after whatever Windows does is not
the right thing to do. Let&rsquo;s be prepared to ask users to learn things like new
usability paradigms if it illuminates a better way of doing things.</p>
<p>So, these are the goals. How do we achieve them?</p>
<p>I reckon that we could use a commercial, general-purpose end-user Linux distro.
As I mentioned earlier, the model of developers hacking in their spare time to
make systems for themselves does not create incentives which favor the average
end-user. You can sell free software — someone ought to do so! Build a
commercial Linux distro, charge $20 to download it or mail an install CD to the
user, and invest that money in developing a better system and offer dedicated
support resources. Sure, it&rsquo;s <em>nice</em> that Linux is free-as-in-beer, but there&rsquo;s
no reason it has to be. I&rsquo;ve got <a href="https://sourcehut.org">my own business</a> to run, so I&rsquo;ll
leave that as <a href="https://stripe.com/atlas">an exercise for the reader</a>. Good luck!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>However, I suspect that the LTT folks and other &ldquo;gaming power-user&rdquo; types would find Sway very interesting, if they approached it with a sufficiently open-minded attitude. For details, see the companion article.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>There is at least one person at KDE working along these lines: <a href="https://pointieststick.com">Nate Graham</a>. Keep it up!&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 5 Dec 2021 00:00:00 +0000</pubDate></item><item><title>postmarketOS revolutionizes smartphone hacking</title><link>https://drewdevault.com/2021/11/26/postmarketos.html</link><description><![CDATA[<p>I briefly mentioned <a href="http://postmarketos.org/">postmarketOS</a> in <a href="https://drewdevault.com/2019/12/18/PinePhone-review.html">my Pinephone review</a> two years ago,
but after getting my Dutch SIM card set up in my Pinephone and having another go
at using postmarketOS, I reckon they deserve special attention.</p>
<p>Let&rsquo;s first consider the kind of ecosystem into which postmarketOS emerged:
smartphone hacking in the XDA Forums era. This era was dominated by amateur
hackers working independently for personal prestige, with little to no regard
for the values of free software or collaboration. It was common to see
hacked-together binary images shipped behind adfly links in XDA forum threads in
blatant disregard of the GPL, with pages and pages of users asking redundant
questions and receiving poor answers to the endless problems caused by this
arrangement.</p>
<p>The XDA ecosystem is based on Android, which is a mess in and of itself. It&rsquo;s an
enormous, poorly documented ball of Google code, mixed with vendor drivers and
private kernel trees, full of crappy workarounds and locked-down hardware. Most
smart phones are essentially badly put-together black boxes and most smart phone
hackers are working with their legs cut off. Not to mention that the software
ecosystem which runs on the platform is full of scammers and ads and theft of
private user information. Android may be Linux in implementation, but it&rsquo;s about
as far from the spirit of free software as you can get.</p>
<p>postmarketOS, on the other hand, is based on Alpine Linux, which happens to be
my favorite Linux distribution. Instead of haphazard forum threads collecting
inscrutable ports for dozens of devices, they have a single git repository where
all of their ports are maintained under version control, complete with issue
trackers and merge requests, plus a detailed centralized wiki providing a wealth
of open technical info on their supported platforms. And, by virtue of being a
proper Linux distribution, they essentially opt-out of the mess of predatory
mobile apps and instead promote a culture of trusted applications which respect
the user and are built by and for the community instead of by and for a
corporation.</p>
<p>Where we once had to live with illegally closed-source forks of the Linux
kernel, we now have a git repository in which upstream Linux releases are
tracked with a series of auditable patches for supporting various devices, many
of which are making their way into upstream Linux. Where we once had a forum
thread with five wrong answers to the same question on page 112, we now have a
bug report on GitLab with a documented workaround and a merge request pending
review. Instead of begging my vendor to unlock my bootloader and using janky
software reminiscent of old keygen hacks to flash a dubious Android image, I can
build postmarketOS&rsquo;s installer, pop it onto a microSD card, and two minutes I&rsquo;ll
have Linux installed on my Pinephone.</p>
<p>pmOS does not seek to elevate the glories of tiny individual hackers clutching
their secrets close to their chest, instead elevating the glory of the community
as a whole. It pairs perfectly with Pine64, the only hardware vendor working
closely with upstream developers with the same vision and ideals. There is a
promise for hope in the future of smart phones in their collaboration.</p>
<p>However, the path they&rsquo;ve chosen is a difficult one. Android, for all of its
faults, presents a complete solution for a mobile operating system, and upstream
Linux does not. In my review, I said that software would be the biggest
challenge of the Pinephone, and 2 years later, that remains the case. Work
reverse engineering the Pine64 hardware is slow, there is not enough cooperation
between project silos, and there needs to be much better prioritization of the
work. To complete their goals, the community will have to work more closely
together and narrow their attention in on the key issues which stand between the
status quo and the completion of a useful Linux smartphone. It will require
difficult, boring engineering work, and will need the full attention and
dedication of the talented people working on these projects.</p>
<p>If they succeed in spite of these challenges, the results will be well worth it.
postmarketOS and pine64 represent the foundations of a project which could
finally deliver Linux on smartphones and build a robust mobile platform that
offers freedom to its users for years to come.</p>]]></description><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate></item><item><title>My philosophy for productive instant messaging</title><link>https://drewdevault.com/2021/11/24/A-philosophy-for-instant-messaging.html</link><description><![CDATA[<p>We use Internet Relay Chat (<a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a>) extensively at <a href="https://sourcehut.org">sourcehut</a> for
real-time group chats and one-on-one messaging. The IRC protocol is quite
familiar to hackers, who have been using it since the late 80&rsquo;s. As chat rooms
have become more and more popular among teams of both hackers and non-hackers in
recent years, I would like to offer a few bites of greybeard wisdom to those
trying to figure out how to effectively use instant messaging for their own
work.</p>
<p>For me, IRC is a vital communication tool, but many users of &lt;insert current
instant messaging software fad here&gt;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> find it frustrating, often to the
point of resenting the fact that they have to use it at all. Endlessly catching
up on discussions they missed, having their workflow interrupted by unexpected
messages, searching for important information sequestered away in a discussion
which happened weeks ago&hellip; it can be overwhelming and ultimately reduce your
productivity and well-being. Why does it work for me, but not for them? To find
out, let me explain how I think about and use IRC.</p>
<p>The most important trait to consider when using IM software is that it is
<em>ephemeral</em>, and must be treated as such. You should not &ldquo;catch up&rdquo; on
discussions that you missed, and should not expect others to do so, either. Any
important information from a chat room discussion must be moved to a more
permanent medium, such as an email to a mailing list,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> a ticket filed in a
bug tracker, or a page updated on a wiki. One very productive use of IRC for me
is holding a discussion to hash out the details of an issue, then writing up a
summary up for a mailing list thread where the matter is discussed in more
depth.</p>
<p>I don&rsquo;t treat discussions on IRC as actionable until they are shifted to another
mode of discussion. On many occasions, I have discussed an issue with someone on
IRC, and once the unknowns are narrowed down and confirmed to be actionable, ask
them to follow-up with an email or a bug report. If the task never leaves IRC,
it also never gets done.  Many invalid or duplicate tasks are filtered out by
this approach, and those which do get mode-shifted often have more detail than
they otherwise might, which improves the signal-to-noise ratio on my bug
trackers and mailing lists.</p>
<p>I have an extensive archive of IRC logs dating back over 10 years, tens of
gigabytes of gzipped plaintext files. I reference these logs perhaps only two or
three times a year, and often for silly reasons, like finding out how many swear
words were used over some time frame in a specific group chat, or to win an
argument about who was the first person to say &ldquo;yeet&rdquo; in my logs. I almost never
read more than a couple dozen lines of the backlog when starting up IRC for the
day.</p>
<p>Accordingly, you should never expect anyone to be in the know for a discussion
they were not present at. This also affects how I use &ldquo;highlights&rdquo;.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> Whenever
I highlight someone, I try to include enough context in the message so that they
can understand why they were mentioned without having to dig through their logs,
even if they receive the notification hours later.</p>
<p><em>Bad</em>:</p>
<pre tabindex="0"><code>&lt;sircmpwn&gt; minus: ping
&lt;sircmpwn&gt; what is the best way to frob foobars?
</code></pre><p><em>Good</em>:</p>
<pre tabindex="0"><code>&lt;sircmpwn&gt; minus: do you know how to frob foobars?
</code></pre><p>I will also occasionally send someone a second highlight un-pinging them if the
question was resolved and their input is no longer needed. Sometimes I <em>will</em>
send a vague &ldquo;ping &lt;username&gt;&rdquo; example when I actually want them to
participate in the discussion <em>right now</em>, but if they don&rsquo;t answer immediately
then I will usually un-ping them later.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<p>This draws attention to another trait of instant messaging: it is
<em>asynchronous</em>. Not everyone is online at the same time, and we should adjust
our usage of it in consideration of this. For example, when I send someone a
private message, rather than expecting them to engage in a real-time dialogue
with me right away, I dump everything I know about the issue for them to review
and respond to in their own time. This could be hours later, when I&rsquo;m not
available myself!</p>
<p><em>Bad</em>:</p>
<pre tabindex="0"><code>&lt;sircmpwn&gt; hey emersion, do you have a minute?
*8 hours later*
&lt;emersion&gt; yes?
*8 hours later*
&lt;sircmpwn&gt; what is the best way to frob foobars?
*8 hours later*
&lt;emersion&gt; did you try mongodb?
</code></pre><p><em>Good</em>:<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p>
<pre tabindex="0"><code>&lt;sircmpwn&gt; hey emersion, what&#39;s the best way to frob foobars?
&lt;sircmpwn&gt; I thought about mongodb but they made it non-free
*10 minutes later*
&lt;sircmpwn&gt; update: considered redis, but I bet they&#39;re one bad day away from making that non-free too
*8 hours later*
&lt;emersion&gt; good question
&lt;emersion&gt; maybe postgresql? they seem like a trustworthy bunch
*8 hours later*
&lt;sircmpwn&gt; makes sense. Thanks!
</code></pre><p>This also presents us a solution to the interruptions problem: just don&rsquo;t answer
right away, and don&rsquo;t expect others to. I don&rsquo;t have desktop or mobile
notifications for IRC. I only use it when I&rsquo;m sitting down at my computer, and I
&ldquo;pull&rdquo; notifications from it instead of having it &ldquo;push&rdquo; them to me — that
is, I glance at the client every now and then. If I&rsquo;m in the middle of
something, I don&rsquo;t read it.</p>
<p>With these considerations in mind, IRC has been an extraordinarily useful tool
for me, and maybe it can be for you, too. I&rsquo;m not troubled by interruptions to
my workflow. I never have to catch up on a bunch of old messages. I can
communicate efficiently and effectively with my team, increasing our
productivity considerably, without worrying about an added source of stress. I
hope that helps!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Many, many companies have tried, and failed, to re-invent IRC, usually within a proprietary walled garden. I offer my condolences if you find yourself using one of these.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Email is great. If you hate it you might be <a href="https://useplaintext.email">using it wrong</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>IRC terminology for mentioning someone&rsquo;s name to get their attention. Some platforms call this &ldquo;mentions&rdquo;.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>I occasionally forget to&hellip; apologies to anyone I&rsquo;ve annoyed by doing that.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>I have occasionally annoyed someone with this strategy. If they have desktop notifications enabled, they might see 10 notifications while I fill their message buffer with more and more details about my question. Sounds like a &ldquo;you&rdquo; problem, buddy 😉&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate></item><item><title>I will pay you cash to delete your npm module</title><link>https://drewdevault.com/2021/11/16/Cash-for-leftpad.html</link><description><![CDATA[<p>npm&rsquo;s culture presents a major problem for global software security. It&rsquo;s
grossly irresponsible to let dependency trees grow to thousands of dependencies,
from vendors you may have never heard of and likely have not critically
evaluated, to solve trivial tasks which could have been done from scratch in
mere seconds, or, if properly considered, might not even be needed in the first
place.</p>
<p>We need to figure out a way to curb this reckless behavior, but how?</p>
<p>I have an idea. Remember left-pad? That needs to happen more often.</p>
<p><img src="https://redacted.moe/f/e2f3d3a4.svg" alt="A LaTeX rendering of an equation which sets a reward (in dollars) to the logarithm of weekly downloads over lines of code in base 10 times one hundred"></p>
<p>I&rsquo;ll pay you cold hard cash to delete your npm module. The exact amount will be
determined on this equation, which is designed to offer higher payouts for
modules with more downloads and fewer lines of code. A condition of this is that
you must delete it without notice, so that everyone who depends on it wakes up
to a broken build.</p>
<p>Let&rsquo;s consider an example: <a href="https://www.npmjs.com/package/isarray">isArray</a>. It has only four lines of code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">toString</span> <span class="o">=</span> <span class="p">{}.</span><span class="nx">toString</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span> <span class="o">||</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Array]&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>With 51 million downloads this week, this works out to a reward of $710.</p>
<p>To prevent abuse, we&rsquo;ll have to agree to each case in advance. I&rsquo;ll review your
module to make sure it qualifies, and check for any funny business like
suspicious download figures or minified code. We must come to an agreement
<em>before</em> you delete the module, since I will not be able to check the line
counts or download numbers after it&rsquo;s gone.</p>
<p>I may also ask you to wait to delete your module, so that the chaos from each
deletion is separated by a few weeks to maximize the impact. Also, the reward is
capped at $1,000, so that I can still pay rent after this.</p>
<p>Do we have a deal? <a href="#conclusion">Click here to apply →</a></p>
<p><br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
<br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
<br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
<br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
<a id="conclusion"></a></p>
<p>Alright, the gig is up: this is satire. I&rsquo;m not actually going to pay you to
delete your npm module, nor do I want to bring about a dark winter of chaos in
the Node ecosystem. Plus, <a href="https://blog.npmjs.org/post/141905368000/changes-to-npms-unpublish-policy">it wouldn&rsquo;t actually work</a>.</p>
<p>I do hope that this idea strikes fear in the hearts of any Node developers that
read it, and in other programming language communities which have taken after
npm. What are you going to do if one of your dependencies vanishes?  What if
someone studies the minified code on your website, picks out an obscure
dependency they find there, then bribes the maintainers?</p>
<p>Most Node developers have no idea what&rsquo;s in their dependency tree. Most of them
are thousands of entries long, and have never been audited. This behavior is
totally reckless and needs to stop.</p>
<p>Most of my projects have fewer than 100 dependencies, and many have fewer than
10. Some have zero. This is by design. You can&rsquo;t have a free lunch, I&rsquo;m afraid.
Adding a dependency is a serious decision which requires consensus within the
team, an audit of the new dependency, an understanding of its health and
long-term prospects, and an ongoing commitment to re-audit them and be prepared
to change course as necessary.</p>
<hr>
<p>isArray license:</p>
<pre tabindex="0"><code>Copyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &#34;Software&#34;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</code></pre>]]></description><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate></item><item><title>Python: Please stop screwing over Linux distros</title><link>https://drewdevault.com/2021/11/16/Python-stop-screwing-distros-over.html</link><description><![CDATA[<blockquote>
<p>Linux distributions? Oh, those things we use to bootstrap our Docker
containers? Yeah, those are annoying. What were you complaining about again?</p></blockquote>
<p>The Python community is obsessed with reinventing the wheel, over and over and
over and over and over and over again. distutils, setuptools, pip, pipenv, tox,
flit, conda, poetry, virtualenv, requirements.txt, setup.py, setup.cfg,
pyproject.toml&hellip; I honestly can&rsquo;t even list all of the things you have to deal
with. It&rsquo;s a disaster.</p>
<p><a href="https://xkcd.com/1987/"><img src="https://imgs.xkcd.com/comics/python_environment.png" alt="An xkcd comic showing a convoluted graph of competing Python environments"></a></p>
<p>This comic is almost 4 years old and it has become much worse since. Python is a
mess. I really want to like Python. I have used it for many years and in many
projects, including SourceHut, which was predominantly developed in Python. But
I simply can&rsquo;t handle it anymore, and I have been hard at work removing Python
from my stack.</p>
<p>This has always been a problem with Python, but in the past few years everyone
and their cousin decided to &ldquo;solve&rdquo; it by building another mess which is totally
incompatible with all of the others, all of the &ldquo;solutions&rdquo; enjoying varying
levels of success in the community and none of them blessed as the official
answer.</p>
<p>I manage my Python packages in the only way which I think is sane: installing
them from my Linux distribution&rsquo;s package manager. I maintain a few dozen Python
packages for Alpine Linux myself. It&rsquo;s from this perspective that, throughout
all of this turmoil in Python&rsquo;s packaging world, I have found myself feeling
especially put out.</p>
<p>Every one of these package managers is designed for a reckless world in which
programmers chuck packages wholesale into ~/.pip, set up virtualenvs and pin
their dependencies to 10 versions and 6 vulnerabilities ago, and ship their
computers directly into production in Docker containers which aim to do the
minimum amount necessary to make their user&rsquo;s private data as insecure as
possible.</p>
<p>None of these newfangled solutions addresses the needs of any of the distros,
despite our repeated pleas. They all break backwards compatibility with our
use-case and send our complaints to /dev/null. I have seen representatives from
every Linux distro making repeated, desperate pleas to Python to address their
concerns, from Debian to Arch to Alpine to NixOS, plus non-Linux distros like
FreeBSD and Illumos. Everyone is frustrated. We are all struggling to deal with
Python right now, and Python is not listening to us.</p>
<p>What is it about Linux distros that makes our use-case unimportant? Have we
offered no value to Python over the past 30 years? Do you just feel that it&rsquo;s
time to shrug off the &ldquo;legacy&rdquo; systems we represent and embrace the brave new
world of serverless cloud-scale regulation-arbitrage move-fast-and-break-things
culture of the techbro startup?</p>
<p>Distros are feeling especially frustrated right now, but I don&rsquo;t think we&rsquo;re
alone. Everyone is frustrated with Python packaging. I call on the PSF to sit
down for some serious, sober engineering work to fix this problem. Draw up a
list of the use-cases you need to support, pick the most promising initiative,
and put in the hours to make it work properly, today and tomorrow. Design
something you can stick with and make stable for the next 30 years. If you have
to break some hearts, fine. Not all of these solutions can win. Right now,
upstream neglect is destroying the Python ecosystem. The situation is grave, and
we need strong upstream leadership right now.</p>
<hr>
<p>P.S. PEP-517 and 518 are a start, but are very disappointing in how little they
address distro problems. These PEPs are designed to tolerate the proliferation
of build systems, which is exactly what needs to stop. Python ought to stop
trying to avoid hurting anyone&rsquo;s feelings and pick one. Maybe their
decision-making framework prevents this, if so, the framework needs to be
changed.</p>
<hr>
<p>P.P.S. There are a lot of relevant xkcds that I wanted to add. Here&rsquo;s the ones I
left out:</p>
<ul>
<li><a href="https://xkcd.com/1988/">https://xkcd.com/1988/</a></li>
<li><a href="https://xkcd.com/927/">https://xkcd.com/927/</a></li>
</ul>
<p>Further reading: <a href="https://drewdevault.com/2021/09/27/Let-distros-do-their-job.html">Developers: Let distros do their job</a></p>]]></description><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate></item><item><title>Status update, November 2021</title><link>https://drewdevault.com/2021/11/15/Status-update-November-2021.html</link><description><![CDATA[<p>Hello again! Following a spooky month, we find ourselves again considering the
progress of our eternal march towards FOSS world domination.</p>
<p>I&rsquo;ll first address SourceHut briefly: today is the third anniversary of the
opening of the public alpha! I have written <a href="https://sourcehut.org/blog/2021-11-15-sourcehuts-third-year/">a longer post for sourcehut.org</a>
which I encourage you to read for all of the details.</p>
<p>In other news, we have decided to delay the release of our new programming
language, perhaps by as much as a year. We were aiming for February &lsquo;22, but
slow progress on some key areas such as cryptography and the self-hosting
compiler, plus the looming necessity of the full-scale acceptance testing of the
whole language and standard library, compound to make us unsure about meeting
the original release plans. However, progress is slow but moving. We have
incorporated the first parts of AES support in our cryptography library, and
ported the language to FreeBSD. A good start on date/time support has been under
development and I&rsquo;m pretty optimistic about the API design we&rsquo;ve come up with.
Things are looking good, but it will take longer than expected.</p>
<p><a href="https://sr.ht/~sircmpwn/visurf">visurf</a> has enjoyed quite a bit of progress
this month, thanks in large part to the help of a few new contributors. Nice
work, everyone! We could still use more help, so please swing by the #netsurf
channel on Libera Chat if you&rsquo;re interested in participating. Improvements which
landed this month include configuration options, url filtering via <a href="https://git.sr.ht/~sircmpwn/dotfiles/tree/master/bin/urlfilter">awk
scripts</a>, searching through pages, and copying links on the page with the
link following tool.</p>
<p>Projects which received minor updates this month include scdoc, gmni, kineto,
and godocs.io. That&rsquo;s it for today! My focus for the next month will be much the
same as this month: SourceHut GraphQL work and programming language work. See
you in another month!</p>]]></description><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate></item><item><title>Breaking down Apollo Federation&apos;s anti-FOSS corporate gaslighting</title><link>https://drewdevault.com/2021/11/05/Apollo-federation-2-gaslighting.html</link><description><![CDATA[<p>Gather around, my friends, for there is another company which thinks we are
stupid and we enjoy having our faces spat in. <a href="https://www.apollographql.com/blog/announcement/moving-apollo-federation-2-to-the-elastic-license-v2/">Apollo Federation</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> has
announced that they will switch to a non-free license. Let&rsquo;s find out just how
much the Elastic license really is going to &ldquo;protect the community&rdquo; like they
want you to believe.</p>
<p>Let&rsquo;s start by asking ourselves, objectively, what practical changes can we
expect from a switch from the <a href="https://mit-license.org">MIT license</a> to the <a href="https://www.elastic.co/licensing/elastic-license">Elastic
License</a>? Both licenses are pretty short, so I recommend quickly
reading them yourself before we move on.</p>
<p>I&rsquo;ll summarize the difference between these licenses. First, the Elastic license
offers you (the recipient of the software) one benefit that MIT does not: an
explicit license for any applicable patents. However, it also has many
additional restrictions, such as:</p>
<ul>
<li>No sublicensing (e.g. incorporating part of it into your own program)</li>
<li>No resale (e.g. incorporating it into Red Hat and selling support)</li>
<li>No modifications which circumvent the license key activation code</li>
<li>No use in a hosted or managed service</li>
</ul>
<p>This is an objective analysis of the change. How does Apollo explain the changes?</p>
<blockquote>
<h3 id="why-the-new-license">Why the new license?</h3>
<p>The Apollo developer community is at the heart of everything we do. As
stewards of our community, we have a responsibility to prevent harm from
anyone who intends to exploit our work without contributing back. We want to
continue serving you by funding the development of important open-source graph
technology for years to come. To honor that commitment, we’re moving Apollo
Federation 2 to the Elastic License v2 (ELv2).</p></blockquote>
<p>Taking them at their word, this change was motivated by their deep care for
their developer community. They want to &ldquo;honor their commitment&rdquo;, which is to
&ldquo;fund the development of important open-source graph technology&rdquo; and &ldquo;prevent
harm from anyone who intends to exploit our work without contributing back&rdquo;.</p>
<p>This is a very misleading statement. The answer to the question stated by the
header is &ldquo;funding the development&rdquo;, but they want us to first think that
they&rsquo;re keeping the community at the heart of this decision — a community
that they have just withheld several rights from. Their wording also seeks to
link the community with the work, &ldquo;our work&rdquo;, when the change is clearly
motivated from a position where Apollo believes they have effective ownership
over the software, sole right to its commercialization, and a right to charge
the community a rent — enforced via un-circumventable license key
activation code. The new license gives Apollo exclusive right to commercial
exploitation of the software — so they can &ldquo;exploit our work&rdquo;, but the
community itself cannot.</p>
<p>What&rsquo;s more, the change does not fund &ldquo;open-source graph technology&rdquo; as
advertised, because after this change, Apollo Federation is no longer open
source. The term &ldquo;open source&rdquo; is defined by the <a href="https://opensource.org/osd">Open Source
Definition</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, whose first clause is:</p>
<blockquote>
<p>[The distribution terms of open-source software] shall not restrict any party
from selling or giving away the software as a component of an aggregate
software distribution containing programs from several different sources. The
license shall not require a royalty or other fee for such sale.</p></blockquote>
<p>The OSD elaborates later:</p>
<blockquote>
<p>The license must not restrict anyone from making use of the program in a
specific field of endeavor. For example, it may not restrict the program from
being used in a business, or from being used for genetic research.</p>
<p>The rights attached to the program must apply to all to whom the program is
redistributed without the need for execution of an additional license by those
parties.</p></blockquote>
<p>The Elastic license clearly does not meet this criteria.</p>
<p>Reading the Apollo announcement further, it continues to peddle this and other
lies. The next paragraph attempts to build legitimacy for its peers in this
anti-FOSS gaslighting movement:</p>
<blockquote>
<p>Open-source licensing is evolving with the cloud. Many successful companies
built on open-source technology (such as Elastic, MongoDB, and Confluent)
have followed the path we’re taking to protect their communities and combine
open, collaborative development with the benefits of cloud services that are
easy to adopt and manage.</p></blockquote>
<p>They continue to use &ldquo;open-source&rdquo; language throughout, and misleads us into
believing that they&rsquo;ve made this change to protect the community and empower
developers.</p>
<blockquote>
<p>When the Elastic License v2 was released, Elastic CEO Shay Banon called upon
open-source companies facing a similar decision to “coalesce around a smaller
number of licenses.” We’re excited to be part of this coalition of modern
infrastructure companies building businesses that empower developers. [&hellip;]
Moving the Apollo Federation libraries and gateway to ELv2 helps us focus on
our mission: empowering all of you.</p></blockquote>
<p>It should be evident by now that this is complete horseshit. Let me peel away
the bullshit and explain what is actually going on here in plain English.</p>
<p>Free and open source software can be commercialized — this is an essential
requirement of the philosophy! However, it cannot be <em>exclusively</em>
commercialized. Businesses which participate in the FOSS ecosystem must give up
their intellectual property monopoly, and allow the commercial ecosystem to
flourish within their community — not just within their own ledger. They
have to make their hosted version <em>better</em> than the competitors, or seek other
monetization strategies: selling books, support contracts, consulting, early
access to security patches, and so on.</p>
<p>The community, allegedly at the heart of everything Apollo does, participates
in the software&rsquo;s development, marketing, and growth, and they are rewarded with
the right to commercialize it. The community is incentivized to contribute back
because they retain their copyright and the right to monetize the software. <a href="https://github.com/apollographql/apollo-client/graphs/contributors">634
people</a> have contributed to Apollo, and the product is the sum of
their efforts, and should belong to them — not just to the business which
shares a name with the software. The community built their projects on top of
Apollo based on the open source social contract, and gave their time, effort,
and copyright for their contributions to it, and Apollo pulled the rug out from
under them. In the words of Bryan Cantrill, this shameful, reprehensible
behavior is <a href="https://invidious.mnus.de/watch?v=-zRN7XLCRhc&amp;t=2483">shitting in the pool of open source</a>.</p>
<p>The smashing success of the free and open source software movement, both
socially and commercially, has attracted the attention of bad actors like
Apollo, who want to capitalize on this success without meeting its obligations.
This wave of nonfree commercial gaslighting is part of a pattern where a company
builds an open-source product, leverages the open-source community to build a
market for it and to <em>directly</em> improve the product via their contributions,
then switches to a nonfree license and steals the work for themselves, fucking
everyone else over.</p>
<p>Fuck Matt DeBergalis, Shay Banon, Jay Kreps, and Dev Ittycheria. These are the
CEOs and CTOs responsible for this exploitative movement. They are morally
bankrupt assholes and rent-seekers who gaslight and exploit the open source
community for personal gain.</p>
<p>This is a good reminder that this is the ultimate fate planned by any project
which demands a copyright assignment from contributors in the form of a
Contributor License Agreement (CLA). <a href="https://drewdevault.com/2018/10/05/Dont-sign-a-CLA.html">Do not sign these</a>! Retain your
copyright over your contributions and contribute to projects which are
collectively owned by their community — because <em>that&rsquo;s</em> how you honor
your community.</p>
<hr>
<p>Previously:</p>
<ul>
<li><a href="https://drewdevault.com/2021/01/19/Elasticsearch-does-not-belong-to-Elastic.html">Elasticsearch does not belong to Elastic</a></li>
<li><a href="https://drewdevault.com/2021/01/20/FOSS-is-to-surrender-your-monopoly.html">Open source means surrendering your monopoly over commercial exploitation</a></li>
<li><a href="https://drewdevault.com/2021/04/12/DCO.html">The Developer Certificate of Origin is a great alternative to a CLA</a></li>
</ul>
<p>If you are an Apollo Federation user who is affected by this change, I have set
up <a href="https://lists.sr.ht/~sircmpwn/apollo-fork">a mailing list</a> to organize a community-maintained fork. Please send an
email to this list if you are interested in participating in such a fork.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For those unaware, Apollo Federation is a means of combining many
GraphQL<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> microservices into one GraphQL API.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>For those unaware, GraphQL is a standardized query language largely used
to replace REST for service APIs. SourceHut uses GraphQL.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Beware, there are more gaslighters who want us to believe that the OSD
does not define &ldquo;open source&rdquo;. This is factually incorrect. Advocates of this
position usually have ulterior motives and, like Apollo, tend to be thinking
more about their wallets than the community.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 5 Nov 2021 00:00:00 +0000</pubDate></item><item><title>GitHub stale bot considered harmful</title><link>https://drewdevault.com/2021/10/26/stalebot.html</link><description><![CDATA[<p>Disclaimer: I work for a GitHub competitor.</p>
<p>One of GitHub&rsquo;s &ldquo;recommended&rdquo; marketplace features is the &ldquo;stale&rdquo; bot. The
purpose of this bot is to automatically close GitHub issues after a period of
inactivity, 60 days by default. You have probably encountered it yourself in the
course of your work.</p>
<p>This is a terrible, horrible, no good, very bad idea.</p>
<p><img src="https://redacted.moe/f/e2f0d39c.png" alt="A screenshot of an interaction with this bot"></p>
<p>I&rsquo;m not sure what motivates maintainers to install this on their repository,
other than the fact that GitHub recommends it to them. Perhaps it&rsquo;s motivated by
a feeling of shame for having a lot of unanswered issues? If so, this might stem
from a misunderstanding of the responsibilities a maintainer has to their
project. You are not obligated to respond to every issue, implement every
feature request, or fix every bug, or even acknowledge them in any way.</p>
<p>Let me offer you a different way of thinking about issues: a place for motivated
users to collaborate on narrowing down the problem and planning a potential fix.
A space for the community to work, rather than an action item for you to deal
with personally. It gives people a place to record additional information, and,
ultimately, put together a pull request for you to review. It does not matter if
this process takes days or weeks or years to complete. Over time, the issue will
accumulate details and workarounds to help users identify and diagnose the
problem, and to provide information for the person that might eventually write a
patch/pull request.</p>
<p>It&rsquo;s entirely valid to just ignore your bug tracker entirely and leave it up to
users to deal with themselves. There is no shame in having a lot of open issues
— if anything, it signals popularity. Don&rsquo;t deny your users access to an
important mutual support resource, and a crucial funnel to bring new
contributors into your project.</p>
<p>This is the approach I would recommend on GitHub, but for illustrative purposes
I&rsquo;ll also explain a slightly modified approach I encourage for SourceHut users.
sr.ht provides mailing lists (and, soon, IRC chat rooms), which are recommended
for first-line support and discussion about your project, including bug reports,
troubleshooting, and feature requests, instead of filing a ticket (our name for
issues). The mailing list gives you a space to refine the bug report, solicit
extra details or point out an existing ticket, or clarifying and narrowing down
feature requests. This significantly improves the quality of bug reports,
eliminates duplicates, and better leverages the community for support, resulting
in every single ticket representing a unique, actionable item.</p>
<p>I will eventually ask the user to file a ticket when the bug or feature request
is confirmed. This does not imply that I will follow up with a fix or
implementation on any particular time frame. It just provides this space I
discussed before: somewhere to collect more details, workarounds, and additional
information for users who experience a bug or want a feature, and to plan for
its eventual implementation at an undefined point in the future, either from a
SourceHut maintainer or from the community.</p>]]></description><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate></item><item><title>How SmarterEveryDay&apos;s 4privacy can, and cannot, meet its goals</title><link>https://drewdevault.com/2021/10/22/Smarter-every-day-and-4privacy.html</link><description><![CDATA[<p>I don&rsquo;t particularly find myself to be a fan of the SmarterEveryDay YouTube
channel, simply for being outside of Destin&rsquo;s target audience most of the time.
I understand that Destin, the channel&rsquo;s host, is a friendly person and a great
asset to his peers, and that he generally strives to do good. When I saw that he
was involved in a Kickstarter to develop a privacy product, it piqued my
interest. As a privacy advocate and jaded software engineer, I set out to find
out what it&rsquo;s all about.</p>
<p><em>You can watch the YouTube video <a href="https://www.youtube.com/watch?v=KMtrY6lbjcY">here</a>, and a short follow-up <a href="https://www.youtube.com/watch?v=Hy6STq337qo">here</a>.</em></p>
<p>There are several things to praise here. I honestly thought that Destin&rsquo;s
coverage of the topic of privacy for the layman was really well presented, and
took some notes to use the next time I&rsquo;m explaining privacy issues to my
friends. The coverage of the history of wiretapping and the pivotal role played
by 9/11, complete with an empathetic view of the mindset of American adults
contemporary to it that many find hard to express, along with great drone shots
of Big Tech&rsquo;s mysterious datacenters, this is all great stuff. For the right
project, Destin is a valuable asset with a large audience and a lot of
experience in making complex issues digestible for the every-person, and
4privacy is lucky to have access to him.</p>
<p>A lot of the buzzwords and things found on their <a href="https://4privacy.com/our-technology/">technology page</a> are
promising as well. The focus on end-to-end encryption and zero-knowledge
principles, <em>and</em> the commitment to open source, are absolutely necessary and
are great to see here. A lot of the tech described, although briefly, seems like
it&rsquo;s on the right track. The ability to use your own service provider, and the
focus on decentralization and federation, is very good.</p>
<p>I do have some concerns, however. Let&rsquo;s break them down into these categories:</p>
<ol>
<li>Incentives and economics</li>
<li>Responsibilities and cultivating trust</li>
<li>Ambitions and feasibility</li>
</ol>
<p>Given the value ($$$) associated with private user information, it&rsquo;s important
to know that the trove of private information overseen by a company like this is
safe from threats from the robber-barons of tech. 4privacy is <a href="https://4privacy.com/contact-us/">looking for
investors</a>, which is a red flag: investors demand a return, and if the
product isn&rsquo;t profitable, user data is the first thing up for auction. So, how
will 4privacy make money? We need to know. They might say that the E2EE prevents
them from directly monetizing user data, and they&rsquo;re right, but that&rsquo;s only for
today. If they become a market incumbent, they will have the power to change the
technology in a way which compromises privacy faster than we can move to another
system, and we need to understand that this will not happen.</p>
<p>Growing consumer awareness in privacy issues over the past decade, combined with
a generally low level of technology literacy in the population, has allowed a
lot of grifters to arise. One of the common forms these grifts take is seen in
the rise of VPN companies, which prey on consumer fear and often use YouTube as
a marketing channel, <a href="https://www.youtube.com/watch?v=OdPoVi_h0r0">including on Destin&rsquo;s previous videos</a>. Another giant,
flaming red flag appears whenever cryptocurrency is involved. In general terms,
the privacy space is thoroughly infested with bad actors, which makes matters of
trust very difficult. 4privacy needs to be prepared to be very honest and
transparent with not only their tech, but their financial structure and
incentives. With SourceHut, I had to <em>engineer</em> our incentives to suit stated
goals, and I communicate this to users so that they can make informed choices
about us. 4privacy would be wise to take similar steps, in full view of the
public.</p>
<p>Empowering users to make informed choices leads me into our next point: is
4privacy ready to bear the burden of responsibility for this system? As far as I
can glean from their mock-ups, they plan to be handling your government IDs,
passwords, healthcare information, confidential attorney/client communications,
and so on.  The consequences of having this information compromised are grave,
and this demands world-class security. It&rsquo;s also extremely important for
4privacy to be honest with their users about what their security model can, and
cannot, make promises about.</p>
<p>You must be honest with your users, and help them to understand how the system
works, and when it doesn&rsquo;t work, so that they can make informed choices about
how to trust it. This can be difficult when the profit motive is involved,
because they might conclude that they <em>don&rsquo;t</em> want to use your service. It&rsquo;s
even more difficult when you exist in a space full of grifters that are happy to
tell sweet lies to your users about fixing all of their problems. However, it
must be done.</p>
<p>Privacy tools are relied upon by vulnerable people facing challenging
situations. If you promise something you cannot deliver on, and they depend on
you to keep their information private in impossible conditions, when the other
shoe drops there could be dramatic consequences for their lives. If a journalist
in a war-torn country depends on you to keep their documents private, and you
fail, they could end up in prison or a labor camp or splattered on the wall of a
dark alley, and it&rsquo;ll have been your fault. You <em>must</em> be forthright and
realistic with users about how your system can and cannot keep them safe. I hope
Destin&rsquo;s future videos in the privacy series will cover how the system works in
more detail, including its limitations. He is skilled at explaining complicated
topics in a comprehensible manner for everyday people to understand, and I hope
he will leverage these skills here.</p>
<p>I have already noticed one place where they have failed to be honest in their
limitations, however, and it presents a major concern for me. Much of their
marketing speaks of the ability to <em>revoke</em> access to your private information
<em>after</em> a third-party has been provided access to it. This is, frankly, entirely
impossible, and I think it is extraordinarily irresponsible to design your
application in a manner that suggests that it can be done. To keep things short,
I&rsquo;ll refute the idea as briefly as possible: what&rsquo;s to stop someone from taking
a picture of the phone while it&rsquo;s displaying your private info? Or writing it
down? When you press the &ldquo;revoke&rdquo; button in the app, and it dutifully disappears
from their phone screen,<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> the private information is still written on a piece
of paper in their desk drawer and you&rsquo;re none the wiser. The application has
given you a <em>false sense of security</em>, which is a major problem for a
privacy-oriented tool.</p>
<p>You <em>can</em> work in this problem space, albeit under severely limited constraints.
For example, consider how the SSH agent works: an application which wants to use
your private keys to sign something can ask the agent for help, but the agent
will not provide the cryptographic keys for it to use directly — the agent
will do the cryptographic operation on the application&rsquo;s <em>behalf</em> and send the
<em>results</em> to the application to use. These constraints limit the use-cases
significantly, such that, for example, you could not send someone your social
security number using this system. You could, however, design a protocol in
which an organization which needs to verify your identity can ask, in
programmatic terms, &ldquo;is this person who they say they are?&rdquo;, and 4privacy
answers, possibly consulting their SSN, &ldquo;yes&rdquo; or &ldquo;no&rdquo;. This does not seem to be
what they&rsquo;re aiming for, however.</p>
<p>So, with all of this in mind, how ambitious is their idea as a whole? Is it
feasible? What kind of resources will they need to pull it off?</p>
<p>In short, this idea is extraordinarily ambitious. They are designing a novel
cryptosystem, which is an immediate red flag: designing a secure cryptosystem is
one of the most technologically challenging feats a programming team can
undertake. Furthermore, they&rsquo;re building a distributed, federated system, which
is itself a highly complex and challenging task, even more so when the system is
leveraged to exchange sensitive information. It can be done, but it takes an
extraordinarily talented team with hard-core technical chops and a lot of
experience.</p>
<p>What&rsquo;s more, if they were to do this well, it would involve developing and
standardizing open protocols. This requires a greater degree of openness and
community participation than <a href="https://github.com/4PrivacyEngine/4PrivacyEngine-Core">they are planning to do</a>. Furthermore, they
need to get others to agree to implement these protocols, which involves solving
social and political problems — both in technical and non-technical
senses. For instance, the Dutch government stores much of my personal
information in the DigiD system. Will they be able to convince the Netherlands
to work with their protocols? How about every other country? And, if they want
me to store my health insurance in the app, how are they going to convince my
doctor to use the app to receive it? And how about every other doctor? And what
about all of the other domains they want to be involved in outside of healthcare
data? Will they interoperate with legacy systems to achieve the market
penetration they need? Will those legacy systems provide for their end-to-end
encryption needs, and if not, will users understand the consequences?</p>
<p>I&rsquo;m not saying that any of this is impossible — only that it is
extraordinarily difficult to pull off. Extraordinary projects require
extraordinary resources.  They will need multiple highly talented engineering
teams working in parallel, and the support staff necessary to keep them going.</p>
<p>Their goal on Kickstarter, which was quickly met and exceeded, is $175,000. This
is nowhere near enough, so either they aren&rsquo;t going to pull it off, or they have
more money from somewhere else. Destin is acknowledged as an investor, and they
are seeking more investments on their website — how much money, and from
whom, now and in the future? By taking the lion&rsquo;s share from entities other than
their users, they have set up concerning incentives in which the entities
responsible for private data have millions on the line and are itchy to get
returns, and the entities whom the private data concerns haven&rsquo;t been invited to
the negotiating table.</p>
<p>In short, I would urge them to do the following:</p>
<ul>
<li>Make clear their funding sources, incentive model, and plans for monetization.
Tell everyone the pitch they tell to private investors.</li>
<li>Publish their whitepaper draft and invite public comment now, rather than when
it&rsquo;s &ldquo;finished&rdquo;. Consider doing the same with the source code.</li>
<li>Work to inform potential users about how the technology works, to the extent
that they can make informed choices about it. Destin would be a great help for
this.</li>
</ul>
<p>4privacy should generally institute a policy of greater transparency and
openness by default, preferring to keep private only what they absolutely must.
There is no shame in iterating on an incomplete product in the view of the
public. On the contrary, I am quite proud that my business works in this manner.</p>
<p>The fundraising campaign quickly met its goal and will presumably only continue
to grow in the coming weeks — it&rsquo;s reasonably certain that it will close
with at least $1M raised. Having met their goal, the product will presumably
ship, and we&rsquo;ll see the answers to these questions eventually. The team has a
lot of work ahead of them: good luck.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>And there&rsquo;s no guarantee that it will, for the record.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate></item><item><title>Software developers have stopped caring about reliability</title><link>https://drewdevault.com/2021/10/17/Reliability.html</link><description><![CDATA[<p>Of all the principles of software engineering which has fallen by the wayside in
the modern &ldquo;move fast and break things&rdquo; mentality of <del>assholes</del> modern
software developers, reliability is perhaps the most neglected, along with its
cousin, robustness. Almost all software that users encounter in $CURRENTYEAR is
straight-up broken, and often badly.</p>
<p>Honestly, it&rsquo;s pretty embarassing. Consider all of the stupid little things
you&rsquo;ve learned how to do in order to work around broken software. Often
something as simple as refreshing the page or rebooting the program to knock
some sense back into it — most users can handle that. There are much
stupider problems, however, and they are <em>everywhere</em>. Every morning, I boot,
then immediately hard-reboot, my workstation, because it seems to jigger my
monitors into waking up properly to do their job. On many occasions, I have used
the browser dev tools to inspect a broken web page to figure out how to make it
do the thing I want to do, usually something complicated like submitting a
form properly (a solved problem since 1993).<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>When the average person (i.e. a non-nerd) says they &ldquo;don&rsquo;t get computers&rdquo;, I
believe them. It&rsquo;s not because they&rsquo;re too lazy to learn, or because they&rsquo;re
backwards and outdated, or can&rsquo;t keep with the times. It&rsquo;s because computers are
hard to understand. They are enigmatic and unreliable. <strong>I</strong> know that when my
phone suddenly stops delivering SMS messages mid-conversation, it&rsquo;s not because
I&rsquo;ve been abandoned by my friend, but because I need to toggle airplane mode to
reboot the modem. <strong>I</strong> know that when I middle click a link and &ldquo;javascript:;&rdquo;
opens in a new tab, <del>an asshole</del> a developer wants me to left click it
instead. Most people don&rsquo;t understand this! You and I, dear reader, have built
up an incredible amount of institutional knowledge about how to deal with broken
computers. We&rsquo;ve effectively had to reverse engineer half the software we&rsquo;ve
encountered to figure out just where to prod it to make it do the thing you
asked. If you don&rsquo;t have this background, then computers are a nightmare.</p>
<p>It&rsquo;s hard to overstate just how much software developers have given the finger
to reliability in the past 10 years or so. It&rsquo;s for the simplest, silliest
reasons, too, like those web forms. My web browser has been perfectly competent
at submitting HTML forms for the past 28 years, but for some stupid reason some
<del>asshole</del> developer decided to reimplement all of the form semantics in
JavaScript, and now I can&rsquo;t pay my electricity bill without opening up the dev
tools. Imagine what it&rsquo;s like to not know how to do that. Imagine if you were
blind.</p>
<p>Folks, this is not okay. Our industry is characterized by institutional
recklessness and a callous lack of empathy for our users. It&rsquo;s time for a
come-to-jesus moment. This is our fault, and yes, dear reader, you are included
in that statement. We are personally responsible for this disaster, and we must
do our part to correct it.</p>
<p>This is what you must do.</p>
<p>You must prioritize simplicity. You and I are not smart enough to be clever, so
don&rsquo;t try. As the old saying goes, there are two kinds of programs: those simple
enough to obviously have no bugs, and those complicated enough to have no
obvious bugs. It is by no means easier to make the simpler kind, in fact, it&rsquo;s
much more difficult. However, the simpler the system is, the easier it is to
reason about all of its states and edge cases. You do not need a
JavaScript-powered custom textbox widget. YOU DO NOT NEED A JAVASCRIPT-POWERED
CUSTOM TEXTBOX WIDGET.</p>
<p>On the subject of state, state is the language of robustness. When something
breaks, it&rsquo;s because a state occured that you didn&rsquo;t plan for. Think about your
program in terms of this state. Design data structures that cannot represent
invalid states (within reason), and then enumerate each of those possible states
and <em>check</em> that your application does something reasonable in that situation.</p>
<p>Identify your error cases, plan for them, implement that plan, and then <em>test
it</em>. Sometimes things don&rsquo;t work! Most languages give you tools to identify
error cases and handle them appropriately, so use them. And again, for the love
of god, <em>test it</em>. If you commit and push a line of code that you have not
personally watched run and work as expected, you have failed to do your job
properly.</p>
<p>Prefer to use proven technologies. If you use unproven technologies, you must
use them scarcely, and you must <em>personally</em> understand them at an intimate
level. If you haven&rsquo;t read the source code for the brand-new database engine you
heard about on HN two weeks ago, you shouldn&rsquo;t be putting it into
production.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Finally, stop letting economics decide everything you do. Yes, developers have
finite time, and that time costs. Yes, users with annoying needs like
accessibility and internationalization are more expensive to support than the
returns they produce. <em>You need to pay for it anyway</em>. It&rsquo;s the right thing to
do. We can be profitable <em>and</em> empathetic. Don&rsquo;t think about rushing to market
first, and instead prioritize getting a <em>good product</em> into your user&rsquo;s hands.
Our users are not cattle. It is not our job to convert attention into money at
their expense. We need to treat users with respect, and that means testing our
goddamn code before we ship it.</p>
<hr>
<p>Do an exercise with me. Grab a notepad and make a note every time you encounter
some software bug in production (be it yours or someone else&rsquo;s), or need to rely
on your knowledge as a computer expert to get a non-expert system to work.
<a href="mailto:sir@cmpwn.com">Email me</a> your list in a week.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I often also end up using the dev tools to remove the rampant ads, spyware, nagbars, paywalls, newsletter pop-ups, and spam. Do not add this shit to your website. Don&rsquo;t you <em>dare</em> write that code.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>If you don&rsquo;t have <em>access</em> to the source code, then you definitely should not be using it.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate></item><item><title>Status update, October 2021</title><link>https://drewdevault.com/2021/10/15/Status-update-October-2021.html</link><description><![CDATA[<p>On this dreary morning here in Amsterdam, I&rsquo;ve made my cup of coffee and
snuggled my cat, and so I&rsquo;m pleased to share some FOSS news with you. Some cool
news today! We&rsquo;re preparing for a new core product launch at sr.ht, cool updates
for our secret programming language, plus news for visurf.</p>
<p>Simon Ser has been hard at work on expanding his <a href="https://sr.ht/~emersion/soju/">soju</a> and <a href="https://sr.ht/~emersion/gamja/">gamja</a>
projects for the purpose of creating a new core sourcehut product: chat.sr.ht.
We&rsquo;re rolling this out in a private beta at first, to seek a fuller
understanding of the system&rsquo;s performance characteristics, to make sure
everything is well-tested and reliable, and to make plans for scaling,
maintenance, and general availability. In short, chat.sr.ht is a hosted IRC
bouncer which is being made available to all paid sr.ht users, and a kind of
webchat gateway which will be offered to unpaid and anonymous users. I&rsquo;m pretty
excited about it, and looking forward to posting a more detailed announcement in
a couple of weeks. In other sourcehut news, work on GraphQL continues, with
paste.sr.ht landing and todo.sr.ht&rsquo;s writable API in progress.</p>
<p>Our programming langauge project grew some interesting features this month as
well, the most notable of which is probably reflection. I wrote <a href="https://drewdevault.com/2021/10/05/Reflection.html">an earlier blog
post</a> which goes over this in some detail. There&rsquo;s also ongoing work to
develop the standard library&rsquo;s time and date support, riscv64 support is
essentially done, and we&rsquo;ve overhauled the grammar for switch and match
statements to reduce a level of indentation for typical code. In the coming
weeks, I hope to see date/time support and reflection fleshed out much more, and
to see some more development on the self-hosted compiler.</p>
<p>Work has also continued apace on <a href="https://sr.ht/~sircmpwn/visurf">visurf</a>, which is a project I would love to
have your help with — drop me a note on #netsurf on libera.chat if you&rsquo;re
interested. Since we last spoke, visurf has gained support for readline-esque
keybindings on the exline, a &ldquo;follow&rdquo; mode for keyboard navigation, Wayland
clipboard support, and a few other features besides. Please help! This project
will need a lot of work to complete, and much of that work is very accessible to
programmers of any skill level.</p>
<p>Also on the subject of Netsurf and Netsurf-adjacent work, I broke ground on
<a href="https://git.sr.ht/~sircmpwn/antiweb">antiweb</a> this month. The goal of this project is to provide a conservative
CSS toolkit which allows you to build web interfaces which are compatible with
marginalized browsers like Netsurf and Lynx. I should be able to migrate my blog
to this framework in the foreseeable future, and ultimately the sourcehut
frontend will be overhauled with this framework.</p>
<p>And a collection of minor updates:</p>
<ul>
<li>I have been working on Alpine Linux for RISC-V again, and have upstreamed the
necessary patches to get u-Boot to bootstrap UEFI into grub for a reasonably
sane boot experience. Next up will be getting this installed onto the onboard
SPI flash so that it works more like a native firmware.</li>
<li>I have tagged versions 1.0 of <a href="https://git.sr.ht/~sircmpwn/gmnisrv">gmnisrv</a> and <a href="https://git.sr.ht/~sircmpwn/gmni">gmni</a>.</li>
<li>Adnan Maolood has been hard at work on <a href="https://godocs.io">godocs.io</a> and we should soon
expect a 1.0 of our gddo fork as well, which should make it more or less
plug-and-play to get a working godocs instance on localhost from your local
Go module cache.</li>
</ul>
<p>That&rsquo;s all for today! Take care, and thank you as always for your continued
support. I&rsquo;ll see you next month!</p>]]></description><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate></item><item><title>How reflection works in ****</title><link>https://drewdevault.com/2021/10/05/Reflection.html</link><description><![CDATA[<p><em>Note: this is a redacted copy of a blog post published on the internal
development blog of a new systems programming language. The name of the project
and further details are deliberately being kept in confidence until the initial
release. You may be able to find it if you look hard enough — you have my
thanks in advance for keeping it to yourself. For more information, see &ldquo;<a href="https://drewdevault.com/2021/03/19/A-new-systems-language.html">We are
building a new systems programming language</a>&rdquo;.</em></p>
<style>
.redacted {
  background: black;
  foreground: black;
}
</style>
<p>I&rsquo;ve just merged support for reflection in <span class="redacted">xxxx</span>.
Here&rsquo;s how it works!</p>
<h2 id="background">Background</h2>
<p>&ldquo;Reflection&rdquo; refers to the ability for a program to examine the type system of
its programming language, and to dynamically manipulate types and their values
at runtime. You can learn more at <a href="https://en.wikipedia.org/wiki/Reflective_programming">Wikipedia</a>.</p>
<h2 id="reflection-from-a-user-perspective">Reflection from a user perspective</h2>
<p>Let&rsquo;s start with a small sample program:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">types</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">my_type</span><span class="o">:</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">type</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">typeinfo</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">types</span><span class="o">::</span><span class="n">typeinfo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">reflect</span><span class="p">(</span><span class="n">my_type</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">fmt</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;int</span><span class="se">\n</span><span class="s">id: {}</span><span class="se">\n</span><span class="s">size: {}</span><span class="se">\n</span><span class="s">alignment: {}&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">typeinfo</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">typeinfo</span><span class="p">.</span><span class="n">sz</span><span class="p">,</span><span class="w"> </span><span class="n">typeinfo</span><span class="p">.</span><span class="n">al</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Running this program produces the following output:</p>
<pre tabindex="0"><code>int
id: 1099590421
size: 4
alignment: 4
</code></pre><p>This gives us a simple starting point to look at. We can see that &ldquo;type&rdquo; is used
as the type of the &ldquo;my_type&rdquo; variable, and initialized with a &ldquo;type(int)&rdquo;
expression. This expression returns a type value for the type given in the
parenthesis — in this case, for the &ldquo;int&rdquo; type.</p>
<p>To learn anything useful, we have to convert this to a &ldquo;types::typeinfo&rdquo;
pointer, which we do via <code>types::reflect</code>. The typeinfo structure looks like
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">typeinfo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">id</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">sz</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">al</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">flags</span><span class="o">:</span><span class="w"> </span><span class="n">flags</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">repr</span><span class="o">:</span><span class="w"> </span><span class="n">repr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The ID field is the type&rsquo;s unique identifier, which is universally unique and
deterministic, and forms part of <span class="redacted">xxxx</span>&rsquo;s ABI. This
is derived from an FNV-32 hash of the type information. You can find the ID for
any type by modifying our little example program, or you can use the helper
program in the <code>cmd/<span class="redacted">xxxx</span>type</code> directory
of the <span class="redacted">xxxx</span> source tree.</p>
<p>Another important field is the &ldquo;repr&rdquo; field, which is short for
&ldquo;representation&rdquo;, and it gives details about the inner structure of the type.
The repr type is defined as a tagged union of all possible type representations
in the <span class="redacted">xxxx</span> type system:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">repr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">alias</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">array</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">builtin</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">enumerated</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">func</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">pointer</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">slice</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">struct_union</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">tagged</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">tuple</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>In the case of the &ldquo;int&rdquo; type, the representation is &ldquo;builtin&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">builtin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="w"> </span><span class="kt">uint</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">BOOL</span><span class="p">,</span><span class="w"> </span><span class="n">CHAR</span><span class="p">,</span><span class="w"> </span><span class="n">F32</span><span class="p">,</span><span class="w"> </span><span class="n">F64</span><span class="p">,</span><span class="w"> </span><span class="n">I16</span><span class="p">,</span><span class="w"> </span><span class="n">I32</span><span class="p">,</span><span class="w"> </span><span class="n">I64</span><span class="p">,</span><span class="w"> </span><span class="n">I8</span><span class="p">,</span><span class="w"> </span><span class="n">INT</span><span class="p">,</span><span class="w"> </span><span class="n">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">RUNE</span><span class="p">,</span><span class="w"> </span><span class="n">SIZE</span><span class="p">,</span><span class="w"> </span><span class="n">STR</span><span class="p">,</span><span class="w"> </span><span class="n">U16</span><span class="p">,</span><span class="w"> </span><span class="n">U32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">U64</span><span class="p">,</span><span class="w"> </span><span class="n">U8</span><span class="p">,</span><span class="w"> </span><span class="n">UINT</span><span class="p">,</span><span class="w"> </span><span class="n">UINTPTR</span><span class="p">,</span><span class="w"> </span><span class="n">VOID</span><span class="p">,</span><span class="w"> </span><span class="n">TYPE</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p><code>builtin::INT</code>, in this case. The structure and representation of the &ldquo;int&rdquo; type
is defined by the <span class="redacted">xxxx</span> specification and cannot be
overridden by the program, so no further information is necessary. The relevant
part of the spec is:</p>
<p><img src="https://redacted.moe/f/9fb3b7e2.png" alt="&ldquo;The precision of &lsquo;int&rsquo; and &lsquo;uint&rsquo; are implementation-defined. &lsquo;int&rsquo; shall be signed, and &lsquo;uint&rsquo; shall be unsigned. Both types shall be at least 32-bits in precision. The precision in bits shall be a power of two.&rdquo;">
<img src="https://redacted.moe/f/f13236c9.png" alt="A table from the specification showing the precision ranges of each integer type"></p>
<p>More information is provided for more complex types, such as structs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">types</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">my_type</span><span class="o">:</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">type</span><span class="p">(</span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">y</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">typeinfo</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">types</span><span class="o">::</span><span class="n">typeinfo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">reflect</span><span class="p">(</span><span class="n">my_type</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;id: {}</span><span class="se">\n</span><span class="s">size: {}</span><span class="se">\n</span><span class="s">alignment: {}&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">typeinfo</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">typeinfo</span><span class="p">.</span><span class="n">sz</span><span class="p">,</span><span class="w"> </span><span class="n">typeinfo</span><span class="p">.</span><span class="n">al</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">st</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">typeinfo</span><span class="p">.</span><span class="n">repr</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">struct_union</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">kind</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">struct_kind</span><span class="o">::</span><span class="n">STRUCT</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">fields</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">field</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">st</span><span class="p">.</span><span class="n">fields</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">assert</span><span class="p">(</span><span class="n">field</span><span class="p">.</span><span class="n">type_</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="k">type</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\t</span><span class="s">{}: offset {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">field</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">field</span><span class="p">.</span><span class="n">offs</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The output of this program is:</p>
<pre tabindex="0"><code>id: 2617358403
size: 8
alignment: 4
	x: offset 0
	y: offset 4
</code></pre><p>Here the &ldquo;repr&rdquo; field provides the &ldquo;types::struct_union&rdquo; structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">struct_union</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">kind</span><span class="o">:</span><span class="w"> </span><span class="n">struct_kind</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fields</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">struct_field</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">struct_kind</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">STRUCT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">UNION</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">struct_field</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">offs</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">type_</span><span class="o">:</span><span class="w"> </span><span class="k">type</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Makes sense? Excellent. So how does it all work?</p>
<h2 id="reflection-internals">Reflection internals</h2>
<p>Let me first draw the curtain back from the magic &ldquo;types::reflect&rdquo; function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Returns [[typeinfo]] for the provided type.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">reflect</span><span class="p">(</span><span class="n">in</span><span class="o">:</span><span class="w"> </span><span class="k">type</span><span class="p">)</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="o">*</span><span class="n">typeinfo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">in</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">typeinfo</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>It simply casts the &ldquo;type&rdquo; value to a pointer, which is what it is. When the
compiler sees an expression like <code>let x = type(int)</code>, it statically allocates
the typeinfo data structure into the program and returns a pointer to it, which
is then wrapped up in the opaque &ldquo;type&rdquo; meta-type. The &ldquo;reflect&rdquo; function simply
converts it to a useful pointer. Here&rsquo;s the generated IR for this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="o">%</span><span class="n">binding</span><span class="p">.</span><span class="mi">4</span><span class="w"> </span><span class="o">=</span><span class="n">l</span><span class="w"> </span><span class="n">alloc8</span><span class="w"> </span><span class="mi">8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">storel</span><span class="w"> </span><span class="err">$</span><span class="n">rt</span><span class="p">.</span><span class="n">builtin_int</span><span class="p">,</span><span class="w"> </span><span class="o">%</span><span class="n">binding</span><span class="p">.</span><span class="mi">4</span><span class="w">
</span></span></span></code></pre></div><p>A clever eye will note that we initialize the value to a pointer to
&ldquo;rt.builtin_int&rdquo;, rather than allocating a typeinfo structure here and now. The
runtime module provides static typeinfos for all built-in types, which look like
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="nd">@hidden</span><span class="w"> </span><span class="n">builtin_int</span><span class="o">:</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">typeinfo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">typeinfo</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1099590421</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">sz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="n">al</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="n">flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">repr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">types</span><span class="o">::</span><span class="n">builtin</span><span class="o">::</span><span class="n">INT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>These are an internal implementation detail, hence &ldquo;@hidden&rdquo;. But many types are
not built-in, so the compiler is required to statically allocate a typeinfo
structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">type</span><span class="p">(</span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><pre tabindex="0"><code>data $strdata.7 = section &#34;.data.strdata.7&#34; { b &#34;x&#34; }

data $strdata.8 = section &#34;.data.strdata.8&#34; { b &#34;y&#34; }

data $sldata.6 = section &#34;.data.sldata.6&#34; {
  l $strdata.7, l 1, l 1, l 0, l $rt.builtin_int,
  l $strdata.8, l 1, l 1, l 4, l $rt.builtin_int,
}

data $typeinfo.5 = section &#34;.data.typeinfo.5&#34; {
  w 2617358403, z 4,
  l 8,
  l 4,
  w 0, z 4,
  w 5555256, z 4,
  w 0, z 4,
  l $sldata.6, l 2, l 2,
}

export function section &#34;.text.main&#34; &#34;ax&#34; $main() {
@start.0
	%binding.4 =l alloc8 8
@body.1
	storel $typeinfo.5, %binding.4
@.2
	ret
}
</code></pre><p>This has the unfortunate effect of re-generating all of these typeinfo
structures every time someone uses <code>type(struct { x: int, y: int })</code>. We still
have one trick up our sleeve, though: type aliases! Most people don&rsquo;t actually
use anonymous structs like this often, preferring to use a type alias to give
them a name like &ldquo;coords&rdquo;. When they do this, the situation improves:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">type</span><span class="p">(</span><span class="n">coords</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><pre tabindex="0"><code>data $strdata.1 = section &#34;.data.strdata.1&#34; { b &#34;coords&#34; }

data $sldata.0 = section &#34;.data.sldata.0&#34; { l $strdata.1, l 6, l 6 }

data $strdata.4 = section &#34;.data.strdata.4&#34; { b &#34;x&#34; }

data $strdata.5 = section &#34;.data.strdata.5&#34; { b &#34;y&#34; }

data $sldata.3 = section &#34;.data.sldata.3&#34; {
  l $strdata.4, l 1, l 1, l 0, l $rt.builtin_int,
  l $strdata.5, l 1, l 1, l 4, l $rt.builtin_int,
}

data $typeinfo.2 = section &#34;.data.typeinfo.2&#34; {
  w 2617358403, z 4,
  l 8,
  l 4,
  w 0, z 4,
  w 5555256, z 4,
  w 0, z 4,
  l $sldata.3, l 2, l 2,
}

data $type.1491593906 = section &#34;.data.type.1491593906&#34; {
  w 1491593906, z 4,
  l 8,
  l 4,
  w 0, z 4,
  w 3241765159, z 4,
  l $sldata.0, l 1, l 1,
  l $typeinfo.2
}

export function section &#34;.text.main&#34; &#34;ax&#34; $main() {
@start.6
	%binding.10 =l alloc8 8
@body.7
	storel $type.1491593906, %binding.10
@.8
	ret
}
</code></pre><p>The declaration of a type alias provides us with the perfect opportunity to
statically allocate a typeinfo singleton for it. Any of these which go unused by
the program are automatically stripped out by the linker thanks to the
<code>--gc-sections</code> flag. Also note that a type alias is considered a distinct
representation from the underlying struct type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">alias</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ident</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">secondary</span><span class="o">:</span><span class="w"> </span><span class="k">type</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This explains the differences in the structure of the &ldquo;type.1491593906&rdquo; global.
The <code>struct { x: int, y: int }</code> type is
the &ldquo;secondary&rdquo; field of this type.</p>
<h2 id="future-improvements">Future improvements</h2>
<p>This is just the first half of the equation. The next half is to provide useful
functions to work with this data. One such example is &ldquo;types::strenum&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Returns the value of the enum at &#34;val&#34; as a string. Aborts if the value is
</span></span></span><span class="line"><span class="cl"><span class="c1">// not present. Note that this does not work with enums being used as a flag
</span></span></span><span class="line"><span class="cl"><span class="c1">// type, see [[strflag]] instead.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">strenum</span><span class="p">(</span><span class="n">ty</span><span class="o">:</span><span class="w"> </span><span class="k">type</span><span class="p">,</span><span class="w"> </span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">ty</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unwrap</span><span class="p">(</span><span class="n">ty</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">en</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ty</span><span class="p">.</span><span class="n">repr</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="n">enumerated</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">value</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">en</span><span class="p">.</span><span class="n">storage</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">CHAR</span><span class="p">,</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">I8</span><span class="p">,</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">U8</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">u8</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">I16</span><span class="p">,</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">U16</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">u16</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">I32</span><span class="p">,</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">U32</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">u32</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">I64</span><span class="p">,</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">U64</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">INT</span><span class="p">,</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">UINT</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="k">size</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">u32</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="mi">8</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">abort</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="n">builtin</span><span class="o">::</span><span class="n">SIZE</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">yield</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="k">size</span><span class="p">(</span><span class="kt">size</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">u32</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="mi">8</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">yield</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">val</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">abort</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">abort</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">en</span><span class="p">.</span><span class="n">values</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">en</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="mi">1</span><span class="p">.</span><span class="n">u</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">value</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">en</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">abort</span><span class="p">(</span><span class="s">&#34;enum has invalid value&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This is used like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">types</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">watchmen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">VIMES</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">CARROT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ANGUA</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">COLON</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">NOBBY</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">officer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">watchmen</span><span class="o">::</span><span class="n">ANGUA</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="n">types</span><span class="o">::</span><span class="n">strenum</span><span class="p">(</span><span class="k">type</span><span class="p">(</span><span class="n">watchmen</span><span class="p">),</span><span class="w"> </span><span class="o">&amp;</span><span class="n">officer</span><span class="p">))</span><span class="o">!</span><span class="p">;</span><span class="w"> </span><span class="c1">// Prints ANGUA
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Additional work is required to make more useful tools like this. We will
probably want to introduce a &ldquo;value&rdquo; abstraction which can store an arbitrary
value for an arbitrary type, and helper functions to assign to or read from
those values. A particularly complex case is likely to be some kind of helper
for calling a function pointer via reflection, which we I may cover in a later
article. There will also be some work to bring the &ldquo;types&rdquo; (reflection) module
closer to the <span class="redacted">xxxx</span>::* namespace, which already
features <span class="redacted">xxxx</span>::ast, <span
class="redacted">xxxx</span>::parse, and <span
class="redacted">xxxx</span>::types, so that the parser, type checker, and
reflection systems are interopable and work together to implement the <span
class="redacted">xxxx</span> type system.</p>
<hr>
<p><em>Want to help us build this language? We are primarily looking for help in the
following domains:</em></p>
<ul>
<li><em>Architectures or operating systems, to help with ports</em></li>
<li><em>Compilers &amp; language design</em></li>
<li><em>Cryptography implementations</em></li>
<li><em>Date &amp; time implementations</em></li>
<li><em>Unix</em></li>
</ul>
<p><em>If you&rsquo;re an expert in a domain which is not listed, but that you think we
should know about, then feel free to reach out. Experts are perferred, motivated
enthusiasts are acceptable. <a href="mailto:sir@cmpwn.com">Send me an email</a> if you want to help!</em></p>]]></description><pubDate>Tue, 5 Oct 2021 00:00:00 +0000</pubDate></item><item><title>Developers: Let distros do their job</title><link>https://drewdevault.com/2021/09/27/Let-distros-do-their-job.html</link><description><![CDATA[<p>I wrote a post some time ago titled <a href="https://drewdevault.com/2019/12/09/Developers-shouldnt-distribute.html">Developers shouldn&rsquo;t distribute their own
software</a>, and after a discussion on the sr.ht IRC channel today, the topic
seems worthy of renewed mention. Let&rsquo;s start with this: what exactly is a
software distribution, anyway?</p>
<p>I use &ldquo;software distribution&rdquo; here, rather than &ldquo;Linux distribution&rdquo;, because it
generalizes better. For example, all of the major BSD systems, plus Illumos and
others besides, are software distributions, but don&rsquo;t involve Linux. Some differ
further still, sitting on top of another operating system, such as Nix or
pkgsrc. What these systems all have in common is that they concern themselves
with the <em>distribution</em> of <em>software</em>, and thus are a <em>software distribution</em>.</p>
<p>An important trait of these systems is that they function independently of the
development of the software they distribute, and are overseen by a third party.
For the purpose of this discussion, I will rule out package repositories which
are not curated by the third-party in question, such as npm or PyPI. It is no
coincidence that such repositories often end up <a href="https://www.zdnet.com/article/two-malicious-python-libraries-removed-from-pypi/">distributing</a> <a href="https://www.trendmicro.com/vinfo/dk/security/news/cybercrime-and-digital-threats/hacker-infects-node-js-package-to-steal-from-bitcoin-wallets">malware</a>.</p>
<p>Software distributions are often volunteer-run and represent the interests
of the users; in a sense they are a kind of <a href="https://en.wikipedia.org/wiki/Trade_union">union</a> of users. They handle
building your software for their system, and come to the table with
domain-specific knowledge about the concerns of the platform that they&rsquo;re
working with. There are hundreds of Linux distros and each does things
differently — the package maintainers are the experts who save you the
burden of learning how all of them work. Instead of cramming all of your files
into /opt, they will carefully sort it into the right place, make sure all of
your dependencies are sorted upon installation, and make the installation of
your software a single command (or click) away.</p>
<p>They also serve an important role as the user&rsquo;s advocate. If an update ships
which breaks a bunch of other packages, they&rsquo;ll be in the trenches dealing with
it so that the users don&rsquo;t face the breakage themselves. They are also the first
line of defense preventing the installation of malware on the user&rsquo;s system.
Many sideloaded packages for Linux include <del>telemetry</del> spyware or adware from
the upstream distributor, which is usually patched out by the distribution.</p>
<p>Distributions are also working on innovative projects at the scale of the entire
software ecosystem, and are dealing with bigger picture things than you need to
concern yourself with. Here are some things which they have already solved:</p>
<ul>
<li>Automatic updates and dependency management</li>
<li>Universal cryptographic signatures for all packages</li>
<li>Worldwide distribution and bandwidth sharing via mirrors</li>
<li>System-wide audits of software installed on your machine</li>
<li>CVE management and patch distribution</li>
<li>Long-term support</li>
</ul>
<p>There are several areas of open research, too, such as reproducible builds or
deterministic whole-system configuration like Nix and Guix are working on. You
can take advantage of all of this innovation and research for the low price of
zero dollars by standing back and letting distros handle the distribution of
your software. It&rsquo;s what they&rsquo;re good at.</p>
<p>There are a few things you <em>can</em> do to make this work better.</p>
<ul>
<li>Ship your software as a simple tarball. Don&rsquo;t ship pre-built binaries and
definitely don&rsquo;t ship a &ldquo;curl | bash&rdquo; command. Naive users will mess up their
systems when they use them.</li>
<li>Use widely adopted, standard build systems and methodologies. Use the standard
approach for your programming language. They have already been through the
gamut of distros and their operating modes are well-understood by packagers.</li>
<li><a href="https://drewdevault.com/2021/05/19/How-to-write-release-notes.html">Ship good release notes</a>. Distro packagers read them! Give them a head&rsquo;s
up about any important changes which might affect their distro.</li>
<li>Be picky with your dependencies and try to avoid making huge dependency trees.
Bonus: this leads to better security and maintainability!</li>
<li>Maintain a friendly dialogue with distro maintainers if and when they come
asking questions. They&rsquo;re the expert on their distro, but you&rsquo;re the expert on
your software, and sometimes you will meet to compare notes.</li>
</ul>
<p><em>See also: <a href="https://archive.fosdem.org/2018/schedule/event/how_to_make_package_managers_cry/">FOSDEM 2018 - How To Make Package Managers Cry</a></em></p>
<p>One thing you shouldn&rsquo;t do is go around asking distros to add your program to
their repos. Once you ship your tarballs, your job is done. It&rsquo;s the <em>users</em> who
will go to their distro and ask for a new package. And users — do this! If
you find yourself wanting to use some cool software which isn&rsquo;t in your distro,
go ask for it, or better yet, package it up yourself. For many packages, this is
as simple as copying and pasting a similar package (let&rsquo;s hope they followed my
advice about using an industry-standard build system), making some tweaks, and
building it.</p>
<p>Distros are quite accessible projects, packaging is usually not that difficult.
Distributions always need more volunteers, and there are plenty of friendly
experts at your local distro who would be pleased to help you figure out the
finer details, assuming you&rsquo;re prepared to stand up and do the work yourself.
Once you get used to it, making and submitting a new package can take as little
as 10 or 15 minutes for a simple one.</p>
<p>Oh, and if you are in the developer role — you are presumably also a user
of both your own software and some kind of software distribution. This puts you
in a really good position to champion it for inclusion in your own distro :)</p>
<hr>
<p>P.S. Systems which invert this model, e.g. Flatpak, are completely missing the
point.</p>]]></description><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Nitter and other Internet reclamation projects</title><link>https://drewdevault.com/2021/09/23/Nitter-and-other-internet-reclamation-projects.html</link><description><![CDATA[<p>The world wide web has become an annoying, ultra-commercialized space. Many
websites today are prioritizing the interests of the company behind the domain,
at the expense of the user&rsquo;s experience and well-being. This has been a
frustrating problem for several years, but lately there&rsquo;s been a heartwarming
trend of users fighting back against the corporate web and stepping up to help
and serve each other&rsquo;s needs in spite of them, through what I&rsquo;ve come to think
of as Internet reclamation projects.</p>
<p>I think the first of these which appeared on my radar was <a href="https://github.com/iv-org/invidious">Invidious</a>,
which scrapes information off of a YouTube page and presents it in a more
pleasant, user-first interface— something which <a href="https://drewdevault.com/2019/04/02/NewPipe-represents-the-best-of-FOSS.html">NewPipe</a> also does
well for Android. These tools pry data out of YouTube&rsquo;s hands and present it on
a simple UI, designed for users first, with no ads or spyware, and with nice
features YouTube would never add, like download links, audio mode, and offline
viewing. It shows us what users want, but YouTube refuses to give.</p>
<p>Another project which has been particularly successful recently is <a href="https://github.com/zedeus/nitter">Nitter</a>,
which does something similar for Twitter. Twitter&rsquo;s increasingly draconian
restrictions on who can access what data, and their attitude towards logged-out
users in particular, has been a great annoyance to anyone who does not have, and
does not want, a Twitter account, but who may still encounter Twitter links
around the web. Nitter has been quite helpful in de-crapifying Twitter for these
folks. I have set up an automatic redirect in my browser which takes me straight
to Nitter, and I never have to see the shitty, user-hostile Twitter interface
again.</p>
<p><a href="https://sr.ht/~cadence/bibliogram/">Bibliogram</a> is another attempt which has done its best to fix Instagram,
but they have <a href="https://git.sr.ht/~cadence/bibliogram-docs/tree/master/docs/Instagram%20rate%20limits.md#tldr-what-does-it-mean-if-an-instance-is-blocked">encountered challenges</a> with Instagram&rsquo;s strict rate
limits and anti-scraping measures. Another project, <a href="https://codeberg.org/teddit/teddit">Teddit</a>, is attempting
to fix Reddit&rsquo;s increasingly anti-user interface, and <a href="https://github.com/spikecodes/libreddit">Libreddit</a> has
similar ambitions.</p>
<p>All of these services are more useful, more accessible, and more inclusive than
their corporate counterparts. They work better on older browsers and low-end
devices. They have better performance. They aren&rsquo;t spying on you. In short,
they are rejecting the <a href="https://seirdy.one/2021/01/27/whatsapp-and-the-domestication-of-users.html">domestication of their users</a> that the
platforms they interact with have been trying to do. Their efforts are part of
an inspiring trend of internet activism which rejects the corporate shells and
walled gardens without giving up the useful data they have stolen away inside.</p>
<p>Here are some more services full of user-hostile behavior I&rsquo;d like to see
replaced with user-first, high performance, FOSS frontends:</p>
<ul>
<li>Facebook</li>
<li>GitLab and GitHub</li>
<li><del>Medium et al</del> 2021-11-08: Check out <a href="https://scribe.rip">scribe.rip</a>!</li>
</ul>
<p>I would be happy to redirect myself away from any of these services for a
faster, lighter weight, more inclusive, user-first experience. Any others you&rsquo;d
like to see?</p>]]></description><pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Status update, September 2021</title><link>https://drewdevault.com/2021/09/15/Status-update-September-2021.html</link><description><![CDATA[<p>It&rsquo;s a quiet, foggy morning here in Amsterdam, and here with my fresh mug of
coffee and a cuddly cat in my lap, I&rsquo;d like to share the latest news on my FOSS
efforts with you. Grab yourself a warm drink and a cat of your own and let&rsquo;s get
started.</p>
<p>First, a new project: <a href="https://sr.ht/~sircmpwn/visurf">visurf</a>. I <a href="https://drewdevault.com/2021/09/11/visurf-announcement.html">announced this</a> a few days ago, but the
short of it is that I am building a minimal Wayland-only frontend for the
<a href="http://www.netsurf-browser.org">NetSurf</a> web browser which uses vi-inspired keybindings. Since the
announcement there has been some good progress: touch support, nsvirc, tabs, key
repeat, and so on. Some notable medium-to-large efforts ahead of us include a
context menu on right click, command completion and history, kinetic scrolling
via touch, pinch-to-zoom, clipboard support, and a readability mode. Please
help! It&rsquo;s pretty easy to get involved: join the IRC channel at #netsurf on
libera.chat and ask for something to do.</p>
<p>The programming language is also doing well. Following the codegen rewrite we
have completed some long-pending refactoring to parts of the language design,
which we intend to keep working on with further refinements in the coming weeks
and months. We also developed a new frontend for reading the documentation in
your terminal:</p>
<script id="asciicast-q53ZaG138sp89gKYqo1fui9Qj" src="https://asciinema.org/a/q53ZaG138sp89gKYqo1fui9Qj.js" async></script>
<p>Other improvements include the addition of parametric format modifiers
(<code>fmt::printfln(&quot;{%}&quot;, 10, &amp;fmt::modifiers { base = strconv::base::HEX, ...  })</code>),
fnmatch, and (WIP) design improvements to file I/O, the latter relying on new
struct subtyping semantics. I&rsquo;m hoping that we&rsquo;ll have improvements to the
grammar and semantics of match expressions and tagged unions in the near future,
and we are also looking into some experiments with reflection.</p>
<p>Many improvements have landed for SourceHut. lists.sr.ht now has a writable
GraphQL API, along with the first implementation of <a href="https://sourcehut.org/blog/2021-08-25-graphql-native-webhooks/">GraphQL-native
webhooks</a>. Thanks to a few contributors, you can also now apply custom sorts
to your search results on todo.sr.ht, and builds.sr.ht has grown Rocky Linux
support. More details to follow in the &ldquo;What&rsquo;s cooking&rdquo; post for the SourceHut
blog.</p>
<p>That&rsquo;s all for today! Thanks for tuning in for this update, and thanks for
continuing to support our efforts. Have a great day!</p>]]></description><pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate></item><item><title>visurf, a web browser based on NetSurf</title><link>https://drewdevault.com/2021/09/11/visurf-announcement.html</link><description><![CDATA[<p>I&rsquo;ve started a new side project that I would like to share with you:
<a href="https://sr.ht/~sircmpwn/visurf">visurf</a>. visurf, or nsvi, is a <a href="https://www.netsurf-browser.org">NetSurf</a> frontend which provides
vi-inspired key bindings and a lightweight Wayland UI with few dependencies.
It&rsquo;s still a work-in-progress, and is not ready for general use yet. I&rsquo;m
letting you know about it today in case you find it interesting and want to
help.</p>
<p>NetSurf is a project which has been on my radar for some time. It is a small web
browser engine, developed in C independently of the lineage of WebKit and Gecko
which defines the modern web today. It mostly supports HTML4 and CSS2, plus only
a small amount of HTML5 and CSS3. Its JavaScript support, while present, is very
limited. Given the <a href="https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html">epidemic of complexity in the modern web</a>, I am pleased
by the idea of a small browser, more limited in scope, which perhaps requires
the cooperation of like-minded websites to support a pleasant experience.</p>
<p>I was a <a href="https://qutebrowser.org">qutebrowser</a> user for a long time, and I think it&rsquo;s a great
project given the constraints that it&rsquo;s working in — namely, the modern
web. But I reject the modern web, and qute is just as much a behemoth of
complexity as the rest of its lot. Due to stability issues, I finally ended up
abandoning it for Firefox several months ago.</p>
<p>The UI paradigm of qutebrowser&rsquo;s modal interface, inspired by vi, is quite nice.
I tried to use Tridactyl, but it&rsquo;s a fundamentally crippled experience due to
the limitations of Web Extensions on Firefox. Firefox has more problems besides
— it may be somewhat more stable, but it&rsquo;s ultimately still an obscenely
complex, monsterous codebase, owned by an organization which cares less and less
about my needs with each passing day. A new solution is called for.</p>
<p>Here&rsquo;s where visurf comes in. Here&rsquo;s a video of it in action:</p>
<video src="https://redacted.moe/f/5f0fb143.webm" controls>
  Your browser does not support HTML5 video, or webm. Here's a direct link:
  <a href="https://redacted.moe/f/5f0fb143.webm">Watch this video</a>
</video>
<p>I hope that this project will achieve these goals:</p>
<ol>
<li>Create a nice new web browser</li>
<li>Drive interest in the development of NetSurf</li>
<li>Encourage more websites to build with scope-constrained browsers in mind</li>
</ol>
<p>The first goal will involve fleshing out this web browser, and I could use
your help. Please join #netsurf on irc.libera.chat, <a href="https://todo.sr.ht/~sircmpwn/visurf">browse the issue
tracker</a>, and <a href="https://lists.sr.ht/~sircmpwn/visurf-devel">send patches</a> if you are able. Some features I have in mind
for the future are things like interactive link selection, a built-in
readability mode to simplify the HTML of articles around the web, and automatic
redirects to take advantage of tools like <a href="https://github.com/zedeus/nitter">Nitter</a>. However, there&rsquo;s also
more fundamental features to do, like clipboard support, command completion,
even key repeat. There is much to do.</p>
<p>I also want to get people interested in improving NetSurf. I don&rsquo;t want to see
it become a &ldquo;modern&rdquo; web browser, and frankly I think that&rsquo;s not even possible,
but I would be pleased to see more people helping to improve its existing
features, and expand them to include a reasonable subset of the modern web. I
would also like to add Gemini support. I don&rsquo;t know if visurf will ever be taken
upstream, but I have been keeping in touch with the NetSurf team while working
on it and if they&rsquo;re interested it would be easy to see that through.
Regardless, any improvements to visurf or to NetSurf will also improve the
other.</p>
<p>To support the third goal, I plan on overhauling <a href="https://sourcehut.org">sourcehut&rsquo;s</a> frontend<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
and in the course of that work we will be building a new HTML+CSS framework
(think Bootstrap) which treats smaller browsers like NetSurf as a first-class
target. The goal for this effort will be to provide a framework that allows for
conservative use of newer browser features, with suitable fallbacks, with enough
room for each website to express its own personality in a manner which is
beautiful and useful on all manner of web browsers.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Same interface, better code.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Status update, August 2021</title><link>https://drewdevault.com/2021/08/15/Status-update-August-2021.html</link><description><![CDATA[<p>Greetings! It&rsquo;s shaping up to be a beautiful day here in Amsterdam, and I have
found the city much to my liking so far. If you&rsquo;re in Amsterdam and want to grab
a beer sometime, send me an email! I&rsquo;ve been making a lot of new friends here.
Meanwhile, I&rsquo;ve also enjoyed a noticable increase in my productivity levels.
Let&rsquo;s go over the month&rsquo;s accomplishments.</p>
<p>First, I have spent most of my time on the programming language project. I
mentioned in the last update that we broke ground on a codegen rewrite, and
yesterday all of our tests finally passed and I merged it. The new design is
much better, and we should be able to simplify it even further still when we
write the <abbr title="The 'hosted' compiler is one that 'hosts' itself: it's written in our new programming language and compiles itself. This is contrasted with the 'bootstrap' compiler, which is written in C and is used for bootstrapping the hosted toolchain from scratch.">hosted compiler</abbr>
in the near future. This will also give us a better basis for a small number of
experiments we&rsquo;d like to do before finalizing the language design. Some other
improvements include fleshing out our floating point math support library, a
base64 module, a poll module, and parallel DNS resolution.</p>
<p>In SourceHut news, we shipped the <a href="https://man.sr.ht/lists.sr.ht/graphql.md">lists.sr.ht GraphQL API</a>. Future work will
expand support for thread parsing and implement write operations. Presently, I
am also working on a design for GraphQL-native webhooks, targetting meta.sr.ht
for the initial release. sr.ht packages for Alpine 3.14 were now made available,
and planned maintenance two weeks ago was the first of two fleet-wide rollouts
of the upgrades to sr.ht hosted — the next is scheduled for tomorrow.</p>
<p>These two projects are my primary focus right now, and they&rsquo;re both making good
progress. In the coming month, I hope to address a few language design questions
and build a more sophisticated I/O abstraction for the standard library. On
sr.ht, I plan on expanding the GraphQL-native webhooks prototype and hopefully
shipping it to one of the GQL APIs, along with starting on another major GQL
support movement — either write support for lists.sr.ht, or the initial
paste.sr.ht GQL API.</p>
<p>That&rsquo;s all I have to share today! Thanks for tuning in.</p>]]></description><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate></item><item><title>Tips for debugging your new programming language</title><link>https://drewdevault.com/2021/08/11/Debugging-your-new-PL.html</link><description><![CDATA[<p>Say you&rsquo;re building a new (compiled) programming language from scratch. You&rsquo;ll
inevitably have to debug programs written in it, and worse, many of these
problems will lead you into deep magic, as you uncover problems with your
compiler or runtime. And as you find yourself diving into the arcane arts, your
tools may be painfully lacking: how do you debug code written in a language for
which debuggers and other tooling simply has not been written yet?</p>
<p>In the implementation of my own programming language, I have faced this problem
many times, and developed, by necessity, some skills around debugging with
crippled tools that may lack an awareness of your language. Of course, the
ultimate goal is to build out first-class debugging support, but we must have a
language in the first place before we can write tools to debug it. If you find
yourself in this situation, here are my recommendations.</p>
<p>First, I&rsquo;ll echo the timeless words of Brian Kernighan:</p>
<blockquote>
<p>The most effective debugging tool is still careful thought, coupled with
judiciously placed print statements.</p></blockquote>
<p>— Unix for Beginners (1979)</p>
<p>Classic debugging techniques are of heightened importance in this environment:
first seek to isolate the problem code, then to understand the problem code,
then form, and test, a hypothesis — usually with a thoughtful print
statement. Often, this is enough.</p>
<p>Unfortunately, you may have to fire up gdb. gdb is often painful in the best of
situations, but if you have to use it without debug symbols, you may find
yourself shutting off the computer and seeking out rural real estate on which
you can establish a new career in farming. If you can stomach it, I can offer
some advice.</p>
<p>First, you&rsquo;re going to be working in assembly, so make sure you&rsquo;re familiar with
how it works. I would recommend keeping the ISA manual and your ABI
specification handy. If you&rsquo;re smart and your language sets up stack frames
properly (this is easy, do it early), you should at least have a backtrace,
breakpoints at functions, and globals, though all of these will be untyped. You
can write C casts to add some ad-hoc types to examine data in your process,
like &ldquo;print *(int *)$rdi&rdquo;.</p>
<p>You&rsquo;ll also get used to the &lsquo;x&rsquo; command, which eXamines memory. The command
format is &ldquo;x/NT&rdquo;, where N is the number of objects, and T is the object type: w
for word (int), g for giantword (long), and h and b for halfword (short) and
byte, respectively: &ldquo;x/8g $rdi&rdquo; will interpret rdi as an address where 8 longs
are stored and print them out in hexadecimal. Of particular use is the &ldquo;i&rdquo;
format, for &ldquo;instruction&rdquo;, which will disassemble from the given address:</p>
<pre tabindex="0"><code>(gdb) x/8i $rip
=&gt; 0x5555555565c8 &lt;rt.memcpy+4&gt;:	mov    $0x0,%eax
   0x5555555565cd &lt;rt.memcpy+9&gt;:	cmp    %rdx,%rax
   0x5555555565d0 &lt;rt.memcpy+12&gt;:	jae    0x5555555565df &lt;rt.memcpy+27&gt;
   0x5555555565d2 &lt;rt.memcpy+14&gt;:	movzbl (%rsi,%rax,1),%ecx
   0x5555555565d6 &lt;rt.memcpy+18&gt;:	mov    %cl,(%rdi,%rax,1)
   0x5555555565d9 &lt;rt.memcpy+21&gt;:	add    $0x1,%rax
   0x5555555565dd &lt;rt.memcpy+25&gt;:	jmp    0x5555555565cd &lt;rt.memcpy+9&gt;
   0x5555555565df &lt;rt.memcpy+27&gt;:	leave  
</code></pre><p>You can set breakpoints on the addresses you find here (e.g. &ldquo;b
*0x5555555565d0&rdquo;), and step through one instruction at a time with the &ldquo;si&rdquo;
command.</p>
<p>I also tend to do some silly workarounds to avoid having to read too much
assembly. If I want to set a breakpoint in some specific place, I might do the
following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">_break</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ...some code...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Point of interest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="n">z</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">q</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">_break</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">somefunc</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ...some code...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Then I can instruct gdb to &ldquo;b _break&rdquo; to break when this function is called,
use &ldquo;finish&rdquo; to step out of the call frame, and I&rsquo;ve arrived at the point of
interest without having to rely on line numbers being available in my binary.</p>
<p>Overall, this is a fairly miserable process which can take 5-10× longer
than normal debugging, but with these tips you should at least find your
problems solvable. Good motivation to develop better debugging tools for your
new language, eh? A future blog post might go over some of this with DWARF and
possibly how to teach gdb to understand a new language natively. In the
meantime, good luck!</p>]]></description><pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate></item><item><title>Police to begin regular, warrant-free searches of homes for child abuse material</title><link>https://drewdevault.com/2021/08/10/Apple-CSAM-scanning.html</link><description><![CDATA[<p>The Federal Bureau of Investigations announced a new initiative today to combat
the proliferation of child sexual abuse materials (CSAM) in the United States.
Starting next year, police will be conducting regular searches of US homes, as
often as once or twice per week per home, to find child sexual abuse materials.
This initiative will bring more child abusers to justice and help abuse victims
to find solace in the knowledge that records of their abuse are not being shared
in perpetuity.</p>
<p>To facilitate frequent and convenient searches, the FBI will be working with
lock manufacturers to institute a new standard for home locks in the United
States which permits their use via a &ldquo;master key&rdquo;, to be held securely by
authorized government employees only. These new locks will become mandatory for
all new homes next year, and a gradual process of retrofitting will take place
in existing homes with the goal of having the program up to its full throughput
no later than 2024.</p>
<p>In response to questions raised by <del>child abuse apologists</del> concerned privacy
advocates, the director of the FBI stated in a press conference:</p>
<blockquote>
<p>Of course, for citizens who do not possess images of child sexual abuse, there
is no cause for concern. Search operatives will undergo a mandatory 2 hour
training course, and will be instructed to disregard anything they find or
learn in the course of their searches which does not involve CSAM. Through our
partnership with industry leaders in home security, we will make the process
as safe and convenient as possible, so that authorized officers may enter your
home at any time and quietly conduct their business without disturbing your
day. We are excited about this unprecedented opportunity to curb the
distribution of child abuse material in this country.</p></blockquote>
<p>In short, government officials are confident that the possibility of having your
home searched at any time will ultimately pose little to no inconvenience to
Americans, particularly with respect to the things they choose to do, people
they choose to associate with, and things they say to their family and friends
in <del>the privacy of</del> their homes.</p>
<p>The director also noted the numerous jobs which will be created to fill the
increased demand for officers, and petitioned congress for the appropriate
increase to their budget.</p>
<hr>
<p>&hellip;wait. This <em>is</em> happening, but I got some of the details wrong.</p>
<p>It&rsquo;s not homes which are being searched, but the digital devices we use for all
of our communication and information storage and retrieval needs in contemporary
life.</p>
<p>And it&rsquo;s not lock manufacturers that are making it possible, but Apple. And the
government didn&rsquo;t ask: they volunteered.</p>
<p>And it&rsquo;s not police officers, but a proprietary machine learning algorithm that
no one understands.</p>
<p>Oh, and it&rsquo;s not happening one or two times a week, but on an ongoing basis,
every time you use your device.</p>
<p>I did get a few things, right though. The only thing which limits the scope of
searches will be whichever things Apple chooses to search or not to search. And
whatever Congress demands they repurpose the system to use. Ah — and it is
warrant-free.</p>
<p>Won&rsquo;t you think of the children?</p>
<p><a href="https://www.apple.com/child-safety/pdf/CSAM_Detection_Technical_Summary.pdf">source</a></p>]]></description><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate></item><item><title>proxy.golang.org allows many Go packages to be silently broken</title><link>https://drewdevault.com/2021/08/06/goproxy-breaks-go.html</link><description><![CDATA[<p>GOPROXY (or <a href="https://proxy.golang.org">proxy.golang.org</a>) is a service through which all &ldquo;go get&rdquo;
commands (and other module downloads) are routed. It may speed up some
operations by providing a cache, and it publishes checksums and an &ldquo;index&rdquo; of
all Go packages; but this is done at the cost of sending details of all of your
module downloads to Google and imposing extra steps when using Go packages from
an intranet.</p>
<p>This cache never expires, which can cause some problems: you can keep fetching a
module from proxy.golang.org long after the upstream version has disappeared.
The upstream author probably had a good reason for removing a version! Because I
set <code>GOPROXY=direct</code> in my environment,<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> which bypasses the proxy, I&rsquo;ve been
made aware of a great number of Go packages which have broken dependencies and
are none the wiser. They generally can&rsquo;t reproduce the problem without
<code>GOPROXY=direct</code>, which can make it a challenge to rouse up the enthusiasm for
upstream to actually fix the issue. Caching modules forever can encourage
bitrot.</p>
<p>Packages which have these issues cannot be built unless Google keeps the cache
valid forever and can be trusted to treat the personal data associated with the
request with respect. Furthermore, as soon as a debugging session finds its way
to an absent module, you could be surprised to find that upstream is gone and
that fetching or patching the code may be a challenge. This has created ticking
time bombs throughout the Go ecosystem, which go undetected because GOPROXY
hides the problem from developers.</p>
<p>If you want to check if your packages are affected by this, just set
<code>GOPROXY=direct</code> in your environment, blow away your local cache, and build your
packages again. You might uncover an unpleasant surprise.</p>
<p>It may be worth noting that I already have a poor opinion of the Go module
mirror — it&rsquo;s been DDoS&rsquo;ing my servers since February.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> <a href="https://github.com/golang/go/issues/44577">Since I
reported this</a>, the Go team has been very opaque and non-communicative, and
none of their mitigations have had a meaningful improvement. Most of the traffic
is redundant — many modules are downloaded over and over again in short
time intervals. I have the option of blocking their traffic, of course, but that
would also block all Go programmers from fetching modules from my service. I
hope they adopt my recommendation of allowing admins to configure the crawl
parameters via robots.txt.</p>
<p>But, to be honest, the Go module mirror might not need to exist at all.</p>
<details>
  <summary>P.S. Do you have feedback on this post?</summary>
  <p>
  I said, in
  <a
    href="https://drewdevault.com/2021/04/26/Cryptocurrency-is-a-disaster.html"
  >Cryptocurrency is an abject disaster</a>, that I wanted to make my blog
  more constructive. As it necessarily required a critical tone, this post might
  have broken this promise. Taking extra care to avoid this, I made an effort to
  use measured, reasonable language, to address specific problems rather than
  making generalizations, and to avoid flamebait, and I sought second opinions
  on the article before publishing.
  <p>
  I would welcome your feedback on the results. Was this post constructive?
  Should I instead refrain from this kind of criticism in general? Do you have
  any other thoughts to share? Please <a
    href="mailto:sir@cmpwn.com"
  >email me</a> if so.
</details>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Mainly for practical reasons, since it busts the cache when I need to fetch the latest version of a recently-updated module.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I SSH&rsquo;d into git.sr.ht just now and found 50 git clones from the Go module mirror in the last 30 seconds, which is about ⅓ of all of our git traffic.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 6 Aug 2021 00:00:00 +0000</pubDate></item><item><title>In praise of PostgreSQL</title><link>https://drewdevault.com/2021/08/05/In-praise-of-Postgres.html</link><description><![CDATA[<p>After writing <a href="gemini://drewdevault.com/2021/05/06/Praise-for-Alpine-Linux.gmi">Praise for Alpine Linux</a>, I have decided to continue writing
more articles in praise of good software. Today, I&rsquo;d like to tell you a bit
about <a href="https://www.postgresql.org">PostgreSQL</a>.</p>
<p>Many people don&rsquo;t understand how old Postgres truly is: the first release<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
was in July of 1996. It used this logo:</p>
<p><img src="https://redacted.moe/f/f36a9083.jpg" alt="A &ldquo;logo&rdquo; which depicts the word &ldquo;PostgreSQL&rdquo; in a 3D chrome font bursting through a brick wall from space. No, seriously."></p>
<p>After 25 years of persistence, and a better logo design, Postgres stands today
as one of the most significant pillars of profound achievement in free software,
alongside the likes of Linux and Firefox. PostgreSQL has taken a complex problem
and <em>solved</em> it to such an effective degree that all of its competitors are
essentially obsolete, perhaps with the exception of SQLite.</p>
<p>For a start, Postgres is simply an incredibly powerful, robust, and reliable
piece of software, providing the best implementation of SQL.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>
It provides a great deal of insight into its own behavior, and allows
the experienced operator to fine-tune it to achieve optimal performance. It
supports a broad set of SQL features and data types, with which I have always
been able to efficiently store and retrieve my data. SQL is usually the #1
bottleneck in web applications, and Postgres does an excellent job of providing
you with the tools necessary to manage that bottleneck.</p>
<p>Those tools are also exceptionally well-documented. The <a href="https://www.postgresql.org/docs/current/index.html">PostgreSQL
documentation</a> is <em>incredibly</em> in-depth. It puts the rest of us to shame,
really. Not only do they have comprehensive reference documentation which
exhaustively describes every feature, but also vast amounts of prose which
explains the internal design, architecture, and operation of Postgres, plus
detailed plain-English explanations of how various high-level tasks can be
accomplished, complete with the necessary background to <em>understand</em> those
tasks. There&rsquo;s essentially no reason to ever read a blog post or Stack Overflow
answer about how to do something with Postgres — the official docs cover
every aspect of the system in great depth.</p>
<p>The project is maintained by a highly disciplined team of engineers. I have
complete confidence in their abilities to handle matters of performance,
regression testing, and security. They publish meticulously detailed weekly
development updates, as well as thorough release notes that equips you with
sufficient knowledge to confidently run updates on your deployment. Their git
discipline is also legendary — here&rsquo;s the <a href="https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=aa769f80ed80b7adfbdea9a6bc267ba4aeb80fd7">latest commit</a> at the time
of writing:</p>
<pre tabindex="0"><code>postgres_fdw: Fix issues with generated columns in foreign tables.

postgres_fdw imported generated columns from the remote tables as plain
columns, and caused failures like &#34;ERROR: cannot insert a non-DEFAULT
value into column &#34;foo&#34;&#34; when inserting into the foreign tables, as it
tried to insert values into the generated columns.  To fix, we do the
following under the assumption that generated columns in a postgres_fdw
foreign table are defined so that they represent generated columns in
the underlying remote table:

* Send DEFAULT for the generated columns to the foreign server on insert
  or update, not generated column values computed on the local server.
* Add to postgresImportForeignSchema() an option &#34;import_generated&#34; to
  include column generated expressions in the definitions of foreign
  tables imported from a foreign server.  The option is true by default.

The assumption seems reasonable, because that would make a query of the
postgres_fdw foreign table return values for the generated columns that
are consistent with the generated expression.

While here, fix another issue in postgresImportForeignSchema(): it tried
to include column generated expressions as column default expressions in
the foreign table definitions when the import_default option was enabled.

Per bug #16631 from Daniel Cherniy.  Back-patch to v12 where generated
columns were added.

Discussion: https://postgr.es/m/16631-e929fe9db0ffc7cf%40postgresql.org
</code></pre><p><a href="https://git.postgresql.org/gitweb/?p=postgresql.git">They&rsquo;re all like this</a>.</p>
<p>Ultimately, PostgreSQL is a technically complex program which requires an
experienced and skilled operator to be effective. Learning to use it is a costly
investment, even if it pays handsomely. Though Postgres has occasionally
frustrated or confused me, on the whole my feelings for it are overwhelmingly
positive. It&rsquo;s an incredibly well-made product and its enormous and
still-growing successes are very well-earned. When I think of projects which
have made the most significant impacts on the free software ecosystem, and on
the world at large, PostgreSQL has a place on that list.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The first release of Postgre<strong>SQL</strong>. Its lineage can be traced further back.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>No qualifiers. It&rsquo;s straight-up the best implementation of SQL.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 5 Aug 2021 00:00:00 +0000</pubDate></item><item><title>My wish-list for the next YAML</title><link>https://drewdevault.com/2021/07/28/The-next-YAML.html</link><description><![CDATA[<p><a href="http://yaml.org">YAML</a> is both universally used, and universally reviled. It
has a lot of problems, but it also is so useful in solving specific tasks that
it&rsquo;s hard to replace. Some new kids on the block (such as TOML) have
successfully taken over a <em>portion</em> of its market share, but it remains in force
in places where those alternatives show their weaknesses.</p>
<p>I think it&rsquo;s clear to most that YAML is in dire need of replacement, which is
why many have tried. But many have also failed. So what are the key features of
YAML which demonstrate its strengths, and key weaknesses that could be improved
upon?</p>
<p>Let&rsquo;s start with some things that YAML does well, which will have to be
preserved.</p>
<ul>
<li>
<p><strong>Hierarchical relationships emphasized with whitespace</strong>. There is no better
way of representing a hierarchical data structure than by actually organizing
your information visually. Note that semantically meaningful whitespace is not
actually required — the use of tokens like { is acceptable — so
long as, by convention, hierarchies are visually apparent.</p>
</li>
<li>
<p><strong>Defined independently of its implementation</strong>. There should not be a
canonical implementation of the format (though a reference implementation is,
perhaps, acceptable). It should not be defined as &ldquo;a config library for
$language&rdquo;. Interoperability is key. It must have a specification.</p>
</li>
<li>
<p><strong>Easily embeds documents written in other formats</strong>. This is the chief reason
that YAML still dominates in CI configuration: the ability to trivially write
scripts directly into config file, without escaping anything or otherwise
molesting the script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">tasks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">configure</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    jit_flags=&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">    if [ &#34;$(uname -m)&#34; != &#34;x86_64&#34; ]
</span></span></span><span class="line"><span class="cl"><span class="sd">    then
</span></span></span><span class="line"><span class="cl"><span class="sd">        jit_flags=--without-jit
</span></span></span><span class="line"><span class="cl"><span class="sd">    fi
</span></span></span><span class="line"><span class="cl"><span class="sd">    ./configure \
</span></span></span><span class="line"><span class="cl"><span class="sd">        --prefix=/usr \
</span></span></span><span class="line"><span class="cl"><span class="sd">        $jit_flags</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">build</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    make</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">test</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    make check</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>Both machine- and human-editable</strong>. It&rsquo;s very useful for both humans and
machines to collaborate on a YAML file. For instance, humans write build
manifests for their git.sr.ht repos, and then the project hub adds steps to
download and apply patches from mailing lists before submitting them to the
build driver. For the human&rsquo;s part, the ability to easily embed scripts (see
above) and write other config parameters conveniently is very helpful —
everyone hates config.json.</p>
</li>
<li>
<p><strong>Not a programming language</strong>. YAML entities are a problem, but we&rsquo;ll talk
about that separately. In general, YAML files are not programs. They&rsquo;re just
data. This is a good thing. If you want, you can use a <em>separate</em>
pre-processor, like jsonnet.</p>
</li>
</ul>
<p>What needs to be improved upon?</p>
<ul>
<li>
<p><strong>A much simpler grammar</strong>. No more billion laughs, please. Besides this, 90%
of YAML&rsquo;s features go un-used, which increases the complexity of
implementations, not to mention their attack surface, for little reason.</p>
</li>
<li>
<p><strong>A means of defining a schema</strong>, which can influence the interpretation of
the input. YAML does this poorly. Consider the following YAML list:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">hello</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="m">24</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">world</span><span class="w">
</span></span></span></code></pre></div><p>Two of these are strings, and one is a number. Representing numbers and
strings plainly like this makes it easier for humans to write, though
requiring humans to write their values in a format which provides an
unambiguous type is not so inconvenient as to save this trait from the cutting
room floor. Leaving the ambiguity in place, without any redress, provides a
major source of bugs in programs that consume YAML.</p>
</li>
<li>
<p><strong>I don&rsquo;t care about JSON interoperability</strong>. Being a superset of JSON is
mildly useful, but not so much so as to compromise any other features or
design. I&rsquo;m prepared to yeet it at the first sign of code smells.</p>
</li>
</ul>
<p>Someday I may design something like this myself, but I&rsquo;m really hoping that
someone else does it instead. Good luck!</p>]]></description><pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate></item><item><title>Status update, July 2021</title><link>https://drewdevault.com/2021/07/15/Status-update-July-2021.html</link><description><![CDATA[<p>Hallo uit Nederland! I&rsquo;m writing to you from a temporary workstation in
Amsterdam, pending the installation of a better one that I&rsquo;ll put together after
I visit a furniture store today. I&rsquo;ve had to slow a few things down somewhat
while I prepare for this move, and I&rsquo;ll continue to be slower for some time
following it, but things are moving along regardless.</p>
<p>One point of note is that the maintainer for <a href="https://aerc-mail.org">aerc</a>, Reto Brunner, has
stepped down from his role. I&rsquo;m looking for someone new to fill his shoes;
please <a href="mailto:sir@cmpwn.com">let me know</a> if you are interested.</p>
<p>As far as the language project is concerned, there has been some significant
progress. We&rsquo;ve broken ground on the codegen rewrite, and it&rsquo;s looking much
better than its predecessor. I expect progress on this front to be fairly quick.
In the meanwhile, a new contributor has come onboard to help with floating-point
math operations, and I merged their first patch this morning — adding
math::abs, math::copysign, etc. Another contributor has been working in a
similar space, and sent in an f32-to-string function last week. I implemented
DNS resolution and a &ldquo;dial&rdquo; function as well, which you can read about in my
<a href="https://drewdevault.com/2021/06/24/finger-client.html">previous post about a finger client</a>.</p>
<p>I also started writing some POSIX utilities in the new language for fun:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">fs</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">getopt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">io</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">main</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">os</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">utilmain</span><span class="p">()</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getopt</span><span class="o">::</span><span class="n">parse</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">args</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">getopt</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">io</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdout</span><span class="p">,</span><span class="w"> </span><span class="n">os</span><span class="o">::</span><span class="n">stdin</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">args</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1z</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error opening &#39;{}&#39;: {}&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">cmd</span><span class="p">.</span><span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">file</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io</span><span class="o">::</span><span class="n">stream</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">file</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">file</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">io</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdout</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>We&rsquo;re still looking for someone to contribute in cryptography, and in date/time
support — please <a href="mailto:sir@cmpwn.com">let me know</a> if you want to help.</p>
<p>In SourceHut news, I have mostly been focused on writing the GraphQL API for
lists.sr.ht. I have made substantial progress, and I had hoped to ship the first
version before publishing today&rsquo;s status updates, but I was delayed due to
concerns with the move abroad. I hope to also have sr.ht available for Alpine
3.14 in the near future.</p>]]></description><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate></item><item><title>Is GitHub a derivative work of GPL&apos;d software?</title><link>https://drewdevault.com/2021/07/04/Is-GitHub-a-derivative-work.html</link><description><![CDATA[<p>GitHub recently announced a tool called <a href="https://copilot.github.com">Copilot</a>, a tool which uses machine
learning to provide code suggestions, inciting no small degree of controversy.
One particular facet of the ensuing discussion piques my curiosity: what happens
if the model was trained using software licensed with the GNU General Public
License?</p>
<p><em>Disclaimer: I am the founder of a company which competes with GitHub.</em></p>
<p>The GPL is among a family of licenses considered &ldquo;copyleft&rdquo;, which are
characterized by their &ldquo;viral&rdquo; nature. In particular, the trait common to
copyleft works is the requirement that &ldquo;derivative works&rdquo; are required to
publish their new work under the same terms as the original copyleft license.
Some weak copyleft licenses, like the Mozilla Public License, only apply to any
changes to specific files from the original code. Stronger licenses like the GPL
family affect the broader work that any GPL&rsquo;d code has been incorporated into.</p>
<p><a href="https://twitter.com/mitsuhiko/status/1410886329924194309">A recent tweet by @mitsuhiko</a> notes that Copilot can be caused to
produce, verbatim, the famous fast inverse square root function from Quake III
Arena: a codebase distributed under the GNU GPL 2.0 license. This raises an
interesting legal question: is the work produced by a machine learning system,
or even the machine learning system itself, a derivative work of the inputs to
the model?  <a href="https://twitter.com/eevee/status/1410037309848752128">Another tweet</a> suggests that, if the answer is &ldquo;no&rdquo;,
GitHub Copilot can be used as a means of washing the GPL off of code you want to
use without obeying its license. But, what if the answer is &ldquo;yes&rdquo;?</p>
<p>I won&rsquo;t take a position on this question<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, but I will point out something
interesting: if the answer is &ldquo;<em>yes</em>, machine learning models create derivative
works of their inputs&rdquo;, then GitHub may itself now be considered a derivative
work of copyleft software. Consider this statement from GitHub&rsquo;s blog post on
the subject:</p>
<blockquote>
<p>During GitHub Copilot’s early development, nearly 300 employees used it in
their daily work as part of an internal trial.</p></blockquote>
<p>— <a href="https://docs.github.com/en/github/copilot/research-recitation">Albert Ziegler: A first look at rote learning in GitHub Copilot suggestions</a></p>
<p>If 300 GitHub employees used Copilot as part of their daily workflow, they are
likely to have incorporated the output of Copilot into nearly every software
property of GitHub, which provides network services to users. If the model was
trained on software using the GNU Affero General Public License (AGPL), and the
use of this model created a derivative work, this may entitle all GitHub users
to receive a copy of GitHub&rsquo;s source code under the terms of the AGPL,
effectively forcing GitHub to become an open source project. I&rsquo;m normally
against GPL enforcement by means of pulling the rug out from underneath someone
who made an honest mistake<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, but in this case it would certainly be a
fascinating case of comeuppance.</p>
<p>Following the Copilot announcement, many of the ensuing discussions hinted to me
at a broader divide in the technology community with respect to machine
learning. I&rsquo;ve seen many discussions having to wrestle with philosophical
differences between participants, who give different answers to more fundamental
questions regarding the ethics of machine learning: what rights should be, and
are, afforded to the owners of the content which is incorporated into training
data for machine learning? If I want to publish a work which I <em>don&rsquo;t</em> want to
be incorporated into a model, or which, if used for a model, would entitle the
public to access to that model, could I? Ought I be allowed to? What if the work
being used is my personal information, collected without my knowledge or
consent? What if the information is used against me, for example in making
lending decisions? What if it&rsquo;s used against society&rsquo;s interests at large?</p>
<p>The differences of opinion I&rsquo;ve seen in the discussions born from this
announcement seem to suggest a substantial divide over machine learning, which
the tech community may have yet to address, or even understand the depth of. I
predict that GitHub Copilot will mark one of several inciting events which start
to rub some of the glamour off of machine learning technology and gets us
thinking about the ethical questions it presents.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Though I definitely have one 😉&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I support GPL enforcement, but I think we would be wise to equip users with a clear understanding of what our license entails, so that those mistakes are less likely to happen in the first place.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I also predict that capitalism will do that thing it normally does and sweep all of the ethics under the rug in any scenario in which addressing the problem would call their line of business into doubt, ultimately leaving the dilemma uncomfortably unresolved as most of us realize it&rsquo;s a dodgy ethical situation while simultaneously being paid to not think about it too hard.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 4 Jul 2021 00:00:00 +0000</pubDate></item><item><title>How does IRC&apos;s federation model compare to ActivityPub?</title><link>https://drewdevault.com/2021/07/03/How-does-IRC-federate.html</link><description><![CDATA[<p>Today&rsquo;s federated revolution is led by ActivityPub, leading to the rise of
services like Mastodon, PeerTube, PixelFed, and more. These new technologies
have a particular approach to federation, which is coloring perceptions on what
it actually means for a system to be federated at all. Today&rsquo;s post will explain
how <a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat">Internet Relay Chat</a>
(IRC), a technology first introduced in the late 1980&rsquo;s, does federation
differently, and why.</p>
<p>As IRC has aged, many users today have only ever used a few networks, such as
Liberachat (or Freenode, up until several weeks ago), which use a particular IRC
model which does not, at first glance, appear to utilize federation. After all,
everyone types &ldquo;irc.libera.chat&rdquo; into their client and they all end up on the
same network and in the same namespace. However, this domain name is backed by a
round-robin resolver which will connect you to any of <a href="https://netsplit.de/servers/?net=Libera.Chat">several dozen
servers</a>, which are connected to each other<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and exchange messages on
behalf of the users who reside on each. This is why we call them IRC <em>networks</em>
— each is composed of a network of servers that work together.</p>
<p>But why can&rsquo;t I send messages to users on <a href="https://www.oftc.net">OFTC</a> from my Libera Chat session?
Well, IRC networks are federated, but they are typically a <em>closed</em> federation,
such that each network forms a discrete graph of servers, not interconnected
with any of the others. In ActivityPub terms, imagine a version of Mastodon
where, instead of automatically federating with new instances, server operators
whitelisted each one, forming a closed graph of connected instances. Organize
these servers under a single named entity (&ldquo;Mastonet&rdquo; or something), and the
result is an &ldquo;ActivityPub network&rdquo; which operates in the same sense as a typical
&ldquo;IRC network&rdquo;.</p>
<p>In contrast to Mastodon&rsquo;s open federation, allowing any server to peer with any
others without prior agreement between their operators, most IRC networks are
closed. The network&rsquo;s servers may have independent operators, but they operate
together under a common agreement, rather than the laissez-faire approach
typical of<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> ActivityPub servers. The exact organizational and governance
models vary, but many of these networks have discrete teams of staff which
serve as moderators<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, often unrelated to the people responsible for the
servers. The social system can be designed independently of the technology.</p>
<p>Among IRC networks, there are degrees of openness. Libera Chat, the largest
network, is run by a single governing organization, using servers donated by
(and in the possession of) independent sponsors. Many smaller networks are
run on as few as one server, and some larger networks (particularly older ones)
are run by many independent operators acting like more of a cooperative.
<a href="http://efnet.org">EFnet</a>, the oldest network, is run in this manner — you
can even <a href="http://www.efnet.org/?module=docs&amp;doc=16">apply to become an operator</a> yourself.</p>
<p>We can see from this that the idea of federation is flexible, allowing us to
build a variety of social and operational structures. There&rsquo;s no single right
answer — approaches like IRC are able to balance many different benefits
and drawbacks of their approach, such as balancing a reduced level of user
mobility with a stronger approach to moderation and abuse reduction, while
simultaneously enjoying the cost and scalability benefits of a federated design.
Other federations, like Matrix, email, and Usenet, have their own set of
tradeoffs. What unifies them is the ability to scale to a large size without
expensive infrastructure, under the social models which best suit their users'
needs, without a centralizing capital motive.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Each server is not necessarily connected to each other server, by the way.  Messages can be relayed from one server to another repeatedly to reach the intended destination. This provides IRC with a greater degree of scalability when compared to ActivityPub, where each server must communicate directly with the servers whose users it needs to reach. It also makes IRC more vulnerable to outages partitioning the network; we call these incidents &ldquo;netsplits&rdquo;.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Typical, but not universal.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>There are two classes of moderators on IRC: oppers and ops. The former is responsible for the network, and mainly concerns themselves with matters of spam, user registration, settling disputes, and supporting ops. The ops are responsible for specific channels (spaces for discussion) and can define and enforce further rules at their discretion, within any limits imposed by the host network.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 3 Jul 2021 00:00:00 +0000</pubDate></item><item><title>You can&apos;t capture the nuance of my form fields</title><link>https://drewdevault.com/2021/06/27/You-cant-capture-the-nuance.html</link><description><![CDATA[<p>Check out this text box:</p>
<style>
textarea {
  width: 100%;
}
</style>
<textarea rows="10" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">Consectetur qui consequatur voluptatibus voluptatem sit sint perspiciatis. Eos aspernatur ad laboriosam quam numquam quo. Quia reiciendis illo quo praesentium. Dolor porro et et sit dolorem quisquam totam quae.
Ea molestias a aspernatur dignissimos suscipit incidunt. Voluptates in vel qui quaerat. Asperiores vel sit rerum est ipsam. Odio aut aut voluptate qui voluptatem.
Quia consequatur provident fugiat voluptatibus consequatur. Est sunt aspernatur velit. Officiis a dolorum accusantium. Sint est ut inventore.</textarea>
<p>Here are some of the nuances of using this text box on my operating system
(Linux) and web browser (Firefox):</p>
<ul>
<li>Double clicking selects a word, and triple-clicking selects the whole line. If
I double- or triple-click-and-hold, I can drag the mouse to expand the
selection word-wise or line-wise, not just character-wise. This works with the
paragraphs of text in the body of this blog post, too.</li>
<li>Holding control and pressing right will move move word-wise through the file.
It always moves to the start or end of the next or prior word, so pressing
&ldquo;control+left, control+left, control+right&rdquo; will end up in a different
position than &ldquo;control+left&rdquo; alone. Adding &ldquo;shift&rdquo; to any of these will mutate
the text selection.</li>
<li>Clicking any of the whitespace after the end of the text will put the cursor
after the last character, even if you click to the left of the last character.
This makes it easy to start appending text to the end.</li>
<li>Clicking and dragging from any point, I can drag the mouse straight upward,
exceeding the bounds of the text box or even the entire web browser, to select
all text from that point to the start of the text box. (Thanks minus for
mentioning this one)</li>
<li>Selecting text and middle clicking anywhere will paste the text at the clicked
location. This uses a separate, distinct clipboard from the one accessed with
ctrl+c/ctrl+v. I can also use shift+insert to paste text from this secondary
clipboard (this is called the &ldquo;primary selection&rdquo;).</li>
</ul>
<p>I rely on all of these nuances when I use form controls in my everyday life.
This is just for English, by the way. I often type in Japanese, which has an
entirely alien set of nuances. Here&rsquo;s what that looks like on Android (mobile is
another beast entirely, too!):</p>
<video src="https://redacted.moe/f/2f2f6815.webm" muted autoplay loop controls>
  If you're seeing this, your browser doesn't support HTML5 video, or webm, idk.
</video>
<p>Here&rsquo;s another control:</p>
<select>
<option>Alabama</option>
<option>Alaska</option>
<option>Arizona</option>
<option>Arkansas</option>
<option>California</option>
<option>Colorado</option>
<option>Connecticut</option>
<option>Delaware</option>
<option>Florida</option>
<option>Georgia</option>
<option>Hawaii</option>
<option>Idaho</option>
<option>Illinois</option>
<option>Indiana</option>
<option>Iowa</option>
<option>Kansas</option>
<option>Kentucky</option>
<option>Louisiana</option>
<option>Maine</option>
<option>Maryland</option>
<option>Massachusetts</option>
<option>Michigan</option>
<option>Minnesota</option>
<option>Mississippi</option>
<option>Missouri</option>
<option>Montana</option>
<option>Nebraska</option>
<option>Nevada</option>
<option>New Hampshire</option>
<option>New Jersey</option>
<option>New Mexico</option>
<option>New York</option>
<option>North Carolina</option>
<option>North Dakota</option>
<option>Ohio</option>
<option>Oklahoma</option>
<option>Oregon</option>
<option>Pennsylvania</option>
<option>Rhode Island</option>
<option>South Carolina</option>
<option>South Dakota</option>
<option>Tennessee</option>
<option>Texas</option>
<option>Utah</option>
<option>Vermont</option>
<option>Virginia</option>
<option>Washington</option>
<option>West Virginia</option>
<option>Wisconsin</option>
<option>Wyoming</option>
</select>
<p>There&rsquo;s an invisible edit buffer, so I can type &ldquo;Pennsylvania&rdquo; (or just P) to
select what I want. I can type &ldquo;New&rdquo; and then press down to select &ldquo;New Jersey&rdquo;.
If I make a mistake and I&rsquo;ve kept track of what I&rsquo;ve typed in my head, I can use
backspace to make a correction, and it just works. I have lived in both of these
places, and worked both of these keystrokes into my muscle memory. Filling out a
form with my address on it and using an input box like this to select my state
of residence takes me less than a second.</p>
<p>You cannot capture all of this nuance in a home-grown form control, or even
anything close to it, but many JavaScript programmers do it anyway. Whenever I
encounter a custom form control, the time required to complete the form
increases from under a second to as much as a minute.</p>
<p>For myself, this is just very annoying. Imagine the same situation if you were
blind. The standard form inputs work everywhere, and are designed with
accessibility in mind, so you&rsquo;re used to them and can easily fill in forms which
use the standard browser controls. But, when you hit a JavaScript-powered
organic cage-free non-GMO text box, you&rsquo;re screwed.</p>
<p>There are hundreds of little nuances that users learn to use their computers
efficiently. The exact features a user relies on will vary between operating
systems, browsers, hardware, natural languages, physical ability, and personal
preferences and experience. There are dozens of tiny workflows that people
depend on every day that have never even occurred to you.</p>
<p>Making a custom form control with JavaScript is going to make life worse for a
lot of people. Just don&rsquo;t do it. The browser&rsquo;s built-in controls are quite
sufficient.</p>]]></description><pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate></item><item><title>A finger client</title><link>https://drewdevault.com/2021/06/24/finger-client.html</link><description><![CDATA[<p>This is a short follow-up to the <a href="https://drewdevault.com/2021/05/24/io_uring-finger-server.html">io_uring finger server</a> article posted
about a month ago. In the time since, we have expanded our language with a more
complete networking stack, most importantly by adding a DNS resolver. I have
used these improvements to write a small client implementation of the <a href="https://datatracker.ietf.org/doc/html/rfc1288">finger
protocol</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">io</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">net</span><span class="o">::</span><span class="n">dial</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">os</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">strings</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@init</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">registersvc</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dial</span><span class="o">::</span><span class="n">registersvc</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;finger&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">[],</span><span class="w"> </span><span class="mi">79</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@noreturn</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">usage</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Usage: {} &lt;user&gt;[@&lt;host&gt;]&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">os</span><span class="o">::</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="n">usage</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">split</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="s">&#34;@&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">items</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="n">usage</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">host</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="s">&#34;localhost&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="n">items</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">else</span><span class="w"> </span><span class="n">usage</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">execute</span><span class="p">(</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">host</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">dial</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="n">dial</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">execute</span><span class="p">(</span><span class="n">user</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">host</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">dial</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dial</span><span class="o">::</span><span class="n">dial</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">host</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;finger&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintf</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;{}</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">stdout</span><span class="p">,</span><span class="w"> </span><span class="n">conn</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Technically, we could do more, but I chose to just address the most common
use-case for finger servers in active use today: querying a specific user.
Expanding this with full support for all finger requests would probably only
grow this code by 2 or 3 times.</p>
<p>Our language now provides a net::dial module, inspired by <a href="https://golang.org/pkg/net/#Dial">Go&rsquo;s net.Dial</a> and
the <a href="http://man.9front.org/2/dial">Plan 9 dial function</a> Go is derived from. Our dial actually comes a bit
closer to Plan 9 by re-introducing the service parameter — Plan 9&rsquo;s
&ldquo;tcp!example.org!http&rdquo; becomes net::dial(&ldquo;tcp&rdquo;, &ldquo;example.org&rdquo;, &ldquo;http&rdquo;) in our
language — which we use to find the port (unless you specify it in the
address). The service parameter is tested against a small internal list of known
services, and against /etc/services. We also automatically perform an SRV lookup
for &ldquo;_finger._tcp.example.org&rdquo;, so most programs written in our language will
support SRV records with no additional effort.</p>
<p>In our client code, we can see that the @init function adds &ldquo;finger&rdquo; to the list
of known internal services. @init functions run on start-up, and this one just
lets dial know about our protocol. Our network stack is open to extension in
other respects, too — unlike Go, third-party libraries can define new
protocol handlers for dial as well, perhaps opening it up in the future to
networks like AF_BLUETOOTH, AF_AX25, and so on, complete with support for
network-appropriate addresses and resolver functionality.</p>
<p>The rest is pretty straightforward! We just parse the command line, dial the
server, write the username to it, and splice the connection into stdout. Much
simpler than the server. Future improvements might rewrite the CRLF to LF, but
that&rsquo;s not particularly important.</p>]]></description><pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate></item><item><title>Status update, June 2021</title><link>https://drewdevault.com/2021/06/15/Status-update-June-2021.html</link><description><![CDATA[<p>Hiya! Got another status update for you. First, let me share this picture that
my dad and I took on our recent astronomy trip (click for full res):</p>
<p><a href="https://redacted.moe/f/a3b37775.jpg"><img src="https://l.sr.ht/o750.jpg" alt="A long-exposure picture of the night sky. Thousands of stars are visible, as well as the band of the milky way."></a></p>
<p>Bonus Venus:</p>
<p><img src="https://redacted.moe/f/6574aa37.png" alt="A bright white circle against a dark background"></p>
<p>So, what&rsquo;s new? With SourceHut, there are a few neat goings-on. For one, thanks
to Michael Forney putting the finishing touches on the patchset, the
long-awaited NetBSD image is now available for builds.sr.ht. Also, the initial
lists.sr.ht GraphQL API design is in place, and Simon Ser is working on a new
and improved implementation of email discussion parsing for us to use. I&rsquo;ve also
redesigned the registration &amp; onboarding flow based on a maintainer/contributor
distinction, which should help people understand how sourcehut works a bit
better. Also, as promised, the writable GraphQL API for builds.sr.ht is now
available.</p>
<p>I had been working on a new feature for the secret programming language, but in
the course of implementing it, it became clear to me that we need to take a step
back and do some deep refactoring in the compiler. This will probably occupy us
for a couple of months. Even so, some improvements in the standard library have
been made and shall continue to be made. You may have seen a few weeks ago that
I <a href="https://drewdevault.com/2021/05/24/io_uring-finger-server.html">wrote a finger server</a> in the new language, and there&rsquo;s a bunch of code
for you to read there if you&rsquo;re interested in learning more.</p>
<p>I also spent some time this month on Simon&rsquo;s <a href="https://git.sr.ht/~emersion/gamja">gamja</a> and <a href="https://git.sr.ht/~emersion/soju">soju</a> projects.
Libera.chat is running an experimental instance of gamja <a href="https://web.libera.chat/gamja">for their webchat</a>,
and I&rsquo;ve helped Simon incorporate some of their feedback and apply a layer of
polish to the client. I&rsquo;m also working on generalizing soju a bit so that we can
eventually utilize it to offer a hosted IRC bouncer for sr.ht users.</p>
<p>That&rsquo;s all I have to share for now. My foci have been on sourcehut and the
secret language, and will continue to be those. I plan on advancing the work on
the GraphQL APIs for sr.ht and ideally shipping an initial version of the
lists.sr.ht API in a few weeks. I&rsquo;ll share more news about the new language when
it&rsquo;s ready. Until next time!</p>]]></description><pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate></item><item><title>Provided &quot;as is&quot;, without warranty of any kind</title><link>https://drewdevault.com/2021/06/14/Provided-as-is-without-warranty.html</link><description><![CDATA[<p>The MIT license contains the following text, in all uppercase no less:</p>
<blockquote>
<p>THE SOFTWARE IS PROVIDED &ldquo;AS IS&rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</p></blockquote>
<p>The BSD licenses, GPL family of licenses, Apache 2.0, Mozilla Public License,
and likely any other license you&rsquo;d care to name, have similar clauses of their
own. It&rsquo;s worth taking a moment to consider the implications of this statement
and what it says about the social aspects of free and open source software.</p>
<p>Many people who rely on free and open source software feel entitled to some
degree of workitude or support from the developers, or think that the developers
have a responsibility to provide good maintenance, or any maintenance at all,
for their work. This is simply not true. All free and open source software
disclaims all responsibility for your use of them for any purpose, often in all
capital letters.</p>
<p>Some maintainers will allow you to negotiate additional terms with them, for
example through the sale of a support contract, for which you may receive such
a guarantee. If you have not made such an agreement with your maintainers, they
have no responsibility to provide you with any support or assurance of quality.
That means that they do not have to solve your bug reports or answer your
questions. They do not have to review and apply your patch. They do not have to
write documentation. They do not have to port it to your favorite platform. You
are not entitled to the blood, sweat, and tears of the maintainers of the free &amp;
open source software you use.</p>
<p>It is <em>nice</em> when a maintainer offers you their time, but by no means are they
required to. FOSS is what <strong>you</strong> make of it. You have the right to make the
changes you need from the software yourself, and you are the only person that
you can reliably expect to do it. You aren&rsquo;t entitled to the maintainer&rsquo;s time,
but you are, per the <a href="https://opensource.org/osd">open source definition</a> and
<a href="https://www.gnu.org/philosophy/free-sw.en.html">free software definition</a>,
entitled to change the software, distribute your changes to others, and to sell
the software with or without those changes.</p>
<p>Though this idea is important for users of free software to understand, it&rsquo;s
equally important that maintainers understand this as well. We have a problem
with burn-out in the free software community, wherein a maintainer, feeling
pressured into accepting greater responsibility over their work from a community
that increasingly depends on them, will work themselves half to death for little
or no compensation. You should not do this! That wasn&rsquo;t part of the deal!</p>
<p>As a maintainer, you need to be prepared to say &ldquo;no&rdquo;. Working on your project
should never feel like a curse. You started it for a reason — remember
that reason. Was it to lose your sanity? Or was it to have fun? Was it to solve
a specific problem you had? Or was it to solve problems for someone you&rsquo;ve never
met? Remember these goals, and stay true to them. If you&rsquo;re getting stressed
out, stop. You can always walk away. You don&rsquo;t owe anything to anyone.</p>
<p>If you enjoy the work, and you enjoy helping others, that&rsquo;s great! Of course,
you are allowed to help your users out if you so choose. However, I recommend
that you manage their expectations, and make sure you&rsquo;re spending time
cultivating a healthy relationship between you, your colleagues, and your users.
FOSS projects are made out of people, and maintaining that social graph is as
important as maintaining the code. Make sure everyone understands the rules and
talk about your frustrations with each other. Having an active dialogue can
prevent problems before they happen in the first place.</p>]]></description><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate></item><item><title>I will be moving to the Netherlands</title><link>https://drewdevault.com/2021/06/07/The-Netherlands.html</link><description><![CDATA[<p>I had been planning a move to the Netherlands for a while, at least until a
large COVID-shaped wrench was thrown into the gears. However, I was fully
vaccinated by early April, and there are signs of the border opening up now, so
my plans have been slowly getting back on track. I sent off my visa application
today, and assuming I can navigate the pandemic-modified procedures, I should be
able to make my move fairly soon. It&rsquo;s a little bit intimidating, but I am
looking forward to it!</p>
<p><em>Quick note: I am looking for temporary housing in NL; somewhere I can stay for
6-12 months with a permanent mailing address for receiving immigration-related
documents. I would prefer to rent out a room than to use some kind of commercial
accommodation, to be certain that I can receive mail from the immigration
services for the duration of the process. <a href="mailto:sir@cmpwn.com">Please shoot me an email</a> if
you&rsquo;ve got a lead! I&rsquo;d rather meet someone through the FOSS community than dig
through <del>Craigslist</del> Marktplaats from overseas.</em></p>
<p>I have felt a kind of dissonance with my home country of the United States for a
long time now, and I have found it very difficult to resolve. I am not of one
mind with my peers in this country on many issues; social, economic, and
political. Even limiting this inquiry to matters related to FOSS, it&rsquo;s quite
clear that the FOSS community in Europe is much stronger than in America. In the
United States, capitalism is the secular religion, and my values, in FOSS and
otherwise, are incompatible with the American ethos.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Leaving the US is a selfish choice. I could stay here to get involved in solving
these problems, but I chose to leave for a place which has already made much
more progress on them. Ultimately, this is the only life I&rsquo;m gonna get, and I
have decided not to spend it on politics. I&rsquo;ll spare you from the rest of the
details. I&rsquo;ll also acknowledge that I&rsquo;m very privileged to even have this choice
at all. Because I know how difficult it is to leave, for reasons unique to each
person&rsquo;s own situation, I don&rsquo;t hold anyone who stays behind accountable for
their country&rsquo;s cruelties.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>So, why the Netherlands? I considered many options. For instance, I am fluent in
Japanese, have an existing social network there, and understand their
immigration laws and process. However, as much as I love to visit, I&rsquo;m not on
their cultural wavelength. Integration would pose a challenge. That said, I have
also spent a lot of time in the EU, which is a hot spot for the FOSS ecosystem.
Access to any EU country with a path to citizenship opens up access to the rest
of the EU, making it a very strong choice with lots of second choices easily
available.</p>
<p>The Netherlands is an attractive place in these respects. It is relatively easy
for me to obtain a visa there, for one, but it also ranks very highly in
numerous respects: social, economic, political, and basic happiness. I have many
friends in Europe and I won&rsquo;t have to worry too much about establishing a new
social network there.</p>
<p>There are also some risks. Housing is expensive and only getting more so. Also,
like the rest of the world, how NL will emerge from the crises of the pandemic
remains to be seen, and many countries are likely to suffer from long-term
consequences in all aspects of life. They are also already dealing with an
influx of immigrants, and it&rsquo;s quite possible that I will face some social and
legal challenges in the future.</p>
<p>Despite these and other risks, I am optimistic about this change. The path to
citizenship takes only five years, and after many careful inquiries into the
process, I believe my plans for getting there are on very solid footing. I have
been studying Dutch throughout much of the pandemic, and I&rsquo;m not having much
trouble with it — I intend to achieve fluency. Integration is well within
my grasp. I expect to look back on this transition with confidence in a decision
well-made.</p>
<p>Leuk jullie te ontmoeten, Nederland!</p>
<p>Oh, and yes: I will be re-locating SourceHut, the incorporated entity, to the
Netherlands, and gradually moving our infrastructure over the pond. Details
regarding these plans will eventually appear on the <a href="https://man.sr.ht/ops">ops wiki</a>. Users can
expect little to no disruption from the change.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Bonus: as I&rsquo;m writing this I can literally hear gunfire a couple of neighborhoods away. There have been an average of 1½ gun-related homicides per day in Philadelphia since January 1st, 2021.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>To be clear, I&rsquo;m under no illusions that the Netherlands is some kind of utopian place. I am well versed in the social, economic, and political issues they face. I&rsquo;m also aware of the declining state of democracy and political unity throughout the world, which affects the EU as well. But, by my reckoning, it&rsquo;s a hell of a lot better than the US, and will remain so for the foreseeable future. At least I&rsquo;ll be able to sleep at night if the world goes tits up.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 7 Jun 2021 00:00:00 +0000</pubDate></item><item><title>Build your project in our new language</title><link>https://drewdevault.com/2021/05/30/Come-build-your-project.html</link><description><![CDATA[<p>Do you have a new systems programming project on your todo list? If you&rsquo;re
feeling adventurous, I would like you to give it a crack in our new systems
programming language, and to use it to drive improvements in the less-developed
areas of our standard library.</p>
<p><strong>Note</strong>: we have enough projects on board now. Keep an eye on the blog, I&rsquo;ll
publish another announcement when we&rsquo;re ready for more.</p>
<p>Are you making a new coreutils implementation? A little OS kernel? A new shell?
A GUI toolkit? Database system? Web server? Whatever your systems programming
use-case, we think that our language is likely to be a good fit for you, and
your help in proving that, and spurring development to rise to meet your needs,
would be quite welcome.</p>
<p>Here&rsquo;s our pitch:</p>
<blockquote>
<p>XXXX is a systems programming language designed to be simple and robust. XXXX
uses a static type system, manual memory management, and a minimal runtime.
It is well-suited to writing operating systems, system tools, compilers,
networking software, and other low-level, high performance tasks.</p></blockquote>
<p>You can get a peek at how it feels by <a href="https://drewdevault.com/2021/05/24/io_uring-finger-server.html">reading about the finger server I wrote
with it</a>.</p>
<p>Sounds interesting? <a href="mailto:sir@cmpwn.com">Please tell me about your project idea</a>!</p>]]></description><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate></item><item><title>Using io_uring to make a high-performance... finger server</title><link>https://drewdevault.com/2021/05/24/io_uring-finger-server.html</link><description><![CDATA[<p>I&rsquo;m working on adding a wrapper for the <a href="https://unixism.net/loti/what_is_io_uring.html">Linux io_uring interface</a> to my
<a href="https://drewdevault.com/2021/03/19/A-new-systems-language.html">secret programming language project</a>. To help learn more about io_uring and
to test out the interface I was designing, I needed a small project whose design
was well-suited for the value-add of io_uring. The <a href="https://en.wikipedia.org/wiki/Finger_protocol">Finger protocol</a> is
perfect for this! After being designed in the 70&rsquo;s and then completely forgotten
about for 50 years, it&rsquo;s the perfect small and simple network protocol to test
drive this new interface with.</p>
<p>In short, finger will reach out to a remote server and ask for information about
a user. It was used back in the day to find contact details like the user&rsquo;s
phone number, office address, email address, sometimes their favorite piece of
ASCII art, and, later, a summary of the things they were working on at the
moment. The somewhat provocative name allegedly comes from an older usage of
the word to mean &ldquo;a snitch&rdquo; or a member of the FBI. The last useful RFC related
to Finger is <a href="https://datatracker.ietf.org/doc/html/rfc1288">RFC 1288</a>, circa 1999, which will be our reference for this
server. If you want to give it a test drive, try this to ping the server we&rsquo;ll
be discussing today:</p>
<pre tabindex="0"><code>printf &#39;drew\r\n&#39; | nc drewdevault.com 79
</code></pre><p>You might also have the finger command installed locally (try running &ldquo;finger
drew@drewdevault.com&rdquo;), and you can try out the <a href="https://sr.ht/~julienxx/Castor/">Castor</a> browser by sourcehut
user ~julienxx for a graphical experience.</p>
<p>And what is io_uring? It is the latest interface for async I/O on Linux, and
it&rsquo;s pretty innovative and interesting. The basic idea is to set up some memory
which is shared between the kernel and the userspace program, and stash a couple
of ring buffers there that can be updated with atomic writes. Userspace appends
submission queue entries (SQEs) to the submission queue (SQ), and the kernel
processes the I/O requests they describe and then appends completion queue
events (CQEs) to the completion queue (CQ). Interestingly, both sides can see
this happening <em>without</em> entering the kernel with a syscall, which is a major
performance boost. It more or less solves the async I/O problem for Linux, which
Linux (and Unix at large) has struggled to do for a long time.</p>
<p>With that the background in place, I&rsquo;m going to walk you through my finger
server&rsquo;s code. Given that this is written in an as-of-yet unreleased programming
language, I&rsquo;ll do my best to help you decipher the alien code.</p>
<details>
  <summary>A quick disclaimer</summary>
  <p>
  This language, the standard library, and the interface provided by
  linux::io_uring, are all works in progress and are subject to change. In
  particular, this program will become obsolete when we design a portable I/O
  bus interface, which on Linux will be backed by io_uring but on other systems
  will use kqueue, poll, etc.
  <p>
  As a rule of thumb, anything which uses rt:: or linux:: is likely to change or
  be moved behind a portable abstraction in the future.
</details>
<p>Let&rsquo;s start with the basics:</p>
<!--
Yes, it's called Hare. Now keep that to yourself.
-->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">getopt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">net</span><span class="o">::</span><span class="n">ip</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">strconv</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">unix</span><span class="o">::</span><span class="n">passwd</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">def</span><span class="w"> </span><span class="n">MAX_CLIENTS</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">128</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="n">ip</span><span class="o">::</span><span class="n">addr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ip</span><span class="o">::</span><span class="n">ANY_V6</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">79u16</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;finger&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getopt</span><span class="o">::</span><span class="n">parse</span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">args</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="s">&#34;finger server&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="sc">&#39;B&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;addr&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;address to bind to (default: all)&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="sc">&#39;P&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;port&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;port to bind to (default: 79)&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="sc">&#39;g&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;group&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;user group enabled for finger access (default: finger)&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">getopt</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">opts</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">opt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cmd</span><span class="p">.</span><span class="n">opts</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">opt</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="sc">&#39;B&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">ip</span><span class="o">::</span><span class="n">parse</span><span class="p">(</span><span class="n">opt</span><span class="p">.</span><span class="mi">1</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">a</span><span class="o">:</span><span class="w"> </span><span class="n">ip</span><span class="o">::</span><span class="n">addr</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">addr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">ip</span><span class="o">::</span><span class="n">invalid</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Invalid IP address&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="sc">&#39;P&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">strconv</span><span class="o">::</span><span class="n">stou16</span><span class="p">(</span><span class="n">opt</span><span class="p">.</span><span class="mi">1</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">u</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">u</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">strconv</span><span class="o">::</span><span class="n">invalid</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Invalid port&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">strconv</span><span class="o">::</span><span class="n">overflow</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Port exceeds range&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="sc">&#39;g&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">opt</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">grent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">passwd</span><span class="o">::</span><span class="n">getgroup</span><span class="p">(</span><span class="n">group</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;No &#39;{}&#39; group available&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">gr</span><span class="o">:</span><span class="w"> </span><span class="n">passwd</span><span class="o">::</span><span class="n">grent</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">gr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">passwd</span><span class="o">::</span><span class="n">grent_finish</span><span class="p">(</span><span class="n">grent</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>None of this code is related to io_uring or finger, but just handling some
initialization work. This is the daemon program, and it will accept some basic
configuration via the command line. The getopt configuration shown here will
produce the following help string:</p>
<pre tabindex="0"><code>$ fingerd -h
fingerd: finger server

Usage: ./fingerd [-B &lt;addr&gt;] [-P &lt;port&gt;] [-g &lt;group&gt;]

-B &lt;addr&gt;: address to bind to (default: all)
-P &lt;port&gt;: port to bind to (default: 79)
-g &lt;group&gt;: user group enabled for finger access (default: finger)
</code></pre><p>The basic idea is to make finger access opt-in for a given Unix account by
adding them to the &ldquo;finger&rdquo; group. The &ldquo;passwd::getgroup&rdquo; lookup fetches that
entry from /etc/group to identify the list of users for whom we should be
serving finger access.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">serv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">net</span><span class="o">::</span><span class="n">listen</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="n">port</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="mi">256</span><span class="o">:</span><span class="w"> </span><span class="n">net</span><span class="o">::</span><span class="n">backlog</span><span class="p">,</span><span class="w"> </span><span class="n">net</span><span class="o">::</span><span class="n">reuseport</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;listen: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">l</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">net</span><span class="o">::</span><span class="n">listener</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">l</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">defer</span><span class="w"> </span><span class="n">net</span><span class="o">::</span><span class="n">shutdown</span><span class="p">(</span><span class="n">serv</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">fmt</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;Server running on :{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">port</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Following this, we set up a TCP listener. I went for a backlog of 256
connections (overkill for a finger server, but hey), and set reuseport so you
can achieve CLOUD SCALE by running several daemons at once.</p>
<p>Next, I set up the io_uring that we&rsquo;ll be using:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// The ring size is 2 for the accept and sigfd read, plus 2 SQEs for
</span></span></span><span class="line"><span class="cl"><span class="c1">// each of up to MAX_CLIENTS: either read/write plus a timeout, or up to
</span></span></span><span class="line"><span class="cl"><span class="c1">// two close SQEs during cleanup.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">static</span><span class="w"> </span><span class="k">assert</span><span class="p">(</span><span class="n">MAX_CLIENTS</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">MAX_ENTRIES</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">params</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">ring</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io_uring</span><span class="o">::</span><span class="n">setup</span><span class="p">(</span><span class="n">MAX_CLIENTS</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">params</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ring</span><span class="o">:</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">io_uring</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ring</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="n">io_uring</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">defer</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ring</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>If we were running this as root (and we often are, given that fingerd binds to
port 79 by default), we could go syscall-free by adding
<code>io_uring::setup_flags::SQPOLL</code> to <code>params.flags</code>, but this requires more
testing on my part so I have not added it yet. With this configuration, we&rsquo;ll
need to use the <code>io_uring_enter</code> syscall to submit I/O requests.</p>
<p>We also have to pick a queue size when setting up the uring. I planned this out
so that we can have two SQEs in flight for every client at once — one for
a read/write request and its corresponding timeout, or for the two &ldquo;close&rdquo;
requests used when disconnecting the client — plus two extra entries, one
for the &ldquo;accept&rdquo; call, and another to wait for signals from a signalfd.</p>
<p>Speaking of signalfds:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">mask</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">sigset</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">rt</span><span class="o">::</span><span class="n">sigaddset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">SIGINT</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">rt</span><span class="o">::</span><span class="n">sigaddset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">SIGTERM</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">rt</span><span class="o">::</span><span class="n">sigprocmask</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">SIG_BLOCK</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span><span class="w"> </span><span class="kt">null</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">let</span><span class="w"> </span><span class="n">sigfd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">signalfd</span><span class="o">::</span><span class="n">signalfd</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">defer</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">sigfd</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">files</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">net</span><span class="o">::</span><span class="n">listenerfd</span><span class="p">(</span><span class="n">serv</span><span class="p">)</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w"> </span><span class="n">sigfd</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">io_uring</span><span class="o">::</span><span class="n">register_files</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ring</span><span class="p">,</span><span class="w"> </span><span class="n">files</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">must_get_sqe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">io_uring</span><span class="o">::</span><span class="n">poll_add</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">POLLIN</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w"> </span><span class="n">flags</span><span class="o">::</span><span class="n">FIXED_FILE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">io_uring</span><span class="o">::</span><span class="n">set_user</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">sigfd</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>We haven&rsquo;t implemented a high-level signal interface yet, so this is just using
the syscall wrappers. I chose to use a signalfd here so I can monitor for SIGINT
and SIGTERM with my primary I/O event loop, to (semi-)gracefully<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> terminate
the server.</p>
<p>This also happens to show off our first SQE submission. &ldquo;must_get_sqe&rdquo; will
fetch the next SQE, asserting that there is one available, which relies on the
math I explained earlier when planning for our queue size. Then, we populate
this SQE with a &ldquo;poll_add&rdquo; operation, which polls on the first fixed file
descriptor.  The &ldquo;register&rdquo; call above adds the socket and signal file
descriptors to the io_uring&rsquo;s list of &ldquo;fixed&rdquo; file descriptors, and so with
&ldquo;flags::FIXED_FILE&rdquo; this refers to the signalfd.</p>
<p>We also set the user_data field of the SQE with &ldquo;set_user&rdquo;. This will be copied
to the CQE later, and it&rsquo;s necessary that we provide a unique value in order to
correlate the CQE back to the SQE it refers to. We can use any value, and the
address of the signalfd variable is a convenient number we can use for this
purpose.</p>
<p>There&rsquo;s one more step — submitting the SQE — but that&rsquo;ll wait until
we set up more I/O. Next, I have set up a &ldquo;context&rdquo; structure which will store
all of the state the server needs to work with, to be passed to functions
throughout the program.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">context</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">users</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">clients</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">uring</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">io_uring</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">ctx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">context</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">users</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">grent</span><span class="p">.</span><span class="n">userlist</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">uring</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ring</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="o">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The second &ldquo;...&rdquo; towards the end is not for illustrative purposes - it sets all
of the remaining fields to their default values (in this case, clients becomes
an empty slice).</p>
<p>Finally, this brings us to the main loop:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">accept_waiting</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">peeraddr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">sockaddr</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">peeraddr_sz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="n">rt</span><span class="o">::</span><span class="n">sockaddr</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">accept_waiting</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">clients</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">MAX_CLIENTS</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">must_get_sqe</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">uring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">io_uring</span><span class="o">::</span><span class="n">accept</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">peeraddr</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">peeraddr_sz</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">flags</span><span class="o">::</span><span class="n">FIXED_FILE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">io_uring</span><span class="o">::</span><span class="n">set_user</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">peeraddr</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">accept_waiting</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">submit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ring</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">cqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io_uring</span><span class="o">::</span><span class="n">wait</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">uring</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error: {}&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">io_uring</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">cqe</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe_seen</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ring</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">get_user</span><span class="p">(</span><span class="n">cqe</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">user</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">&amp;</span><span class="n">peeraddr</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">accept</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">peeraddr</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">accept_waiting</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">user</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">&amp;</span><span class="n">sigfd</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">si</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">signalfd</span><span class="o">::</span><span class="n">siginfo</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">rt</span><span class="o">::</span><span class="n">read</span><span class="p">(</span><span class="n">sigfd</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">si</span><span class="p">,</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="n">signalfd</span><span class="o">::</span><span class="n">siginfo</span><span class="p">))</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">errorln</span><span class="p">(</span><span class="s">&#34;Caught signal, terminating&#34;</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">clients</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ctx</span><span class="p">.</span><span class="n">clients</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">user</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">client</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">dispatch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>At each iteration, assuming we have room and aren&rsquo;t already waiting on a new
connection, we submit an &ldquo;accept&rdquo; SQE to fetch the next incoming client. This
SQE accepts an additional parameter to write the client&rsquo;s IP address to, which
we provide via a pointer to our local peeraddr variable.</p>
<p>We call &ldquo;submit&rdquo; at the heart of the loop to submit any SQEs we have pending
(including both the signalfd poll and the accept call, but also anything our
future client handling code will submit) to the io_uring, then wait the next CQE
from the kernel.</p>
<p>When we get one, we defer a &ldquo;cqe_seen&rdquo;, which will execute at the end of the
current scope (i.e. the end of this loop iteration) to advance our end of the
completion queue, then figure out what I/O request was completed. The code
earlier sets up SQEs for the accept and signalfd, which we check here. If a
signal comes in, we read the details to acknowledge it and then terminate the
loop. We also check if the user data was set to the address of any client state
data, which we&rsquo;ll use to dispatch for client-specific I/O later on. If a new
connection comes in:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">accept</span><span class="p">(</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="p">,</span><span class="w"> </span><span class="n">peeraddr</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">rt</span><span class="o">::</span><span class="n">sockaddr</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">fd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io_uring</span><span class="o">::</span><span class="n">result</span><span class="p">(</span><span class="n">cqe</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error: accept: {}&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">io_uring</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fd</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fd</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">peer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">net</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">from_native</span><span class="p">(</span><span class="o">*</span><span class="n">peeraddr</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">now</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">time</span><span class="o">::</span><span class="n">now</span><span class="p">(</span><span class="n">time</span><span class="o">::</span><span class="n">clock</span><span class="o">::</span><span class="n">MONOTONIC</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">(</span><span class="n">client</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="o">::</span><span class="n">READ_QUERY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">deadline</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">time</span><span class="o">::</span><span class="n">add</span><span class="p">(</span><span class="n">now</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">time</span><span class="o">::</span><span class="n">SECOND</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">addr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">peer</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fd</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">plan_fd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">append</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">clients</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">submit_read</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This is fairly self-explanatory, but we do see the first example of how to
determine the result from a CQE. The result field of the CQE structure the
kernel fills in is set to what would normally be the return value of the
equivalent syscall, and &ldquo;linux::io_uring::result&rdquo; is a convenience function
which translates negative values (i.e. errno) into a more idiomatic result type.</p>
<p>We choose a deadline here, 10 seconds from when the connection is established,
for the entire exchange to be completed by. This helps to mitigate
<a href="https://en.wikipedia.org/wiki/Slowloris_(computer_security)">Slowloris</a> attacks, though there are more mitigations we could implement
for this.</p>
<p>Our client state is handled by a state machine, which starts in the
&ldquo;READ_QUERY&rdquo; state. Per the RFC, the client will be sending us a query, followed
by a CRLF. Our initial state is prepared to handle this. The full client state
structure is as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">READ_QUERY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">OPEN_PLAN</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">READ_PLAN</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">WRITE_RESP</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">WRITE_ERROR</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">state</span><span class="o">:</span><span class="w"> </span><span class="n">state</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">deadline</span><span class="o">:</span><span class="w"> </span><span class="n">time</span><span class="o">::</span><span class="n">instant</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">addr</span><span class="o">:</span><span class="w"> </span><span class="n">ip</span><span class="o">::</span><span class="n">addr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fd</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">plan_fd</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">plan_path</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">char</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">xbuf</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">2048</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Each field will be explained in due time. We add this to our list of active
connections and call &ldquo;submit_read&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">submit_read</span><span class="p">(</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">fd</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w"> </span><span class="n">offs</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">must_get_sqe</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">uring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">maxread</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">xbuf</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">read</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">xbuf</span><span class="p">[</span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">)..]</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">maxread</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">),</span><span class="w"> </span><span class="n">offs</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"> </span><span class="n">flags</span><span class="o">::</span><span class="n">IO_LINK</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">set_user</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">ts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">timespec</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">time</span><span class="o">::</span><span class="n">instant_to_timespec</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">deadline</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ts</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">must_get_sqe</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">uring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">link_timeout</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ts</span><span class="p">,</span><span class="w"> </span><span class="n">timeout_flags</span><span class="o">::</span><span class="n">ABS</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>I&rsquo;ve prepared two SQEs here. The first is a read, which will fill half of the
client buffer with whatever they send us over the network (why half? I&rsquo;ll
explain later). It&rsquo;s configured with &ldquo;flags::IO_LINK&rdquo;, which will link it to the
following request: a timeout. This will cause the I/O to be cancelled if it
doesn&rsquo;t complete before the deadline we set earlier. &ldquo;timeout_flags::ABS&rdquo;
specifies that the timeout is an absolute timestamp rather than a duration
computed from the time of I/O submission.</p>
<p>I set the user data to the client state pointer, which will be used the next
time we have a go-around in the main event loop (feel free to scroll back up if
you want to re-read that bit). The event loop will send the CQE to the dispatch
function, which will choose the appropriate action based on the current client
state.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">dispatch</span><span class="p">(</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">state</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">state</span><span class="o">::</span><span class="n">READ_QUERY</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">client_query</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">state</span><span class="o">::</span><span class="n">OPEN_PLAN</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">client_open_plan</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">state</span><span class="o">::</span><span class="n">READ_PLAN</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">client_read_plan</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">state</span><span class="o">::</span><span class="n">WRITE_RESP</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="o">::</span><span class="n">WRITE_ERROR</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">client_write_resp</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">})</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">disconnect_err</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">err</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p><em>What&rsquo;s the difference between match and switch? The former works with types,
and switch works with values. We might attempt to merge these before the
language&rsquo;s release, but for now the distinction simplifies our design.</em></p>
<p>I&rsquo;ve structured the client state machine into four states based on the kind of
I/O they handle, plus a special case for error handling:</p>
<ol>
<li>Reading the query from the client</li>
<li>Opening the plan file for the requested user</li>
<li>Reading from the plan file</li>
<li>Forwarding its contents to the client</li>
</ol>
<p><img src="https://redacted.moe/f/2eb5650a.svg" alt=""></p>
<p>Each circle in this diagram represents a point where we will submit some I/O to
our io_uring instance and return to the event loop. If any I/O resulted in an
error, we&rsquo;ll follow the dotted line to the error path, which transmits the error
to the user (and if an error occurs <em>during</em> error transmission, we&rsquo;ll
immediately disconnect them, but that&rsquo;s not shown here).</p>
<p>I need to give a simplified introduction to error handling in this new
programming language before we move on, so let&rsquo;s take a brief detour. In this
language, we require the user to explicitly do <em>something</em> about errors.
Generally speaking, there are three somethings that you will do:</p>
<ul>
<li>Some context-appropriate response to an error condition</li>
<li>Bumping the error up to the caller to deal with</li>
<li>Asserting that the error will never happen in practice</li>
</ul>
<p>The latter two options have special operators (&quot;?&quot; and &ldquo;!&rdquo;, respectively, used
as postfix operators on expressions which can fail), and the first option is
handled manually in each situation as appropriate. It&rsquo;s usually most convenient
to use ? to pass errors up the stack, but the buck has got to stop somewhere. In
the code we&rsquo;ve seen so far, we&rsquo;re in or near the main function — the top
of the call stack — and so have to handle these errors manually, usually
by terminating the program with &ldquo;!&rdquo;. But, when a client causes an error, we
cannot terminate the program without creating a DoS vulnerability. This
&ldquo;dispatch&rdquo; function sets up common client error handling accordingly, allowing
later functions to use the &ldquo;?&rdquo; operator to pass errors up to it.</p>
<p>To represent the errors themselves, we use a lightweight approach to tagged
unions, similar to a result type. Each error type, optionally with some extra
metadata, is enumerated, along with any possible successful types, as part of a
function&rsquo;s return type. The only difference between an error type and a normal
type is that the former is denoted with a &ldquo;!&rdquo; modifier — so you can store
any representable state in an error type.</p>
<p>I also wrote an &ldquo;errors&rdquo; file which provides uniform error handling for all of
the various error conditions we can expect to occur in this program. This
includes all of the error conditions that we define ourselves, as well as any
errors we expect to encounter from modules we depend on. The result looks like
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">fs</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">io</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">linux</span><span class="o">::</span><span class="n">io_uring</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">unexpected_eof</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">invalid_query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">no_such_user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">relay_denied</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">max_query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">unexpected_eof</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">invalid_query</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">no_such_user</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">relay_denied</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">max_query</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">unexpected_eof</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="s">&#34;Unexpected EOF&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">invalid_query</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="s">&#34;Invalid query&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">no_such_user</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="s">&#34;No such user&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">relay_denied</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="s">&#34;Relay access denied&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">max_query</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="s">&#34;Maximum query length exceeded&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>With an understanding of error handling, we can re-read the dispatch function&rsquo;s
common error handling for all client issues:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">dispatch</span><span class="p">(</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">state</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">state</span><span class="o">::</span><span class="n">READ_QUERY</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">client_query</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">state</span><span class="o">::</span><span class="n">OPEN_PLAN</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">client_open_plan</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">state</span><span class="o">::</span><span class="n">READ_PLAN</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">client_read_plan</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">state</span><span class="o">::</span><span class="n">WRITE_RESP</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="o">::</span><span class="n">WRITE_ERROR</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">client_write_resp</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">})</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">disconnect_err</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">err</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Each dispatched-to function returns a tagged union of (void | error), the latter
being our common error type. If they return void, we do nothing, but if an error
occurred, we call &ldquo;disconnect_err&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">disconnect_err</span><span class="p">(</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">errorfln</span><span class="p">(</span><span class="s">&#34;{}: Disconnecting with error: {}&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ip</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">addr</span><span class="p">),</span><span class="w"> </span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">))</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">forward</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">(</span><span class="n">unexpected_eof</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">invalid_query</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">no_such_user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="o">|</span><span class="w"> </span><span class="n">relay_denied</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">max_query</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">*</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">false</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">forward</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">disconnect</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">xbuf</span><span class="p">[..];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">bsprintf</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Error: {}</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">[..</span><span class="k">len</span><span class="p">(</span><span class="n">s</span><span class="p">)];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="o">::</span><span class="n">WRITE_ERROR</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">submit_write</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">fd</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">disconnect</span><span class="p">(</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">must_get_sqe</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">uring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">fd</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">plan_fd</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">must_get_sqe</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">uring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">io_uring</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">plan_fd</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">clients</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">clients</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">client</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">delete</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">clients</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">free</span><span class="p">(</span><span class="n">client</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>We log the error here, and for certain kinds of errors, we &ldquo;forward&rdquo; them to the
client by writing them to our client buffer and going into the &ldquo;WRITE_RESP&rdquo;
state. For other errors, we just drop the connection.</p>
<p>The disconnect function, which disconnects the client immediately, queues
io_uring submissions to close the open file descriptors associated with it, and
then removes it from the list of clients.</p>
<p>Let&rsquo;s get back to the happy path. Remember the read SQE we submitted when the
client established the connection? When the CQE comes in, the state machine
directs us into this function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">client_query</span><span class="p">(</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">result</span><span class="p">(</span><span class="n">cqe</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">r</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">unexpected_eof</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">xbuf</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">max_query</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">xbuf</span><span class="p">[..</span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">r</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// The RFC requires queries to use CRLF, but it is also one of the few
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// RFCs which explicitly reminds you to, quote, &#34;as with anything in the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// IP protocol suite, &#39;be liberal in what you accept&#39;&#34;, so we accept LF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// as well.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">lf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">bytes</span><span class="o">::</span><span class="n">index</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;\n&#39;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">z</span><span class="o">:</span><span class="w"> </span><span class="kt">size</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">z</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">xbuf</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">return</span><span class="w"> </span><span class="n">max_query</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">submit_read</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">lf</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">[</span><span class="n">lf</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;\r&#39;</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">lf</span><span class="w"> </span><span class="o">-=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// CRLF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">try_fromutf8</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">[..</span><span class="n">lf</span><span class="p">]))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">*</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">invalid_query</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">q</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">q</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">fmt</span><span class="o">::</span><span class="n">printfln</span><span class="p">(</span><span class="s">&#34;{}: finger {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ip</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">addr</span><span class="p">),</span><span class="w"> </span><span class="n">query</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">plan</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">process_query</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">query</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">plan</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">plan_path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">to_c</span><span class="p">(</span><span class="n">plan</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">must_get_sqe</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">uring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">openat</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">AT_FDCWD</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">plan_path</span><span class="p">,</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">O_RDONLY</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">set_user</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="o">::</span><span class="n">OPEN_PLAN</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The first half of this function figures out if we&rsquo;ve received a full line,
including CRLF. The second half parses this line as a finger query and prepares
to fulfill the enclosed request.</p>
<p>The read operation behaves like the read(2) syscall, which returns 0 on EOF. We
aren&rsquo;t expecting an EOF in this state, so if we see this, we boot them out. We
also have a cap on our buffer length, so we return the max_query error if it&rsquo;s
been exceeded. Otherwise, we look for a line feed. If there isn&rsquo;t one, we submit
another read to get more from the client, but if a line feed is there, we trim
off a carriage return (if present) and decode the completed query as a UTF-8
string.</p>
<p>We call &ldquo;process_query&rdquo; (using the error propagation operator to bubble up
errors), which returns the path to the requested user&rsquo;s ~/.plan file. We&rsquo;ll look
at the guts of that function in a moment. The return value is heap allocated, so
we defer a free for later.</p>
<p>Strings in our language are not null terminated, but io_uring expects them to
be. This is another case which will be addressed transparently once we build a
higher-level, portable interface. For now, though, we need to call
&ldquo;strings::to_c&rdquo; ourselves, and stash it on the client struct. It&rsquo;s heap
allocated, so we&rsquo;ll free it in the next state when the I/O submission completes.</p>
<p>Speaking of which, we finish this process after preparing the next I/O operation
— opening the plan file — and setting the client state to the next
step in the state machine.</p>
<p>Before we move on, though, I promised that we&rsquo;d talk about the process_query
function. Here it is in all of its crappy glory:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">path</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">strings</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">unix</span><span class="o">::</span><span class="n">passwd</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">process_query</span><span class="p">(</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w"> </span><span class="n">q</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">str</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">has_prefix</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;/W&#34;</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">has_prefix</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;/w&#34;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">q</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">sub</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">end</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">has_prefix</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="w"> </span><span class="s">&#34; &#34;</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">has_prefix</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;</span><span class="se">\t</span><span class="s">&#34;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">q</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">sub</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">end</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">strings</span><span class="o">::</span><span class="n">contains</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;@&#39;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">relay_denied</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">q</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">pwent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">passwd</span><span class="o">::</span><span class="n">getuser</span><span class="p">(</span><span class="n">user</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">no_such_user</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">p</span><span class="o">:</span><span class="w"> </span><span class="n">passwd</span><span class="o">::</span><span class="n">pwent</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">passwd</span><span class="o">::</span><span class="n">pwent_finish</span><span class="p">(</span><span class="n">pwent</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">enabled</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">users</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">user</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ctx</span><span class="p">.</span><span class="n">users</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">enabled</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">enabled</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">no_such_user</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">path</span><span class="o">::</span><span class="n">join</span><span class="p">(</span><span class="n">pwent</span><span class="p">.</span><span class="n">homedir</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;.plan&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The <a href="https://datatracker.ietf.org/doc/html/rfc1288#section-2.3">grammar described in RFC 1288</a> is pretty confusing, but most of it
is to support features I&rsquo;m not interested in for this simple implementation,
like relaying to other finger hosts or requesting additional information. I
think I&rsquo;ve &ldquo;parsed&rdquo; most of the useful bits here, and ultimately I&rsquo;m aiming to
end up with a single string: the username whose details we want. I grab the
user&rsquo;s passwd entry and check if they&rsquo;re a member of the &ldquo;finger&rdquo; group we
populated way up there in the first code sample. If so, we pull the path to
their homedir out of the passwd entry, join it with &ldquo;.plan&rdquo;, and send it up the
chain.</p>
<p>At this point we&rsquo;ve received, validated, and parsed the client&rsquo;s query, and
looked up the plan file we need. The next step is to open the plan file, which
is where we left off at the end of the last function. The I/O we prepared there
takes us here when it completes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">client_open_plan</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">free</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">plan_path</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">plan_fd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">result</span><span class="p">(</span><span class="n">cqe</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">xbuf</span><span class="p">[..</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="o">::</span><span class="n">READ_PLAN</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">submit_read</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">plan_fd</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>By now, this should be pretty comprehensible. I will clarify what the &ldquo;[..0]&rdquo;
syntax does here, though. This language has slices, which store a pointer to an
array, a length, and a capacity. In our client state, xbuf is a fixed-length
array which provides the actual storage, and &ldquo;buf&rdquo; is a slice of that array,
which acts as a kind of cursor, telling us what portion of the buffer is valid.
The result of this expression is to take a slice up to, but not including, the
0th item of that array — in other words, an empty slice. The address and
capacity of the slice still reflect the traits of the underlying array, however,
which is what we want.</p>
<p>We&rsquo;re now ready to read data out of the user&rsquo;s plan file. We submit a read
operation for that file descriptor, and when it completes, we&rsquo;ll end up here:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">client_read_plan</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">result</span><span class="p">(</span><span class="n">cqe</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">r</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">disconnect</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">xbuf</span><span class="p">[..</span><span class="n">r</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Convert LF to CRLF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// We always read a maximum of the length of xbuf over two so that we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// have room to insert these.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">seencrlf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="sc">&#39;\r&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">seencrlf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="sc">&#39;\n&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">seencrlf</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">static</span><span class="w"> </span><span class="k">insert</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="sc">&#39;\r&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="o">*</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">seencrlf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="o">::</span><span class="n">WRITE_RESP</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">submit_write</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">fd</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Again, the read operation for io_uring behaves similarly to the read(2) syscall,
so it returns the number of bytes read. If this is zero, or EOF, we can
terminate the state machine and disconnect the client (this is a nominal
disconnect, so we don&rsquo;t use disconnect_err here). If it&rsquo;s nonzero, we set our
buffer slice to the subset of the buffer which represents the data io_uring has
read.</p>
<p>The Finger RFC requires all data to use CRLF for line endings, and this is where
we deal with it. Remember earlier when I noted that we only ever used half of
the read buffer? This is why: if we read 1024 newlines from the plan file, we
will need another 1024 bytes to insert carriage returns. Because we&rsquo;ve planned
for and measured out our memory requirements in advance, we can use &ldquo;static
insert&rdquo; here. This built-in works similarly to how insert normally works, but it
will never re-allocate the underlying array. Instead, it asserts that the
insertion would not require a re-allocation, and if it turns out that you did
the math wrong, it aborts the program instead of buffer overflowing. But, we did
the math and it works out, so it saves us from an extra allocation.</p>
<p>Capping this off, we submit a write to transmit this buffer to the client.
&ldquo;submit_write&rdquo; is quite similar to submit_read:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">submit_write</span><span class="p">(</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">fd</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">must_get_sqe</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">uring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">write</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">flags</span><span class="o">::</span><span class="n">IO_LINK</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">set_user</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">ts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rt</span><span class="o">::</span><span class="n">timespec</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">time</span><span class="o">::</span><span class="n">instant_to_timespec</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">deadline</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ts</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">must_get_sqe</span><span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">uring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">io_uring</span><span class="o">::</span><span class="n">link_timeout</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ts</span><span class="p">,</span><span class="w"> </span><span class="n">timeout_flags</span><span class="o">::</span><span class="n">ABS</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Ideally, this should not require explanation. From here we transition to the
WRITE_RESP state, so when the I/O completes we end up here:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">client_write_resp</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ctx</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">context</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">client</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">result</span><span class="p">(</span><span class="n">cqe</span><span class="p">)</span><span class="o">?:</span><span class="w"> </span><span class="kt">size</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">r</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="p">[</span><span class="n">r</span><span class="p">..];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">submit_write</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">fd</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">state</span><span class="o">::</span><span class="n">WRITE_ERROR</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">disconnect</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">xbuf</span><span class="p">[..</span><span class="mi">0</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">client</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="o">::</span><span class="n">READ_PLAN</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">submit_read</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">plan_fd</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>First, we check if we need to repeat this process: if we have written less than
the size of the buffer, then we advance the slice by that much and submit
another write.</p>
<p>We can arrive at the next bit for two reasons: because &ldquo;client.buf&rdquo; includes a
fragment of a plan file which has been transmitted to the client, which we just
covered, or because it is the error message buffer prepared by &ldquo;disconnect_err&rdquo;,
which we discussed earlier. The dispatch function will bring us here for both
the normal and error states, and we distinguish between them with this second if
statement. If we&rsquo;re sending the plan file, we submit a read for the next
buffer-ful of plan. But, our error messages always fit into one buffer, so if we
ran out of buffer then we can just disconnect in the error case.</p>
<p>And that&rsquo;s it! That completes our state machine, and I&rsquo;m pretty sure we&rsquo;ve read
the entire program&rsquo;s source code by this point. Pretty neat, huh? io_uring is
quite interesting. I plan on using this as a little platform upon which I can
further test our io_uring implementation and develop a portable async I/O
abstraction.  We haven&rsquo;t implemented a DNS resolver for the stdlib yet, but I&rsquo;ll
also be writing a finger client (using synchronous I/O this time) once we do.</p>
<p>If you really wanted to max out the performance for a CLOUD SCALE WEB 8.0 XTREME
PERFORMANCE finger server, we could try a few additional improvements:</p>
<ul>
<li>Adding an internal queue for clients until we have room for their I/O in the SQ</li>
<li>Using a shared buffer pool with the kernel, with io_uring ops like READ_FIXED</li>
<li>Batching requests for the same plan file by only answering requests for it
every Nth millisecond (known to some as the &ldquo;data loader&rdquo; pattern)</li>
<li>More slow loris mitigations, such as limiting open connections per IP address</li>
</ul>
<p>It would also be cool to handle SIGHUP to reload our finger group membership
list without rebooting the daemon. I would say &ldquo;patches welcome&rdquo;, but I won&rsquo;t
share the git repo until the language is ready. And the code is GPL&rsquo;d, but not
AGPL&rsquo;d, so you aren&rsquo;t entitled to it if you finger me!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Right now the implementation drops all in-flight requests during shutdown. If we wanted to be even more graceful, it would be pretty easy to stop accepting new connections and do a soft shutdown while we finish servicing any active clients. net::reuseport would allow us to provide zero downtime during reboots with this approach, since another daemon could continue servicing users while this one is shutting down.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate></item><item><title>How to write release notes</title><link>https://drewdevault.com/2021/05/19/How-to-write-release-notes.html</link><description><![CDATA[<p>Release notes are a concept most of us are familiar with. When a new software
release is prepared, the release notes tell you what changed, so you understand
what you can expect and how to prepare for the update. They are also
occasionally used to facilitate conversations:</p>
<p><a href="https://xkcd.com/2010/"><img src="https://imgs.xkcd.com/comics/update_notes_2x.png" alt=""></a></p>
<p>Many of the people tasked with writing release notes have never found themselves
on that side of the screen before. If that describes you, I would like to offer
some advice on how to nail it. Note that this mostly applies to free and open
source software, which is the only kind of software which is valid.</p>
<p>So, it&rsquo;s release day, and you&rsquo;re excited about all of the cool new features
you&rsquo;ve added in this release. I know the feeling! Your first order of business,
however, is to direct that excitement into the blog or mailing list post
announcing the release, rather than into the release notes. When I read the
release notes, the first thing I need answered is: &ldquo;what do I need to do when I
upgrade?&rdquo; You should summarize the breaking changes upfront, and what steps the
user will need to take in order to address them. After this, you may follow up
with a <em>short</em> list of the flagship improvements which are included in this
release. Keep it short — remember that we&rsquo;re not advertising the release,
but facilitating the user&rsquo;s upgrade. This is a clerical document.</p>
<p>That said, you do have a good opportunity to add a <em>small</em> amount of faffery
after this. Some projects say &ldquo;$project version $X includes $Y changes from $Z
contributors&rdquo;. The detailed changelog should follow, including every change
which shipped in the release. This is what users are going to scan to see if
that one bug which has been bothering them was addressed in this version. If you
have <a href="https://drewdevault.com/2019/02/25/Using-git-with-discipline.html">good git discipline</a>, you can take advantage of <a href="https://git-scm.com/docs/git-shortlog">git shortlog</a> to
automatically generate a summary of the changes.</p>
<p>Once you&rsquo;ve prepared this document, where should you put it? In my opinion,
there&rsquo;s only one appropriate place for it: an annotated git tag. I don&rsquo;t like
&ldquo;CHANGELOG&rdquo; files and I definitely don&rsquo;t like GitHub releases. If you add &ldquo;-a&rdquo;
to your &ldquo;git tag&rdquo; command, git will fire up an editor and you can fill in your
changelog just like you write your git commit messages. This associates your
changelog with the git data it describes, and automatically distributes it to
all users of the git repository. Most web services which host git repositories
will display it on their UI as well. It&rsquo;s also written in plaintext, which
conveniently prevents you from being too extra with your release notes —
no images or videos or such.</p>
<p>I have written a small tool which will make all of this easier for you to do:
&ldquo;<a href="https://git.sr.ht/~sircmpwn/dotfiles/tree/master/bin/semver">semver</a>&rdquo;. This
automatically determines the next release number, optionally runs a custom
script to automate any release bookkeeping you need to do (e.g. updating the
version in your Makefile), then generates the git shortlog and plops you into an
editor to flesh out the release notes. I wrote more about this tool in <a href="https://drewdevault.com/2019/10/12/how-to-fuck-up-releases.html">How to
fuck up software releases</a>.</p>
<p>I hope this advice helps you improve your release notes! Happy shipping.</p>
<p>P.S. Here&rsquo;s an example of a changelog which follows this advice:</p>
<pre tabindex="0"><code>wlroots 0.12.0 includes the following breaking changes:

# New release key

The PGP key used to sign this release has changed to
34FF9526CFEF0E97A340E2E40FDE7BE0E88F5E48. A proof of legitimacy signed with the
previous key is available here:

https://github.com/swaywm/wlroots/issues/2462#issuecomment-723578521

# render/gles2: remove gles2_procs global (#2351)

The wlr_gles2_texture_from_* family of functions are no longer public API.

# output: fix blurred hw cursors with fractional scaling (#2107)

For backends: wlr_output_impl.set_cursor now takes a float &#34;scale&#34; instead of an
int32_t.

# Introduce wlr_output_event_commit (#2315)

The wlr_output.events.commit event now has a data argument of type
struct wlr_output_event_commit * instead of struct wlr_output *.


Antonin Décimo (3):
      Fix typos
      Fix incorrect format parameters
      xwayland: free server in error path

Isaac Freund (6):
      xdg-shell: split last-acked and current state
      layer-shell: add for_each_popup
      layer-shell: error on 0 dimension without anchors
      xdg_positioner: remove unused field
      wlr_drag: remove unused point_destroy field
      xwayland: remove unused listener

Roman Gilg (3):
      output-management-v1: add head identifying events
      output-management-v1: send head identifying information
      output-management-v1: send complete head state on enable change

Ryan Walklin (4):
      Implement logind session SetType method to change session type to wayland
      Also set XDG_SESSION_TYPE
      Don&#39;t set XDG_SESSION_TYPE unless logind SetType succeeds
      Quieten failure to set login session type

Scott Moreau (2):
      xwm: Set _NET_WM_STATE_FOCUSED property for the focused surface
      foreign toplevel: Fix whitespace error
</code></pre><p><em>Note: I borrowed the real wlroots 0.12.0 release notes and trimmed them down
for illustrative purposes. The actual release included a lot more changes and
does not actually follow all of my recommendations.</em></p>]]></description><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate></item><item><title>aerc, mbsync, and postfix for maximum comfy offline email</title><link>https://drewdevault.com/2021/05/17/aerc-with-mbsync-postfix.html</link><description><![CDATA[<p>I am the original author of the <a href="https://aerc-mail.org">aerc mail client</a>, though my official
relationship with it today is marginal at best. I think that, with hindsight,
I&rsquo;ve come to understand that the &ldquo;always online&rdquo; approach of aerc&rsquo;s IMAP
implementation is less than ideal. The next email client (which will exist at
some point!) will improve on this design, but, since it&rsquo;s still my favorite
email client despite these flaws, they will have to be worked around.</p>
<p>To this end, I have updated my personal aerc setup to take advantage of its
<a href="https://en.wikipedia.org/wiki/Maildir">Maildir</a> support instead of having it use IMAP directly, then delegate IMAP
to <a href="https://isync.sourceforge.io">mbsync</a>. This brings a much-needed level of robustness to the setup, as
my Maildirs are available offline or on a flaky connection, and postfix will
handle queueing and redelivery of outgoing emails in similar conditions.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
This allows me to read and reply to email entirely offline, and have things sync
up automatically when a connection becomes available.</p>
<p>The mbsync configuration format is kind of weird, but it is pretty flexible. My
config file ended up looking like this:</p>
<pre tabindex="0"><code>IMAPAccount migadu
Host imap.migadu.com
User sir@cmpwn.com
Pass [...]
SSLType IMAPS

MaildirStore local
Path ~/mail/
INBOX ~/mail/INBOX
SubFolders Verbatim

IMAPStore migadu
Account migadu

Channel primary
Far :migadu:
Near :local:
Patterns INBOX Archive Sent Junk
Expunge Both
</code></pre><p>The password can be configured to run an external command if you prefer to
integrate this with your keyring or password manager. I updated my aerc
<code>accounts.conf</code> as well, which was straightforward:</p>
<pre tabindex="0"><code>[Drew]
source = maildir://~/mail
outgoing = /usr/sbin/sendmail
from = Drew DeVault &lt;sir@cmpwn.com&gt;
copy-to = Sent
</code></pre><p>Running <code>mbsync primary</code> at this point is enough to fetch these mailboxes from
IMAP and populate the local Maildirs, which can then be read with aerc. I set up
a simple cronjob to run this every minute to keep it up to date:</p>
<pre tabindex="0"><code>* * * * * chronic mbsync primary
</code></pre><p>chronic is a small utility from <a href="https://joeyh.name/code/moreutils/">moreutils</a> which converts reasonably behaved
programs that return a nonzero exit status into the back-asswards behavior cron
expects, which is that printing text to stdout means an error occurred and any
status code, successful or not, is disregarded. You might want to tweak this
further, perhaps by just directing all output into /dev/null instead, if you
don&rsquo;t want failed syncs to fill up your Unix mail spool.</p>
<p>mbsync is bidirectional (it is recommended to leave <code>Expunge both</code> out of your
config until you&rsquo;ve tested the setup), so deleting or archiving emails in aerc
will mirror the changes in IMAP as well.</p>
<p>Postfix is a lot more annoying to configure. You should assume that what I did
here isn&rsquo;t going to work for you without additional changes and troubleshooting.
I started with an <code>/etc/postfix/sasl_passwd</code> file like this:</p>
<pre tabindex="0"><code>[smtp.migadu.com]:465   sir@cmpwn.com:password
</code></pre><p>The usual <code>postmap /etc/postfix/sasl_passwd</code> applies here to create or update
the database file. Then I moved on to <code>main.cf</code>:</p>
<pre tabindex="0"><code># Allows localhost to relay mail
mynetworks = 127.0.0.0/8

# SMTP server to relay mail through
relayhost = [smtp.migadu.com]:465

# Auth options for SMTP relay
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = lmdb:/etc/postfix/sasl_passwd

# ¯\_(ツ)_/¯
smtp_tls_security_level = encrypt
smtp_tls_wrappermode = yes
smtp_use_tls = yes
smtp_sasl_security_options = 
</code></pre><p>Good luck!</p>
<p><strong>Updated 2021-05-25</strong>: isync is not a fork of mbsync.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Postfix is probably overkill for this, but hey, it&rsquo;s what I know.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate></item><item><title>Status update, May 2021</title><link>https://drewdevault.com/2021/05/16/Status-update-May-2021.html</link><description><![CDATA[<p>Hello! This update is a bit late. I was travelling all day yesterday without
internet, so I could not prepare these. After my sister and I got vaccinated, I
took a trip to visit her at her home in beautiful Hawaii — it felt great
after a year of being trapped within these same four walls. I hope you get that
vaccine and things start to improve for you, too!</p>
<p>In SourceHut news, I&rsquo;ve completed and shipped the first version of the
builds.sr.ht GraphQL API. Another update, implementing the write functionality,
will be shipping shortly, once the code review is complete. The next one up for
a GraphQL API will probably be lists.sr.ht. After that it&rsquo;s just man.sr.ht,
paste.sr.ht, and dispatch.sr.ht — all three of which are pretty small.
Then we&rsquo;ll implement a few extra features like GraphQL-native webhooks and we&rsquo;ll
be done!</p>
<p>Adnan Maolood has also been hard at work improving
<a href="https://godocs.io">godocs.io</a>, including the now-available <a href="gemini://godocs.io">gemini
version</a>. I wrote a post just about godocs.io <a href="https://drewdevault.com/2021/05/07/godocs.io-six-months-later.html">earlier this
month</a>.</p>
<p>Here&rsquo;s some secret project code I&rsquo;ve been working on recently:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">errors</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">linux</span><span class="o">::</span><span class="n">io_uring</span><span class="o">::</span><span class="p">{</span><span class="n">setup_flags</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">linux</span><span class="o">::</span><span class="n">io_uring</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">use</span><span class="w"> </span><span class="n">strings</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">let</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">params</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">let</span><span class="w"> </span><span class="n">ring</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io_uring</span><span class="o">::</span><span class="n">setup</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">params</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="n">io_uring</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">ring</span><span class="o">:</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">io_uring</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ring</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">defer</span><span class="w"> </span><span class="n">io_uring</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ring</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">let</span><span class="w"> </span><span class="n">sqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io_uring</span><span class="o">::</span><span class="n">get_sqe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ring</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kt">null</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">abort</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">sqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">sqe</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">sqe</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strings</span><span class="o">::</span><span class="n">toutf8</span><span class="p">(</span><span class="s">&#34;Hello world!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">io_uring</span><span class="o">::</span><span class="n">write</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">io_uring</span><span class="o">::</span><span class="n">submit_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ring</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">let</span><span class="w"> </span><span class="n">cqe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">io_uring</span><span class="o">::</span><span class="n">get_cqe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ring</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="kt">opaque</span><span class="w"> </span><span class="o">=&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">errors</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="k">assert</span><span class="p">(</span><span class="n">cqe</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kt">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="n">cqe</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io_uring</span><span class="o">::</span><span class="n">cqe</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">fmt</span><span class="o">::</span><span class="n">errorfln</span><span class="p">(</span><span class="s">&#34;result: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">cqe</span><span class="p">.</span><span class="n">res</span><span class="p">)</span><span class="o">!</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The API here is a bit of a WIP, and it won&rsquo;t be available to users, anyway
— the low-level io_uring API will be wrapped by a portable event loop
interface (tentatively named &ldquo;iobus&rdquo;) in the standard library. I&rsquo;m planning on
using this to write a <a href="https://datatracker.ietf.org/doc/html/rfc1288">finger</a>
server.</p>]]></description><pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate></item><item><title>Pinebook Pro review</title><link>https://drewdevault.com/2021/05/14/Pinebook-Pro-review.html</link><description><![CDATA[<p>I received the original Pinebook for free from the good folks at Pine64 a few
years ago, when I visited Berlin to work with the KDE developers. Honestly, I
was underwhelmed. The performance was abysmal and ARM is a nightmare to work
with. For these reasons, I was skeptical when I bought the Pinebook Pro. I have
also <a href="https://drewdevault.com/2020/02/18/Fucking-laptops.html">spoken of my disdain for modern laptops in general before</a>: the state
of laptops in $CURRENTYEAR is abysmal. As such, I have been using a ThinkPad
X200, an 11 year old laptop, as my sole laptop for several years now.</p>
<p>I am pleased to share that the Pinebook Pro is a pleasure to use, and is likely
to finally replace the old ThinkPad for most of my needs.</p>
<p>Let me get the bad parts out of the way upfront: ARM is still a nightmare to
work with. I really hate this architecture. Alpine Linux&rsquo;s upstream aarch64
doesn&rsquo;t work with this laptop, so I have to use <a href="http://postmarketos.org">postmarketOS</a>, an Alpine
derivative, instead. I do <em>like</em> pmOS — on phones — but I would
definitely prefer to use Alpine upstream for a laptop use-case.  That being
said, the Pine community has been doing a very good job of working on getting
support for their devices upstream, and the situation has been steadily
improving. I expect that one of the next batches of PBPs will include an updated
u-Boot payload which will make UEFI booting possible, and Linux distros with the
necessary kernel patches upstreamed will be shipping in the foreseeable future.
This will alleviate most
of my ARM-based grievances.</p>
<p>The built-in speakers are also pretty tinny and weak. It has a headphone port
which works fine, though. Configuring ALSA is a chore; these SoCs tend to have
rather complicated audio setups. I have not been able to get the webcam working
(some kernel option is missing, my contact at pmOS is working on it), but I
understand that the quality is pretty poor. It can supposedly be configured to
work with a USB-C dock for an external display, but I have never got it working
and I understand that there are some kernel bits missing for this as well. The
touchpad is also pretty bad, but thankfully I use mainly keyboard-driven
software. The built-in eMMC storage is pretty small, though it can be upgraded
and I understand that there is an option to install an NVMe — at the
expense of your battery life.</p>
<p>Cons aside, what do I like about it? Well, many things. It&rsquo;s lightweight and
thin (1.3kg), but has a nice 14&quot; screen that feels like the right size for me.
The screen looks really nice, too. The colors look good, it works well at any
brightness level, and in most lighting situations. It&rsquo;s definitely better than
the old X200 display. The keyboard is not as nice as the ThinkPad (a high bar to
meet), but it&rsquo;s pretty comfortable for extended use. The two USB-3 ports and the
sole USB-C port are also nice to have. It can charge via USB-C, or via an
included DC wall wart and barrel plug. The battery lasts for 6-8 hours: way
better than my old ThinkPad.</p>
<p>It is an ARM machine, so the performance is not competitive with modern x86_64
platforms. It is somewhat faster than my 11-year-old previous machine, though.
It has six cores and any parallelizable job (like building code) works
acceptably fast, at least for the languages I primarily use (i.e. not Rust or
C++). It can also play back 1080p video with a <em>little bit</em> of stuttering, and
720p video flawlessly. Browsing the web is a bit of a chore, but it always was.
<a href="https://sourcehut.org/blog/2021-05-08-sourcehut-is-the-fastest-who-cares">Sourcehut works fine</a>.</p>
<p>The device is user-servicable, which I appreciate very much. It&rsquo;s very easy to
take apart (a small Phillips head screwdriver is sufficient) and you can buy
individual parts from the Pine64 store to do replacements yourself.</p>
<p>In short, it checks most of my boxes, which is something no other laptop has
even come remotely close to in the past <strong>ten years</strong>. It is the only laptop I
have ever used which makes a substantial improvement on the circa-2010 state of
the art. Because ARM is a nightmare, I&rsquo;m still likely to use the old ThinkPads
for some use-cases, namely for hobby OS development and running niche operating
systems. But my Pinebook Pro is here to stay.</p>]]></description><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate></item><item><title>I try not to make unlikable software (and features)</title><link>https://drewdevault.com/2021/05/08/Try-not-to-make-unlikable-software.html</link><description><![CDATA[<p>I am writing to you from The Sky. On my flight today, I noticed an example of
&ldquo;unlikable&rdquo; software — something I&rsquo;ve been increasingly aware of recently
— inspiring me to pull out my laptop and write. On this plane, there are
displays in the back of each seat which provides entertainment for the person
seated one row back. Newer planes no longer include these, given that in
$CURRENTYEAR everyone would just prefer some power for their phone or laptop.
Nevertheless, you can still end up a plane with this design. You can shut the
thing off by repeatedly pressing the &ldquo;☀️ -&rdquo; button, though that button is rated
for half the cycles it will have already received by the time you press it.</p>
<p>When the flight safety video is playing, or an announcement is being made,
however, the system will override your brightness preference. This is a fairly
reasonable design choice, added in the name of passenger safety. What&rsquo;s less
reasonable is that the same feature is re-purposed for shoving advertising into your
face a few minutes later. In fact, it spends more time on ads than on safety. A
software engineer sat down and deliberately wrote a &ldquo;feature&rdquo; (or anti-feature?)
which they had to have known that the user would not have wanted. The airplane
manufacturer demanded it at the <em>expense</em> of the user.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>I have had many opportunities throughout my career to make similar
anti-features, and I have encountered many other examples of this behavior in
the wild. Many programmers have implemented something which measurably <em>worsens</em>
the experience for the user in order to obtain some perceived benefit for the
company they work for. <a href="https://www.darkpatterns.org">Dark patterns</a> provides many additional examples, but
this kind of thing is <em>everywhere</em>.</p>
<p>I find this behavior to be incredibly disrespectful to the user. When I am that
user who is being disrespected, I will generally stop using that software, and
stop supporting any businesses who chose to be disrespectful.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> For my part as
a programmer, I <em>do</em> respect the user, I find satisfaction in making software
which makes their lives better, and I always have and always will push back
against anyone who demands that I subvert that ethos for their wallet&rsquo;s sake.
You should always aim to make the user&rsquo;s experience more pleasant, not more
unpleasant. We should just be nice to people. That&rsquo;s it: please be nice to
people. Thank you for coming to my Ted talk.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>A savvy reader could (correctly) extrapolate this to infer my position on advertising in general.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>They also got on the PA later on to try and convince passengers to sign up for their airline-themed credit card. This isn&rsquo;t even a budget airline.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Though, to be entirely fair, it is somewhat difficult to &ldquo;stop using&rdquo; the mandatory ad viewing session I am being subjected to on this airplane. I could put in earplugs and gouge out my eyes, perhaps. Yes, that seems like a proportionate response.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 8 May 2021 00:00:00 +0000</pubDate></item><item><title>godocs.io six months later</title><link>https://drewdevault.com/2021/05/07/godocs.io-six-months-later.html</link><description><![CDATA[<p>We&rsquo;re six months on from <a href="https://drewdevault.com/2020/12/18/godocs.io.html">forking godoc.org</a> following its upstream
deprecation, and we&rsquo;ve made a lot of great improvements since. For those
unaware, the original godoc.org was replaced with pkg.go.dev, and a redirect was
set up. The new website isn&rsquo;t right for many projects — one of the most
glaring issues is the narrow list of software licenses pkg.go.dev will display
documentation for. To continue serving the needs of projects which preferred the
old website, we forked the project and set up <a href="https://godocs.io">godocs.io</a>.</p>
<p>Since then, we&rsquo;ve made a lot of improvements, both for the hosted version and
for the <a href="https://sr.ht/~sircmpwn/godocs.io/">open source project</a>. Special thanks is due to Adnan Maolood, who
has taken charge of a lot of these improvements, and also to a few other
contributors who have helped in their own small ways. Since forking, we&rsquo;ve:</p>
<ul>
<li>Added Go modules support</li>
<li>Implemented <a href="gemini://godocs.io">Gemini access</a></li>
<li>Made most of the frontend JavaScript optional and simpler</li>
<li>Rewritten the search backend to use PostgreSQL</li>
</ul>
<p>We also substantially cleaned up the codebase, removing over 37,000 lines of
code — 64% of the lines from the original code base. The third-party
dependencies to Google infrastructure have been removed and it&rsquo;s much easier to
run the software locally or on your intranet, too.</p>
<p>What we have now is still the same GoDoc: the experience is very similar to the
original godocs.org. However, we have substantially improved it: streamlining
the codebase, making the UI more accessible, and adding a few important
features; thanks to the efforts of just a small number of volunteers. We&rsquo;re
happy to be supporting the Go community with this tool, and looking forward to
making more (conservative!) improvements in the future. Enjoy!</p>]]></description><pubDate>Fri, 7 May 2021 00:00:00 +0000</pubDate></item><item><title>In praise of Alpine Linux</title><link>https://drewdevault.com/2021/05/06/Praise-for-Alpine-Linux.html</link><description><![CDATA[<p><em>Note: this blog post was originally only available via Gemini, but has been
re-formatted for the web.</em></p>
<p>The traits I prize most in an operating system are the following:</p>
<ul>
<li>Simplicity</li>
<li>Stability</li>
<li>Reliability</li>
<li>Robustness</li>
</ul>
<p>As a bonus, I&rsquo;d also like to have:</p>
<ul>
<li>Documentation</li>
<li>Professionalism</li>
<li>Performance</li>
<li>Access to up-to-date software</li>
</ul>
<p>Alpine meets all of the essential criteria and most of the optional criteria
(documentation is the weakest link), and far better than any other Linux
distribution.</p>
<p>In terms of simplicity, Alpine Linux is unpeered. Alpine is the only Linux
distribution that fits in my head. The pieces from which it is built from are
simple, easily understood, and few in number, and I can usually predict how it
will behave in production. The software choices, such as musl libc, are highly
appreciated in this respect as well, lending a greater degree of simplicity to
the system as a whole.</p>
<p>Alpine also meets expectations in terms of stability, though it is not alone in
this respect. Active development is done in an &ldquo;edge&rdquo; branch, which is what I
run on my main workstation and laptops. Every six months, a stable release is
cut from this branch and supported for two years, so four releases are supported
at any given moment. This strikes an excellent balance: two years is long enough
that the system is stable and predictable for a long time, but short enough to
discourage you from letting the system atrophy. An outdated system is not a
robust system.</p>
<p>In terms of reliability, I can be confident that an Alpine system will work
properly for an extended period of time, without frequent hands-on maintenance
or problem solving. Upgrading between releases almost always goes off without a
hitch (and usually the hitch was documented in the release notes, if you cared
to read them), and I&rsquo;ve never had an issue with patch releases. Edge is less
reliable, but only marginally: it&rsquo;s much more stable than, say, Arch Linux.</p>
<p>The last of my prized traits is robustness, and Alpine meets this as well. The
package manager, apk, is seriously robust. It expresses your constraints, and
the constraints of your desired software, and solves for a system state which is
always correct and consistent. Alpine&rsquo;s behavior under pathological conditions
is generally predictable and easily understood. OpenRC is not as good, but
thankfully it&rsquo;s slated to be replaced in the foreseeable future.</p>
<p>In these respects, Alpine is unmatched, and I would never dream of using any
other Linux distribution in production.</p>
<p>Documentation is one of Alpine&rsquo;s weak points. This is generally offset by
Alpine&rsquo;s simplicity — it can usually be understood reasonably quickly and easily
even in the absence of documentation — but it remains an issue. That being said,
Alpine has shown consistent progress in this respect in the past few releases,
shipping more manual pages, improving the wiki, and standardizing processes for
matters like release notes.</p>
<p>I also mostly appreciate Alpine&rsquo;s professionalism. It is a serious project and
almost everyone works with the level of professionalism I would expect from a
production operating system. However, Alpine lacks strong leadership, some
trolling and uncooperative participants go unchecked, and political infighting
has occurred on a few occasions. This is usually not an impedance to getting
work done, but it is frustrating nevertheless. I always aim to work closely with
upstream on any of the projects that I use, and a professional upstream team is
a luxury that I very much appreciate when I can find it.</p>
<p>Alpine excels in my last two criteria: performance and access to up-to-date
software. apk is simply the fastest package manager available. It leaves apt and
dnf in the dust, and is significantly faster than pacman. Edge updates pretty
fast, and as a package maintainer it&rsquo;s usually quite easy to get new versions of
upstream software in place quickly even for someone else&rsquo;s package. I can expect
upstream releases to be available on edge within a few days, if not a few hours.
Access to new software in stable releases is reasonably fast, too, with less
than a six month wait for systems which are tracking the latest stable Alpine
release.</p>
<p>In summary, I use Alpine Linux for all of my use-cases: dedicated servers and
virtual machines in production, on my desktop workstation, on all of my laptops,
and on my PinePhone (via postmarketOS). It is the best Linux distribution I have
used to date. I maintain just under a hundred Alpine packages upstream, three
third-party package repositories, and several dozens of Alpine systems in
production. I highly recommend it.</p>]]></description><pubDate>Thu, 6 May 2021 00:00:00 +0000</pubDate></item><item><title>Cryptocurrency is an abject disaster</title><link>https://drewdevault.com/2021/04/26/Cryptocurrency-is-a-disaster.html</link><description><![CDATA[<p>This post is long overdue. Let&rsquo;s get it over with.</p>
<div class="alert alert-danger">
  🛑 <strong>Hey!</strong> If you write a comment about this article online,
  disclose your stake in cryptocurrency. I will explain why later in this post.
  For my part, I held &lt;$10,000 USD worth of Bitcoin prior to 2016, plus small
  amounts of altcoins. I made a modest profit on my holdings. Today my stake in
  all cryptocurrency is $0.
</div>
<p>Starting on May 1st, users of sourcehut&rsquo;s CI service will be required to be on a
paid account, a change which will affect about half of all builds.sr.ht
users.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Over the past several months, everyone in the industry who provides
any kind of free CPU resources has been dealing with a massive outbreak of abuse
for cryptocurrency mining. The industry has been setting up informal working
groups to pool knowledge of mitigations, communicate when our platforms are
being leveraged against one another, and cumulatively wasting thousands of hours
of engineering time implementing measures to deal with this abuse, and
responding as attackers find new ways to circumvent them.</p>
<p>Cryptocurrency has invented an entirely new category of internet abuse. CI
services like mine are not alone in this struggle: JavaScript miners, botnets,
and all kinds of other illicit cycles are being spent solving pointless math
problems to make money for bad actors. Some might argue that abuse is inevitable
for anyone who provides a public service — but prior to cryptocurrency,
what kind of abuse would a CI platform endure? Email spam? Block port 25.
Someone might try to host their website on ephemeral VMs with dynamic DNS or
something, I dunno. Someone found a way of monetizing stolen CPU cycles
directly, so everyone who offered free CPU cycles for legitimate use-cases is
now unable to provide those services. If not for cryptocurrency, these services
would still be available.</p>
<p>Don&rsquo;t make the mistake of thinking that these are a bunch of script kiddies.
There are large, talented teams of engineers across several organizations
working together to combat this abuse, and they&rsquo;re losing. A small sample of
tactics I&rsquo;ve seen or heard of include:</p>
<ul>
<li>Using CPU limiters to manipulate monitoring tools.</li>
<li>Installing crypto miners into the build systems for free software projects so
that the builds appear legitimate.</li>
<li>Using password dumps to steal login credentials for legitimate users and then
leveraging their accounts for mining.</li>
</ul>
<p>I would give more examples, but secrecy is a necessary part of defending against
this — which really sucks for an organization that otherwise strives to be
as open and transparent as sourcehut does.</p>
<p>Cryptocurrency problems are more subtle than outright abuse, too. The integrity
and trust of the entire software industry has sharply declined due to
cryptocurrency. It sets up perverse incentives for new projects, where
developers are no longer trying to convince you to use their software because
it&rsquo;s good, but because they think that if they can convince you it will make
them rich. I&rsquo;ve had to develop a special radar for reading product pages now: a
mounting feeling of dread as a promising technology is introduced while I
inevitably arrive at the buried lede: it&rsquo;s more crypto bullshit. Cryptocurrency
is the multi-level marketing of the tech world. &ldquo;Hi! How&rsquo;ve you been? Long time
no see! Oh, I&rsquo;ve been working on this cool distributed database file store
archive thing. We&rsquo;re doing an ICO next week.&rdquo; Then I leave. Any technology which
is not an (alleged) currency and which incorporates blockchain anyway would
always work better without it.</p>
<p>There are hundreds, perhaps thousands, of cryptocurrency scams and ponzi schemes
trussed up to look like some kind of legitimate offering. Even if the project
<em>you&rsquo;re</em> working on is totally cool and solves all of these problems, there
are 100 other projects pretending to be like yours which are ultimately
concerned with transferring money from their users to their founders. Which
one are investors more likely to invest in? Hint: it&rsquo;s the one that&rsquo;s more
profitable. Those promises of &ldquo;we&rsquo;re different!&rdquo; are always hollow anyway.
Remember the <a href="https://en.wikipedia.org/wiki/The_DAO_(organization)">DAO</a>? They wanted to avoid social arbitration entirely for
financial contracts, but when the chips are down and their money was walking out
the door, they forked the blockchain.</p>
<p>That&rsquo;s what cryptocurrency is all about: not novel technology, not empowerment,
but making money. It has failed as an actual <em>currency</em> outside of some
isolated examples of failed national economies. No, cryptocurrency is not a
currency at all: it&rsquo;s an investment vehicle. A tool for making the rich richer.
And that&rsquo;s putting it nicely; in reality it has a lot more in common with a
Ponzi scheme than a genuine investment. What &ldquo;value&rdquo; does solving fake math
problems actually provide to anyone? It&rsquo;s all bullshit.</p>
<p>And those few failed economies whose people are desperately using cryptocurrency
to keep the wheel of their fates spinning? Those make for a good headline, but
how about the rural communities whose tax dollars subsidized the power plants
which the miners have flocked to? People who are <a href="https://www.rferl.org/a/bitcoin-blackouts-russian-cryptocurrency-miners-minting-millions-sucking-abkhazia-electricity-grid-dry/30968307.html">suffering blackouts</a>
as their power is siphoned into computing SHA-256 as fast as possible while
dumping an entire country worth of CO₂ into the atmosphere?<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> No,
cryptocurrency does not help failed states. It exploits them.</p>
<p>Even those in the (allegedly) working economies of the first world have been
impacted by cryptocurrency. The price of consumer GPUs have gone sharply up in
the past few months. And, again, what are these GPUs being used for? Running
SHA-256 in a loop, as fast as possible. Rumor has it that hard drives are up
next.</p>
<p>Maybe your cryptocurrency is different. But look: you&rsquo;re in really poor company.
When you&rsquo;re the only honest person in the room, maybe you should be in a
different room. It is impossible to trust you. Every comment online about
cryptocurrency is tainted by the fact that the commenter has probably invested
thousands of dollars into a Ponzi scheme and is depending on your agreement to
make their money back.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> Not to mention that any attempts at reform, like
proof-of-stake, are viciously blocked by those in power (i.e. those with the
money) because of any risk it poses to reduce their bottom line. No, your
blockchain is not different.</p>
<p>Cryptocurrency is one of the worst inventions of the 21st century. I am ashamed
to share an industry with this exploitative grift. It has failed to be a useful
currency, invented a new class of internet abuse, further enriched the rich,
wasted staggering amounts of electricity, hastened climate change, ruined
hundreds of otherwise promising projects, provided a climate for hundreds of
scams to flourish, created shortages and price hikes for consumer hardware, and
injected perverse incentives into technology everywhere. Fuck cryptocurrency.</p>
<details>
  <summary>A personal note</summary>
  <p>
  This rant has been a long time coming and is probably one of the most
  justified expressions of anger I've written for this blog yet. However, it
  will probably be the last one.
  <p>
  I realize that my blog has been a source of a lot of negativity in the past,
  and I regret how harsh I've been with some of the projects I've criticised. I
  will make my arguments by example going forward: if I think we can do better,
  I'll do it better, instead of criticising those who are just earnestly trying
  their best.
  <p>
  Thanks for reading 🙂 Let's keep making the software world a better place.
</details>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If this is the first you&rsquo;re hearing of this, a graceful migration is planned: <a href="https://man.sr.ht/ops/builds.sr.ht-migration.md">details here</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>&ldquo;But crypto is far from the worst contributor to climate change!&rdquo; Yeah, but at least the worst offenders provide value to society. See also <a href="https://en.wikipedia.org/wiki/Whataboutism">Whataboutism</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>This is why I asked you to disclose your stake in your comment upfront.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate></item><item><title>Recommended read: Why Lichess will always be free</title><link>https://drewdevault.com/2021/04/23/Lichess.html</link><description><![CDATA[<p>Signal-boosting this excellent article from Lichess: <a href="https://lichess.org/blog/YF-ZORQAACAA89PI/why-lichess-will-always-be-free.">Why Lichess will always be free.</a></p>]]></description><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate></item><item><title>Parsers all the way down: writing a self-hosting parser</title><link>https://drewdevault.com/2021/04/22/Our-self-hosted-parser-design.html</link><description><![CDATA[<p>One of the things we&rsquo;re working on in <a href="https://drewdevault.com/2021/03/19/A-new-systems-language.html">my new programming language</a> is a
self-hosting compiler. Having a self-hosted compiler is a critical step in the
development of (some) programming languages: it signals that the language is
mature enough to be comfortably used to implement itself. While this isn&rsquo;t right
for some languages (e.g. shell scripts), for a systems programming language like
ours, this is a crucial step in our bootstrapping plan. Our self-hosted parser
design was completed this week, and today I&rsquo;ll share some details about how it
works and how it came to be.</p>
<p>This is the third parser which has been implemented for this language. We wrote
a sacrificial compiler prototype upfront to help inform the language design, and
that first compiler used <a href="https://en.wikipedia.org/wiki/Yacc">yacc</a> for its parser. Using yacc was helpful at
first because it makes it reasonably simple to iterate on the parser when the
language is still undergoing frequent and far-reaching design changes. Another
nice side-effect starting with a yacc parser is that it makes it quite easy to
produce a formal grammar when you settle on the design. Here&rsquo;s a peek at some of
our original parser code:</p>
<pre tabindex="0"><code>struct_type
	: T_STRUCT &#39;{&#39; struct_fields &#39;}&#39; {
		$$.flags = 0;
		$$.storage = TYPE_STRUCT;
		allocfrom((void **)&amp;$$.fields, &amp;$3, sizeof($3));
	}
	| T_UNION &#39;{&#39; struct_fields &#39;}&#39; {
		$$.flags = 0;
		$$.storage = TYPE_UNION;
		allocfrom((void **)&amp;$$.fields, &amp;$3, sizeof($3));
	}
	;

struct_fields
	: struct_field
	| struct_field &#39;,&#39; { $$ = $1; }
	| struct_field &#39;,&#39; struct_fields {
		$$ = $1;
		allocfrom((void **)&amp;$$.next, &amp;$3, sizeof($3));
	}
	;

struct_field
	: T_IDENT &#39;:&#39; type {
		$$.name = $1;
		allocfrom((void**)&amp;$$.type, &amp;$3, sizeof($3));
		$$.next = NULL;
	}
	;
</code></pre><p>This approach has you writing code which is already almost a formal grammar in
its own right. If we strip out the C code, we get the following:</p>
<pre tabindex="0"><code>struct_type
	: T_STRUCT &#39;{&#39; struct_fields &#39;}&#39;
	| T_UNION &#39;{&#39; struct_fields &#39;}&#39;
	;

struct_fields
	: struct_field
	| struct_field &#39;,&#39;
	| struct_field &#39;,&#39; struct_fields
	;

struct_field
	: T_IDENT &#39;:&#39; type
	;
</code></pre><p>This gives us a reasonably clean path to writing a formal grammar (and
specification) for the language, which is what we did next.</p>
<p><img src="https://redacted.moe/f/00bba3bd.png" alt="A screenshot of a PDF file which shows a formal grammar similar to the sample
given above."></p>
<p>All of these samples describe a struct type. The following example shows what
this grammar looks like in real code — starting from the word &ldquo;struct&rdquo; and
including up to the &ldquo;}&rdquo; at the end.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">type</span><span class="w"> </span><span class="n">coordinates</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">y</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">z</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>In order to feed our parser tokens to work with, we also need a lexer, or a
<em>lexical analyzer</em>. This turns a series of characters like &ldquo;struct&rdquo; into a
single token, like the T_STRUCT we used in the yacc code. Like the original
compiler used yacc as a parser generator, we also used <a href="https://en.wikipedia.org/wiki/Lex_(software)">lex</a> as a lexer
generator. It&rsquo;s simply a list of regexes and the names of the tokens that match
those regexes, plus a little bit of extra code to do things like turning &ldquo;1234&rdquo;
into an int with a value of 1234. Our lexer also kept track of line and column
numbers as it consumed characters from input files.</p>
<pre tabindex="0"><code>&#34;struct&#34;	{ _lineno(); return T_STRUCT; }
&#34;union&#34;		{ _lineno(); return T_UNION; }
&#34;{&#34;		{ _lineno(); return &#39;{&#39;; }
&#34;}&#34;		{ _lineno(); return &#39;}&#39;; }

[a-zA-Z][a-zA-Z0-9_]* {
	_lineno();
	yylval.sval = strdup(yytext);
	return T_IDENTIFIER;
}
</code></pre><p>After we settled on the design with our prototype compiler, which was able to
compile some simple test programs to give us a feel for our language design, we
set it aside and wrote the specification, and, alongside it, a second compiler.
This new compiler was written in C — the language was not ready to
self-host yet — and uses a hand-written <a href="https://en.wikipedia.org/wiki/Recursive_descent_parser">recursive descent</a> parser.</p>
<p>To simplify the parser, we deliberately designed a context-free LL(1) grammar,
which means it (a) can parse an input unambiguously without needing additional
context, and (b) only requires one token of look-ahead. This makes our parser
design a lot simpler, which was a deliberate goal of the language design. Our
hand-rolled lexer is <em>slightly</em> more complicated: it requires two characters of
lookahead to distinguish between the &ldquo;.&rdquo;, &ldquo;..&rdquo;, and &ldquo;&hellip;&rdquo; tokens.</p>
<p>I&rsquo;ll skip going in depth on the design of the second parser, because the hosted
parser is more interesting, and a pretty similar design anyway. Let&rsquo;s start by
taking a look at our hosted lexer. Our lexer is initialized with an input source
(e.g. a file) from which it can read a stream of characters. Then, each time we
need a token, we&rsquo;ll ask it to read the next one out. It will read as many
characters as it needs to unambiguously identify the next token, then hand it up
to the caller.</p>
<p>Our specification provides some information to guide the lexer design:</p>
<blockquote>
<p>A token is the smallest unit of meaning in the <span style="background:
black">****</span> grammar. The lexical analysis phase processes a UTF-8
source file to produce a stream of tokens by matching the terminals with the
input text.</p>
<p>Tokens may be separated by <em>white-space</em> characters, which are defined as the
Unicode code-points <code>U+0009</code> (horizontal tabulation), <code>U+000A</code> (line feed), and
<code>U+0020</code> (space). Any number of whitespace characters may be inserted between
tokens, either to disambiguate from subsequent tokens, or for aesthetic
purposes. This whitespace is discarded during the lexical analysis phase.</p>
<p><em>Within a single token, white-space is meaningful. For example, the
string-literal token is defined by two quotation marks <strong>&quot;</strong> enclosing any
number of literal characters. The enclosed characters are considered part of
the string-literal token and any whitespace therein is not discarded.</em></p>
<p>The lexical analysis process consumes Unicode characters from the source file
input until it is exhausted, performing the following steps in order: it shall
consume and discard white-space characters until a non-white-space character
is found, then consume the longest sequence of characters which could
constitute a token, and emit it to the token stream.</p></blockquote>
<p>There are a few different kinds of tokens our lexer is going to need to handle:
operators, like &ldquo;+&rdquo; and &ldquo;-&rdquo;; keywords, like &ldquo;struct&rdquo; and &ldquo;return&rdquo;; user-defined
identifiers, like variable names; and constants, like string and numeric
literals.</p>
<p>In short, given the following source code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">add2</span><span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>We need to return the following sequence of tokens:</p>
<pre tabindex="0"><code>fn      (keyword)
add2    (identifier)
(       (operator)
x
:
int
,
y
int
)
int
=
x
+
y
;
</code></pre><p>This way, our parser doesn&rsquo;t have to deal with whitespace, or distinguishing
&ldquo;int&rdquo; (keyword) from &ldquo;integer&rdquo; (identifier), or handling invalid tokens like
&ldquo;$&rdquo;. To actually implement this behavior, we&rsquo;ll start with an initialization
function which populates a state structure.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Initializes a new lexer for the given input stream. The path is borrowed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">init</span><span class="p">(</span><span class="n">in</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io</span><span class="o">::</span><span class="n">stream</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">flags</span><span class="o">:</span><span class="w"> </span><span class="n">flags</span><span class="o">...</span><span class="p">)</span><span class="w"> </span><span class="n">lexer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">lexer</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">in</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">in</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">loc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">un</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">rb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="kt">void</span><span class="o">...</span><span class="p">],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">lexer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">in</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io</span><span class="o">::</span><span class="n">stream</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">path</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">loc</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="kt">uint</span><span class="p">,</span><span class="w"> </span><span class="kt">uint</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">rb</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">2</span><span class="p">](</span><span class="kt">rune</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">void</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>This state structure holds, respectively:</p>
<ul>
<li>The input I/O stream</li>
<li>The path to the current input file</li>
<li>The current (line, column) number</li>
<li>A buffer of un-read characters from the input, for lookahead</li>
</ul>
<p>The main entry point for doing the actual lexing will look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Returns the next token from the lexer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">lex</span><span class="p">(</span><span class="n">lex</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">lexer</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">token</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// A single lexical token, the value it represents, and its location in a file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">token</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">ltok</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">location</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// A token value, used for tokens such as &#39;1337&#39; (an integer).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">str</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">rune</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">i64</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">u64</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">f64</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">void</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// A location in a source file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">location</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">path</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">line</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">col</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// A lexical token class.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">ltok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="w"> </span><span class="kt">uint</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">UNDERSCORE</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ABORT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ALLOC</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">APPEND</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">AS</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// ... continued ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">EOF</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The idea is that when the caller needs another token, they will call <code>lex</code>, and
receive either a token or an error. The purpose of our lex function is to read
out the next character and decide what kind of tokens it might be the start of,
and dispatch to more specific lexing functions to handle each case.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">lex</span><span class="p">(</span><span class="n">lex</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">lexer</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">token</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">loc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">location</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">...</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">rn</span><span class="o">:</span><span class="w"> </span><span class="kt">rune</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">nextw</span><span class="p">(</span><span class="n">lex</span><span class="p">)</span><span class="o">?</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">_</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">ltok</span><span class="o">::</span><span class="n">EOF</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w"> </span><span class="n">mkloc</span><span class="p">(</span><span class="n">lex</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">rl</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="kt">rune</span><span class="p">,</span><span class="w"> </span><span class="n">location</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">loc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rl</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">rl</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">is_name</span><span class="p">(</span><span class="n">rn</span><span class="p">,</span><span class="w"> </span><span class="nb">false</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">unget</span><span class="p">(</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">rn</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">lex_name</span><span class="p">(</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="p">,</span><span class="w"> </span><span class="nb">true</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ascii</span><span class="o">::</span><span class="n">isdigit</span><span class="p">(</span><span class="n">rn</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">unget</span><span class="p">(</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">rn</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">lex_literal</span><span class="p">(</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="o">:</span><span class="w"> </span><span class="n">ltok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">rn</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="o">*</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">syntaxerr</span><span class="p">(</span><span class="n">loc</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;invalid character&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;&#34;&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;\&#39;&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">unget</span><span class="p">(</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">rn</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">lex_rn_str</span><span class="p">(</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;.&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;&gt;&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">lex3</span><span class="p">(</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="p">,</span><span class="w"> </span><span class="n">rn</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;^&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;*&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;%&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;/&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;+&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;-&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;:&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;!&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;&amp;&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;|&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;=&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">lex2</span><span class="p">(</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="p">,</span><span class="w"> </span><span class="n">rn</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;~&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">BNOT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;,&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">COMMA</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;{&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">LBRACE</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;[&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">LBRACKET</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;(&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">LPAREN</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;}&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">RBRACE</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;]&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">RBRACKET</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;)&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">RPAREN</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;;&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">SEMICOLON</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="sc">&#39;?&#39;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">QUESTION</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">tok</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Aside from the EOF case, and simple single-character operators like &ldquo;;&rdquo;, both of
which this function handles itself, its role is to dispatch work to various
sub-lexers.</p>
<details>
	<summary>Expand me to read the helper functions</summary>
<pre>
fn nextw(lex: *lexer) ((rune, location) | io::EOF | io::error) = {
	for (true) {
		let loc = mkloc(lex);
		match (next(lex)) {
			e: (io::error | io::EOF) => return e,
			r: rune => if (!ascii::isspace(r)) {
				return (r, loc);
			} else {
				free(lex.comment);
				lex.comment = "";
			},
		};
	};
	abort();
};
</pre>
<pre>
fn unget(lex: *lexer, r: (rune | io::EOF)) void = {
	if (!(lex.rb[0] is void)) {
		assert(lex.rb[1] is void, "ungot too many runes");
		lex.rb[1] = lex.rb[0];
	};
	lex.rb[0] = r;
};
</pre>
<pre>
fn is_name(r: rune, num: bool) bool =
	ascii::isalpha(r) || r == '_' || r == '@' || (num && ascii::isdigit(r));
</pre>
</details>
<p>The sub-lexers handle more specific cases. The lex_name function handles things
which look like identifiers, including keywords; the lex_literal function
handles things which look like literals (e.g. &ldquo;1234&rdquo;); lex_rn_str handles rune
and string literals (e.g. &ldquo;hello world&rdquo; and &lsquo;\n&rsquo;); and lex2 and lex3
respectively handle two- and three-character operators like &ldquo;&amp;&amp;&rdquo; and &ldquo;&gt;&gt;=&rdquo;.</p>
<p>lex_name is the most complicated of these. Because the only thing which
distinguishes a keyword from an identifier is that the former matches a specific
list of strings, we start by reading a &ldquo;name&rdquo; into a buffer, then binary
searching against a list of known keywords to see if it matches something there.
To facilitate this, &ldquo;bmap&rdquo; is a pre-sorted array of keyword names.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">const</span><span class="w"> </span><span class="n">bmap</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="k">_</span><span class="p">]</span><span class="kt">str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Keep me alpha-sorted and consistent with the ltok enum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="s">&#34;_&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="s">&#34;abort&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="s">&#34;alloc&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="s">&#34;append&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="s">&#34;as&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="s">&#34;assert&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="s">&#34;bool&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">lex_name</span><span class="p">(</span><span class="n">lex</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="o">:</span><span class="w"> </span><span class="n">location</span><span class="p">,</span><span class="w"> </span><span class="n">keyword</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">token</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strio</span><span class="o">::</span><span class="n">dynamic</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="p">(</span><span class="n">lex</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">r</span><span class="o">:</span><span class="w"> </span><span class="kt">rune</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">assert</span><span class="p">(</span><span class="n">is_name</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="w"> </span><span class="nb">false</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">strio</span><span class="o">::</span><span class="n">appendrune</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="n">r</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">_</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">abort</span><span class="p">(),</span><span class="w"> </span><span class="c1">// Invariant
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="p">(</span><span class="n">lex</span><span class="p">)</span><span class="o">?</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">_</span><span class="o">:</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">break</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">r</span><span class="o">:</span><span class="w"> </span><span class="kt">rune</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">is_name</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="w"> </span><span class="nb">true</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">unget</span><span class="p">(</span><span class="n">lex</span><span class="p">,</span><span class="w"> </span><span class="n">r</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">strio</span><span class="o">::</span><span class="n">appendrune</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="n">r</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strio</span><span class="o">::</span><span class="n">finish</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">keyword</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">ltok</span><span class="o">::</span><span class="n">NAME</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">sort</span><span class="o">::</span><span class="n">search</span><span class="p">(</span><span class="n">bmap</span><span class="p">[..</span><span class="n">ltok</span><span class="o">::</span><span class="n">LAST_KEYWORD</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">size</span><span class="p">(</span><span class="kt">str</span><span class="p">),</span><span class="w"> </span><span class="o">&amp;</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">namecmp</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">null</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">ltok</span><span class="o">::</span><span class="n">NAME</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">v</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">defer</span><span class="w"> </span><span class="k">free</span><span class="p">(</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">v</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="o">&amp;</span><span class="n">bmap</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">tok</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="k">size</span><span class="p">(</span><span class="kt">str</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="kt">uintptr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">(</span><span class="n">tok</span><span class="o">:</span><span class="w"> </span><span class="n">ltok</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The rest of the code is more of the same, but I&rsquo;ve <a href="https://paste.sr.ht/~sircmpwn/25871787b0d41db2b0af573ba1c93e1b6438b942">put it up here</a> if
you want to read it.</p>
<p>Let&rsquo;s move on to parsing: we need to turn this one dimensional stream of tokens
into an structured form: the <em>Abstract Syntax Tree</em>. Consider the following
sample code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">let</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">add2</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Our token stream looks like this:</p>
<pre tabindex="0"><code>let x : int = add2 ( 40 , 2 ) ;
</code></pre><p>But what we need is something more structured, like this:</p>
<pre tabindex="0"><code>binding
	name=&#34;x&#34;
	type=&#34;int&#34;
	initializer=call-expression
	=&gt;	func=&#34;add2&#34;
		parameters
			constant value=&#34;40&#34;
			constant value=&#34;2&#34;
</code></pre><p>We know at each step what kinds of tokens are valid in each situation. After we
see &ldquo;let&rdquo;, we know that we&rsquo;re parsing a binding, so we look for a name (&ldquo;x&rdquo;)
and a colon token, a type for the variable, an equals sign, and an expression
which initializes it. To parse the initializer, we see an identifier, &ldquo;add2&rdquo;,
then an open parenthesis, so we know we&rsquo;re in a call expression, and we can
start parsing arguments.</p>
<p>To make our parser code expressive, and to handle errors neatly, we&rsquo;re going to
implement a few helper function that lets us describe these states in terms of
what the parser wants from the lexer. We have a few functions to accomplish
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// Requires the next token to have a matching ltok. Returns that token, or an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">want</span><span class="p">(</span><span class="n">lexer</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">lex</span><span class="o">::</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">want</span><span class="o">:</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">ltok</span><span class="o">...</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">lex</span><span class="o">::</span><span class="n">token</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">lex</span><span class="p">(</span><span class="n">lexer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">want</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">tok</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">want</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">tok</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">want</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">tok</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strio</span><span class="o">::</span><span class="n">dynamic</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">want</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&#39;{}&#39;&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">tokstr</span><span class="p">((</span><span class="n">want</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w"> </span><span class="n">mkloc</span><span class="p">(</span><span class="n">lexer</span><span class="p">))));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">want</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">fmt</span><span class="o">::</span><span class="n">fprint</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;, &#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">syntaxerr</span><span class="p">(</span><span class="n">mkloc</span><span class="p">(</span><span class="n">lexer</span><span class="p">),</span><span class="w"> </span><span class="s">&#34;Unexpected &#39;{}&#39;, was expecting {}&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">lex</span><span class="o">::</span><span class="n">tokstr</span><span class="p">(</span><span class="n">tok</span><span class="p">),</span><span class="w"> </span><span class="n">strio</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Looks for a matching ltok from the lexer, and if not present, unlexes the
</span></span></span><span class="line"><span class="cl"><span class="c1">// token and returns void. If found, the token is consumed from the lexer and is
</span></span></span><span class="line"><span class="cl"><span class="c1">// returned.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">try</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">lexer</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">lex</span><span class="o">::</span><span class="n">lexer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">want</span><span class="o">:</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">ltok</span><span class="o">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">lex</span><span class="o">::</span><span class="n">token</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">lex</span><span class="p">(</span><span class="n">lexer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">assert</span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">want</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">want</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">tok</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">want</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">tok</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">lex</span><span class="o">::</span><span class="n">unlex</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">tok</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Looks for a matching ltok from the lexer, unlexes the token, and returns
</span></span></span><span class="line"><span class="cl"><span class="c1">// it; or void if it was not a ltok.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span><span class="w"> </span><span class="n">peek</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">lexer</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">lex</span><span class="o">::</span><span class="n">lexer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">want</span><span class="o">:</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">ltok</span><span class="o">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">lex</span><span class="o">::</span><span class="n">token</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">lex</span><span class="p">(</span><span class="n">lexer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">lex</span><span class="o">::</span><span class="n">unlex</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">tok</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">len</span><span class="p">(</span><span class="n">want</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">tok</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">want</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">tok</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">want</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">tok</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Let&rsquo;s say we&rsquo;re looking for a binding like our sample code to show up next. The
grammar from the spec is as follows:</p>
<p><img src="https://redacted.moe/f/f0e1d07d.png" alt=""></p>
<p>And here&rsquo;s the code that parses that:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">binding</span><span class="p">(</span><span class="n">lexer</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">lex</span><span class="o">::</span><span class="n">lexer</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">ast</span><span class="o">::</span><span class="n">expr</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">is_static</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">try</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">STATIC</span><span class="p">)</span><span class="o">?</span><span class="w"> </span><span class="o">is</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">token</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">is_const</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">want</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">LET</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">CONST</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ltok</span><span class="o">::</span><span class="n">LET</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">false</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ltok</span><span class="o">::</span><span class="n">CONST</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">true</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">bindings</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">ast</span><span class="o">::</span><span class="n">binding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">want</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">NAME</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="mi">1</span><span class="w"> </span><span class="o">as</span><span class="w"> </span><span class="kt">str</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">btype</span><span class="o">:</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">ast</span><span class="o">::</span><span class="n">_type</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">try</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">COLON</span><span class="p">)</span><span class="o">?</span><span class="w"> </span><span class="o">is</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">token</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">alloc</span><span class="p">(</span><span class="n">_type</span><span class="p">(</span><span class="n">lexer</span><span class="p">)</span><span class="o">?</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="kt">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">want</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">EQUAL</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">init</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">(</span><span class="n">expression</span><span class="p">(</span><span class="n">lexer</span><span class="p">)</span><span class="o">?</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">append</span><span class="p">(</span><span class="n">bindings</span><span class="p">,</span><span class="w"> </span><span class="n">ast</span><span class="o">::</span><span class="n">binding</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">_type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">btype</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">init</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">init</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">try</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">COMMA</span><span class="p">)</span><span class="o">?</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">_</span><span class="o">:</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">break</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">_</span><span class="o">:</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">token</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">ast</span><span class="o">::</span><span class="n">binding_expr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">is_static</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">is_static</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">is_const</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">is_const</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">bindings</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bindings</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Hopefully the flow of this code is fairly apparent. The goal is to fill in the
following AST structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// A single variable biding. For example:
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	foo: int = bar
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">binding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">_type</span><span class="o">:</span><span class="w"> </span><span class="kt">nullable</span><span class="w"> </span><span class="o">*</span><span class="n">_type</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">init</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">expr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// A variable binding expression. For example:
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	let foo: int = bar, ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">binding_expr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">is_static</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">is_const</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">bindings</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">binding</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>The rest of the code is pretty similar, though some corners of the grammar are a
bit hairier than others. One example is how we parse infix operators for binary
arithmetic expressions (such as &ldquo;2 + 2&rdquo;):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">binarithm</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">lexer</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">lex</span><span class="o">::</span><span class="n">lexer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">lvalue</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">ast</span><span class="o">::</span><span class="n">expr</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">void</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">i</span><span class="o">:</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">ast</span><span class="o">::</span><span class="n">expr</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Precedence climbing parser
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="c1">// https://en.wikipedia.org/wiki/Operator-precedence_parser
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">lvalue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">lvalue</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">_</span><span class="o">:</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">cast</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="p">)</span><span class="o">?</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">expr</span><span class="o">:</span><span class="w"> </span><span class="n">ast</span><span class="o">::</span><span class="n">expr</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">expr</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">let</span><span class="w"> </span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">lex</span><span class="p">(</span><span class="n">lexer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">precedence</span><span class="p">(</span><span class="n">tok</span><span class="p">);</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">precedence</span><span class="p">(</span><span class="n">tok</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">const</span><span class="w"> </span><span class="n">op</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">binop_for_tok</span><span class="p">(</span><span class="n">tok</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">rvalue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cast</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">lex</span><span class="p">(</span><span class="n">lexer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">k</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">precedence</span><span class="p">(</span><span class="n">tok</span><span class="p">);</span><span class="w"> </span><span class="n">k</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">j</span><span class="p">;</span><span class="w"> </span><span class="n">k</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">precedence</span><span class="p">(</span><span class="n">tok</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">lex</span><span class="o">::</span><span class="n">unlex</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">tok</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">rvalue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">binarithm</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">rvalue</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">tok</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">lex</span><span class="p">(</span><span class="n">lexer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">let</span><span class="w"> </span><span class="n">expr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ast</span><span class="o">::</span><span class="n">binarithm_expr</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">op</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">op</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">lvalue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">(</span><span class="n">lvalue</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">rvalue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">alloc</span><span class="p">(</span><span class="n">rvalue</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">lvalue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">lex</span><span class="o">::</span><span class="n">unlex</span><span class="p">(</span><span class="n">lexer</span><span class="p">,</span><span class="w"> </span><span class="n">tok</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">lvalue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span><span class="w"> </span><span class="n">precedence</span><span class="p">(</span><span class="n">tok</span><span class="o">:</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">token</span><span class="p">)</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">tok</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">LOR</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">LXOR</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">LAND</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">LEQUAL</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">NEQUAL</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">LESS</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">LESSEQ</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">GREATER</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">GREATEREQ</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">BOR</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">BXOR</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">6</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">BAND</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">LSHIFT</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">RSHIFT</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">PLUS</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">MINUS</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">9</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ltok</span><span class="o">::</span><span class="n">TIMES</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">DIV</span><span class="p">,</span><span class="w"> </span><span class="n">ltok</span><span class="o">::</span><span class="n">MODULO</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="o">*</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>I don&rsquo;t really grok this algorithm, to be honest, but hey, it works. Whenever I
write a precedence climbing parser, I&rsquo;ll stare at the Wikipedia page for 15
minutes, quickly write a parser, and then immediately forget how it works. Maybe
I&rsquo;ll write a blog post about it someday.</p>
<p>Anyway, ultimately, this code lives in our standard library and is used for
several things, including our (early in development) self-hosted compiler.
Here&rsquo;s an example of its usage, taken from our documentation generator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="k">fn</span><span class="w"> </span><span class="n">scan</span><span class="p">(</span><span class="n">path</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">ast</span><span class="o">::</span><span class="n">subunit</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">error</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">input</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">os</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">s</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io</span><span class="o">::</span><span class="n">stream</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">err</span><span class="o">:</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">fmt</span><span class="o">::</span><span class="n">fatal</span><span class="p">(</span><span class="s">&#34;Error reading {}: {}&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">fs</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">err</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">defer</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">input</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">lexer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">lex</span><span class="o">::</span><span class="n">flags</span><span class="o">::</span><span class="n">COMMENTS</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">parse</span><span class="o">::</span><span class="n">subunit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lexer</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Where the &ldquo;ast::subunit&rdquo; type is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// A sub-unit, typically representing a single source file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">subunit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">imports</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">import</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">decls</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">decl</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Pretty straightforward! Having this as part of the standard library should make
it much easier for users to build language-aware tooling with the language
itself. We also plan on having our type checker in the stdlib as well. This is
something that I drew inspiration for from Golang — having a lot of their
toolchain components in the standard library makes it really easy to write
Go-aware tools.</p>
<p>So, there you have it: the next stage in the development of our language. I hope
you&rsquo;re looking forward to it!</p>]]></description><pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate></item><item><title>Status update, April 2021</title><link>https://drewdevault.com/2021/04/15/Status-update-April-2021.html</link><description><![CDATA[<p>Another month goes by! I&rsquo;m afraid that I have very little to share this month.
You can check out the <a href="https://sourcehut.org/blog/2021-04-15-whats-cooking-april-2021/">sourcehut &ldquo;what&rsquo;s cooking&rdquo; post</a> for sourcehut news,
but outside of that I have focused almost entirely on the programming language
project this month, for which the details are kept private.</p>
<p>The post <a href="https://drewdevault.com/2021/03/19/A-new-systems-language.html">calling for contributors</a> led to a lot of answers and we&rsquo;ve brought
several new people on board — thanks for answering the call! I&rsquo;d like to
narrow the range of problems we still need help with. If you&rsquo;re interested in
(and experienced in) the following problems, we need your help:</p>
<ul>
<li>Cryptography</li>
<li>Date/time support</li>
<li>Networking (DNS is up next)</li>
</ul>
<p><a href="mailto:sir@cmpwn.com">Shoot me an email</a> if you want to help. We don&rsquo;t have the
bandwidth to mentor inexperienced programmers right now, so please only reach
out if you have an established background in systems programming.</p>
<p>Here&rsquo;s a teaser of one of the stdlib APIs written by our new contributors,
unix::passwd:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="c1">// A Unix-like group file entry.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">type</span><span class="w"> </span><span class="n">grent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Name of the group
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Optional encrypted password
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">password</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Numerical group ID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">gid</span><span class="o">:</span><span class="w"> </span><span class="kt">uint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// List of usernames that are members of this group, comma separated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="n">userlist</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Reads a Unix-like group entry from a stream. The caller must free the result
</span></span></span><span class="line"><span class="cl"><span class="c1">// using [grent_finish].
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">nextgr</span><span class="p">(</span><span class="n">stream</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">io</span><span class="o">::</span><span class="n">stream</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">grent</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">EOF</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">io</span><span class="o">::</span><span class="n">error</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">invalid</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Frees resources associated with [grent].
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">grent_finish</span><span class="p">(</span><span class="n">ent</span><span class="o">:</span><span class="w"> </span><span class="n">grent</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Looks up a group by name in a Unix-like group file. It expects a such file at
</span></span></span><span class="line"><span class="cl"><span class="c1">// /etc/group. Aborts if that file doesn&#39;t exist or is not properly formatted.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// See [nextgr] for low-level parsing API.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">getgroup</span><span class="p">(</span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">grent</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kt">void</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>That&rsquo;s all for now. These updates might be light on details for a while as we
work on this project. See you next time!</p>]]></description><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate></item><item><title>The Developer Certificate of Origin is a great alternative to a CLA</title><link>https://drewdevault.com/2021/04/12/DCO.html</link><description><![CDATA[<p>Today Amazon released their fork of ElasticSearch, <a href="https://github.com/opensearch-project/OpenSearch">OpenSearch</a>, and I want
to take a moment to draw your attention to one good decision in particular: its
use of the <a href="https://github.com/opensearch-project/OpenSearch/blob/main/CONTRIBUTING.md#developer-certificate-of-origin">Developer Certificate of Origin</a> (or &ldquo;DCO&rdquo;).</p>
<hr>
<p>Previously:</p>
<ul>
<li><a href="https://drewdevault.com/2021/01/19/Elasticsearch-does-not-belong-to-Elastic.html">ElasticSearch does not belong to Elastic</a></li>
<li><a href="https://drewdevault.com/2021/01/20/FOSS-is-to-surrender-your-monopoly.html">Open source means surrendering your monopoly over commercial exploitation</a></li>
<li><a href="https://drewdevault.com/2018/10/05/Dont-sign-a-CLA.html">Don&rsquo;t sign a CLA</a></li>
</ul>
<hr>
<p>Elastic betrayed its community when they changed to a proprietary license.  We
could have seen it coming because of a particular trait of their contribution
process: the use of a Contributor License Agreement, or CLA. In principle, a CLA
aims to address legitimate concerns of ownership and copyright, but in practice,
they are a promise that one day the stewards of the codebase will take your work
and relicense it under a nonfree license. And, ultimately, this is exactly what
Elastic did, and exactly what most other projects which ask you to sign a CLA
are <em>planning</em> to do. If you ask me, that&rsquo;s a crappy deal, and I refrain from
contributing to those projects as a result.</p>
<p>However, there are some legitimate questions of ownership which a project owner
might rightfully wish to address before accepting a contribution. As is often
the case, we can look to git itself for an answer to this problem. Git was
designed for the Linux kernel, and patch ownership is a problem they faced and
solved a long time ago. Their answer is the <a href="https://developercertificate.org/">Developer Certificate of
Origin</a>, or DCO, and tools for working with
it are already built into git.</p>
<p>git provides the -s flag for git commit, which adds the following text to your
commit message:</p>
<pre tabindex="0"><code>Signed-off-by: Drew DeVault &lt;sir@cmpwn.com&gt;
</code></pre><p>The specific meaning varies from project to project, but it is usually used to
indicate that you have read and agreed to the DCO, which reads as follows:</p>
<blockquote>
<p>By making a contribution to this project, I certify that:</p>
<ol>
<li>The contribution was created in whole or in part by me and I have the right
to submit it under the open source license indicated in the file; or</li>
<li>The contribution is based upon previous work that, to the best of my
knowledge, is covered under an appropriate open source license and I have
the right under that license to submit that work with modifications,
whether created in whole or in part by me, under the same open source
license (unless I am permitted to submit under a different license), as
indicated in the file; or</li>
<li>The contribution was provided directly to me by some other person who
certified (1), (2) or (3) and I have not modified it.</li>
<li>I understand and agree that this project and the contribution are public
and that a record of the contribution (including all personal information I
submit with it, including my sign-off) is maintained indefinitely and may
be redistributed consistent with this project or the open source license(s)
involved.</li>
</ol></blockquote>
<p>This neatly answers all concerns of copyright. You license your contribution
under the original license (Apache 2.0 in the case of OpenSearch), and attest
that you have sufficient ownership over your changes to do so. You retain your
copyright and you don&rsquo;t leave the door open for the maintainers to relicense
your work under some other terms in the future. This offers the maintainers the
same rights that they extended to the community themselves.</p>
<p>This is the strategy that Amazon chose for OpenSearch, and it&rsquo;s a good thing
they did, because it strongly signals to the community that it will not fall to
the same fate that ElasticSearch has. By doing this, they have imposed on
themselves a great deal of difficulty to any future attempt to change their
copyright obligations. I applaud Amazon for this move, and I&rsquo;m optimistic about
the future of OpenSearch under their stewardship.</p>
<p>If you have a project of your own that is concerned about the copyright of
third-party contributions, then please consider adopting the DCO instead of a
CLA. And, as a contributor, if someone asks you to sign a CLA, consider
withholding your contribution: a CLA is a promise to the contributors that
someday their work will be taken from them and monetized to the exclusive
benefit of the project&rsquo;s lords. This affects my personal contributions, too
— for example, I avoid contributing to Golang as a result of their CLA
requirement. Your work is important, and the projects you offer it to should
respect that.</p>]]></description><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate></item><item><title>What should the next chat app look like?</title><link>https://drewdevault.com/2021/04/07/The-next-chat-app.html</link><description><![CDATA[<p>As you&rsquo;re surely aware, Signal has officially jumped the shark with the
introduction of cryptocurrency to their chat app. Back in 2018, I <a href="https://drewdevault.com/2018/08/08/Signal.html">wrote about
my concerns with Signal</a>, and those concerns were unfortunately validated by
this week&rsquo;s announcement. Moxie&rsquo;s insistence on centralized ownership,
governance, and servers for Signal puts him in a position of power which is
easily, and inevitably, abused. In that 2018 article, and in <a href="https://drewdevault.com/2020/09/20/The-potential-of-federation.html">articles since</a>,
I have spoken about the important of federation to address these problems. In
addition to federation, what else does a chat app need?</p>
<p>Well, first, the next chat app should be <strong>a protocol</strong>, not just an app. A lush
ecosystem of client and server implementations, along with bots and other
integrations, adds a tremendous amount of value and longevity to a system. A
chat app which has only one implementation and a private protocol can only ever
meet the needs that its developers (1) foresee, (2) care about, and (3) have the
capacity to address; thus, such a protocol cannot be ubiquitous. I would also
recommend that this protocol is not needlessly stapled to the beached whale that
is the web: <em>maybe</em> JSON can come, but if it&rsquo;s served with HTTP polling to
appease our Android overlords I will be very cross with you. JSON also offers
convenient extensibility, and a protocol designer who limits extensibility is a
wise one.</p>
<p>Crucially, that protocol <em>must</em> be <strong>federated</strong>. This is Signal&rsquo;s largest
failure. We simply cannot trust a single entity, even you, dear reader, to have
such a large degree of influence over the ecosystem.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> I do not trust you not
to add some crypto Ponzi scheme of your own 5 years from now. A federated system
allows multiple independent server operators to stand up their own servers which
can communicate with each other and exchange messages on behalf of their
respective users, which distributes ownership, responsibility, and governance
within the community at large, making the system less vulnerable to all kinds of
issues. You need to be prepared to relinquish control to the community. Signal
wasn&rsquo;t, and has had problems ranging from 502 Server Gone errors to 404
Ethics Not Found errors, both of which are solved by federation.</p>
<p>The next chat app also needs <strong>end-to-end encryption</strong>. This should be fairly
obvious, but it&rsquo;s worth re-iterating because this will occupy a <em>majority</em> of
the design work that goes into the app. There are complex semantics involved in
encrypting user-to-user chats, group chats (which could add or remove users at
any time), perfect forward secrecy, or multiple devices under one account; many
of these issues have implications for the user experience. This is complicated
further by the concerns of a federated design, and if you want to support voice
or video chat (please don&rsquo;t), that&rsquo;ll complicate things even more. You&rsquo;ll spend
the bulk of your time solving these problems. I would advise, however, that you
let users dial down the privacy (after explaining to them the trade-offs) in
exchange for convenience. For instance, to replace IRC you would need to support
channels which anyone can join at any time and which might make chat logs
available to the public.</p>
<p>A new chat app also needs <strong>anonymity</strong>. None of this nonsense where users have
to install your app and give you their phone number to register. In fact, you
should know next to nothing about each user, given that the most secure data is
the data you don&rsquo;t have. This is made more difficult when you consider that
you&rsquo;ll also strive to provide an authentic identity for users to establish
between themselves — but not with you. Users should also be able to
establish a pseudonymous identity, or wear multiple identities. You need to
provide (1) a strong guarantee of consistent identity from session to
session, (2) without sharing that guarantee with your servers, and (3) offer
the ability to able to change to a new identity at will. The full implications
of anonymity are a complex issue which is out of scope for this article, but for
now it suffices to say that you should at least refrain from asking for the
user&rsquo;s phone number.</p>
<p>Finally, it needs to be <strong>robust, reliable, and performant</strong>. Focus on the
basics: delivering messages quickly and reliably. The first thing you need to
produce is a reliable messenger which works in a variety of situations, on a
variety of platforms, in various network conditions, and so on, with the
underlying concerns of federation, end-to-end encryption, protocol
standardization, group and individual chats, multi-device support, and so on, in
place and working. You can try to deliver this in a moderately attractive
interface, but sinking a lot of time into fancy animations, stickers, GIF
lookups, typing notifications and read receipts — all of this is a
distraction until you get the real work done. You can have all of these things,
but if you don&rsquo;t have a reliable system underlying them, the result is
worthless.</p>
<p>I would also recommend leaving a lot of those features at the door, anyway.
Typing notifications and read receipts are pretty toxic, if you examine them
critically. A lot of chat apps have a problem with cargo-culting bad ideas from
each other. Try to resist that. Anyway, you have a lot of work to do, so I&rsquo;ll
leave you to it. <a href="mailto:sir@cmpwn.com">Let me know</a> what you&rsquo;re working on when
you&rsquo;ve got something to show for it.</p>
<p>And don&rsquo;t put a fucking cryptocurrency in it.</p>
<details>
  <summary>Regarding Matrix, IRC, etc</summary>
  <p>
    Let's quickly address the present state of the ecosystem. Matrix rates well
    in most of these respects, much better than others. However, their software
    is way too complicated. They are federated, but the software is far from
    reliable or robust, so the ecosystem tends to be centralized because
    Matrix.org are the only ones who have the knowledge and bandwidth to keep it
    up and running. The performance sucks, client and server both, and their UX
    for E2EE is confusing and difficult to use.
  <p>
    It's a good attempt, but too complex and brittle. Also, their bridge
    is a major nuisance to IRC, which biases me against them. Please don't
    integrate your next chat app with IRC; just leave us alone, thanks.
  <p>
    Speaking of IRC, it is still my main chat program, and has been for 15+
    years. The lack of E2EE, which is unacceptable for any new protocol, is not
    important enough to get me to switch to anything else until it presents a
    compelling alternative to IRC.
</details>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Even if that ecosystem is &ldquo;moving&rdquo;. Ugh.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 7 Apr 2021 00:00:00 +0000</pubDate></item><item><title>Go is a great programming language</title><link>https://drewdevault.com/2021/04/02/Go-is-a-great-language.html</link><description><![CDATA[<p>No software is perfect, and thus even for software I find very pleasant, I can
usually identify some problems in it — often using my blog to do so. Even
my all-time favorite software project, Plan 9, has some painful flaws! For some
projects, it may be my fondness for them that drives me to criticise them even
more, in the hope that they&rsquo;ll live up to the level of respect I feel for them.</p>
<p>One such project is the Go programming language. I have had many criticisms,
often shared on this blog and elsewhere, but for the most part, my praises have
been aired mainly in private. I&rsquo;d like to share some of those praises today,
because despite my criticisms of it, Go remains one of the best programming
languages I&rsquo;ve ever used, and I have a great deal of respect for it.</p>
<p>Perhaps the matter I most appreciate Go for is its long-term commitment to
simplicity, stability, and robustness. I prize these traits more strongly than
any other object of software design. The Go team works with an ethos of
careful restraint, with each feature given deliberate consideration towards
identifying the simplest and most complete solution, and they carefully
constrain the scope of their implementations to closely fit those solutions.
The areas where Go has failed in this regard are frightfully scarce.</p>
<p>The benefits of their discipline are numerous. The most impressive
accomplishment that I attribute to this approach is the quality of the Go
ecosystem at large. In the first place, it is a great accomplishment to produce
a language and standard library with the excellence in design and implementation
that Go offers, but it&rsquo;s a truly profound achievement to have produced a design
which the community <em>at large</em> utilizes to make similarly excellent designs as a
basic consequence of the language&rsquo;s simple elegance.  Very few other languages
enjoy a similar level of consistency and quality in the ecosystem.</p>
<p>Go is also notable for essentially inventing its own niche, and then helping
that niche grow around it into an entirely new class of software design. I
consider Go not to be a systems programming language — a title much better
earned by languages like C and Rust. Rather, Go is the best-in-class for a new
breed of software: an Internet programming language.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> The wealth of network
protocols implemented efficiently, concisely, and correctly in its standard
library, combined with its clever mixed cooperative/pre-emptive multitasking
model, make it very easy to write scalable internet-facing software. A few other
languages — Elixir comes to mind — also occupy this niche, but they
haven&rsquo;t enjoyed the runaway success that Go has.</p>
<p>The Go team has also earned my respect for their professionalism. The close
degree to which Go is tied to Google comes with its own set of trade-offs, but
the centralization of project leadership caused by this relationship is
beneficial for the project. Some members of the Go community have noticed the
apparent disadvantages of this structure, as Go is infamous for being slow to
respond to the wants of its community. This insulation, I would argue, is in
fact advantageous for the conservative language design that Go embraces, and
may actually be essential to its value-add as a project. If Go listened to the
community as much as they want, it would become a kitchen sink, and cease to be
interesting to me.</p>
<p>Rather than being closely tied to its community&rsquo;s wants, Go generally does a
much better job of being closely tied to its community&rsquo;s <em>needs</em>. If you have
correctly identified a problem in Go, when you bring it to their attention, you
will be taken seriously. Many projects struggle to separate their egos from the
software, and when mistakes are found, they take it personally. Go does an
excellent job of treating it like an engineer — a matter-of-fact analysis
of the problem, deliberation on the solution, and shipping of a fix.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> Go has
a reputation for plain old good engineering.</p>
<p>In short, I admire Go very much, despite my frequent criticisms. I recognize Go
as one of the best programming languages ever made. Go has attained an elusive
status in the programming canon as a robust engineering tool that can be
expected to work, and work well, in its applications for decades to come. Its
because of this respect that I hold Go to such a high standard, and I hope that
it continues to impress me going forward.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>It took me a while to understand this. It was a mistake for Go to be marketed as a systems language. Any systems programmer would rightfully tell you that a language with a garbage collector and magic cooperative/pre-emptive threads is a non-starter for systems programming. But, what Go was really designed for, and is mainly used for, is not exactly systems programming. Internet-facing code has straddled the line between systems programming and high-level programming for a while: high-performance systems software would often be written in, say, C — which is definitely a systems programming language — but the vastness of the Internet&rsquo;s problem space also affords for a large number of programs for which a higher-level programming languages are a better fit, such as Java, C#, etc — and these are definitely not systems programming languages. Go is probably the first language to specifically target this space in-between with this degree of success, and it kind of makes a new domain for itself in so doing: it is the first widely successful &ldquo;Internet programming language&rdquo;.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Sometimes, this has not been the case, and this was the cause of some of my harshest criticisms of Go. Many of Go&rsquo;s advantages stem from, and even <em>require</em>, this dispassionate, matter-of-fact engineering ethos that I appreciate from Go.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 2 Apr 2021 00:00:00 +0000</pubDate></item><item><title>The world&apos;s stupidest IRC bot</title><link>https://drewdevault.com/2021/03/29/The-worlds-dumbest-IRC-bot.html</link><description><![CDATA[<p>I&rsquo;m an <a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a> power user,
having been hanging out in 200+ channels on 10+ networks 24/7 for the past 10
years or so. Because IRC is
<a href="https://tools.ietf.org/html/rfc2812">standardized</a> and simple, a common
pastime for IRC enthusiasts is the creation of bots. In one of the social
channels I hang out in, we&rsquo;ve spent the past 6 years gradually building the
world&rsquo;s stupidest IRC bot: wormy.</p>
<p>For a start, wormy is highly schizophrenic. Though it presents itself as a
single bot, it is in fact a
<a href="https://en.wikipedia.org/wiki/BNC_(software)">bouncer</a> which combines the
connections of 7 independent bots. At one point, this number was higher —
as many as 11 — but some bots were consolidated.</p>
<pre tabindex="0"><code>&lt;@sircmpwn&gt; .bots
&lt;wormy&gt; Serving text/html since 2017, yours truly [&#34;ps&#34;] For a list of commands, try `.help`
&lt;wormy&gt; minus&#39; parcel tracking bot r10.b563abc (built on 2020-06-06T12:02:13Z, https://git.sr.ht/~minus/parcel-tracking-bot)
&lt;wormy&gt; minus&#39; dice bot r16.498a0b8 (built on 2020-02-04T20:16:14Z, https://git.sr.ht/~minus/dice-irc-bot)
&lt;wormy&gt; Featuring arbitrary code execution by design and buffer overflows by mistake, jsbot checking in
&lt;wormy&gt; Radiobot coming to you live from The Internet, taking listener requests at 1-800-GUD-SONGS
&lt;wormy&gt; urlbot: live streaming moe directly to your eyeballs
&lt;wormy&gt; o/ SirCmpwn made me so he wouldn&#39;t forget shit so much
</code></pre><p>These bots provide a variety of features for channel members, such as checking
tracking numbers for parcels out for delivery, requesting songs for our private
internet radio, reading out the mimetypes and titles of URLs mentioned in the
channel, or feeding queries into Wolfram Alpha.</p>
<pre tabindex="0"><code>&lt;wormy&gt; Now playing: 8369492 小さき者への贖罪の為のソナタ  by ALI PROJECT from 禁書 (4m42s FLAC)
&lt;wormy&gt; Now playing: 1045361 アキノサクラ by Wakana from magic moment (5m0s FLAC) #live ♥ minus
&lt;wormy&gt; Now playing: d0b1cb3 Forevermore by F from Cafe de Touhou 3 (4m9s FLAC) ♥ hummer12007
&lt;wormy&gt; Now playing: 0911e90 Moeru San Shimai by Iwasaki Taku from Tengen Toppa Gurren Lagann Original Soundtrack - CD01 (3m3s FLAC)
&lt;wormy&gt; Now playing: ac1a17e rebellion anthem by Yousei teikoku from rebellion anthem (5m15s MP3) ♥ minus
&lt;wormy&gt; Now playing: a5ab39a Desirable Dream by GET IN THE RING from Aki-秋- (4m38s FLAC) ♥ minus
</code></pre><p>Things really took off with the introduction of a truly stupid bot last year:
<a href="https://git.sr.ht/~sircmpwn/jsbot">jsbot</a>. This bot adds a <code>.js</code> command which
executes arbitrary JavaScript (using Fabrice Bellard&rsquo;s
<a href="https://bellard.org/quickjs/">quickjs</a>) expressions, and sending their
stringified result to the channel.</p>
<pre tabindex="0"><code>&lt;@sircmpwn&gt; .js Array(16).join(&#34;wat&#34; - 1) + &#34; Batman!&#34;
&lt;wormy&gt; =&gt; NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN Batman!
</code></pre><p>We soon realized, however, that what we had effectively created was a persistent
JavaScript environment which was connected to IRC. This has made it possible to
write even more IRC bots in the least practical manner imaginable: by writing
JavaScript statements, one line at a time, into IRC messages, and hoping it
works.</p>
<p>This has not been an entirely smart move.</p>
<p><img src="https://redacted.moe/f/52eb4eba.png" alt="I say &ldquo;I hate C++ templates&rdquo;, and the bot responds by writing &ldquo;yeah, fuck C++
templates!&rdquo; with &ldquo;C++ templates&rdquo; displayed in rainbow colors. MartijnBraam
follows up by asking &ldquo;number of c++ programmers launched into the sun&rdquo;, which
wormy claims is 367880 people as of 2009."></p>
<p>One &ldquo;feature&rdquo;, inspired by <a href="https://www.youtube.com/watch?v=30jNsCVLpAE">Bryan
Cantrill</a>, records every time the
word &ldquo;fuck&rdquo; is used in the channel. Then, whenever anyone says &ldquo;wtf&rdquo;, the bot
helpfully offers up an example of the usage of the word &ldquo;fuck&rdquo; by printing one
of the recorded messages. Here&rsquo;s how it was made:</p>
<pre tabindex="0"><code>&lt;sircmpwn&gt; .js let wtf = [];
&lt;wormy&gt;  =&gt; undefined
&lt;sircmpwn&gt; .js on(/fuck/, msg =&gt; wtf.push(msg.text))
&lt;wormy&gt;  =&gt; 25
&lt;sircmpwn&gt; .js on(/^what the fuck$/, msg =&gt; msg.reply(wtf[Math.floor(Math.random() * wtf.length)]))
&lt;wormy&gt;  =&gt; 26
</code></pre><p>Here&rsquo;s one which records whenever someone says &ldquo;foo++&rdquo; or &ldquo;foo--&rdquo; and keeps
track of scores:</p>
<pre tabindex="0"><code>.js on(/^([a-zA-Z0-9_]+)(\+\+|--)$/, (msg, thing, op) =&gt; { if (typeof scores[thing] === &#34;undefined&#34;) scores[thing] = 0; scores[thing] += op === &#34;++&#34; ? 1 : -1; msg.reply(`${thing}: ${scores[thing]}`) });
.js on(/\.score (.*)/, (msg, item) =&gt; msg.reply(scores[item]));
.js let worst = () =&gt; Object.entries(scores).sort((a, b) =&gt; a[1] - b[1]).slice(0, 5).map(s =&gt; `${s[0]}: ${s[1]}`).join(&#34;, &#34;);
.js let best = () =&gt; Object.entries(scores).sort((a, b) =&gt; b[1] - a[1]).slice(0, 5).map(s =&gt; `${s[0]}: ${s[1]}`).join(&#34;, &#34;);
.js on(/^.worst$/, msg =&gt; msg.reply(worst()));
.js on(/^.best$/, msg =&gt; msg.reply(best()));
</code></pre><p>Other &ldquo;features&rdquo; written in horrible one-liners include SI unit conversions,
rewriting undesirable URLs (e.g. m.wikipedia.org =&gt; en.wikipedia.org), answering
&ldquo;wormy you piece of shit&rdquo; with &ldquo;¯\_(ツ)_/¯&rdquo;, and giving the obvious response to
&ldquo;make me a sandwich&rdquo;.</p>
<p>Eventually it occurred to us that we had two dozen stupid IRC bots storing not
only their state, but their code, in a single long-lived process on some server.
For a while, the answer to this was adding &ldquo;don&rsquo;t reboot this server kthx&rdquo; to
the MotD, but eventually we did some magic nonsense to make certain variables
persistent:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">persistent</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">writePersistent</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">fd</span> <span class="o">=</span> <span class="nx">std</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&#34;persist.json&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fd</span><span class="p">.</span><span class="nx">puts</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">persistent</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fd</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">persist_handler</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span><span class="o">:</span> <span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">obj</span><span class="p">[</span><span class="nx">prop</span><span class="p">]</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">writePersistent</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">std</span><span class="p">.</span><span class="nx">loadFile</span><span class="p">(</span><span class="s2">&#34;persist.json&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">p</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">persistent</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">persistent</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">key</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">persistent</span><span class="p">[</span><span class="nx">key</span><span class="p">],</span> <span class="nx">persist_handler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">persistent</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">proxy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">exports</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">proxy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">exports</span><span class="p">.</span><span class="nx">persist</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">persist_handler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">persistent</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">proxy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">writePersistent</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">proxy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Anyway, there&rsquo;s no moral to this story. We just have a silly IRC bot and I
thought I&rsquo;d share that with you. If you want a stupid IRC bot for your own
channel, <a href="https://git.sr.ht/~sircmpwn/jsbot">jsbot</a> is available on sourcehut. I
highly disrecommend it and disavow any responsibility for the consequences.</p>]]></description><pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate></item><item><title>The complete guide for open sourcing video games</title><link>https://drewdevault.com/2021/03/23/Open-sourcing-video-games.html</link><description><![CDATA[<p>Video games are an interesting class of software. Unlike most software, they are
a creative endeavour, rather than a practical utility. Where most software
calls for new features to address practical needs of their users, video games
call for new features to serve the creative vision of their makers. Similarly,
matters like refactoring and paying down tech debt are often heavily
de-prioritized in favor of shipping something ASAP. Many of the collaborative
benefits of open source are less applicable to video games. It is perhaps for
these reasons that there are very few commercial open source games.</p>
<p>However, there are some examples of such games, and they have had a great deal
of influence on gaming.  Id is famous for this, having released the source code
for several versions of DOOM. The Quake engine was also released under the GPL,
and went on to be highly influential, serving as the basis for dozens of games,
including time-honored favorites such as the Half Life series. Large swaths of
the gaming canon were made possible thanks to the generous contributions of open
source game publishers.</p>
<p>Publishing open source games is also a matter of historical preservation.
Proprietary games tend to atrophy. Long after their heyday, with suitable
platforms scarce and physical copies difficult to obtain, many games die a slow
and quiet death, forgotten to the annals of time. Some games have overcome this
by releasing their source code, making it easier for fans to port the game to
new platforms and keep it alive.</p>
<p>What will your game&rsquo;s legacy be? Will it be forgotten entirely, unable to run on
contemporary platforms? Will it be source-available, occasionally useful to the
devoted player, but with little reach beyond? Perhaps it goes the way of DOOM,
living forever in ports to hundreds of devices and operating systems. Maybe it
goes the way of Quake, its soul forever a part of the beloved classics of the
future. If you keep the source code closed, the only conclusion is the first:
enjoyed once, now forgotten.</p>
<p>With this in mind, how do you go about securing your game&rsquo;s legacy?</p>
<h2 id="source-available-the-bare-minimum">Source available: the bare minimum</h2>
<p>The bare minimum is to make your game &ldquo;source available&rdquo;. Be aware that this is
not the same thing as making it open source! Some of your famous peers in this
category include Alien 3, Civilization IV and V, Crysis, Deus Ex, Prince of
Persia, Unreal Tournament, and VVVVVV.</p>
<p>This approach makes your source code available to view and perhaps to compile
and run, but prohibits derivative works. This is definitely better than leaving
it closed source: it provides helpful resources for modders, speedrunners, and
other fans; and devoted players may be able to use it as the basis for getting
the game running on future platforms, albeit alone and unable to share their
work.</p>
<p>If you choose a minimal enforcement approach, then some players might ultimately
share their work, but you&rsquo;re leaving them on tenuous legal grounds. I would
recommend this if you&rsquo;re very protective of your IP, but know that you&rsquo;re
limiting the potential second life of your game if you take this approach.</p>
<h2 id="copyleft-with-proprietary-assets">Copyleft with proprietary assets</h2>
<p>The next step up is to make your game open source using a <em>copyleft</em> license,
but refraining from extending the license to the assets — anyone who wants
to get the source code working would either need to buy the game from you and
extract the assets, or supply their own community-made assets. This is a popular
approach among open source games, and gives you most of the benefits and few of
the drawbacks. You&rsquo;ll join the ranks of our DOOM and Quake examples, as well as
Amnesia: the Dark Descent, System Shock, Duke Nukem 3D, and Wolfenstein 3D.</p>
<p>Games like this enjoy a long life as their software is more easily ported to new
platforms and shared with other users. DOOM runs on phones, digital cameras,
ATMs, even toasters! Its legacy is secure without any ongoing commitment from
the original developers. This also allows derivatives works — new games
based on your code — though it may turn some developers away. Using a
copyleft license like the <a href="https://www.gnu.org/licenses/gpl-3.0.en.html">GPL</a>
requires derivative works to <em>also</em> be made open source. The community generally
has no problem with this, but it may affect the willingness of future developers
to incorporate your work into their own commercial games. I personally think
that the proliferation of open source software that&rsquo;s implied in the use of a
copyleft license is a positive thing — but you may want to use another
approach.</p>
<h2 id="permissive-license-proprietary-assets">Permissive license, proprietary assets</h2>
<p>If you want to allow your source code to find its way into as many future games
as possible, a permissive open source license like <a href="https://opensource.org/licenses/MIT">MIT</a> is the way to go.
<a href="https://github.com/blendogames/flotilla">Flotilla</a> is an example of a game
which went with this approach. It allows developers to incorporate your source
code into their own games with little restriction, either by creating a direct
derivative, or by taking little samples of your code and incorporating it into
their own project. This comes with no obligation to release their own changes or
works in a similar fashion: they can just take it, with very few strings
attached. Such an approach makes it very easy to incorporate into new commercial
games.</p>
<p>This is the most selfless way to release your code. I would recommend this if
you don&rsquo;t care about what happens to your code later, and you just want to make
it open source and move on. Though this will definitely enable the largest
number of future projects to make use of your work, the copyleft approach is
better for ensuring that the largest possible number of future games are <em>also</em>
open source.</p>
<h2 id="open-assets">Open assets</h2>
<p>If you&rsquo;re feeling especially generous, you could release the assets, too. Good
licenses for this includes the <a href="https://creativecommons.org/">Creative Commons</a>
licenses. All of them permit free redistribution of your assets, so future
players won&rsquo;t have to buy your game to get them. This could be important if the
distribution platform you used is defunct, or if you&rsquo;re not around to buy it
from — consider this well before deciding that you&rsquo;d rather keep your
share of the dwindling asset sales as your game ages.</p>
<p>Using Creative Commons also allows you to tune the degree to which your assets
may be re-used. You can choose different CC licenses to control the
commercialization of your assets and use in derivative works. To allow free
redistribution and nothing else, the CC-NC-ND license (noncommercial, no
derivatives) will do the trick. The CC-BY-SA license is the copyleft of creative
commons: it will allow free redistribution, commercialization, and derivative
works, <em>if</em> the derivatives are also shared with the same rights. The permissive
approach is CC-0, which is equivalent to releasing your assets into the public
domain.</p>
<p>Permitting derivatives and re-commercialization of your assets can save a lot of
time for new game developers, especially indie devs with a small budget. It&rsquo;s
also cool for making derivative <em>games</em>, similar to modding, where creative
players can remix your assets to make a new game or expansion pack.</p>
<h2 id="what-if-i-dont-completely-own-my-game">What if I don&rsquo;t completely own my game?</h2>
<p>You can&rsquo;t give away the rights to anything you don&rsquo;t own. If you rely on
proprietary libraries, or a third-party level editor, or you don&rsquo;t own the
rights to the music or sprites, you cannot make them open source.</p>
<p>In this situation, I recommend open sourcing everything that you&rsquo;re able to.
This might mean that you open source an ultimately broken game — it simply
might not work, or not even compile, without these resources. This is
unfortunate, but by releasing everything you can, you leave your community in a
good position to fill in the gaps themselves, perhaps by refactoring your code
to work around them, or by replacing the proprietary bits with free
alternatives. This also allows the parts of your game which are open to be
reused in future games.</p>
<h2 id="but-cheaters-could-use-it">But cheaters could use it!</h2>
<p>This is true. And it&rsquo;s worth noting that if your game has a mandatory online
component based on your own servers, then making it open source doesn&rsquo;t make
nearly as much sense, especially if you ultimately decide to shut those servers
off.</p>
<p>There is a trade-off to be made here. In truth, it&rsquo;s very difficult to prevent
cheating in your game. If you&rsquo;ve made a popular competitive multiplayer game,
you and I both know that there are still cheaters using it despite your best
efforts. Keeping it proprietary is not going to stave off cheaters. Social
solutions are better — like a system to report cheaters, or to let friends
play on private servers.</p>
<p>Making your game open source might help less skilled script kiddie figure out
how to cheat more easily in your game. I can&rsquo;t decide for you if the trade-off
is worth it for your game, but I can tell you that the benefits of making it
open are vast, and the efficacy of keeping it closed to prevent cheating is
questionable.</p>
<h2 id="but-my-code-is-embarrassing">But my code is embarrassing!</h2>
<p>So is everyone else&rsquo;s. 🙂 We all know that games are running up against tight
deadlines and clean code is not going to be the #1 priority. I assure you that
your community will be too busy having fun to judge you for the quality of your
code. The idea that it just needs to be &ldquo;cleaned up&rdquo; first is the death of many
projects which would otherwise have been made open source. If you feel this way,
you will probably never be satisfied, and thus you&rsquo;ll never open it. I assure
you: your game is ready to make open source, no matter what state it&rsquo;s in!</p>
<p>Bonus: Ethan Lee tipped me off to some truly awful code which was left in
VVVVVV, which you can freely browse on the <a href="https://github.com/TerryCavanagh/vvvvvv/tree/2.2">2.2 tag</a>. It&rsquo;s not
great, but you probably didn&rsquo;t know that — you only remember VVVVVV as a
critically acclaimed game. Game developers are working under tight constraints
and no one is judging them for that — we just want to have fun!</p>
<h2 id="so-what-do-i-need-to-do">So what do I need to do?</h2>
<p>Let&rsquo;s lay out the specific steps. You need to answer the following questions
first:</p>
<ul>
<li>Do I actually own the entire game? What parts am I allowed to open source?</li>
<li>Will I make the code source-available, copyleft, or permissively licensed?</li>
<li>And the assets? Proprietary? Creative Commons? If the latter, which version?</li>
</ul>
<p>If you&rsquo;re not sure what&rsquo;s best, I would recommend using the GPL for your code,
and CC-BY-SA for the assets. This allows for derivative works, so long as
they&rsquo;re also made open with a similar license. This enables the community to
build on your work, porting it to new platforms, building a thriving modding
community, and freely sharing your assets, ensuring an enduring legacy for your
game. If you&rsquo;d like to decide the details for yourself, review the comments
above once again and pick out the licenses you&rsquo;d like to use for each before
moving on.</p>
<p>If you need help with any of these steps, or have any questions, please <a href="mailto:sir@cmpwn.com">send me
an email</a>, and I will help you to the best of my ability.</p>
<p><strong>Publishing the source code</strong></p>
<p>Prepare an archive of your source code, and add the license file. If you went
with the source-available approach, simply write &ldquo;Copyright ©
&lt;<em>you</em>&gt; &lt;<em>current year</em>&gt;. All rights reserved.&rdquo; into a text file
named LICENSE. If you chose something else, copy the license text into a
LICENSE file.</p>
<p>If you want this over with quickly, just stick the code and license into a zip
file or a tarball and drop it on your website. A better approach, if you have
the patience, would be to publish it as a git repository. If you already use
version control, you may want to consider carefully if you want to publish your
full version control history — the answer might be &ldquo;yes&rdquo;, but if you&rsquo;re
unsure, the answer is probably &ldquo;no&rdquo;. Just make a copy of the code, delete the
.git directory, and import it into a new repository if you need to.</p>
<p>Double check that you aren&rsquo;t checking in any artifacts — assets,
executables, libraries, etc — and then push it to the hosting service of
your choice. GitHub is a popular choice, but I would selfishly recommend
<a href="https://sourcehut.org">sourcehut</a> as well. If you have time, write a little
README file which gives an introduction to the project as well.</p>
<p><strong>Publishing the assets</strong></p>
<p>If you choose to leave the assets proprietary, then there are no further steps.
Players can figure out how to extract the assets from their purchased game.</p>
<p>If you choose to make them open, prepare an archive of your assets. Include a
copy of the license you choose — e.g. which Creative Commons license you
used — and drop it into a zip file or a tarball or something similar.
Stick this on your website, and if you&rsquo;re feeling generous, prepare some
instructions for how to incorporate the asset bundle into the game once a player
compiles your code.</p>
<p><strong>Tell the world!</strong></p>
<p>Let everyone know that you&rsquo;ve made your game open source! Write a little blog
post, link to the source and assets, and enjoy a little bit more of the
limelight while the press and the community thanks you for your contribution.</p>
<p>One final request on this note: if you choose the source-available approach,
please refer to it as such in your public statements. Source available is <em>not</em>
the same thing as &ldquo;open source&rdquo;, and the distinction is important.</p>
<p>And now it&rsquo;s my turn to thank you: I&rsquo;m so happy that you&rsquo;ve released your game
as an open source project! The community is much richer for your contribution to
it, and I hope that your game will live on for many years to come, both in self
through ports and mods, and in spirit through its contributions to future games.
You&rsquo;ve done a wonderful thing. Thank you!</p>
<p>If you found this guide helpful in publishing your game, please <a href="mailto:sir@cmpwn.com">email
me</a> so I can play it!</p>
<hr>
<p>List of FOSS games inspired by this guide:</p>
<ul>
<li><a href="https://www.usebox.net/jjm/blog/castaway-source-code/">Castaway</a></li>
<li><a href="https://www.usebox.net/jjm/blog/the-return-of-traxtor-cpc-source-code/">The Return of Traxtor</a></li>
<li>Yours?</li>
</ul>]]></description><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate></item><item><title>We are building a new systems programming language</title><link>https://drewdevault.com/2021/03/19/A-new-systems-language.html</link><description><![CDATA[<p>It&rsquo;s an open secret: the &ldquo;secret project&rdquo; I&rsquo;ve been talking about is a new
systems programming language. It&rsquo;s been underway since December &lsquo;19, and we hope
to release the first version in early 2022. The language is pretty small —
we have a mostly complete specification which clocks in at 60 pages. It has
manual memory management, no runtime, and it uses a superset of the C ABI,
making it easy to link with libraries and C code. It should be suitable almost
anywhere C is useful: compilers, system utilities, operating systems, network
servers and clients, and so on.</p>
<!--
Hello, clever reader :) I was too lazy to make a dedicated build of Hugo with a
fake name for the language. Since you bothered to check, head to
https://harelang.org for the rest of the details. Please keep it to yourself!
-->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hare" data-lang="hare"><span class="line"><span class="cl"><span class="kn">use</span><span class="w"> </span><span class="n">io</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">const</span><span class="w"> </span><span class="n">greetings</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="s">&#34;Hello, world!&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="s">&#34;¡Hola Mundo!&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="s">&#34;Γειά σου Κόσμε!&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="s">&#34;Привет мир!&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="s">&#34;こんにちは世界！&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0z</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">len</span><span class="p">(</span><span class="n">greetings</span><span class="p">);</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">io</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="n">greetings</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>We could compare our language to many other languages, but let&rsquo;s start with how
it compares to C:</p>
<ul>
<li>More robust error handling via tagged unions</li>
<li>Improved, Unicode-aware string support</li>
<li>Memory safe array, slice, and pointer types (and unsafe versions, if needed)</li>
<li>Direct compatibility with the C ABI for trivial C interop</li>
<li>A simpler, context-free, expression-oriented syntax</li>
<li>A standard library free of the constraints of POSIX or the C standard</li>
</ul>
<p>Our language currently supports Linux on x86_64 or aarch64, and we plan on
expanding this to the BSDs, Haiku, and Plan 9; as well as i686, riscv64 and
riscv32, and ppc64 before the release.</p>
<p>I plan to continue keeping the other details a secret until the release —
we want the first release to be a complete, stable, production-ready programming
language with all of the trimmings. The first time most people will hear about
this language will also be the first time they can ship working code with it.</p>
<p>However, if you want to get involved sooner, there&rsquo;s a way: we need your help.
So far, we&rsquo;ve written most of the spec, the first of two compilers, and about
15,000 lines of the standard library. The standard library is what needs the
most help, and I&rsquo;m seeking volunteers to get involved.</p>
<p>The standard library mandate begins with the following:</p>
<blockquote>
<p>The <span style="color: transparent">xxxx</span> standard library shall provide:</p>
<ol>
<li>Useful features to complement <span style="color: transparent">xxxx</span> language features</li>
<li>An interface to the host operating system</li>
<li>Implementations of broadly useful algorithms</li>
<li>Implementations of broadly useful formats and protocols</li>
<li>Introspective meta-features for <span style="color: transparent">xxxx</span>-aware programs</li>
</ol>
<p>Each of these services shall:</p>
<ol>
<li>Have a concise and straightforward interface</li>
<li>Correctly and completely implement the useful subset of the required behavior</li>
<li>Provide complete documentation for each exported symbol</li>
<li>Be sufficiently tested to provide confidence in the implementation</li>
</ol></blockquote>
<p>We have a number of focus areas for standard library development. I expect most
contributors, at least at first, to stick to one or two of these areas. The
focus areas we&rsquo;re looking into now are:</p>
<dl>
  <dt>Algorithms</dt>
  <dd>Sorting • compression • math • etc</dd>
  <dt>Cryptography</dt>
  <dd>Hashing • encryption • key derivation • TLS • etc</dd>
  <dt>Date & time support</dt>
  <dd>Parsing • formatting • arithmetic • timers • etc</dd>
  <dt>Debugging tools</dt>
  <dd>ELF and DWARF support • vDSO • dynamic loading • etc</dd>
  <dt>Formats & encodings</dt>
  <dd>JSON • XML • HTML • MIME • RFC 2822 • tar • etc</dd>
  <dt><span style="color: transparent">xxxx</span> language support</dt>
  <dd>Parsing • type checker • hosted toolchain • etc</dd>
  <dt>Networking</dt>
  <dd>IP & CIDR handling • sockets • DNS resolver • HTTP • etc</dd>
  <dt>Platform support</dt>
  <dd>New platforms and architectures • OS-specific features</dd>
  <dt>String manipulation</dt>
  <dd>Search, replace • Unicode • Regex • etc</dd>
  <dt>Unix support</dt>
  <dd>chmod • mkfifo • passwd • setuid • TTY management • etc</dd>
</dl>
<p>If any of this sounds up your alley, we&rsquo;d love your help! Please <a href="mailto:sir@cmpwn.com">write me an
email</a> describing your interest areas and previous systems
programming experience.</p>
<p><strong>Update 2021-03-20</strong>: We&rsquo;re targeting the first release in early 2022, not 2021.</p>]]></description><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate></item><item><title>Status update, March 2021</title><link>https://drewdevault.com/2021/03/15/Status-update-March-2021.html</link><description><![CDATA[<p>After the brief illusion of spring, this morning meets us with a cold apartment
indoors and fierce winds outdoors. Today concludes a productive month, mainly
for the secret project and for sourcehut, but also marked by progress in some
smaller projects as well. I&rsquo;ll start with those smaller projects.</p>
<p>I have written a feed reader for Gemini, which is (1) <a href="https://sr.ht/~sircmpwn/gemreader">free
software</a>, and (2) <a href="gemini://feeds.drewdevault.com">available as a free
hosted service</a>. Big thanks to adnano, the
author of the <a href="https://sr.ht/~adnano/go-gemini">go-gemini</a> library, which has
been very helpful for many of my Gemini-related exploits, and who has been a
great collaborator. I also used it to provide Gemini support for the new
<a href="https://srht.site">pages.sr.ht</a>, which offers static web and gemini hosting for
sr.ht users. I also updated <a href="https://sr.ht/~sircmpwn/gmni">gmni</a> to use BearSSL
instead of OpenSSL this month.</p>
<p><a href="https://godocs.io">godocs.io</a> has been enjoying continued improvements, mainly
thanks again to adnano. Heaps of obsolete interfaces and cruft have been
excised, not only making it lighter for godocs.io, but also making our <a href="https://git.sr.ht/~sircmpwn/gddo">gddo
fork</a> much easier for you to run yourself.
Adnan hopes to have first-class support for Go modules working soon, which will
bring us up to feature parity with pkg.go.dev.</p>
<p>There&rsquo;s some sourcehut news as well, but I&rsquo;ll leave that for the &ldquo;What&rsquo;s
cooking&rdquo; later today. Until next time!</p>
<details>
  <summary>...</summary>
<p>Progress on the secret project has been phenomenal. In the last month, the
standard library has doubled in size, and this weekend, we finished the
self-hosted build driver. We are about 1,000 lines of code shy of having more
code written in <span style="background: black;">xxxx</span>
than in C. Here&rsquo;s the build driver compiling and running itself several times:</p>
<pre>
$ <span style="background: black;">    </span> run ./cmd/<span style="background: black;">    </span> run ./cmd/<span style="background: black;">    </span> run -h
run: compiles and runs <span style="background: black;">    </span> programs

Usage: run [-v]
	 [-D &lt;ident:type=value&gt;]
	 [-j &lt;jobs&gt;]
	 [-l &lt;name&gt;]
	 [-T &lt;tags...&gt;]
	 [-X &lt;tags...&gt;]
	 path args...

-v: print executed commands
-D &lt;ident:type=value&gt;: define a constant
-j &lt;jobs&gt;: set parallelism for build
-l &lt;name&gt;: link with a system library
-T &lt;tags...&gt;: set build tags
-X &lt;tags...&gt;: unset build tags</pre>
<p>The call for help last month was swiftly answered, and we have 7 or 8 new
people working on the project now. We&rsquo;ve completed enough work to unblock many
workstreams, which will allow these new contributors to work in parallel on
different areas of interest, which should substantially speed up progress.</p>
</details>]]></description><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate></item><item><title>The corporate surveillance machine is killing people</title><link>https://drewdevault.com/2021/03/06/Corporate-surveillance-murder.html</link><description><![CDATA[<p>I have never been angrier about the corporate surveillance complex, which I have
rallied against for <em>years</em>, than I am today. Buying and selling user&rsquo;s private
information on the open market is bad enough for the obvious reasons, but today,
I learned that the depths of depravity this market will descend to are without
limit. Today I am more angry and ashamed at this industry than I have ever been.
Corporate surveillance and adtech has turned your phone into an informant
against you and brought about the actual <strong>murder</strong> of the user.</p>
<p><a href="https://www.vice.com/en/article/y3g97x/location-data-apps-drone-strikes-iowa-national-guard">Vice: Military Unit That Conducts Drone Strikes Bought Location Data From Ordinary Apps</a></p>
<p>Say you&rsquo;re a Muslim. You download some apps for reading the Quran and
participating in Muslim-oriented social networks. These ads steal whatever
personal information it can get its hands on, through any means available, and
sell it to <a href="https://trademarks.justia.com/874/53/locate-87453515.html">Locate X</a>, who stores every GPS location your phone has visited
and tags it as being associated with a Muslim. This is used, say, to place
Muslim-targeted ads on billboards in Muslim-dense areas. It&rsquo;s also sold to the
Iowa National Guard, who uses it to conduct drone strikes. The app you installed
is selling your GPS data so it can be used to <em>kill you</em>.</p>
<p>For a long time, I have preached &ldquo;respect the user&rdquo;. I want us, as programmers,
to treat the user with the same standards of common decency and respect we&rsquo;d
afford to our neighbors. It seems I have to revise my sermon to &ldquo;don&rsquo;t murder
the user&rdquo;! If you work at a company which surveilles its users, <a href="https://drewdevault.com/2020/05/05/We-are-complicit-in-our-employers-deeds.html">you are
complicit</a> in these murders. You have written software which is used to
<em>murder people</em>.</p>
<p>This industry is in severe need of a moral health check. You, the reader of
this article, need to take personal responsibility for what your code is doing.
Your boss isn&rsquo;t going to. Do you really know what that database is being used
for, or who it&rsquo;s being sold to, or who it <em>might</em> be sold to in the future? Most
companies include their hoard of private, personal information about their users
as part of their valuation. Do you have stock options, by the way?</p>
<p>I&rsquo;ve often heard the excuse that employees of large surveillance companies &ldquo;want
to feed their families, like anyone else&rdquo;. Well, thanks to your work, a child
you&rsquo;ve never met was orphaned, and doesn&rsquo;t have a family anymore. Who&rsquo;s going to
feed them? Is there really no other way for you to support your family?</p>
<p>Don&rsquo;t fucking kill your users.</p>]]></description><pubDate>Sat, 6 Mar 2021 00:00:00 +0000</pubDate></item><item><title>To make money in FOSS, build a business first</title><link>https://drewdevault.com/2021/03/03/To-make-money-in-FOSS-build-a-business.html</link><description><![CDATA[<p>I&rsquo;ve <a href="https://drewdevault.com/2020/11/20/A-few-ways-to-make-money-in-FOSS.html">written about</a> making money in free and open source software before,
but it&rsquo;s a deep topic that merits additional discussion. While previously I
focused on what an individual can do in order to build a career in FOSS, but
today I want to talk about how you can build a sustainable business in FOSS.</p>
<p>It&rsquo;s a common mistake to do this the wrong way around: build the software, then
the business. Because FOSS <a href="https://drewdevault.com/2021/01/20/FOSS-is-to-surrender-your-monopoly.html">requires you to surrender your sole monetization
rights</a>, building the software first and worrying about the money later puts
you at a huge risk of losing your first-mover advantage. If you&rsquo;re just making a
project which is useful to you and you don&rsquo;t want the overhead of running a
business, then that may be totally okay — you can just build the software
without sweating the business issues. If you choose this path, however, be aware
that the promise of free and open source software entitles anyone else to build
that business without you. If you lapse in your business-building efforts and
your software project starts making someone else money, then they&rsquo;re not at
fault for &ldquo;taking your work&rdquo; — you gave it to them.</p>
<p>I&rsquo;ve often said that you can make money in FOSS, but not usually by accident.
Don&rsquo;t just build your project and wait for the big bucks to start rolling in.
You need to take the business-building seriously from the start. What is the
organization of your company? Who will you work with? What kind of clients or
customers will you court? Do you know how to reach them? How much they&rsquo;re
willing to pay? What you will sell? Do you have a budget? If you want to make
money from your project, sit down and answer these questions seriously.</p>
<p>Different kinds of software projects make money in different ways. Some projects
with enterprise-oriented software may be able to sell support contracts. Some
can sell consultants to work on integration and feature development. Maybe you
can write books about your software, or teach courses on it. Perhaps your
software, like the kind <a href="https://sourcehut.org">my company</a> builds, is
well-suited to being sold as a service. Some projects simply solicit donations,
but this is the most difficult approach.</p>
<p>Whatever you choose to do, you need to choose it deliberately. You need to
incorporate your business, hire an accountant, and do a lot of boring stuff
which has nothing to do with the software you want to write. And if you skip
this step, someone else is entitled to do all of this boring work, then stick
your software on top of it and make a killing without you.</p>]]></description><pubDate>Wed, 3 Mar 2021 00:00:00 +0000</pubDate></item><item><title>Gmail is a huge source of spam</title><link>https://drewdevault.com/2021/02/25/Gmail-is-a-huge-source-of-spam.html</link><description><![CDATA[<p>5× as many spam registrations on sourcehut are from gmail than from the
second-largest offender.</p>
<pre tabindex="0"><code># SELECT
  SPLIT_PART(email, &#39;@&#39;, 2) as domain, count(*) as count
  FROM &#34;user&#34;
  WHERE user_type = &#39;suspended&#39;
  GROUP BY domain
  ORDER BY count DESC;
          domain           | count
---------------------------+-------
 gmail.com                 |   119
 qq.com                    |    26
 mail.ru                   |    17
 mailinator.com            |    10
 yopmail.com               |     6
 aol.com                   |     6
 yahoo.com                 |     6
[...more omitted...]
</code></pre><p>This is just the ones which got through: most spam registrations are detected
and ignored before they make it to the database.</p>
<p>A huge number of spam emails I recieve in my personal inbox originate from
@gmail.com, and often they arrive in my inbox unscathed (as opposed to going to
Junk) because Gmail is considered a reputable mail provider. My colleague
estimates that between 15% and 25% of the spam emails sent to a mailing list he
administrates comes from Gmail.</p>
<p>One might argue that, because Gmail is the world&rsquo;s largest email provider, it&rsquo;s
natural to expect that they would have the largest volume of spam simply because
they have proportionally more users who might use it for spam. I would argue
that this instead tells us that they have the largest responsibility to curtail
spam on their platform.</p>
<p>I&rsquo;ve forwarded many, many reports to <a href="mailto:abuse@gmail.com">abuse@gmail.com</a>, but they&rsquo;ve never followed
up and the problem has not become any better. I have had half a mind to block
Gmail registrations on sourcehut outright, but about 41% of all registrations
use Gmail.</p>
<p>It bears repeating that anyone with any level of technical expertise ought to
know better than to use Gmail. I usually recommend
<a href="https://www.migadu.com">Migadu</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, but there are many options to choose from.
If you&rsquo;re worried about mail deliverability issues, don&rsquo;t be — it&rsquo;s more
or less a myth in $CURRENTYEAR. If you set up
<abbr title="DomainKeys Identified Mail, an means of verifying message authenticity">DKIM</abbr>
properly and unlist your IP address from the
<abbr title="DNS blocklists">DNSBL</abbr>s (a simple process), then your mails
will get through.</p>
<p>In case you&rsquo;re wondering, the dis-award for second-worst goes to Amazon SES.
They don&rsquo;t register on sourcehut (it&rsquo;s outgoing only, so that makes sense), but
I see them often in my personal inbox. However, SES only appears at a rate of
about a tenth of the gmail spam, and they appear to actually listen to my abuse
reports, so I can more or less forgive them for it.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Full disclosure: sourcehut has a business relationship with Migadu, though I&rsquo;ve recommended them since long before we met.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate></item><item><title>A great alternative is rarely fatter than what it aims to replace</title><link>https://drewdevault.com/2021/02/21/On-the-traits-of-good-replacements.html</link><description><![CDATA[<p>This is not always true, but in my experience, it tends to hold up. We often
build or evaluate tools which aim to replace something kludgy^Wvenerable.
Common examples include shells, programming languages, system utilities, and so
on. Rust, Zig, etc, are taking on C in this manner; so too does zsh, fish, and
oil take on bash, which in turn takes on the Bourne shell. There are many
examples.</p>
<p>All of these tools are fine in their own respects, but they have all failed to
completely supplant the software they&rsquo;re seeking to improve upon.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> What these
projects have in common is that they <em>expand</em> on the ideas of their
predecessors, rather than <em>refining</em> them. A truly great alternative finds the
nugget of truth at the center of the idea, cuts out the cruft, and solves the
same problem with less.</p>
<p>This is one reason I like Alpine Linux, for example. It&rsquo;s not really aiming to
replace any distro in particular so much as it competes with the Linux ecosystem
as a whole. Alpine does this by being <em>simpler</em> than the rest: it&rsquo;s the only
Linux system I can fit more or less entirely in my head. Compare this to the
most common approach: &ldquo;let&rsquo;s make a Debian derivative!&rdquo; It kind of worked for
Ubuntu, less so for everyone else. The C library Alpine ships, <a href="https://musl.libc.org">musl
libc</a>, is another example: it aims to replace glibc by
being leaner and meaner, <a href="https://drewdevault.com/2020/09/25/A-story-of-two-libcs.html">and I&rsquo;ve talked about its success in this respect
before</a>.</p>
<p>Go is a programming language which has done relatively well in this respect. It
aimed to fill a bit of a void in the high-performance internet infrastructure
systems programming niche,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> and it is markedly simpler than most of the
other tools in its line of work. It takes the opportunity to add a few
innovations — its big risk is its novel concurrency model — but Go
balances this with a level of simplicity in other respects which is unchallenged
among its contemporaries,<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> and a commitment to that simplicity which has
endured for years.<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p>
<p>There are many other examples. UTF-8 is a simple, universal approach which
smooths over the idiosyncrasies of the encoding zoo which pre-dates it, and has
more-or-less rendered its alternatives obsolete. JSON has almost completely
replaced XML, and its grammar famously fits on a business card.<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> On the other
hand, when zsh started as a superset of bash, it crippled its ability to compete
on &ldquo;having less warts than bash&rdquo;.</p>
<p>Rust is more vague in its inspirations, and does not start as a superset of
anything. It has, however, done a poor job of scope management, and is
significantly more complex than many of the languages it competes with, notably
C and Go. For this reason, it struggles to root out the hold-outs in those
domains, and it suffers for the difficulty in porting it to new platforms, which
limits its penetration into a lot of domains that C is still thriving in.
However, it succeeds in being much simpler than C++, and I expect that it will
render C++ obsolete in the coming years as such.<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup></p>
<p>In computing, we make do with a hodge podge of hacks and kludges which, at best,
approximate the solutions to the problems that computing presents us. If you
start with one such hack as the basis of a supposed replacement and build <em>more</em>
on top of it, you will inherit the warts, and you may find it difficult to rid
yourself of them. If, instead, you question the premise of the software,
interrogate the underlying problem it&rsquo;s trying to solve, and apply your
insights, plus a healthy dose of hindsight, you may isolate what&rsquo;s right from
what&rsquo;s superfluous, and your simplified solution just might end up replacing the
cruft of yore.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Some of the listed examples have not given up and would prefer that I say something to the effect of &ldquo;but the jury is still out&rdquo; here.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>That&rsquo;s a lot of adjectives!&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>More concisely, I think of Go as an &ldquo;internet programming language&rdquo;, distinct from the systems programming languages that inspired it. Its design shines especially in this context, but its value-add is less pronounced for other tasks in the systems programming domain - compilers, operating systems, etc.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://golang.org/ref/spec">The Go spec</a> is quite concise and has changed very little since Go&rsquo;s inception. Go is also unique among its contemporaries for (1) writing a spec which (2) supports the development of multiple competing implementations.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Past tense, unfortunately, now that Go 2 is getting stirred up.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>It is possible that JSON has achieved <em>too much</em> success in this respect, as it has found its way into a lot of use-cases for which it is less than ideal.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Despite my infamous distaste for Rust, long-time readers will know that where I have distaste for Rust, I have passionate scorn for C++. I&rsquo;m quite glad to see Rust taking it on, and I hope very much that it succeeds in this respect.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate></item><item><title>Status update, February 2021</title><link>https://drewdevault.com/2021/02/15/Status-update-February-2021.html</link><description><![CDATA[<p>
Salutations! It's officially a year of pandemic life. I hear the vaccine
distribution is going well, so hopefully there won't be another year of this. In
the meanwhile, I've been working hard on free software, what with having little
else to do. However, I'm afraid I cannot tell you about most of it!

<p>
I've been working on todo.sr.ht's GraphQL API, and it's going quite well. I hope
to ship a working read-only version later this month. There have been a number
of bug fixes and rote maintenance work on sr.ht as well, but nothing
particularly exciting. We did upgrade everything for Alpine 3.13, which went off
without a hitch. Anyway, I'll go over the minor details in the sr.ht "what's
cooking" post later today.

<p>
The rest of the progress was made in secret. Secret! You will have to live in
ignorance for now. Sorry!

<details>
<summary>(unless you click this)</summary>
<p>Here's a peek at our progress:</p>
<pre>
use fmt;
use io;
use os;

export fn main() void = {
        if (len(os::args) == 1) match (io::copy(os::stdout, os::stdin)) {
                err: io::error =&gt; fmt::fatal("Error copying &lt;stdin&gt;: {}",
                        io::errstr(err)),
                size =&gt; return,
        };

        for (let i = 1z; i &lt; len(os::args); i += 1) {
                let f = match (os::open(os::args[i], io::mode::RDONLY)) {
                        s: *io::stream =&gt; s,
                        err: io::error =&gt; fmt::fatal("Error opening {}: {}",
                                os::args[i], io::errstr(err)),
                };
                defer io::close(f);

                match (io::copy(os::stdout, f)) {
                        err: io::error =&gt; fmt::fatal("Error copying {}: {}",
                                os::args[i], io::errstr(err)),
                        size =&gt; void,
                };
        };
};
</pre>
<p>
I'm looking for a few volunteers to get involved and help flesh out the standard
library. If you are interested, please email
<a href="mailto:sir@cmpwn.com">sir@cmpwn.com</a> to express your interest,
along with your sr.ht username and a few words about your systems programming
experience &mdash; languages you're comfortable with, projects you've worked
on, platforms you grok, etc.
</p>
</details>]]></description><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate></item><item><title>How to make your downstream users happy</title><link>https://drewdevault.com/2021/02/09/How-to-make-your-downstreams-happy.html</link><description><![CDATA[<p>There are a number of things that your FOSS project can be doing which will make
the lives of your downstream users easier, particularly if you&rsquo;re writing a
library or programmer-facing tooling. Many of your downstreams (Linux distros,
pkgsrc, corporate users, etc) are dealing with lots of packages, and some minor
tweaks to your workflow will help them out a lot.</p>
<p>The first thing to do is <em>avoid</em> using any build system or packaging system
which is not the norm for your language. Also avoid incorporating information
into your build which relies on being in your git repo — most packagers
prefer to work with tarball snapshots, or to fetch your package from e.g. PyPI.
These two issues are definitely the worst offenders. If you do have to use a
custom build system, take your time to document it thoroughly, so that users who
run into problems are well-equipped to address them. The typical build system or
packaging process in use for your language already addressed most of those edge
cases long ago, which is why we like it better. If you must fetch, say, version
information from git, then please add a fallback, such as an environment
variable.</p>
<p>Speaking of environment variables, another good one to support is
<a href="https://reproducible-builds.org/docs/source-date-epoch/">SOURCE_DATE_EPOCH</a>,
for anything where the current date or time is incorporated into your build
output. Many distros are striving for <em>reproducible</em> builds these days, which
involves being able to run a build twice, or by two independent parties, and
arrive at an identical checksum-verifiable result. You can probably imagine some
other ways to prevent issues here — don&rsquo;t incorporate the full path to
each file in your logs, for instance. There are more recommendations on the
website linked earlier.</p>
<p>Though we don&rsquo;t like to rely on it as part of the formal packaging process, a
good git discipline will also help us with the informal parts. You may already
be using <a href="https://git-scm.com/docs/git-tag">git tags</a> for your releases — consider putting a changelog
into your annotated tags (git tag -a). If you have <a href="https://drewdevault.com/2019/02/25/Using-git-with-discipline.html">good commit discipline</a>
in your project, then you can easily use <a href="https://git-scm.com/docs/git-shortlog">git shortlog</a> to generate such a
changelog from your commit messages. This helps us understand what we can expect
when upgrading, which helps incentivize us to upgrade in the first place. In
<a href="https://drewdevault.com/2019/10/12/how-to-fuck-up-releases.html">How to fuck up software releases</a>, I wrote about my <a href="https://git.sr.ht/~sircmpwn/dotfiles/tree/master/bin/semver">semver</a> tool, which
you may find helpful in automating this process. It can also help you avoid
forgetting to do things like update the version number somewhere in the code.</p>
<iframe src="https://asciinema.org/a/nzBvuMXjUMsoewLnrbTm7E28O/embed?" id="asciicast-iframe-nzBvuMXjUMsoewLnrbTm7E28O" name="asciicast-iframe-nzBvuMXjUMsoewLnrbTm7E28O" scrolling="no" allowfullscreen="true" style="overflow: hidden; border: 0px; width: 540px; float: none; visibility: visible; height: 404px;"></iframe>
<p>In short, to make your downstreams happy:</p>
<ol>
<li>Don&rsquo;t rock the boat on builds and packaging.</li>
<li>Don&rsquo;t expect your code to always be in a git repo.</li>
<li>Consider reproducible builds.</li>
<li>Stick a detailed changelog in your annotated tag — which is easy if you
have good commit discipline.</li>
</ol>
<p>Overall, this is pretty easy stuff, and good practices which pay off in other
respects as well. Here&rsquo;s a big &ldquo;thanks&rdquo; in advance from your future downstreams
for your efforts in this regard!</p>]]></description><pubDate>Tue, 9 Feb 2021 00:00:00 +0000</pubDate></item><item><title>Use open platforms — or else</title><link>https://drewdevault.com/2021/01/28/Use-open-platforms-or-else.html</link><description><![CDATA[<p>The ongoing events around <a href="https://old.reddit.com/r/wallstreetbets">/r/wallstreetbets</a> teaches us, once again, about
the value of open platforms, and the tremendous <em>risk</em> involved in using
proprietary platforms. The economic elites who control those proprietary
platforms, backed by their venture capital interests, <em>will</em> shut us down if we
threaten them. We&rsquo;re taking serious risk by casting our lot with them.</p>
<p><a href="https://en.wikipedia.org/wiki/Discord_(software)">Discord</a>, a proprietary instant messaging and VoIP platform, kicked out the
/r/WSB community yesterday. They claimed it was due to spam and abuse from bots.
These are convenient excuses when considered in the broader context of Discord&rsquo;s
conflict of interest, between its retail investor users and its wall-street
investor backers. However, even if we take their explanation at face value, we
can easily question Discord&rsquo;s draconian policies about its proprietary chat
protocol. They have a history of cracking down on third-party bots and clients
with the same excuses of preventing spam and abuse. If Discord accepts
responsibility for preventing spam and abuse, then why are they deplatforming
users when they, Discord, failed to prevent it?</p>
<p>It&rsquo;s all a lie. They use a proprietary protocol and crack down on third-party
implementations because they demand total control over their users. They
deplatformed /r/WSB because they were financially threatened by them. Discord
acts in their own interests, including when they are against the interests of
their users. In the words of Rohan Kumar, they&rsquo;re trying to <a href="https://seirdy.one/2021/01/27/whatsapp-and-the-domestication-of-users.html">domesticate their
users</a>. It&rsquo;s the same with every corporate-operated platform. Betting that
Reddit will ultimately shut down /r/WSB is probably a stronger bet than buying
GME!</p>
<p>But there is another way: free and open platforms, protocols, and standards.
Instead of Discord, I could recommend <a href="https://matrix.org">Matrix</a>,
<a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a>, or
<a href="https://www.mumble.info">Mumble</a>. These are not based on central corporate
ownership, but instead on publicly available standards that anyone can build
on top of. The ownership of these platforms is distributed between its users,
and thus aligned with their incentives.</p>
<p>Federation is also a really compelling solution. Unlike Discord and Reddit,
which are centrally owned and operated, federated software calls for many
independent server operators to run instances which are responsible for tens or
hundreds of users each. Each of these servers then use standardized protocols to
communicate with each other, forming one cohesive, distributed social network.
Matrix and IRC are both federated protocols, for example. Others include
<a href="https://joinmastodon.org/">Mastodon</a>, which is similar to Twitter in function;
<a href="https://joinpeertube.org/en">PeerTube</a>, for hosting videos and live streams;
and <a href="https://join.lemmy.ml/">Lemmy</a>, which is a federated equivalent of Reddit.</p>
<p>These are the alternatives. These platforms lack that crucial conflict of
interest which is getting us kicked off of the corporate owned platforms. These
are the facts: open platforms are the only ones align with the interests of
their users, and closed platforms exploit their users. Once you recognize this,
you should jump ship <em>before</em> you&rsquo;re deplatformed, or else you&rsquo;re risking your
ability to organize yourselves to move to another platform. Use open platforms —
or else. Do it today.</p>]]></description><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate></item><item><title>Open source means surrendering your monopoly over commercial exploitation</title><link>https://drewdevault.com/2021/01/20/FOSS-is-to-surrender-your-monopoly.html</link><description><![CDATA[<p>Participation in open source requires you to surrender your monopoly over
commercial exploitation. This is a profound point about free and open source
software which seems to be causing a lot of companies to struggle with their
understanding of the philosophy of FOSS, and it&rsquo;s worth addressing on its own.
It has been apparent for some years now that FOSS is eating the software world,
and corporations are trying to figure out their relationship with it. One fact
that you will have to confront in this position is that you cannot monopolize
the commercial potential of free and open source software.</p>
<p>The term &ldquo;open source&rdquo; is broadly accepted as being defined by the <a href="https://opensource.org/osd">Open Source
Definition</a>, and its very first requirement is the following:</p>
<blockquote>
<p>[The distribution terms of open-source software] shall not restrict any party
from selling or giving away the software as a component of an aggregate
software distribution containing programs from several different sources. The
license shall not require a royalty or other fee for such sale.</p></blockquote>
<p>That covers the &ldquo;OSS&rdquo; in &ldquo;FOSS&rdquo;. The &ldquo;F&rdquo; refers to &ldquo;free software&rdquo;, and is
covered by <a href="https://www.gnu.org/philosophy/free-sw.html">this Free Software Foundation resource</a>:</p>
<blockquote>
<p>[A program is free software if the program&rsquo;s users have] the freedom to run
the program as they wish, for any purpose, [&hellip; and to &hellip;] redistribute
copies.</p></blockquote>
<p>It further clarifies the commercial aspect of this freedom explicitly:</p>
<blockquote>
<p>“Free software” does not mean “noncommercial”. A free program must be
available for commercial use, commercial development, and commercial
distribution. [&hellip;] Regardless of how you got your copies, you always have the
freedom to copy and change the software, [and] to sell copies.</p></blockquote>
<p>This is an essential, non-negotiable requirement of free and open-source
software, and a reality you must face if you want to reap the benefits of the
FOSS ecosystem. <em>Anyone</em> can monetize your code. That includes you, and me, all
of your contributors, your competitors, Amazon and Google, and everyone else.
This is a rejection of how intellectual property typically works —
copyright laws exist for the express purpose of creating an artificial monopoly
for your business, and FOSS licenses exist for the express purpose of breaking
it. If you&rsquo;re new to FOSS, it is going to be totally alien to your understanding
of IP ownership.</p>
<p>It&rsquo;s quite common for people other than you to make money from your free and
open source software works. Some will incorporate them into their own products
to sell, some will develop an expertise with it and sell their skills as a
consultant, some will re-package it in an easy-to-use fashion and charge people
for the service. Others might come up with even more creative ways to monetize
the software, like writing books about it. It will create wealth for everyone,
not just the original authors. And if you want it to create wealth for <em>you</em>,
you are responsible for figuring out how. Building a business requires more work
than just writing the software.</p>
<p>This makes sense in terms of karmic justice, as it were. One of the most
important advantages of making your software FOSS is that the global community
can contribute improvements back to it. The software becomes more than your
organization can make it alone, both through direct contributions to your code,
and through the community which blossoms around it. If the sum of its value is
no longer entirely accountable to your organization, is it not fair that the
commercial exploitation of that value shouldn&rsquo;t be entirely captured by your
organization, either? This is the deal that you make when you choose FOSS.</p>
<p>There are ways that you can influence how others use your FOSS software, mainly
having to do with making sure that everyone else keeps this same promise. You
cannot stop someone from making money from your software, but you <em>can</em> obligate
them to share their improvements with everyone else, which you can incorporate
back into the original product to make it more compelling for everyone. The <a href="https://www.gnu.org/licenses/">GPL
family of licenses</a> is designed for this purpose.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Furthermore, if your business is a consumer of free and open source software,
rather than a producer, you need to be aware that you may be subject to those
obligations. It&rsquo;s not a free lunch: you may be required to return your
improvements to the community. FOSS licenses are important, and you should make
it your business to understand them, both as a user, contributor, and author of
free and open source software.</p>
<p>FOSS is eating the world, and it&rsquo;s a very attractive choice for businesses for a
good reason. This is the reason. It increases wealth for everyone. Capitalism
concerns itself with making monopolies — FOSS instead concerns itself with
the socialized creation of software wealth.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If you want a brief introduction to GPL licenses, I have written <a href="https://man.sr.ht/license.md">a short guide for SourceHut users</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate></item><item><title>Elasticsearch does not belong to Elastic</title><link>https://drewdevault.com/2021/01/19/Elasticsearch-does-not-belong-to-Elastic.html</link><description><![CDATA[<p>Elasticsearch belongs to its 1,573 contributors, who retain their copyright, and
granted Elastic a license to distribute their work without restriction. This is
the loophole which Elastic exploited when they decided that Elasticsearch <a href="https://www.elastic.co/blog/licensing-change">would
no longer be open source</a>, a
loophole that they introduced with this very intention from the start. When you
read their announcement, don&rsquo;t be gaslit by their deceptive language: Elastic is
no longer open source, and this is a move against open source. It is not
&ldquo;doubling down on open&rdquo;. <strong>Elastic has spit in the face of every single one of
1,573 contributors, and everyone who gave Elastic their trust, loyalty, and
patronage</strong>. This is an Oracle-level move.</p>
<iframe
  width="560"
  height="315"
  src="https://www.youtube-nocookie.com/embed/-zRN7XLCRhc?start=2483"
  frameborder="0"
  allow="accelerometer; autoplay; gyroscope; picture-in-picture"
  allowfullscreen></iframe>
<p>
<a
  style="display: block; text-align: center"
  href="https://youtu.be/-zRN7XLCRhc?t=2483"
><small>Bryan Cantrill on OpenSolaris &mdash; YouTube</small></a>
<p>Many of those contributors were there because they believe in open source. Even
those who work for Elastic as their employees, who had their copyright taken
from them by their employer, work there because they believe in open source. I
am frequently asked, &ldquo;<a href="https://drewdevault.com/2020/11/20/A-few-ways-to-make-money-in-FOSS.html">how can I get paid to work in open source</a>&rdquo;, and one
of my answers is to recommend a job at companies like Elastic. People seek these
companies out because they want to be involved in open source.</p>
<p>Elastic was not having their lunch eaten by Amazon. They cleared half a billion
dollars last year. Don&rsquo;t gaslight us. Don&rsquo;t call your product &ldquo;free &amp; open&rdquo;,
deliberately misleading users by aping the language of the common phrase &ldquo;free &amp;
open source&rdquo;. You did this to get even more money, you did it to establish a
monopoly over Elasticsearch, and you did it in spite of the trust your community
gave you. Fuck you, Shay Banon.</p>
<p>I hope everyone reading will remember this as yet another lesson in the art of
<a href="https://drewdevault.com/2018/10/05/Dont-sign-a-CLA.html">never signing a CLA</a>.
Open source is a community endeavour. It&rsquo;s a committment to enter your work into
the commons, and to allow the community to collectively benefit from it —
even financially. Many people built careers and businesses out of Elasticsearch,
independently of Elastic, and were entitled to do so under the social contract
of open source. Including Amazon.</p>
<p>You don&rsquo;t own it. Everyone owns it. This is <em>why open source is valuable</em>. If
you want to play on the FOSS playing field, then you play by the goddamn rules.
If you aren&rsquo;t interested in that, then you&rsquo;re not interested in FOSS. You&rsquo;re
free to distribute your software any way you like, including under proprietary
or source-available license terms. But if you choose to make it FOSS, that means
something, and you have the moral obligation to uphold.</p>]]></description><pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate></item><item><title>Spooky action at a distance</title><link>https://drewdevault.com/2021/01/19/Spooky-code-at-a-distance.html</link><description><![CDATA[<p>Einstein famously characterized the strangeness of quantum mechanics as &ldquo;spooky
action at a distance&rdquo;, which, if I had to pick one phrase about physics to be my
favorite, would be a strong contender. I like to relate this to programming
language design: there are some language features which are similarly spooky.
Perhaps the most infamous of these is operator overloading. Consider the
following:</p>
<pre tabindex="0"><code>x + y
</code></pre><p>If this were written in C, without knowing anything other than the fact that
this code compiles correctly, I can tell you that x and y are numeric types, and
the result is their sum. I can even make an educated guess about the CPU
instructions which will be generated to perform this task. However, if this were
a language with operator overloading&hellip; who knows? What if x and y are some kind
of some Vector class? It could compile to this:</p>
<pre tabindex="0"><code>Vector::operator_plus(x, y)
</code></pre><p>The performance characteristics, consequences for debugging, and places to look
for bugs are considerably different than the code would suggest on the surface.
This function call is the &ldquo;spooky action&rdquo; — and the distance between the
&ldquo;+&rdquo; operator and the definition of its behavior is the &ldquo;distance&rdquo;.</p>
<p>Also consider if x and y are strings: maybe &ldquo;+&rdquo; means concatenation?
Concatenation often means allocation, which is a pretty important side-effect to
consider. Are you going to thrash the garbage collector by doing this? <em>Is</em>
there a garbage collector, or is this going to leak? Again, using C as an
example, this case would be explicit:</p>
<pre tabindex="0"><code>char *new = malloc(strlen(x) + strlen(y) + 1);
strcpy(new, x);
strcat(new, y);
</code></pre><p>If the filename of the last file you had open in your text editor ended in
<code>.rs</code>, you might be frothing at the mouth after reading this code. Strictly for
the purpose of illustrating my point, however, consider that everything which
happens here is explicit, opt-in to the writer, and obvious to the reader.</p>
<p>That said, C doesn&rsquo;t get off scott-free in this article. Consider the
following code:</p>
<pre tabindex="0"><code>int x = 10, y = 20;
int z = add(x, y);
printf(&#34;%d + %d = %d\n&#34;, x, y, z);
</code></pre><p>You may expect this to print out <code>10 + 20 = 30</code>, and you would be forgiven for
your naivety.</p>
<pre tabindex="0"><code>$ cc -o test test.c
$ ./test
30 + 20 = 30
</code></pre><p>The savvy reader may have already figured out the catch: add is not a function.</p>
<pre tabindex="0"><code>#define add(x, y) x += y
</code></pre><p>The spooky action is the mutation of x, and the distance is between the apparent
&ldquo;callsite&rdquo; and the macro definition. This is spooky because it betrays the
reader&rsquo;s expectations: it looks and smells like a function call, but it does
something which breaks the contract of function calls. Some languages do this
better, by giving macros an explicit syntax like <code>name!(args...)</code>, but,
personally, I still don&rsquo;t like it.</p>
<p>Language features like this are, like all others, a trade-off. But I&rsquo;m of the
opinion that this trade is unwise: you&rsquo;re wagering readability, predictability,
debuggability, and more. These features are toxic to anyone seeking stable,
robust code. They certainly have no place in systems programming.</p>]]></description><pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate></item><item><title>Status update, January 2021</title><link>https://drewdevault.com/2021/01/15/Status-update-January-2021.html</link><description><![CDATA[<p>
Hello from the future! My previous status update was last year, but it feels
like it was only a month ago. I hope you didn't miss my crappy jokes too much
during the long wait.

<p>
One of the advancements that I would like to mention this month is the general
availability of <a href="https://godocs.io">godocs.io</a>, which is a replacement for the
soon-to-be-obsolete godoc.org, based on a fork of their original codebase.
<a href="https://sr.ht/~sircmpwn/godocs.io">Our fork</a> has already attracted
interest from many contributors who wanted to work on godoc.org, but found the
Google CLA distasteful. We've been hard at work excising lots of Google crap,
rewriting the indexer to use PostgreSQL instead of GCP, and making the little
JavaScript bits more optional &amp; more conservative in their implementation.
We also plan to update it with first-class support for Go modules, which was
never added to the upstream gddo codebase. Beyond this, we do not plan on
making any large-scale changes: we just want godoc.org to keep being a thing.
Enjoy!

<p>
On SourceHut, the first point of note is the new dark theme, which is
automatically enabled when your user-agent configures
<code>prefers-color-scheme: dark</code>. It has gone through a couple of
iterations of refinement, and I have a few more changes queued up for my next
round of improvements. Please let me know if you notice anything unusual!
Additionally, I broke ground on the todo.sr.ht API 2.0 implementation this
month. It required some minor changes to our underlying GraphQL approach, but
in general it should be fairly straightforward &mdash; albeit time consuming
&mdash; to implement. Ludovic has also started working on an API 2.0 branch for
hg.sr.ht, which I plan on reviewing shortly.

<p>
Small projects have enjoyed some improvements as well.
<a href="https://sr.ht/~sircmpwn/mkproof/">mkproof</a> grew multi-processor
support and had its default difficulty tweaked accordingly &mdash; thanks, Tom!
Zach DeCook and Nolan Prescott also sent some bugfixes for
<a href="https://sr.ht/~sircmpwn/gmnisrv/">gmnisrv</a>, and René Wagner and
Giuseppe Lumia both helped fix some issues with
<a href="https://sr.ht/~sircmpwn/gmni">gmni</a> as well. Jason Phan sent an
improvement for <a href="https://sr.ht/~sircmpwn/dowork">dowork</a> which adds
random jitter to the exponential backoff calculation. Thanks to all of these
folks for their help!

<p>
That's all for today. Thanks again for your support and attention, and I'll see
you again soon!

<details>
<summary>...</summary>
<p>I have actually been working on this a lot this month. Progress is good.
<pre>fn measurements() void = {
	const x = "Hello!";
	assert(len(x) == 6z);
	assert(size(str) == size(*u8) + size(size) * 2z);
	const align: size =
		if (size(*u8) &gt; size(size)) size(*u8)
		else size(size);
	assert(&amp;x: uintptr: size % align == 0z);
};

fn charptr() void = {
	const x = "Hello!";
	const y = x: *const char;
	const z = y: *[*]u8;
	const expected = ['H', 'e', 'l', 'l', 'o', '!', '\0'];
	for (let i = 0z; i &lt; len(expected); i += 1z) {
		assert(z[i] == expected[i]: u32: u8);
	};
};

fn storage() void = {
	const string = "こんにちは";
	const ptr = &amp;string: *struct {
		data: *[*]u8,
		length: size,
		capacity: size,
	};
	assert(ptr.length == 15z &amp;&amp; ptr.capacity == 15z);

	// UTF-8 encoded
	const expected = [
		0xE3u8, 0x81u8, 0x93u8, 0xE3u8, 0x82u8, 0x93u8, 0xE3u8, 0x81u8,
		0xABu8, 0xE3u8, 0x81u8, 0xA1u8, 0xE3u8, 0x81u8, 0xAFu8, 0x00u8,
	];
	for (let i = 0z; i &lt; len(expected); i += 1z) {
		assert(ptr.data[i] == expected[i]);
	};
};

export fn main() void = {
	measurements();
	charptr();
	storage();
};</pre>
</details>]]></description><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate></item><item><title>History will not remember us fondly</title><link>https://drewdevault.com/2021/01/07/History-will-not-remember-us-fondly.html</link><description><![CDATA[<p>Today, we recall the Middle Ages as an unenlightened time (quite literally, in
fact). We view the Middle Ages with a critical eye towards its brutality, lack
of individual freedoms, and societal and technological regression. But we rarely
turn that same critical lens on ourselves to consider how we&rsquo;ll be perceived by
future generations. I expect the answer, upsetting as it may be, is this: the
future will think poorly of us.</p>
<p>We possess the resources and production necessary to provide every human being
on Earth with a comfortable living: adequate food, housing, health, and
happiness. We have decided not to do so. We have achieved what one may consider
the single unifying goal of the entire history of humanity: we have eliminated
natural scarcity for our basic resources. We have done this, and we choose to
deny our fellow humans their basic needs, in the cruel pursuit of profit. We
have more empty homes than we have homeless people. America alone throws away
enough food to feed the entire world population. And we choose to let our peers
die of hunger and exposure.</p>
<p>We are politically destitute. Profits again drive everything — in the
United States, Citizens United gave corporations unfettered access to buy and
sell political will, and in the time since they have successfully installed
politicians favorable to the elite class. Our corporations possess obscene
wealth, coffers that rival those of nation-states, and rule over our people via
their proxies in political office. Princeton published <a href="https://www.cambridge.org/core/journals/perspectives-on-politics/article/testing-theories-of-american-politics-elites-interest-groups-and-average-citizens/62327F513959D0A304D4893B382B992B">a study</a> in 2014
which showed that the opinions of the average American citizen has a
statistically negligible effect on political outcomes, while the opinions of the
elite can all but decide the same outcomes. Our capitalist owners have
unchallenged rule over society, and they rule it with the single-minded
obsession to create profit at any cost, including lives.</p>
<p>The US Capitol was overrun by armed seditionists yesterday. Armed seditionists,
who, by the way, were radicalized on the internet. As a computer engineer, I am
complicit in this radicalization. The early internet was a sea of optimism, full
of enthusiasm about the growing connectivity between people which had the
potential to unite humanity like never before. We early adopters felt like world
citizens: making friends, collaborating, and uniting with no respect for borders
or ideology.  What we hadn&rsquo;t realized is that we were also building the most
powerful tool the world has ever seen for censorship, propaganda, and
radicalization.</p>
<p>The companies which built this technology are modern slave drivers, broadly
eroding worker freedoms in the first world, and in the third world seeking to
exploit the cheapest slave labor they can find. We are developing technology
which facilitates the authoritarian and <em>genocidal</em> policies of China. Anyone
who speaks out is fired, corrections are quickly issued, and a statement of
unconditional support for the profit generating, population murdering thugs is
proclaimed. I speak passionately to my peers in my field, begging them to fight
back, but many lack the courage, and most don&rsquo;t care — so long as their
exorbitant paychecks keep coming in. Money, money, money. We are at one end of a
process which launders money to wash off the blood. Morals are dead.</p>
<p>It&rsquo;s not just America — democracy is on the decline world-wide. A friend
in France recently took to the streets to protest against the introduction of
laws protecting the police from citizen oversight. Populist traitors tore the
UK out of the EU, effective last week, dooming their people to economic and
political destitution. The Greek economy has failed, right-wingers are passing
discriminatory laws against LGBT Poles, and conservative populism has taken hold
of much of Italy, just to name a few more. Social and political systems are
regressing worldwide.</p>
<a href="https://redacted.moe/f/85f7d261.png">
  <img
    style="max-width: 100%"
    alt="A visualization of democratic decline across Europe and Eurasia, showing that declines have outweighed gains in each of the past 10 years, demonstrating a persistent net decline in democracy."
    src="https://redacted.moe/f/85f7d261.png" />
</a>
<p><small style="display: block; text-align: center">Source: <a href="https://freedomhouse.org/report/nations-transit/2020/dropping-democratic-facade">Freedom House</a></small></p>
<p>Our entire society boils down to one measure: profit. We are being eaten alive
by capitalism. Americans have been brainwashed into a national ethos which is
<em>defined</em> by capitalism. In the relentless pursuit of profits, we have eroded
all political and social freedoms and created a system defined by its remarkable
cruelty in a time when we have access to greater wealth and resources than at
any other time in history.</p>
<p>Perhaps future generations won&rsquo;t remember us after all, considering that in that
same relentless pursuit of profits we are vigorously rendering the Earth
uninhabitable. But, if they do live to remember us, they will remember us as a
wicked, cruel, and unempathetic lot. We will be remembered in disgrace.</p>]]></description><pubDate>Thu, 7 Jan 2021 00:00:00 +0000</pubDate></item><item><title>Fostering a culture that values stability and reliability</title><link>https://drewdevault.com/2021/01/04/A-culture-of-stability-and-reliability.html</link><description><![CDATA[<p>There&rsquo;s an idea which encounters a bizarre level of resistance from the broader
software community: that software can be completed. This resistance manifests in
several forms, perhaps the most common being the notion that a git repository
which doesn&rsquo;t receive many commits is abandoned or less worthwhile. For my part,
I consider software that aims to be <em>completed</em> to be more worthwhile most of
the time.</p>
<p>There are two sources of change which projects are affected by: external and
internal. An internal source of change is, for example, a planned feature, or a
discovered bug. External sources of change are, say, when a dependency makes a
breaking change and your software has to be updated accordingly. Some projects
will necessarily have an indefinite source of external change to consider, often
as part of their value proposition. <a href="https://youtube-dl.org/">youtube-dl</a> will always evolve to add
new sites and workarounds, <a href="https://github.com/swaywm/wlroots">wlroots</a> will continue to grow to take advantage
of new graphics and input hardware features, and so on.</p>
<p>Any maintained program will naturally increase in stability over time as bug
fixes accumulate, towards some finite maximum. However, change drives this trend
in reverse. Introducing new features, coping with external change factors, even
fixing bugs, all of this often introduce new problems. If you want to produce
software which is reliable, robust, and stable, then managing change is an
essential requirement.</p>
<p>To this end, software projects can, and often should, draw a finish line. Or, if
not a finish line, a curve for gradually backing off on feature introduction,
raising the threshold of importance by which a new feature is considered.</p>
<p><a href="https://github.com/swaywm/sway">Sway</a>, for instance, was &ldquo;completed&rdquo; some time
ago. We stopped accepting most major feature requests, preferring only to
implement changes which were made necessary by external sources: notably,
features implemented in i3, the project sway aimed to replace. The i3 project
<a href="https://old.reddit.com/r/i3wm/comments/kn8pa2/an_update_on_the_future_of_i3/">announced this week</a> that it was adopting a similar policy regarding new
features, and thus sway&rsquo;s change management is again reduced in scope to only
addressing bugs and performance. Sway has completed its value proposition, and
now our only goal is to become more and more stable and reliable at delivering
it.</p>
<p><a href="https://sr.ht/~sircmpwn/scdoc">scdoc</a> is another project which has met its
stated goals. Its primary external source of change is roff — which is
almost 50 years old. Therefore, it has accumulated mainly bugfixes and
robustness over the past few years since its release, and users enjoy a great
deal of reliability and stability from it. Becoming a tool which &ldquo;just works&rdquo;
and can be depended on without a second thought is the only goal going forward.</p>
<p>Next time you see a git repo which is only getting a slow trickle of commits,
don&rsquo;t necessarily write it off as abandoned. A slow trickle of commits is the
ultimate fate of software which aims to be stable and reliable. And, as a
maintainer of your own projects, remember that turning a critical eye to new
feature requests, and evaluating their cost in terms of complexity and
stability, is another responsibility that your users are depending on you for.</p>]]></description><pubDate>Mon, 4 Jan 2021 00:00:00 +0000</pubDate></item><item><title>A megacorp is not your dream job</title><link>https://drewdevault.com/2021/01/01/Megacorps-are-not-your-dream-job.html</link><description><![CDATA[<p>Megacorporations<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> <em>do not</em> care about you. You&rsquo;re worth nothing to them.
Google made $66 billion in 2014 — even if you made an exorbitant $500K
salary, you only cost them .00075% of that revenue. They are not invested in
you. Why should you invest in them? Why should you give a company that isn&rsquo;t
invested in you 40+ hours of your week, half your waking life, the <em>only</em> life
you get?</p>
<p>You will have little to no meaningful autonomy, impact, or influence. Your
manager&rsquo;s manager&rsquo;s manager&rsquo;s manager (1) will exist, and (2) will not know your
name, and probably not your manager&rsquo;s name either. The company will be good at
advertising their jobs, especially to fresh grads, and you will no doubt have
dozens of cool project in mind that you&rsquo;re itching to get involved with. You
won&rsquo;t be assigned any of them — all vacancies are already filled by
tenured staff and nepotism. You&rsquo;re more likely to work on a product you have
hardly ever heard of or used, doing work that doesn&rsquo;t interest you or
meaningfully impact anyone you know.</p>
<p>A business doesn&rsquo;t get a billion-dollar valuation (or&hellip; ugh&hellip; a
trillion-dollar valuation) by having a productive team which takes good care of
its employees, rewarding them with interesting projects, or quickly correcting
toxic work environments. A business might get millions of dollars, at most, with
that approach. The megacorps got their 10th figure with another strategy:
ruthlessness. They create and exploit monopolies, and bribe regulators to look
the other way. They acquire and dismantle competitors. They hire H1B&rsquo;s and
subject them to payroll fraud and workplace abuse, confident that they can&rsquo;t
quit without risking their visa. Megacorps are a faceless machine which is
interested only in making as much money as possible with any resources at their
disposal, among those being a budget which exceeds most national GDPs.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>If anything goes wrong in this heartless environment, you&rsquo;re going to be in a
very weak position. If you go to HR<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> for almost any dispute, they are
unlikely to help. If you quit, remember that they will have forced you to sign
an NDA and a non-compete.  You&rsquo;re rolling the dice on whether or not they&rsquo;ll
decide that you&rsquo;ve overstepped (and they can <em>decide</em> that — the terms are
virtually impossible not to breach). That .00075% of their annual revenue you
took home? They could easily spend 100x that on lawyers without breaking a
sweat, and money is justice in the United States. You will likely have no
recourse if they wrong you.</p>
<p>They may hurt you, but even worse, they will make you hurt others. You will be
complicit in their ruthlessness. Privacy dragnets, union busting, monopolistic
behavior and lobbying, faux-slavery of gig workers in domestic warehouses and
actual-slavery of workers in foreign factories, answering to <a href="https://en.wikipedia.org/wiki/Uyghur_genocide">nations committing
actual ongoing genocide</a> —
this is only possible because highly skilled individuals like yourself chose to
work for them, build their war chest, or even directly contribute to these
efforts. Your salary may be a drop in the bucket to them, but consider how much
that figure means to you. If you make that $500K, they spend 1.5× that
after overhead, and they&rsquo;d only do it if they expect a return on that
investment. Would you give a corporation with this much blood on its hands
$750K of your worth? Pocket change to them, maybe, but a lot of value to <em>you</em>,
value that you could be adding somewhere else.</p>
<p>They won&rsquo;t care about you. They won&rsquo;t be invested in you. They won&rsquo;t give you
interesting work. You will have no recourse if things go wrong, and things are
primed to go wrong. They could hurt you, and they could make you hurt others.
Don&rsquo;t fall for their propaganda.</p>
<p>Megacorps are, in fact, in the minority. There are tens of thousands of other
tech companies that could use your help. Tech workers are in high demand —
you have choices! You will probably be much happier at a small to mid-size
company. The &ldquo;dream job&rdquo; megacorps have sold you on is just good marketing.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>EDIT @ 23:37 UTC: It bears clarifying that I&rsquo;m referring to extremely large companies, at or near the scale of FAANG (Facebook, Apple, Amazon, Netflix, Google). Hundreds of billions of dollars or more in market cap.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Political side thought: Amazon&rsquo;s revenue in 2019 alone exceeds the GDP of 150 sovereign nations. Is undemocratic ownership of resources and power on that scale just?&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Quick reminder that HR&rsquo;s job is to protect the company, not you. This applies to any company, not just megacorps. If you have a problem that you need to bring to HR, you should have a lawyer draft that letter, and you should polish up your resume first.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 1 Jan 2021 00:00:00 +0000</pubDate></item><item><title>How to design a new programming language from scratch</title><link>https://drewdevault.com/2020/12/25/How-to-design-a-new-programming-language.html</link><description><![CDATA[<p>There is a long, difficult road from vague, pie-in-the-sky ideas about what
would be cool to have in a new programming language, to a robust,
self-consistent, practical implementation of those ideas. Designing and
implementing a new programming language from scratch is one of the most
challenging tasks a programmer can undertake.</p>
<p>Note: this post is targeted at motivated programmers who want to make a
serious attempt at designing a useful programming language. If you just want to
make a language as a fun side project, then you can totally just wing it. Taking
on an unserious project of that nature is also a good way to develop some
expertise which will be useful for a serious project later on.</p>
<p>Let&rsquo;s set the scene. You already know a few programming languages, and you know
what you like and dislike about them — these are your influences. You have
some cool novel language design ideas as well. A good first step from here is to
dream up some pseudocode, putting some of your ideas to paper, so you can get an
idea of what it would actually feel like to write or read code in this
hypothetical language. Perhaps a short write-up or a list of goals and ideas is
also in order. Circulate these among your confidants for discussion and
feedback.</p>
<p>Ideas need to be proven in the forge of implementations, and the next step is to
write a compiler (or interpreter — everything in this article applies
equally to them). We&rsquo;ll call this the sacrificial implementation, because you
should be prepared to throw it away later. Its purpose is to prove that your
design ideas work and can be implemented efficiently, but <em>not</em> to be the
production-ready implementation of your new language. It&rsquo;s a tool to help you
refine your language design.</p>
<p>To this end, I would suggest using a parser generator like yacc to create your
parser, even if you&rsquo;d prefer to ultimately use a different design (e.g.
recursive descent). The ability to quickly make changes to your grammar, and the
side-effect of having a formal grammar written as you work, are both valuable to
have at this stage of development. Being prepared to throw out the rest of the
compiler is helpful because, due to the inherent difficulty of designing and
implementing a programming language at the same time, your first implementation
will probably be shit. You don&rsquo;t know what the language will look like, you&rsquo;ll
make assumptions that you have to undo later, and it&rsquo;ll undergo dozens of
refactorings. It&rsquo;s gonna suck.</p>
<p>However, shit as it may be, it will have done important work in validating your
ideas and refining your design. I would recommend that your next step is to
start working on a formal specification of the language (something that I
believe all languages should have). You&rsquo;ve proven what works, and writing it up
formally is a good way to finalize the ideas and address the edge cases. Gather
a group of interested early adopters, contributors, and subject matter experts
(e.g. compiler experts who work with similar languages), and hold discussions on
the specification as you work.</p>
<p>This is also a good time to start working on your second implementation. At this
point, you will have a good grasp on the overall compiler design, the flaws from
your original implementation, and better skills as a compiler programmer.
Working on your second compiler and your specification at the same time can help
as both endeavours inform the others — a particularly difficult detail to
implement could lead to a simplification in the spec, and an under-specified
detail getting shored up could lead to a more robust implementation.</p>
<p>Don&rsquo;t get carried away — keep this new compiler simple and small. Don&rsquo;t go
crazy on nice-to-have features like linters and formatters, an exhaustive test
suite, detailed error messages, a sophisticated optimizer, and so on. You want
it to implement the specification as simply as possible, so that you can use it
for the next step: the hosted compiler. You need to write a third
implementation, using your own language to compile itself.</p>
<p>The second compiler, which I hope you wrote in C, is now the bootstrap compiler.
I recommend keeping it up-to-date with the specification and maintaining it
perpetually as a convenient path to bootstrap your toolchain from scratch
(looking at you, Rust). But it&rsquo;s not going to be the final implementation: any
self-respecting general-purpose programming language is implemented in itself.
The next, and final step, is to implement your language for a third time.</p>
<p>At this point, you will have refined and proven your language design. You will
have developed and applied compiler programming skills. You will have a robust
implementation for a complete and self-consistent programming language,
developed carefully and with the benefit of hindsight. Your future community
will thank you for the care and time you put into this work, as your language
design and implementation sets the ceiling on the quality of programs written in
it.</p>]]></description><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate></item><item><title>godocs.io is now available</title><link>https://drewdevault.com/2020/12/18/godocs.io.html</link><description><![CDATA[<p>Due to the coming sunsetting of godoc.org in favor of pkg.go.dev, I&rsquo;m happy to
announce that <a href="https://godocs.io">godocs.io</a> is now available as a replacement.
We have <a href="https://sr.ht/~sircmpwn/godocs.io">forked the codebase</a> and cleaned
things up quite a bit, removing lots of dead or obsolete features, cleaning out
a bunch of Google-specific code and analytics, reducing the JavaScript
requirements, and rewriting the search index for Postgres. We will commit to its
maintenance going forward for anyone who prefers the original godoc.org
experience over the new website.</p>
<p>Notice: this article was rewritten on 2021-01-19. The original article has a lot
of unnecessary salt. <a href="https://git.sr.ht/~sircmpwn/drewdevault.com/tree/fa8799c882f6555606e0a906bd8e0a484bb51398/item/content/blog/godocs.io.md">You can read the original here</a>.</p>]]></description><pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate></item><item><title>Status update, December 2020</title><link>https://drewdevault.com/2020/12/15/Status-update-December-2020.html</link><description><![CDATA[<p>Happy holidays! I hope everyone&rsquo;s having a great time staying at home and not
spending any time with your families. It&rsquo;s time for another summary of the
month&rsquo;s advances in FOSS development. Let&rsquo;s get to it!</p>
<p>One of my main focuses has been on sourcehut&rsquo;s API 2.0 planning. This month, the
meta.sr.ht and git.sr.ht GraphQL APIs have shipped feature parity with the REST
APIs, and the RFC 6749 compatible OAuth 2.0 implementation has shipped. I&rsquo;ve
broken ground on the todo.sr.ht GraphQL API — it&rsquo;ll be next. Check out the
<a href="https://man.sr.ht/graphql.md">GraphQL docs on man.sr.ht</a> if you want to kick
the tires.</p>
<p>I also wrote a little tool this month called
<a href="https://git.sr.ht/~sircmpwn/mkproof">mkproof</a>, after brainstorming some ways to
allow sourcehut signups over Tor without enabling abuse. The idea is that you
can generate a challenge (mkchallenge), give it to a user who generates a proof
for that challenge (mkproof), and then verify their proof is correct. Generating
the proof is computationally expensive and resistant to highly parallel attacks
(e.g. GPUs), and takes tens of minutes of work — making it unpractical for
spammers to register accounts in bulk, while still allowing Tor users to
register with their anonymity intact.</p>
<p>On the Gemini front, patches from Mark Dain, William Casarin, and Eyal Sawady
have improved <a href="https://git.sr.ht/~sircmpwn/gmnisrv">gmnisrv</a> in several respects
— mainly bugfixes — and <a href="https://git.sr.ht/~sircmpwn/gmni">gmnlm</a>
has grown the &ldquo;&lt;n&gt;|&rdquo; command, which pipes the Nth link into a shell
command. Thanks are due to Alexey Yerin as well, who sent a little bugfix with
redirect handling.</p>
<p>The <a href="https://datatracker.ietf.org/doc/draft-devault-bare/">second draft of the BARE
specification</a> was
submitted to the IETF this month. Will revisit it again in several weeks. John
Mulligan has also sent several patches improving go-bare — thanks!</p>
<p>scdoc 1.11.0 was released this month, with only minor bug fixes.</p>
<p>That&rsquo;s all for now! I&rsquo;ll see you in a month.</p>
<details>
  <summary>...</summary>
  <p>
  The secret project has slowed down a bit as we've started on a new phase of
  development: writing the specification, and new compiler which implements it
  from the ground up. Progress on this is good, but won't introduce anything
  groundbreaking for a while. Stay tuned.
</details>]]></description><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate></item><item><title>Become shell literate</title><link>https://drewdevault.com/2020/12/12/Shell-literacy.html</link><description><![CDATA[<p>Shell literacy is one of the most important skills you ought to possess as a
programmer. The Unix shell is one of the most powerful ideas ever put to code,
and should be second nature to you as a programmer. No other tool is nearly as
effective at commanding your computer to perform complex tasks quickly —
or at storing them as scripts you can use later.</p>
<p>In my workflow, I use Vim as my editor, and Unix as my &ldquo;IDE&rdquo;. I don&rsquo;t trick out
<a href="https://git.sr.ht/~sircmpwn/dotfiles/tree/master/.vimrc">my vimrc</a> to add a
bunch of IDE-like features — the most substantial plugin I use on a daily
basis is <a href="https://github.com/ctrlpvim/ctrlp.vim">Ctrl+P</a>, and that just makes it
easier to open files. Being Vim literate is a valuable skill, but an important
detail is knowing when to drop it. My daily workflow involves several open
terminals, generally one with Vim, another to run builds or daemons, and a third
which just keeps a shell handy for anything I might ask of it.</p>
<p><a href="https://redacted.moe/f/1bbaf26c.png"><img src="https://redacted.moe/f/1bbaf26c.png" alt="Screenshot of my workspace"></a></p>
<p>The shell I keep open allows me to perform complex tasks and answer complex
questions as I work. I find interesting things with <a href="https://git-scm.com/docs/git-grep">git grep</a>,
perform bulk find-and-replace with <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sed.html#top">sed</a>, answer questions with
<a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html#top">awk</a>, and perform more intricate tasks on-demand with ad-hoc shell
commands and pipelines. I have the freedom to creatively solve problems without
being constrained to the rails laid by IDE designers.</p>
<p>Here&rsquo;s an example of a problem I encountered recently: I had a bunch of changes
in a git repository. I wanted to restore deleted files without dropping the rest
of my changes, but there were hundreds of these. How can I efficiently address
this problem?</p>
<p>Well, I start by getting a grasp of the scale of the issue with git status,
which shows hundreds of deleted files that need to be restored. This scale is
beyond the practical limit of manual intervention, so I switch to git status
-s to get a more pipeline-friendly output.</p>
<pre tabindex="0"><code>$ git status -s
 D main/a52dec/APKBUILD
 D main/a52dec/a52dec-0.7.4-build.patch
 D main/a52dec/automake.patch
 D main/a52dec/fix-globals-test-x86-pie.patch
 D main/aaudit/APKBUILD
 D main/aaudit/aaudit
 D main/aaudit/aaudit-common.lua
 D main/aaudit/aaudit-repo
 D main/aaudit/aaudit-server.json
 D main/aaudit/aaudit-server.lua
 ...
</code></pre><p>I can work with this. I add grep '^ D' to filter out any entries which were
not deleted, and pipe it through awk '{ print $2 }' to extract just the
filenames. I&rsquo;ll often run the incomplete pipeline just to check my work and
catch my bearings:</p>
<pre tabindex="0"><code>$ git status -s | grep &#39;^ D&#39; | awk &#39;{ print $2 }&#39;
main/a52dec/APKBUILD
main/a52dec/a52dec-0.7.4-build.patch
main/a52dec/automake.patch
main/a52dec/fix-globals-test-x86-pie.patch
main/aaudit/APKBUILD
main/aaudit/aaudit
main/aaudit/aaudit-common.lua
main/aaudit/aaudit-repo
main/aaudit/aaudit-server.json
main/aaudit/aaudit-server.lua
...
</code></pre><p>Very good — we have produced a list of files which we need to address.
Note that, in retrospect, I could have dropped the grep and just used awk to the
same effect:</p>
<pre tabindex="0"><code>$ git status -s | awk &#39;/^ D/ { print $2 }&#39;
main/a52dec/APKBUILD
main/a52dec/a52dec-0.7.4-build.patch
main/a52dec/automake.patch
main/a52dec/fix-globals-test-x86-pie.patch
main/aaudit/APKBUILD
main/aaudit/aaudit
main/aaudit/aaudit-common.lua
main/aaudit/aaudit-repo
main/aaudit/aaudit-server.json
main/aaudit/aaudit-server.lua
...
</code></pre><p>However, we&rsquo;re just writing an ad-hoc command here to solve a specific,
temporary problem — finesse is not important. This command isn&rsquo;t going to
be subjected to a code review. Often my thinking in these situations is to solve
one problem at a time: &ldquo;filter the list&rdquo; and &ldquo;reword the list&rdquo;.  Anyway, the
last step is to actually use this list of files to address the issue, with the
help of <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/xargs.html#top">xargs</a>.</p>
<pre tabindex="0"><code>$ git status -s | awk &#39;/^ D/ { print $2 }&#39; | xargs git checkout --
</code></pre><p>Let&rsquo;s look at some more examples of interesting ad-hoc shell pipelines.
Naturally, I wrote a shell pipeline to find some:</p>
<pre tabindex="0"><code>$ history | cut -d&#39; &#39; -f2- | awk -F&#39;|&#39; &#39;{ print NF-1 &#34; &#34; $0 }&#39; | sort -n | tail
</code></pre><p>Here&rsquo;s the breakdown:</p>
<ul>
<li><code>history</code> prints a list of my historical shell commands.</li>
<li><code>cut -d' ' -f2-</code> removes the first field from each line, using space as a
delimiter. <code>history</code> numbers every command, and this removes the number.</li>
<li><code>awk -F'|' '{ print NF-1 &quot; &quot; $0 }</code> tells awk to use | as the field delimiter
for each line, and print each line prefixed with the number of fields. This
prints every line of my history, prefixed with the number of times the pipe
operator appears in that line.</li>
<li><code>sort -n</code> numerically sorts this list.</li>
<li><code>tail</code> prints the last 10 items.</li>
</ul>
<p>This command, written in the moment, finds, characterizes, filters, and sorts my
shell history by command complexity. Here are a couple of the cool shell
commands I found:</p>
<p>Play the 50 newest videos in a directory with
<a href="https://github.com/mpv-player/mpv">mpv</a>:</p>
<pre tabindex="0"><code>ls -tc | head -n50 | tr &#39;\n&#39; &#39;\0&#39; | xargs -0 mpv
</code></pre><p>I use this command all the time. If I want to watch a video later, I will
<a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/touch.html#top">touch</a> the file so it appears at the top of this list. Another command
transmits a tarball of a patched version of <a href="http://www.celestegame.com/">Celeste</a> to a friend using
netcat, minus the (large) game assets, with a progress display via <a href="http://www.ivarch.com/programs/pv.shtml">pv</a>:</p>
<pre tabindex="0"><code>find . ! -path &#39;./Content/*&#39; | xargs tar -cv | pv | zstd | nc 204:fbf5:... 12345
</code></pre><p>And on my friend&rsquo;s end:</p>
<pre tabindex="0"><code>nc -vll :: 12345 | zstdcat | pv | tar -xv
</code></pre><p>tar, by the way, is an under-rated tool for moving multiple files through a
pipeline. It can read and write tarballs to stdin and stdout!</p>
<p>I hope that this has given you a tantalizing taste of the power of the Unix
shell. If you want to learn more about the shell, I can recommend
<a href="http://shellhaters.org/">shellhaters.org</a> as a great jumping-off point into
various shell-related parts of the POSIX specification. Don&rsquo;t be afraid of the
spec — it&rsquo;s concise, comprehensive, comprehensible, and full of examples.
I would also <em>definitely</em> recommend taking some time to learn awk in particular:
<a href="https://ferd.ca/awk-in-20-minutes.html">here&rsquo;s a brief tutorial</a>.</p>]]></description><pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate></item><item><title>Web analytics should at least meet the standards of informed consent</title><link>https://drewdevault.com/2020/12/04/Analytics-and-informed-consent.html</link><description><![CDATA[<p>Research conducted on human beings, at least outside of the domain of
technology, has to meet a minimum standard of ethical reasoning called
<a href="https://en.wikipedia.org/wiki/Informed_consent">informed consent</a>. Details
vary, but the general elements of informed consent are:</p>
<ol>
<li>Disclosure of the nature and purpose of the research and its implications
(risks and benefits) for the participant, and the confidentiality of the
collected information.</li>
<li>An adequate understanding of these facts on the part of the participant,
requiring an accessible explanation in lay terms and an assessment of
understanding.</li>
<li>The participant must exercise voluntary agreement, without coercion or fear
of repercussions (e.g. not being allowed to use your website).</li>
</ol>
<p>So, I pose the following question: if your analytics script wouldn&rsquo;t pass muster
at your university&rsquo;s ethics board, then what the hell is it doing on your
website? Can we not meet this basic minimum standard of ethical decency and
respect for our users?</p>
<p>Opt-out is not informed consent. Manually unticking dozens of third-party
trackers from a cookie pop-up is not informed consent. &ldquo;By continuing to use
this website, you agree to&hellip;&rdquo; is not informed consent. &ldquo;Install <a href="https://ublockorigin.com/">uBlock
Origin</a>&rdquo; is not informed consent.</p>
<p>I don&rsquo;t necessarily believe that ethical user tracking is <em>impossible</em>, but I
know for damn sure that most of these &ldquo;pro-privacy&rdquo; analytics solutions which
have been cropping up in the wake of the GDPR don&rsquo;t qualify, either.</p>
<p>Our industry&rsquo;s fundamental failure to respect users, deliberately mining their
data without consent and without oversight for profit, is the reason why we&rsquo;re
seeing legal crackdowns in the form of the GDPR and similar legislation.  Our
comeuppance is well-earned, and I hope that the regulators give it teeth in
enforcement. The industry response — denial and looking for ways to weasel
out of these ethical obligations — is a strategy on borrowed time. The law
is not a computer program, and it is not executed by computers: it is executed
by human beings who can see through your horseshit. You&rsquo;re not going to be able
to seek out some narrow path you can walk to skirt the regulations and keep
spying on people.</p>
<p>You&rsquo;re going to stop spying on people.</p>
<p><em>P.S. If you still want the data you might get from analytics without
compromising on ethics, here&rsquo;s an idea: compensate users for their participation
in your research. Woah, what a wild idea! That&rsquo;s not very growth hacker of you,
Drew.</em></p>]]></description><pubDate>Fri, 4 Dec 2020 00:00:00 +0000</pubDate></item><item><title>A few ways to make money in FOSS</title><link>https://drewdevault.com/2020/11/20/A-few-ways-to-make-money-in-FOSS.html</link><description><![CDATA[<p>I work on free and open-source software full time, and I make a comfortable
living doing it. And I don&rsquo;t half-ass it: 100% of my code is free and
open-source. There&rsquo;s no proprietary add-ons, no periodic code dumps, just
100% bona-fide free and open source software. Others have often sought my advice
— how can they, too, make a living doing open source?</p>
<p>Well, there&rsquo;s more than one way to skin a cat. There are many varieties of
software, each with different needs, and many kinds of people, each with
different needs. The exact approach which works for you and your project will
vary quite a bit depending on the nature of your project.</p>
<p>I would generally categorize my advice into two bins:</p>
<ul>
<li>You want to make money from your own projects</li>
<li>You want to make money participating in open source</li>
</ul>
<p>The first one is more difficult. We&rsquo;ll start with the latter.</p>
<h2 id="being-employed-in-foss">Being employed in FOSS</h2>
<p>One way to make money in FOSS is to get someone to pay you to write free
software. There&rsquo;s lots of advantages to this: minimal personal risk, at-market
salaries, benefits, and so on, but at the cost of not necessarily getting to
choose what you work on all the time.</p>
<p>I have a little trick that I often suggest to people who vaguely want to work
&ldquo;in FOSS&rdquo;, but who aren&rsquo;t trying to find the monetization potential in their own
projects. Use git to clone the source repositories for some (large) projects
you&rsquo;re interested in,
<a href="https://drewdevault.com/2020/08/10/How-to-contribute-to-FOSS.html">the kind of stuff you want to work on</a>,
and then run this command:</p>
<pre tabindex="0"><code>git log -n100000 --format=&#34;%ae&#34; | cut -d@ -f2 | sort | uniq -c | sort -nr | less
</code></pre><p>This will output a list of the email domains who have committed to the
repository in the last 100,000 commits. This is a good set of leads for
companies who might be interested in paying you to work on projects like this
😉</p>
<p>Another good way is to explicitly seek out large companies known to work a lot
in FOSS, and see if they&rsquo;re hiring in those departments. There are some
companies that specialize in FOSS, such as RedHat, Collabora, and dozens more;
and there are large companies with FOSS-specific teams, such as Intel, AMD, IBM,
and so on.</p>
<h2 id="making-money-from-your-own-foss-work">Making money from your own FOSS work</h2>
<p>If you want to pay for the project infrastructure, and maybe beer money for the
weekend, then donations are an easy way to do that. I&rsquo;ll give it to you
straight, though: you&rsquo;re unlikely to make a living from donations.  Programmers
who do are a small minority. If you want to make a living from FOSS, it&rsquo;s
going to be more difficult.</p>
<p>Start by unlearning what you think you know about startups. The toxic startup
culture around venture capital and endless hyper-growth is more stressful, less
likely to succeed, and socially irresponsible. Building a sustainable business
responsibly takes time, careful planning, and hard work. The fast route —
venture capital funded — is going to impose constraints on your business
that will ultimately make it difficult to remain true to your open-source
mission.</p>
<p>And yes, you are building a <em>business</em>. You need to start thinking of your
project as a business and of yourself as a business owner. This undertaking is
going to require developing business skills in planning, budgeting, scheduling,
resource allocation, marketing &amp; sales, compliance, and more. At times, you will
be forced to embrace your inner
<a href="http://www.catb.org/jargon/html/S/suit.html">suit</a>. Channel your engineering
problem-solving skills into the business problems.</p>
<p>So, you&rsquo;ve got the right mindset. What are some business models that work?</p>
<p><a href="https://sourcehut.org">SourceHut</a>, my company, has two revenue streams. We have
a hosted SaaS product. It&rsquo;s open source, and users can choose to deploy and
maintain it themselves, or they can just buy a hosted account from us. The
services are somewhat complex, so the managed offering saves them a lot of time.
We have skilled sysops/sysadmins, support channels, and so on, for paying users.
Importantly, we don&rsquo;t have a free tier (but we do choose to provide free service
to those who need it, at our discretion).</p>
<p>Our secondary revenue stream is <a href="https://sourcehut.org/consultancy">free software
consulting</a>. Our developers work part-time
writing free and open-source software on contracts. We&rsquo;re asked to help
implement features upstream for various projects, or to develop new open-source
applications or libraries, to share our expertise in operations, and so on, and
charge for these services. This is different from providing paid support or
development on our own projects — we accept contracts to work on <em>any</em>
open source project.</p>
<p>The other approach to consulting is also possible: paid support and development
on your own projects. If there are businesses that rely on your project, then
you may be able to offer them support or develop new features or bugfixes that
they need, on a paid basis. Projects with a large corporate userbase also
sometimes <em>do</em> find success in donations — albeit rebranded as
sponsorships. The largest projects often set up foundations to manage them in
this manner.</p>
<p>These are, in my experience, some of the most successful approaches to
monetizing FOSS. You may have success with a combination of these, or with other
business models as well.  Remember to turn that engineering mind of yours
towards the task of monetization, and experiment with and invent new ways of
making money that best suit the kind of software you want to work on.</p>
<p>Feel free to <a href="mailto:sir@cmpwn.com">reach out</a> if you have some questions or
need a sounding board for your ideas. Good luck!</p>]]></description><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate></item><item><title>We can do better than DuckDuckGo</title><link>https://drewdevault.com/2020/11/17/Better-than-DuckDuckGo.html</link><description><![CDATA[<p><a href="https://duckduckgo.com">DuckDuckGo</a> is one of the long-time darlings of the
technophile&rsquo;s pro-privacy recommendations, and in fact the search engine that I
use myself on the daily. They certainly present a more compelling option than
many of the incumbents, like Google or Bing. Even so, DuckDuckGo is not good
enough, and we ought to do better.</p>
<p>I have three grievances with DuckDuckGo:</p>
<ol>
<li><strong>It&rsquo;s not open source.</strong> Almost all of DDG&rsquo;s software is proprietary, and
they&rsquo;ve demonstrated <a href="https://github.com/duckduckgo/Android/issues/527">gross incompetence</a> in privacy in what little
software they have made open source. Who knows what else is going on in the
proprietary code?</li>
<li><strong>DuckDuckGo is not a search engine</strong>. It&rsquo;s more aptly described as a search
engine frontend. They <em>do</em> handle features like bangs and instant answers
internally, but their actual search results come from third-parties like
Bing. They don&rsquo;t operate a crawler for their search results, and are not
independent.</li>
<li><strong>The search results suck!</strong> The authoritative sources for anything I want to
find are almost always buried beneath 2-5 results from content scrapers and
blogspam. This is also true of other search engines like Google. Search
engines are highly vulnerable to abuse and they aren&rsquo;t doing enough to
address it.</li>
</ol>
<p>There are some FOSS attempts to do better here, but they all fall flat.
<a href="https://github.com/bauruine/searx/">searX</a> is also a false search engine
— that is, they serve someone else&rsquo;s results. <a href="https://yacy.net/">YaCy</a>
has their own crawler, but the distributed design makes results untolerably
slow, poor quality, and vulnerable to abuse, and it&rsquo;s missing strong central
project leadership.</p>
<p>We need a real, working FOSS search engine, complete with its own crawler.</p>
<p>Here&rsquo;s how I would design it.</p>
<p>First, YaCy-style decentralization is <em>way</em> too hard to get right, especially
when a search engine project already has a lot of Very Hard problems to solve.
Federation is also very hard in this situation — queries will have to
consult <em>most</em> instances in order to get good quality results, or a novel
sharding algorithm will have to be designed, and either approach will have to be
tolerant of nodes appearing and disappearing at any time. Not to mention it&rsquo;d be
slow! Several unsolved problems with federation and decentralziation would have
to be addressed on top of building a search engine in the first place.</p>
<p>So, a SourceHut-style approach is better. 100% of the software would be free
software, and third parties would be encouraged to set up their own
installations. It would use standard protocols and formats where applicable, and
accept patches from the community. However, the database would still be
centralized, and even if programmable access were provided, it would not be with
an emphasis on decentralization or shared governance. It might be possible to
design tools which help third-parties bootstrap their indexes, and create a
community of informal index sharing, but that&rsquo;s not the focus here.</p>
<p>It would also need its own crawler, and probably its own indexer. I&rsquo;m not
convinced that any of the existing FOSS solutions in this space are quite right
for this problem. Crucially, I would <em>not</em> have it crawling the entire web from
the outset. Instead, it should crawl a whitelist of domains, or &ldquo;tier 1&rdquo;
domains. These would be the limited mainly to authoritative or high-quality
sources for their respective specializations, and would be weighed upwards in
search results. Pages that these sites link to would be crawled as well, and
given tier 2 status, recursively up to an arbitrary N tiers. Users who want to
find, say, a blog post about a subject rather than the documentation on that
subject, would have to be more specific: &ldquo;$subject blog posts&rdquo;.</p>
<p>An advantage of this design is that it would be easy for anyone to take the
software stack and plop it on their own servers, with their own whitelist of
tier 1 domains, to easily create a domain-specific search engine. Independent
groups could create search engines which specialize in academia, open standards,
specific fandoms, and so on. They could tweak their precise approach to
indexing, tokenization, and so on to better suit their domain.</p>
<p>We should also prepare the software to boldly lead the way on new internet
standards. Crawling and indexing non-HTTP data sources (Gemini?  Man pages?
Linux distribution repositories?), supporting non-traditional network stacks
(Tor? Yggdrasil? cjdns?) and third-party name systems (OpenNIC?), and anything
else we could leverage our influence to give a leg up on.</p>
<p>There&rsquo;s a <em>ton</em> of potential in this domain which is just sitting on the floor
right now. The main problem is: who&rsquo;s going to pay for it? Advertisements or
paid results are <em>not</em> going to fly — conflict of interest. Private, paid
access to search APIs or index internals is one opportunity, but it&rsquo;s kind of
shit and I think that preferring open data access and open APIs would be
exceptionally valuable for the community.</p>
<p>If SourceHut eventually grows in revenue — at least 5-10× its
<a href="https://sourcehut.org/blog/2020-11-11-sourcehut-q3-2020-financial-report/">present revenue</a> — I intend to sponsor this as a public
benefit project, with no plans for generating revenue. I am not aware of any
monetization approach for a search engine which squares with my ethics and
doesn&rsquo;t fundamentally undermine the mission. So, if no one else has figured it
out by the time we have the resources to take it on, we&rsquo;ll do it.</p>]]></description><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate></item><item><title>Status update, November 2020</title><link>https://drewdevault.com/2020/11/15/Status-update-November-2020.html</link><description><![CDATA[<p>Greetings, humanoids! Our fleshy vessels have aged by 2.678×10⁶ seconds, and you
know what that means: time for another status update! Pour a cup of your
favorite beverage stimulant and gather &lsquo;round for some news.</p>
<p>First off, today is the second anniversary of SourceHut&rsquo;s alpha being opened to
the public, and as such, I&rsquo;ve prepared a special <a href="https://sourcehut.org/blog/2020-11-15-sourcehut-2-year-alpha/">blog post</a> for
you to read. I&rsquo;ll leave the sr.ht details out of this post and just send you off
to read about it there.</p>
<p>What else is new? Well, a few things. For one, I&rsquo;ve been working more on Gemini.
I added CGI support to <a href="https://sr.ht/~sircmpwn/gmnisrv">gmnisrv</a> and wrote a
few <a href="https://git.sr.ht/~sircmpwn/cgi-scripts">CGI scripts</a> to do neato Gemini
things with. I&rsquo;ve also added regexp routing and URL rewriting support. We can
probably ship gmnisrv 1.0 as soon as the last few bugs are flushed out, and a
couple of minor features are added, and we might switch to another SSL
implementation as well. Thanks to the many contributors who&rsquo;ve helped out:
William Casarin, Tom Lebreux, Kenny Levinsen, Eyal Sawady, René Wagner,
dbandstra, and mbays.</p>
<p>In <a href="https://baremessages.org">BARE</a> news: Elm, Erlang, Java, and Ruby
implementations have appeared, and I have submitted a
<a href="https://datatracker.ietf.org/doc/draft-devault-bare/">draft RFC</a> to the IETF
for standardization.</p>
<p>Finally, I wrote a new Wayland server for you. Its only dependencies are a POSIX
system and a C11 compiler — and it works with Nvidia GPUs, or even systems
without OpenGL support at all. Here&rsquo;s the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;poll.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;signal.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/ioctl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/socket.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/un.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">	<span class="k">typedef</span> <span class="kt">int16_t</span> <span class="n">i16</span><span class="p">;</span> <span class="k">typedef</span> <span class="kt">int32_t</span> <span class="n">i32</span><span class="p">;</span> <span class="k">typedef</span> <span class="kt">uint16_t</span> <span class="n">u16</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">typedef</span> <span class="kt">uint32_t</span> <span class="n">u32</span><span class="p">;</span> <span class="k">typedef</span> <span class="kt">uint8_t</span> <span class="n">u8</span><span class="p">;</span> <span class="k">typedef</span> <span class="kt">int</span> <span class="n">I</span><span class="p">;</span> <span class="k">typedef</span> <span class="kt">size_t</span> <span class="n">S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	  <span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span><span class="kt">int</span> <span class="n">b</span><span class="p">;</span><span class="n">u32</span> <span class="n">a</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">;</span><span class="kt">char</span><span class="o">*</span><span class="n">e</span><span class="p">;</span><span class="n">i32</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="n">h</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">fmt</span><span class="p">;}</span><span class="n">O</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	       <span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span><span class="kt">char</span><span class="o">*</span><span class="n">a</span><span class="p">;</span><span class="n">u32</span> <span class="n">b</span><span class="p">;</span><span class="nf">I</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">)(</span><span class="n">I</span><span class="p">,</span><span class="n">I</span><span class="p">,</span><span class="n">u32</span><span class="p">,</span><span class="n">u16</span><span class="p">);}</span><span class="n">G</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	  <span class="k">struct</span> <span class="n">pollfd</span> <span class="n">fds</span><span class="p">[</span><span class="mi">33</span><span class="p">];</span><span class="kt">char</span> <span class="n">a</span><span class="p">[</span><span class="mh">0xFFFF</span><span class="p">];</span><span class="n">I</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">c</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">d</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="n">u32</span> <span class="n">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			      <span class="n">O</span> <span class="n">f</span><span class="p">[</span><span class="mi">128</span><span class="p">][</span><span class="mi">128</span><span class="p">];</span><span class="n">G</span> <span class="n">g</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define AR I z,I y,u32 x,u16 c
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SN(n) (((n)%4)==0?(n):(n)+(4-((n)%4)))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">u8w</span><span class="p">(</span><span class="n">FILE</span><span class="o">*</span><span class="n">f</span><span class="p">,</span><span class="n">u32</span> <span class="n">ch</span><span class="p">){</span><span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="k">for</span> <span class="p">(</span><span class="n">I</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="o">--</span><span class="n">i</span><span class="p">){</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">ch</span><span class="o">&amp;</span><span class="mh">0x3f</span><span class="p">)</span><span class="o">|</span><span class="mh">0x80</span><span class="p">;</span><span class="n">ch</span><span class="o">&gt;&gt;=</span><span class="mi">6</span>
</span></span><span class="line"><span class="cl"><span class="p">;}</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ch</span><span class="o">|</span><span class="mh">0xE0</span><span class="p">;</span><span class="nf">fwrite</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">f</span><span class="p">);}</span><span class="kt">void</span> <span class="nf">xrgb</span><span class="p">(</span><span class="n">u32</span><span class="o">*</span><span class="n">data</span><span class="p">,</span><span class="n">i32</span> <span class="n">w</span><span class="p">,</span><span class="n">i32</span> <span class="n">h</span><span class="p">,</span><span class="n">i32</span> <span class="n">s</span><span class="p">){</span><span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="n">winsize</span> <span class="n">sz</span><span class="p">;</span><span class="nf">ioctl</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">TIOCGWINSZ</span><span class="p">,</span><span class="o">&amp;</span><span class="n">sz</span><span class="p">);</span><span class="o">--</span><span class="n">sz</span><span class="p">.</span><span class="n">ws_row</span><span class="p">;</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\x1b</span><span class="s">[H</span><span class="se">\x1b</span><span class="s">[2J</span><span class="se">\x1b</span><span class="s">[3J&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span><span class="p">(</span><span class="n">I</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">sz</span><span class="p">.</span><span class="n">ws_row</span><span class="p">;</span><span class="o">++</span><span class="n">y</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="n">I</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">sz</span><span class="p">.</span><span class="n">ws_col</span><span class="p">;</span><span class="o">++</span><span class="n">x</span><span class="p">){</span><span class="n">I</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">u32</span> <span class="n">c</span> <span class="o">=</span> <span class="mh">0x2800</span><span class="p">;</span><span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="n">I</span> <span class="n">f</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">};</span><span class="k">for</span><span class="p">(</span><span class="n">I</span> <span class="n">my</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">my</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="o">++</span><span class="n">my</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="n">I</span> <span class="n">mx</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">mx</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">;</span><span class="o">++</span><span class="n">mx</span><span class="p">){</span><span class="n">u32</span> <span class="n">p</span><span class="o">=</span><span class="n">data</span><span class="p">[((</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">my</span><span class="p">)</span><span class="o">*</span><span class="n">h</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">ws_row</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">s</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="n">mx</span><span class="p">)</span><span class="o">*</span><span class="n">w</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">ws_col</span><span class="o">*</span><span class="mi">2</span><span class="p">)];</span><span class="n">u8</span> <span class="n">avg</span><span class="o">=</span><span class="p">((</span><span class="n">p</span><span class="o">&amp;</span><span class="mh">0xFF</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="n">p</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xFF</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="n">p</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xFF</span><span class="p">))</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="n">avg</span><span class="o">&gt;</span><span class="mh">0x80</span><span class="p">)</span><span class="n">c</span><span class="o">|=</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];}</span><span class="nf">u8w</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span><span class="n">c</span><span class="p">);}</span><span class="nf">putchar</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="sc">&#39;\n&#39;</span><span class="p">);}</span><span class="nf">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);}</span><span class="n">O</span><span class="o">*</span><span class="nf">ao</span><span class="p">(</span><span class="n">I</span> <span class="n">z</span><span class="p">,</span><span class="n">u32</span> <span class="n">y</span><span class="p">,</span><span class="n">I</span> <span class="n">x</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="n">S</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">128</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">z</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">a</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">[</span><span class="n">z</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">a</span><span class="o">=</span><span class="n">y</span><span class="p">;</span><span class="n">f</span><span class="p">[</span><span class="n">z</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">b</span><span class="o">=</span><span class="n">x</span><span class="p">;</span><span class="k">return</span> <span class="o">&amp;</span><span class="n">f</span><span class="p">[</span><span class="n">z</span><span class="p">][</span><span class="n">i</span><span class="p">];}</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span><span class="n">O</span><span class="o">*</span><span class="nf">go</span><span class="p">(</span><span class="n">I</span> <span class="n">z</span><span class="p">,</span><span class="n">u32</span> <span class="n">y</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="n">S</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span>
</span></span><span class="line"><span class="cl"><span class="mi">128</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">z</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">a</span><span class="o">==</span><span class="n">y</span><span class="p">)</span><span class="k">return</span> <span class="o">&amp;</span><span class="n">f</span><span class="p">[</span><span class="n">z</span><span class="p">][</span><span class="n">i</span><span class="p">];</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span><span class="kt">void</span> <span class="nf">wh</span><span class="p">(</span><span class="n">I</span> <span class="n">z</span><span class="p">,</span><span class="n">i32</span> <span class="n">y</span><span class="p">,</span><span class="n">i16</span> <span class="n">x</span><span class="p">,</span> <span class="n">i16</span> <span class="n">w</span>
</span></span><span class="line"><span class="cl"><span class="p">){</span><span class="nf">write</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="o">&amp;</span><span class="n">y</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="n">i32</span> <span class="n">u</span><span class="o">=</span><span class="p">((</span><span class="n">w</span><span class="o">+</span><span class="mi">8</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">|</span><span class="n">x</span><span class="p">;</span><span class="nf">write</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="o">&amp;</span><span class="n">u</span><span class="p">,</span><span class="mi">4</span><span class="p">);}</span><span class="kt">void</span> <span class="nf">ws</span><span class="p">(</span><span class="n">I</span> <span class="n">z</span><span class="p">,</span><span class="kt">char</span><span class="o">*</span><span class="n">y</span><span class="p">){</span><span class="n">i32</span> <span class="n">l</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nf">strlen</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nf">write</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="o">&amp;</span><span class="n">l</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="n">l</span><span class="o">=</span><span class="nf">SN</span><span class="p">(</span><span class="n">l</span><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">l</span><span class="p">);}</span><span class="n">I</span> <span class="nf">rs</span><span class="p">(</span><span class="n">I</span> <span class="n">z</span><span class="p">){</span><span class="n">u32</span> <span class="n">l</span><span class="p">;</span><span class="nf">read</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="o">&amp;</span><span class="n">l</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="n">l</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nf">SN</span><span class="p">(</span><span class="n">l</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">l</span><span class="p">);</span><span class="k">return</span> <span class="n">l</span><span class="o">+</span><span class="mi">4</span><span class="p">;}</span><span class="n">I</span> <span class="nf">ga</span><span class="p">(</span><span class="n">I</span> <span class="n">z</span><span class="p">,</span><span class="n">I</span> <span class="n">y</span><span class="p">,</span><span class="n">u32</span> <span class="n">x</span><span class="p">,</span><span class="n">u16</span> <span class="n">w</span><span class="p">){</span><span class="n">u32</span> <span class="n">b</span><span class="p">,</span><span class="n">u</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">u</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="p">);</span><span class="n">I</span> <span class="n">sz</span><span class="o">=</span><span class="nf">rs</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="o">+</span><span class="mi">12</span><span class="p">;</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">t</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="o">--</span><span class="n">u</span><span class="p">;</span><span class="nf">ao</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">u</span><span class="p">);</span><span class="k">switch</span><span class="p">(</span><span class="n">u</span><span class="p">){</span><span class="k">case</span> <span class="mi">1</span><span class="o">:++</span><span class="n">s</span><span class="p">;</span><span class="nf">wh</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="o">--</span><span class="n">s</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">6</span><span class="o">:</span><span class="n">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span> <span class="n">sz</span><span class="p">;}</span><span class="nf">wh</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="k">return</span> <span class="n">sz</span><span class="p">;}</span><span class="n">I</span> <span class="nf">gb</span><span class="p">(</span><span class="n">AR</span><span class="p">){</span><span class="n">u32</span> <span class="n">w</span><span class="p">,</span><span class="n">u</span><span class="p">;</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="n">I</span> <span class="n">t</span><span class="o">=</span><span class="n">d</span><span class="p">;</span><span class="n">d</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">u</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">O</span> <span class="o">*</span><span class="n">o</span><span class="o">=</span><span class="nf">ao</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">15</span><span class="p">);</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">e</span><span class="o">=</span><span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">u</span><span class="p">,</span><span class="n">PROT_READ</span><span class="p">,</span><span class="n">MAP_PRIVATE</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="mi">8</span><span class="p">;}</span><span class="n">I</span> <span class="nf">gc</span><span class="p">(</span><span class="n">AR</span><span class="p">){</span><span class="n">u32</span>
</span></span><span class="line"><span class="cl"><span class="n">w</span><span class="p">;</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">ao</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">8</span><span class="o">+</span><span class="n">c</span><span class="p">);</span><span class="k">return</span> <span class="mi">4</span><span class="p">;}</span><span class="n">I</span> <span class="nf">gd</span><span class="p">(</span><span class="n">AR</span><span class="p">){</span><span class="n">O</span><span class="o">*</span><span class="n">o</span><span class="p">,</span><span class="o">*</span><span class="n">r</span><span class="p">,</span><span class="o">*</span><span class="n">t</span><span class="p">;</span><span class="n">i32</span> <span class="n">u</span><span class="p">,</span><span class="n">w</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">){</span><span class="k">case</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">:</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">u</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">go</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">x</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">d</span><span class="o">=</span><span class="n">u</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">u</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="n">O</span> <span class="o">*</span><span class="n">b</span><span class="o">=</span><span class="nf">go</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">u</span><span class="p">);</span><span class="nf">xrgb</span>
</span></span><span class="line"><span class="cl"><span class="p">((</span><span class="n">u32</span><span class="o">*</span><span class="p">)</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">e</span><span class="p">,</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">w</span><span class="p">,</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">,</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">);}</span><span class="nf">wh</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">u</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="mi">12</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">u</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="o">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="n">u</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span><span class="k">return</span> <span class="mi">16</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="k">struct</span> <span class="n">timespec</span>
</span></span><span class="line"><span class="cl"><span class="n">ts</span><span class="o">=</span><span class="p">{.</span><span class="n">tv_sec</span><span class="o">=</span><span class="mi">0</span><span class="p">,.</span><span class="n">tv_nsec</span><span class="o">=</span><span class="mf">1.6e6</span><span class="p">};</span><span class="nf">nanosleep</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ts</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nf">wh</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="p">;</span><span class="k">case</span> <span class="mi">6</span><span class="o">:</span><span class="n">o</span><span class="o">=</span><span class="nf">go</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">x</span><span class="p">);</span><span class="n">r</span><span class="o">=</span><span class="nf">go</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="o">&amp;&amp;</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">b</span><span class="o">==</span><span class="mi">12</span><span class="p">){</span><span class="n">t</span><span class="o">=</span><span class="nf">go</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">b</span><span class="o">==</span><span class="mi">13</span><span class="p">){</span><span class="n">u32</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nf">wh</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="mi">4</span><span class="p">);}</span><span class="nf">wh</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">e</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="o">++</span><span class="n">e</span><span class="p">;}</span><span class="k">break</span><span class="p">;}</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span><span class="n">I</span> <span class="nf">ge</span><span class="p">(</span><span class="n">AR</span><span class="p">){</span><span class="n">u32</span> <span class="n">w</span><span class="p">,</span><span class="n">u</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">==</span><span class="mi">2</span><span class="p">){</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">u</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="n">O</span><span class="o">*</span><span class="n">o</span><span class="o">=</span><span class="nf">ao</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">d</span><span class="o">=</span><span class="n">u</span><span class="p">;</span><span class="nf">go</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">u</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">c</span><span class="o">=</span><span class="n">w</span><span class="p">;</span><span class="k">return</span> <span class="mi">8</span><span class="p">;}</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span><span class="n">I</span> <span class="nf">gf</span><span class="p">(</span><span class="n">AR</span><span class="p">){</span><span class="n">u32</span> <span class="n">w</span><span class="p">,</span><span class="n">ae</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">){</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="n">O</span><span class="o">*</span><span class="n">obj</span><span class="o">=</span><span class="nf">ao</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">d</span><span class="o">=</span><span class="n">x</span><span class="p">;</span><span class="nf">go</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">x</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">c</span><span class="o">=</span><span class="n">w</span><span class="p">;</span><span class="k">return</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="mi">4</span><span class="o">:</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ae</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="k">return</span> <span class="mi">4</span><span class="p">;}</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span><span class="n">I</span> <span class="nf">gg</span><span class="p">(</span><span class="n">AR</span><span class="p">){</span><span class="n">I</span> <span class="n">sz</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">){</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="n">sz</span><span class="o">=</span><span class="nf">rs</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span><span class="k">return</span> <span class="n">sz</span><span class="p">;}</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span><span class="n">I</span> <span class="nf">gh</span><span class="p">(</span><span class="n">AR</span><span class="p">){</span><span class="n">i32</span> <span class="n">w</span><span class="p">,</span><span class="n">u</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">u</span><span class="p">,</span><span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span><span class="n">O</span><span class="o">*</span><span class="n">b</span><span class="o">=</span><span class="nf">ao</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">e</span><span class="o">=&amp;</span><span class="nf">go</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">x</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">e</span><span class="p">[</span><span class="n">u</span><span class="p">];</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">                  <span class="n">s</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">fmt</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="k">return</span> <span class="mi">24</span><span class="p">;}</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">G</span> <span class="n">g</span><span class="p">[]</span><span class="o">=</span><span class="p">{{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">ga</span><span class="p">},{</span><span class="s">&#34;wl_shm&#34;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">gb</span><span class="p">},{</span><span class="s">&#34;wl_compositor&#34;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">gc</span><span class="p">},{</span><span class="s">&#34;wl_subcompositor&#34;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="s">&#34;wl_data_device_manager&#34;</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="s">&#34;wl_output&#34;</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="s">&#34;wl_seat&#34;</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="s">&#34;xdg_wm_base&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span><span class="p">,</span><span class="n">ge</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">gd</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">gf</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">gg</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">gh</span><span class="p">}};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">gi</span><span class="p">(</span><span class="n">AR</span><span class="p">){</span><span class="n">u32</span> <span class="n">w</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">wh</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="nf">read</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">ao</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="n">S</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="n">g</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]);){</span><span class="n">G</span><span class="o">*</span><span class="n">z</span><span class="o">=&amp;</span><span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">z</span><span class="o">-&gt;</span><span class="n">b</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="n">I</span> <span class="n">gl</span><span class="o">=</span><span class="nf">strlen</span><span class="p">(</span><span class="n">z</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nf">wh</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="o">+</span><span class="nf">SN</span><span class="p">(</span><span class="n">gl</span><span class="p">)</span><span class="o">+</span><span class="mi">4</span><span class="o">+</span><span class="mi">4</span><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">i</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nf">ws</span><span class="p">(</span><span class="n">y</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">z</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">);</span><span class="nf">write</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="o">&amp;</span><span class="n">z</span><span class="o">-&gt;</span><span class="n">b</span><span class="p">,</span><span class="mi">4</span><span class="p">);}</span><span class="k">break</span><span class="p">;}}</span><span class="kt">void</span> <span class="nf">si</span><span class="p">(){</span><span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">I</span> <span class="nf">main</span><span class="p">(</span><span class="n">I</span> <span class="n">_1</span><span class="p">,</span><span class="kt">char</span><span class="o">**</span><span class="n">_2</span><span class="p">){</span><span class="n">I</span> <span class="n">z</span><span class="o">=</span><span class="nf">socket</span><span class="p">(</span><span class="n">AF_UNIX</span><span class="p">,</span><span class="n">SOCK_STREAM</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">struct</span> <span class="n">sockaddr_un</span> <span class="n">y</span><span class="o">=</span><span class="p">{.</span>
</span></span><span class="line"><span class="cl"><span class="n">sun_family</span><span class="o">=</span><span class="n">AF_UNIX</span><span class="p">};</span><span class="kt">char</span> <span class="o">*</span><span class="n">x</span><span class="o">=</span><span class="nf">getenv</span><span class="p">(</span><span class="s">&#34;XDG_RUNTIME_DIR&#34;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">x</span><span class="p">)</span><span class="n">x</span><span class="o">=</span><span class="s">&#34;/tmp&#34;</span><span class="p">;</span><span class="k">do</span><span class="p">{</span><span class="nf">sprintf</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"> <span class="n">y</span><span class="p">.</span><span class="n">sun_path</span><span class="p">,</span><span class="s">&#34;%s/wayland-%d&#34;</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">c</span><span class="o">++</span><span class="p">);}</span><span class="k">while</span><span class="p">(</span><span class="nf">access</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">sun_path</span><span class="p">,</span><span class="n">F_OK</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">);</span><span class="nf">bind</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">y</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">y</span><span class="p">));</span><span class="nf">listen</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="n">S</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="n">fds</span><span class="p">);</span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="n">fds</span><span class="p">[</span><span class="n">i</span><span class="p">].</span>
</span></span><span class="line"><span class="cl"><span class="n">events</span><span class="o">=</span><span class="n">POLLIN</span><span class="o">|</span><span class="n">POLLHUP</span><span class="p">;</span><span class="n">fds</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">revents</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">fds</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">fd</span><span class="o">=</span><span class="mi">0</span><span class="p">;}</span><span class="n">fds</span><span class="p">[</span><span class="n">b</span><span class="o">++</span><span class="p">].</span><span class="n">fd</span><span class="o">=</span><span class="n">z</span><span class="p">;</span><span class="nf">signal</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="n">si</span><span class="p">);</span><span class="nf">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">f</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">f</span><span class="p">));</span><span class="k">while</span><span class="p">(</span><span class="nf">poll</span><span class="p">(</span><span class="n">fds</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">!=-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="n">fds</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">revents</span><span class="p">){</span><span class="n">I</span> <span class="n">u</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nf">accept</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="n">fds</span><span class="p">[</span><span class="n">b</span><span class="o">++</span><span class="p">].</span><span class="n">fd</span><span class="o">=</span><span class="n">u</span><span class="p">;}</span><span class="k">for</span><span class="p">(</span><span class="n">I</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">b</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="n">fds</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">revents</span><span class="o">&amp;</span><span class="n">POLLHUP</span><span class="p">){</span>
</span></span><span class="line"><span class="cl"><span class="nf">memmove</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fds</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="o">&amp;</span><span class="n">fds</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="mi">32</span><span class="o">-</span><span class="n">i</span><span class="p">);</span><span class="nf">memset</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="mi">0</span><span class="p">,</span><span class="mi">128</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="o">**</span><span class="n">f</span><span class="p">));</span><span class="o">--</span><span class="n">b</span><span class="p">;</span><span class="k">continue</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fds</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">revents</span><span class="p">){</span><span class="k">continue</span><span class="p">;}</span><span class="n">I</span> <span class="n">u</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">I</span> <span class="n">t</span><span class="o">=</span><span class="n">fds</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">fd</span><span class="p">;</span><span class="n">u32</span> <span class="n">s</span><span class="p">,</span><span class="n">r</span><span class="p">;</span><span class="kt">char</span> <span class="n">q</span><span class="p">[</span>
</span></span><span class="line"><span class="cl"><span class="nf">CMSG_SPACE</span><span class="p">(</span><span class="mi">8</span><span class="p">)];</span><span class="k">struct</span> <span class="n">cmsghdr</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span><span class="k">struct</span> <span class="n">iovec</span> <span class="n">n</span><span class="o">=</span><span class="p">{.</span><span class="n">iov_base</span><span class="o">=&amp;</span><span class="n">s</span><span class="p">,.</span><span class="n">iov_len</span><span class="o">=</span><span class="mi">4</span><span class="p">};</span><span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="n">msghdr</span> <span class="n">m</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="n">m</span><span class="p">.</span><span class="n">msg_iov</span><span class="o">=&amp;</span><span class="n">n</span><span class="p">;</span><span class="n">m</span><span class="p">.</span><span class="n">msg_iovlen</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">m</span><span class="p">.</span><span class="n">msg_control</span><span class="o">=</span><span class="n">q</span><span class="p">;</span><span class="n">m</span><span class="p">.</span><span class="n">msg_controllen</span><span class="o">=</span><span class="k">sizeof</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">q</span><span class="p">);</span><span class="nf">recvmsg</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="o">&amp;</span><span class="n">m</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="n">p</span><span class="o">=</span><span class="nf">CMSG_FIRSTHDR</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">){</span><span class="n">d</span><span class="o">=*</span><span class="p">(</span><span class="n">I</span> <span class="o">*</span><span class="p">)</span><span class="nf">CMSG_DATA</span><span class="p">(</span><span class="n">p</span><span class="p">);}</span><span class="nf">read</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="o">&amp;</span><span class="n">r</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span><span class="n">u16</span> <span class="n">o</span><span class="o">=</span><span class="p">((</span><span class="n">r</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xFFFF</span><span class="p">)</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="n">c</span><span class="o">=</span><span class="n">r</span><span class="o">&amp;</span><span class="mh">0xFFFF</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span><span class="nf">gi</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">c</span><span class="p">);}</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="n">S</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">128</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">++</span><span class="n">j</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">a</span><span class="o">==</span><span class="n">s</span><span class="o">&amp;&amp;</span><span class="n">g</span><span class="p">[</span><span class="n">f</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">b</span><span class="p">].</span><span class="n">c</span><span class="p">){</span><span class="n">o</span><span class="o">-=</span><span class="n">g</span><span class="p">[</span><span class="n">f</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">b</span><span class="p">].</span><span class="nf">c</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">c</span><span class="p">);</span><span class="k">break</span><span class="p">;}}</span><span class="k">if</span><span class="p">(</span><span class="n">o</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                     <span class="p">{</span><span class="nf">read</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">o</span><span class="p">);}}}}</span><span class="nf">unlink</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">sun_path</span><span class="p">);}</span>
</span></span></code></pre></div><p>You&rsquo;re welcome!</p>]]></description><pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate></item><item><title>Utility vs usability</title><link>https://drewdevault.com/2020/11/06/Utility-vs-usability.html</link><description><![CDATA[<p>In many fields, professional-grade tooling requires a high degree of knowledge
and training to use properly, usually more than is available to the amateur. The
typical mechanic&rsquo;s tool chest makes my (rather well-stocked, in my opinion) tool
bag look quite silly. A racecar driver is using a vehicle which is much more
complex than, say, the soccer mom&rsquo;s mini-van. Professional-grade tools are,
necessarily, more complex and require skill to use.</p>
<p>There are two attributes to consider when classifying these tools: <em>utility</em> and
<em>usability</em>. These are not the same thing. Some tools have both high utility and
high usability, such as a pencil. Some are highly usable, but of low utility,
such as a child&rsquo;s tricycle. Tools of both low-utility and low-usability are
uncommon, but I&rsquo;m sure you can think of a few examples from your own experiences
:)</p>
<p>When designing tools, it is important to consider both of these attributes, and
it helps to keep the intended audience in mind. I think that many programmers
today are overly concerned with usability, and insufficiently concerned with
utility. Some programmers (although this sort prefers &ldquo;developer&rdquo;) go so far as
to fetishize usability <em>at the expense</em> of utility.</p>
<p>In some cases, sacrificing utility in favor of usability is an acceptable
trade-off. In the earlier example&rsquo;s case, it&rsquo;s unlikely that anyone would argue
that the soccer mom should be loading the tots into an F1 racecar. However, it&rsquo;s
equally absurd to suppose that the F1 driver should bring a mini-van to the race
track. In the realm of programming, this metaphor speaks most strongly to me in
the design of programming tools.</p>
<p>I argue that most programmers are professionals who are going to invest several
years into learning the craft. This is the audience for whom I design my tools.
What trouble is it to spend an extra hour learning a somewhat less intuitive
<a href="https://git-send-email.io">code review tool</a> when the programming language
whose code you&rsquo;re reviewing required months to learn and years to master?</p>
<p><a href="https://xkcd.com/1205/"><img src="https://imgs.xkcd.com/comics/is_it_worth_the_time_2x.png" alt="An XKCD comic which depicts a table that compares &ldquo;time to improve task&rdquo; versus &ldquo;time saved by improvement&rdquo; and how to figure if the improvement is worthwhile"></a></p>
<p>I write tools to maximize the productivity of professional programmers. Ideally,
we can achieve both usability and utility, and often we do just that.
But, sometimes, these tools require a steeper learning curve. If they are <em>more
useful</em> in spite of that, they will usually save heaps of time in the long run.</p>
<p>Instead of focusing on dumbing down our tools, maximizing usability at the
expense of utility, we should focus on making powerful tools <em>and</em> fostering a
culture of <em>mentorship</em>. Senior engineers should be helping their juniors learn
and grow to embrace and build a new generation of more and more productive
tooling, considering usability all the while but never at the expense of
utility.</p>
<p>I&rsquo;ll address mentorship in more detail in future posts. For now, I&rsquo;ll just state
that mentorship is the praxis of my tooling philosophy. We can build better,
more powerful, and more productive tools, even if they require a steeper
learning curve, so long as we&rsquo;re prepared to teach people how to use them, and
they&rsquo;re prepared to learn.</p>]]></description><pubDate>Fri, 6 Nov 2020 00:00:00 +0000</pubDate></item><item><title>What is this Gemini thing anyway, and why am I excited about it?</title><link>https://drewdevault.com/2020/11/01/What-is-Gemini-anyway.html</link><description><![CDATA[<p>I&rsquo;ve been writing about some specific topics in the realm of Gemini on my blog
over the past two months or so, but I still haven&rsquo;t written a broader
introduction to Gemini, what I&rsquo;m doing with it, and why you should be excited
about it, too. Let&rsquo;s do that today!</p>
<p><a href="https://gemini.circumlunar.space/">Gemini</a> is a network protocol for exchanging
hypertext documents — &ldquo;hypertext&rdquo; in the general sense of the word, not
with respect to the hypertext markup language (HTML) that web browsers
understand. It&rsquo;s a simple network protocol which allows clients to request
hypertext documents (in its own document format, gemtext). It is, in some
respects, an evolution of <a href="https://en.wikipedia.org/wiki/Gopher_(protocol)">Gopher</a>, but more modernized and streamlined.</p>
<p>Gemini is very simple. The protocol uses TLS to establish an encrypted
connection (using self-signed certificates and
<abbr title="trust on first use">TOFU</abbr> rather than certificate
authorities), and performs a very simple exchange: the client sends the URL it
wants to retrieve, terminated with CRLF.  The server responds with an
informative line, consisting of a numeric status code and some additional
information (such as the document&rsquo;s mimetype), then writes the document and
closes the connection. Authentication, if desired, is done with client
certificates. User input, if desired, is done with a response code which conveys
a prompt string and a request for user input, followed by a second request with
the user&rsquo;s response filled into the URL&rsquo;s query string. And that&rsquo;s pretty much
it!</p>
<pre tabindex="0"><code>$ openssl s_client -quiet -crlf   \
    -servername drewdevault.com   \
    -connect drewdevault.com:1965 \
  | awk &#39;{ print &#34;response: &#34; $0 }&#39;
gemini://drewdevault.com
response: 20 text/gemini
response: ```ASCII art of a rocket next to &#34;Drew DeVault&#34; in a stylized font
response:   /\
response:   ||    ________                         ________       ____   ____            .__   __
response:   ||    \______ \_______   ______  _  __ \______ \   ___\   \ /   /____   __ __|  |_/  |_
response:  /||\    |    |  \_  __ \_/ __ \ \/ \/ /  |    |  \_/ __ \   Y   /\__  \ |  |  \  |\   __\
response: /:||:\   |    `   \  | \/\  ___/\     /   |    `   \  ___/\     /  / __ \|  |  /  |_|  |
response: |:||:|  /_______  /__|    \___  &gt;\/\_/   /_______  /\___  &gt;\___/  (____  /____/|____/__|
response: |/||\|        \/            \/                 \/     \/             \/
response:   **
response:   **
response: ```
[...]
</code></pre><p>So why am I excited about it?</p>
<p>My disdain for web browsers is well documented<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Web browsers are
<em>extraordinarily</em> complex, and any attempt to build a new one would be a
Sisyphean task. Successfully completing that implementation, if even possible,
would necessarily produce a Lovecraftian mess: unmaintainable, full of security
vulnerabilities, with gigabytes in RAM use and hours in compile times. And given
that all of the contemporary web browsers that implement a sufficiently useful
subset of web standards are ass and getting assier, what should we do?</p>
<p>The problem is unsolvable. We cannot have the &ldquo;web&rdquo; without all of these
problems. But what we can have is something different, like Gemini. Gemini does
not solve all of the web&rsquo;s problems, but it addresses a subset of its use-cases
better than the web does, and that excites me. I want to discard the parts of
the web that Gemini does better, and explore other solutions for anything that&rsquo;s
left of the web which is worth keeping (hint: much of it is not).</p>
<p>There are some aspects of Gemini which I approve of immensely:</p>
<ul>
<li>It&rsquo;s dead simple. A client or server implementation can be written from
scratch by a single person in the space of an afternoon or two. A new web
browser could take hundreds of engineers millions of hours to complete.</li>
<li>It&rsquo;s not extensible. Gemini is designed to be <em>difficult</em> to extend without
breaking backwards compatibility, and almost all proposals for expansion on
the mailing list are ultimately shot down. This is a good thing: extensibility
is generally a bad idea. Extensions ultimately lead to more complexity and
Gemini might suffer the same fate as the web if not for its disdain for
extensions.</li>
<li>It&rsquo;s opinionated about document formatting. There are no inline links (every
link goes on its own line), no formatting, and no inline images. Gemini
strictly separates the responsibility of content and presentation. Providing
the content is the exclusive role of the server, and providing the
presentation is the exclusive role of the client. There are no stylesheets and
authors have very little say in <em>how</em> their content is presented. It&rsquo;s still
possible for authors to express themselves within these constraints —
as with any other constraints — but it allows clients to be simpler and
act more as <em>user</em> agents than <em>vendor</em> agents.</li>
</ul>
<p>Some people argue that what we should have is &ldquo;the web, but less of it&rdquo;, i.e. a
&ldquo;sane&rdquo; subset of web standards. I don&rsquo;t agree (for one, I don&rsquo;t think there <em>is</em>
a &ldquo;sane&rdquo; subset of those standards), but I&rsquo;ll save that for another blog post.
Gemini is a new medium, and it&rsquo;s different from the web. Anyone who checking it
out should be prepared for that and open to working within its constraints.
Limitations breed creativity!</p>
<p>For my part, I have been working on a number of Gemini projects. For one, this
blog is now available <a href="gemini://drewdevault.com">on Gemini</a>, and I have started
writing some Gemini-exclusive content for it. I&rsquo;ve also written some software
you&rsquo;re welcome to use:</p>
<p><a href="https://sr.ht/~sircmpwn/gmni"><strong>libgmni</strong></a>,
<a href="https://sr.ht/~sircmpwn/gmni"><strong>gmni</strong></a>,
and <a href="https://sr.ht/~sircmpwn/gmni"><strong>gmnlm</strong></a> are my suite of Gemini client
software, all written in C11 and only depending on a POSIX-like system and
OpenSSL. libgmni is a general-purpose Gemini client library with <a href="https://git.sr.ht/~sircmpwn/gmni/tree/master/include/gmni">a simple
interface</a>. gmni is a
cURL-like <a href="https://drewdevault.com/gmni.1.html">command line tool</a> for
performing Gemini requests. Finally, gmnlm is a line-mode browser with a rich
feature-set. Together these tools weigh just under 4,000 lines of code, of which
about 1,600 are the URL parser from cURL vendored in.</p>
<p><a href="https://portal.drewdevault.com/gmnisrv.gmi"><strong>gmnisrv</strong></a> is a high-performance
Gemini server, also written in C11 for POSIX systems with OpenSSL. It supports
zero-configuration TLS, CGI scripting, auto-indexing, regex routing and URL
rewrites, and I have a couple more things planned for 1.0. It clocks in at about
6,700 lines, of which the same 1,600 are vendored from cURL, and an additional
2,800 lines are vendored from Fabrice Bellard&rsquo;s
<a href="https://bellard.org/quickjs/">quickjs</a> regex implementation.</p>
<p><a href="https://portal.drewdevault.com/kineto.gmi"><strong>kineto</strong></a> is an HTTP-to-Gemini
gateway, implemented as a single Go file (under 500 lines) with the assistance
of ~adnano&rsquo;s <a href="https://sr.ht/~adnano/go-gemini/">go-gemini</a> library. My Gemini
blog <a href="https://portal.drewdevault.com">is available through this portal</a> if you
would like to browse it.</p>
<p>So dive in and explore! Install gmnisrv on your server and set up a Gemini space
for yourself. Read the feeds from
<a href="gemini://gemini.circumlunar.space/capcom/">CAPCOM</a>. Write some software of your
own!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://drewdevault.com/2020/08/13/Web-browsers-need-to-stop.html">Exhibit A</a>, <a href="https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html">Exhibit B</a>, <a href="https://cmpwn.com/@sir/104894723861368333">Exhibit C</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 1 Nov 2020 00:00:00 +0000</pubDate></item><item><title>I&apos;m handing over maintenance of wlroots and sway to Simon Ser</title><link>https://drewdevault.com/2020/10/23/Im-handing-wlroots-and-sway-to-Simon.html</link><description><![CDATA[<p>Over the past several months, I&rsquo;ve been gradually weaning down my role in both
projects, and as a contributor to Wayland in general. I feel that I&rsquo;ve already
accomplished everything I set out to do with Wayland — and more! I have
been happily using sway as my daily driver for well over a year with no
complaints or conspicuously absent features. For me, there&rsquo;s little reason to
stay involved. This will likely come as no surprise to many who&rsquo;ve kept their
ear to the ground in these communities.</p>
<p>Simon has been an important co-maintainer on wlroots and sway for several years,
and also serves as a maintainer for Wayland itself, and Weston. I trust him with
these projects, and he&rsquo;s been doing a stellar job so far — no real change
in his work is necessary for this hand-off. Simon works for SourceHut full-time
and his compensation covers his role in the Wayland community, so you can trust
that the health of the project is unaffected, too.</p>
<p>There&rsquo;s still plenty of great things to come from these projects without me.
Many improvements are underway and more are planned for the future. Don&rsquo;t worry:
sway and wlroots have already demonstrated that they work quite well without my
active involvement.</p>
<p>Good luck, Simon, and thanks for all of your hard work! I&rsquo;m proud of you!</p>]]></description><pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate></item><item><title>Firefox: The Jewel^WEmbarassment of Open Source</title><link>https://drewdevault.com/2020/10/22/Firefox-the-embarassment-of-FOSS.html</link><description><![CDATA[<p>Circa 2006, the consensus on Firefox was concisely stated by this classic xkcd:</p>
<p><a href="https://xkcd.com/198/"><img src="https://imgs.xkcd.com/comics/perspective.png" alt="A stick-figure comic. The title reads “Sometimes, when I first wake up, I am caught in the horrible grip of perspective.” The character, waking up, says “It may be a jewel of open source, but Firefox is just a browser. It shows webpages. What the hell is wrong with us?” The caption reads “Fortunately, this subsides quickly.”"></a></p>
<p>This feeling didn&rsquo;t last. In 2016, I wrote
<a href="https://drewdevault.com/2016/05/11/In-Memoriam-Mozilla.html">In Memoriam - Mozilla</a>, and in 2017,
<a href="https://drewdevault.com/2017/12/16/Firefox-is-on-a-slippery-slope.html">Firefox is on a slippery slope</a>.
Well, I was right, and Firefox (and Mozilla) have only become worse since. The
fuck-up culture is so ingrained in Mozilla in 2020 that it&rsquo;s hard to see it ever
getting better again.</p>
<p>In the time since my last article on the subject, Mozilla has:</p>
<ul>
<li>Laid off 25% of its employees, mostly engineers, many of whom work on Firefox<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>Raised executive pay 400% as their market share declined 85%<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
<li>Sent a record of all browsing traffic to CloudFlare by default<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></li>
<li>Added advertisements to the new tab page on Firefox<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></li>
<li>Used their brand to enter the saturated VPN grift market<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></li>
<li>Built a walled garden for add-ons, then let the walls crash in<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></li>
<li>Started, and killed, a dozen projects which were not Firefox<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup></li>
</ul>
<p>The most interesting things they&rsquo;ve been involved in in the past few years are
Rust and Servo, and they fired most or all of their engineers involved in both.
And, yesterday, <a href="https://blog.mozilla.org/blog/2020/10/20/mozilla-reaction-to-u-s-v-google/">Mozilla published a statement</a> siding with
Google on anti-trust, failing to disclose the fact that Google pays to keep their
lights on.</p>
<p>Is this the jewel of open source? No, not anymore. Firefox is the embarrassment
of open source, and it&rsquo;s the only thing standing between Google and an
all-encompassing monopoly over the web. Mozilla has divested from Firefox and
started funnelling what money is left out of their engineering payroll and into
their executive pockets. The web is dead, and its fetid corpse persists only
as the layer of goop that Google scrapes between its servers and your screen.
Anyone who still believes that Mozilla will save the web is a fool.</p>
<p>As I have <a href="https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html">stated before</a>, the scope of web browsers has been
increasing at a reckless pace for <em>years</em>, to the point where it&rsquo;s literally
impossible to build a new web browser. We have no recourse left to preserve the
web. This is why I&rsquo;m throwing my weight behind <a href="https://gemini.circumlunar.space/">Gemini</a>, a new protocol
which is <em>much simpler</em> than the web, and which you can implement yourself in a
weekend.</p>
<p>Forget about the web, it&rsquo;s a lost cause. Let&rsquo;s move on.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://arstechnica.com/information-technology/2020/08/firefox-maker-mozilla-lays-off-250-workers-says-covid-19-lowered-revenue/">Mozilla cuts 250 jobs, says Firefox development will be affected</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="http://calpaterson.com/mozilla.html">Firefox usage is down 85% despite Mozilla&rsquo;s top exec pay going up 400%</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://blog.mozilla.org/blog/2020/02/25/firefox-continues-push-to-bring-dns-over-https-by-default-for-us-users/">Firefox continues push to bring DNS over HTTPS by default for US users</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://blog.mozilla.org/futurereleases/2018/04/30/a-privacy-conscious-approach-to-sponsored-content/">A Privacy-Conscious Approach to Sponsored Content</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://vpn.mozilla.org/">Mozilla VPN</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://hacks.mozilla.org/2019/05/technical-details-on-the-recent-firefox-add-on-outage/">Technical Details on the Recent Firefox Add-on Outage</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://killedbymozilla.com/">Killed by Mozilla</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate></item><item><title>Status update, October 2020</title><link>https://drewdevault.com/2020/10/15/Status-update-October-2020.html</link><description><![CDATA[<p>I&rsquo;m writing this month&rsquo;s status update from a brand-new desktop workstation
(well, I re-used the GPU), my first new workstation in about 10 years. I hope
this new one lasts for another decade! I aimed for something smaller and
lightweight this time — it&rsquo;s a Mini-ITX build. I&rsquo;ve only been running this
for a few days, so let me tell you about the last few accomplishments which are
accountable to my venerable workstation&rsquo;s final days of life.</p>
<p>First, there&rsquo;s been a ton of important work completed for SourceHut&rsquo;s API 2.0
plans. All of the main blockers for the first version of meta.sr.ht&rsquo;s writable
GraphQL API are resolved, and after implementing a few more resolvers it should
be in a shippable state. This included riggings for database transactions,
simplification of the mini-&ldquo;ORM&rdquo; I built, and support for asyncronous work like
delivering webhooks. The latter called for a new library, <a href="https://sr.ht/~sircmpwn/dowork/">dowork</a>,
which you&rsquo;re free to reuse to bring asyncronous work processing to your Go
programs.</p>
<p>I also built a new general-purpose daemon for SourceHut called
<a href="https://sr.ht/~sircmpwn/chartsrv/">chartsrv</a>, which can be used to generate graphs from
<a href="https://prometheus.io/">Prometheus</a> data. The following is a real-time graph of the load
average on the builds.sr.ht workers:</p>
<p><img src="https://metrics.sr.ht/chart.svg?title=Build%20worker%20load%20average&amp;query=avg_over_time%28node_load15%7Binstance%3D~%22cirno%5B0-9%5D%2B.sr.ht%3A80%22%7D%5B1h%5D%29&amp;max=64&amp;since=336h&amp;stacked&amp;step=10000&amp;height=3&amp;width=10" alt="A chart which hopefully shows a reasonable load average across all workers"></p>
<p>I&rsquo;ve been getting more into <a href="https://gemini.circumlunar.space/">Gemini</a> this month, and have completed
three (or four?) whole projects for it:</p>
<ul>
<li><a href="https://sr.ht/~sircmpwn/gmni/">gmni</a> and gmnlm: a client implementation and line-mode browser</li>
<li><a href="https://sr.ht/~sircmpwn/gmnisrv/">gmnisrv</a>: a server implementation</li>
<li><a href="https://sr.ht/~sircmpwn/kineto/">kineto</a>: an HTTP-&gt;Gemini portal</li>
</ul>
<p>The (arguably) fourth project is the completion of a Gemini version of this
blog, which is available at <code>gemini://drewdevault.com</code>, or via the kineto portal
at <a href="https://portal.drewdevault.com">portal.drewdevault.com</a>. I&rsquo;ll be posting
some content exclusively on Gemini (and I already have!), so get yourself a
client if you want to tune in.</p>
<p>I have also invested some effort into <a href="https://git.sr.ht/~sircmpwn/himitsu">himitsu</a>, a project I shelved
for so long that you probably don&rsquo;t remember it. Worry not, I have rewritten the
README.md to give you a better introduction to it. Here&rsquo;s a screenshot for your
viewing pleasure:</p>
<p><img src="https://redacted.moe/f/13c10c49.png" alt="A GUI dialog asking a user to consent to allow an application to access their IMAP credentials"></p>
<p>Bonus update: two new <a href="https://baremessages.org">BARE</a> implementations have
appeared: OCaml and Java.</p>
<p>That&rsquo;s all for now! I&rsquo;ll see you for the next update soon. Thanks for your
support!</p>
<details>
  <summary>...</summary>
  <img src="https://redacted.moe/f/26c6ba23.png" alt="A screenshot of a page of a programming language specification detailing the syntax of tagged unions" />
</details>]]></description><pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate></item><item><title>Four principles of software engineering</title><link>https://drewdevault.com/2020/10/09/Four-principles-of-software-engineering.html</link><description><![CDATA[<p>Software should be <strong>robust</strong>. It should be designed to accommodate all known
edge cases. In practice, this means predicting and handling all known error
cases, enumerating and addressing all classes of user inputs, reasoning about
and planning for the performance characteristics of your program, and so on.</p>
<p>Software should be <strong>reliable</strong>. It should be expected to work for an extended
length of time under design conditions without failures. Ideally, it should work
outside of design conditions up to some threshold.</p>
<p>Software should also be <strong>stable</strong>. It should not change in incompatible or
unexpected ways; if it works today it should also work tomorrow. If it has to
change, a plan shall be written. Stakeholders (including users!) should be given
advance notice and should be involved in the planning stage.</p>
<p>Finally, software should be <strong>simple</strong>. Only as many moving parts should be
included as necessary to meet the other three goals. All software has bugs, but
complicated software (1) has more bugs and (2) is more difficult to diagnose
and fix. Note that designing a simple solution is usually more difficult than
designing a complex solution.</p>
<p><em>This (short) article is based on <a href="https://cmpwn.com/@sir/104931806273081351">a Mastodon post</a> I wrote a few weeks ago.</em></p>]]></description><pubDate>Fri, 9 Oct 2020 00:00:00 +0000</pubDate></item><item><title>Spamtoberfest</title><link>https://drewdevault.com/2020/10/01/Spamtoberfest.html</link><description><![CDATA[<p>As I&rsquo;ve <a href="https://drewdevault.com/2020/08/10/How-to-contribute-to-FOSS.html">written before</a>, the best contributors to a FOSS project are
intrinsically motivated to solve problems in your software. This sort of
contribution is often fixing an important problem and places a smaller burden on
maintainers to spend their time working with the contributor. I&rsquo;ve previously
contrasted this with the &ldquo;I want to help out!&rdquo; contributions, where a person
just has a vague desire to help out. Those contributions are, generally, less
valuable and place a greater burden on the maintainer. Now, DigitalOcean has
lowered the bar even further with Hacktoberfest.</p>
<p><em>Disclaimer: I am the founder of a FOSS project hosting company similar to GitHub.</em></p>
<p>As I write this, a Digital Ocean-sponsored and GitHub-enabled Distributed Denial
of Service (DDoS) attack is ongoing, wasting the time of thousands of free
software maintainers with an onslaught of meaningless spam. Bots are spamming
<a href="https://github.com/search?q=amazing+project+is:pr&amp;type=Issues">tens of thousands</a> of pull requests like this:</p>
<p><a href="https://github.com/hundredrabbits/100r.co/pull/39/files"><img src="https://redacted.moe/f/fd88f606.png" alt="Screenshot of a spam pull request on GitHub which adds garbage to the README.md file"></a></p>
<p>The official response from both Digital Ocean and GitHub appears to be passing
the buck.  Digital Ocean addresses spam in their FAQ, putting the burden of
dealing with it entirely on the maintainers:</p>
<blockquote>
<p>Spammy pull requests can be given a label that contains the word &ldquo;invalid&rdquo; or
&ldquo;spam&rdquo; to discount them. Maintainers are faced with the majority of spam that
occurs during Hacktoberfest, and we dislike spam just as much as you. If
you&rsquo;re a maintainer, please label any spammy pull requests submitted to the
repositories you maintain as &ldquo;invalid&rdquo; or &ldquo;spam&rdquo;, and close them. Pull
requests with this label won&rsquo;t count toward Hacktoberfest.</p></blockquote>
<p>via <a href="https://hacktoberfest.digitalocean.com/details">Hacktoberfest FAQ</a></p>
<p>Here&rsquo;s GitHub&rsquo;s response:</p>
<blockquote>
<p>The content and activity you are reporting appears to be related to
Hacktoberfest. Please keep in mind that GitHub Staff is not enforcing
Hacktoberfest rules; we will, however, enforce our own Acceptable Use
Policies. According to the Hacktoberfest FAQ&hellip; [same quote as given above]</p></blockquote>
<p>via <a href="https://twitter.com/kyleknighted/status/1311685461828612097">@kyleknighted@twitter.com</a></p>
<p>So, according to these two companies, whose responsibility is it to deal with
the spam that <em>they&rsquo;ve</em> created? The maintainers, of course! All for a T-Shirt.</p>
<p>Let&rsquo;s be honest. Hacktoberfest has never generated anything of value for open
source. It&rsquo;s a marketing stunt which sends a deluge of low-effort contributions
to maintainers, leaving them to clean up the spam. I&rsquo;ve never been impressed
with Hacktoberfest contributions, even the ones which aren&rsquo;t obviously written
by a bot:</p>
<p><a href="https://github.com/whatwg/html/pull/5975/files"><img src="https://redacted.moe/f/970f2a31.png" alt="Screenshot of a pull request which needlessly comment a CSS file"></a></p>
<p>Hacktoberfest is, and has always been, about one thing: marketing for Digital
Ocean.</p>
<iframe
src="https://oc.todon.fr/@val/104960502585461740/embed"
class="mastodon-embed"
style="max-width: 100%; border: 0; margin: 0 auto; display: block;"
width="400"
height="530"
allowfullscreen="allowfullscreen"></iframe>
<p>This is what we get with corporate-sponsored &ldquo;social coding&rdquo;, brought to you by
Digital Ocean and GitHub and McDonalds, home of the Big Mac™. When you
build the Facebook of coding, you get the Facebook of coding. We don&rsquo;t need to
give away T-Shirts to incentivize drive-by drivel from randoms who will never
get any closer to open source than a +1/-1 README.md change.</p>
<p>What would <em>actually</em> benefit FOSS is to enable the strong mentorship necessary
raise a new generation of <strong>software engineers</strong> under the tutelage of
maintainers who can rely on a strong support system to do their work. Programs
like Google Summer of Code do this better. Programs where a marketing department
spends $5,000 on T-Shirts to flood maintainers with garbage and clothe people in
ads are doing the opposite: <em>hurting</em> open source.</p>
<p><a href="https://redacted.moe/f/a50f2dfc.png"><img src="https://redacted.moe/f/a50f2dfc.png" alt="Screenshot of a friend&rsquo;s notifications, 9 out of 11 of which are spam"></a></p>
<p>Check out <a href="https://twitter.com/shitoberfest">@shitoberfest on Twitter</a> for more
Hacktoberfest garbage.</p>
<p><strong>Update 2020-10-03</strong>: Digital Ocean
<a href="https://hacktoberfest.digitalocean.com/hacktoberfest-update">has updated their rules</a>,
among other things asking maintainers to opt-in, to reduce spam.</p>]]></description><pubDate>Thu, 1 Oct 2020 00:00:00 +0000</pubDate></item><item><title>A tale of two libcs</title><link>https://drewdevault.com/2020/09/25/A-story-of-two-libcs.html</link><description><![CDATA[<p>I received a bug report from Debian today, who had fed some garbage into
<a href="https://git.sr.ht/~sircmpwn/scdoc">scdoc</a>, and it gave them a SIGSEGV back.
Diving into this problem gave me a good opportunity to draw a comparison between
musl libc and glibc. Let&rsquo;s start with the stack trace:</p>
<pre tabindex="0"><code>==26267==ERROR: AddressSanitizer: SEGV on unknown address 0x7f9925764184
(pc 0x0000004c5d4d bp 0x000000000002 sp 0x7ffe7f8574d0 T0)
==26267==The signal is caused by a READ memory access.
    0 0x4c5d4d in parse_text /scdoc/src/main.c:223:61
    1 0x4c476c in parse_document /scdoc/src/main.c
    2 0x4c3544 in main /scdoc/src/main.c:763:2
    3 0x7f99252ab0b2 in __libc_start_main
/build/glibc-YYA7BZ/glibc-2.31/csu/../csu/libc-start.c:308:16
    4 0x41b3fd in _start (/scdoc/scdoc+0x41b3fd)
</code></pre><p>And if we pull up that line of code, we find&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nf">isalnum</span><span class="p">(</span><span class="n">last</span><span class="p">)</span> <span class="o">||</span> <span class="p">((</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">FORMAT_UNDERLINE</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nf">isalnum</span><span class="p">(</span><span class="n">next</span><span class="p">)))</span> <span class="p">{</span>
</span></span></code></pre></div><p>Hint: p is a valid pointer. &ldquo;last&rdquo; and &ldquo;next&rdquo; are both uint32_t. The segfault
happens in the second call to isalnum. And, the key: it can only be reproduced
on glibc, not on musl libc. If you did a double-take, you&rsquo;re not alone. There&rsquo;s
nothing here which could have caused a segfault.</p>
<p>Since it was narrowed down to glibc, I pulled up the source code and went
digging for the isalnum implementation, expecting some stupid bullshit. But
before I get into their stupid bullshit, of which I can assure you there is <em>a
lot</em>, let&rsquo;s briefly review the happy version. This is what the musl libc
<code>isalnum</code> implementation looks like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">isalnum</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">isalpha</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">||</span> <span class="nf">isdigit</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">isalpha</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">c</span><span class="o">|</span><span class="mi">32</span><span class="p">)</span><span class="o">-</span><span class="sc">&#39;a&#39;</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">isdigit</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;0&#39;</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>As expected, for any value of <code>c</code>, isalnum will never segfault. Because why the
fuck would isalnum segfault? Okay, now, let&rsquo;s compare this to the
<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=ctype/ctype.h;h=351495aa4feaf23993fe65afc0760615268d044e;hb=HEAD">glibc implementation</a>. When opening this header, you&rsquo;re greeted with the
typical GNU bullshit, but let&rsquo;s trudge through and grep for isalnum.</p>
<p>The first result is this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">enum</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">_ISupper</span> <span class="o">=</span> <span class="nf">_ISbit</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span>        <span class="cm">/* UPPERCASE.  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">_ISlower</span> <span class="o">=</span> <span class="nf">_ISbit</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span>        <span class="cm">/* lowercase.  */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">_ISalnum</span> <span class="o">=</span> <span class="nf">_ISbit</span> <span class="p">(</span><span class="mi">11</span><span class="p">)</span>        <span class="cm">/* Alphanumeric.  */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>This looks like an implementation detail, let&rsquo;s move on.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">__exctype</span> <span class="p">(</span><span class="n">isalnum</span><span class="p">);</span>
</span></span></code></pre></div><p>But what&rsquo;s <code>__exctype</code>? Back up the file a few lines&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define __exctype(name) extern int name (int) __THROW
</span></span></span></code></pre></div><p>Okay, apparently that&rsquo;s just the prototype. Not sure why they felt the need to
write a macro for that. Next search result&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#if !defined __NO_CTYPE
</span></span></span><span class="line"><span class="cl"><span class="cp"># ifdef __isctype_f
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nf">__isctype_f</span> <span class="p">(</span><span class="n">alnum</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span></code></pre></div><p>Okay, this looks useful. What is <code>__isctype_f</code>? Back up the file now&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#ifndef __cplusplus
</span></span></span><span class="line"><span class="cl"><span class="cp"># define __isctype(c, type) \
</span></span></span><span class="line"><span class="cl"><span class="cp">  ((*__ctype_b_loc ())[(int) (c)] &amp; (unsigned short int) type)
</span></span></span><span class="line"><span class="cl"><span class="cp">#elif defined __USE_EXTERN_INLINES
</span></span></span><span class="line"><span class="cl"><span class="cp"># define __isctype_f(type) \
</span></span></span><span class="line"><span class="cl"><span class="cp">  __extern_inline int                                                         \
</span></span></span><span class="line"><span class="cl"><span class="cp">  is##type (int __c) __THROW                                                  \
</span></span></span><span class="line"><span class="cl"><span class="cp">  {                                                                           \
</span></span></span><span class="line"><span class="cl"><span class="cp">    return (*__ctype_b_loc ())[(int) (__c)] &amp; (unsigned short int) _IS##type; \
</span></span></span><span class="line"><span class="cl"><span class="cp">  }
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></div><p>Oh&hellip;. oh dear. It&rsquo;s okay, we&rsquo;ll work through this together. Let&rsquo;s see,
<code>__isctype_f</code> is some kind of inline function&hellip; wait, this is the else branch
of <code>#ifndef __cplusplus</code>. Dead end. Where the fuck is isalnum <em>actually</em>
defined? Grep again&hellip; okay&hellip; here we are?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#if !defined __NO_CTYPE
</span></span></span><span class="line"><span class="cl"><span class="cp"># ifdef __isctype_f
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nf">__isctype_f</span> <span class="p">(</span><span class="n">alnum</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp"># elif defined __isctype
</span></span></span><span class="line"><span class="cl"><span class="cp"># define isalnum(c)     __isctype((c), _ISalnum) </span><span class="c1">// &lt;- this is it
</span></span></span></code></pre></div><p>Hey, there&rsquo;s that implementation detail from earlier! Remember this?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">enum</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">_ISupper</span> <span class="o">=</span> <span class="nf">_ISbit</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span>        <span class="cm">/* UPPERCASE.  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">_ISlower</span> <span class="o">=</span> <span class="nf">_ISbit</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span>        <span class="cm">/* lowercase.  */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">_ISalnum</span> <span class="o">=</span> <span class="nf">_ISbit</span> <span class="p">(</span><span class="mi">11</span><span class="p">)</span>        <span class="cm">/* Alphanumeric.  */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Let&rsquo;s suss out that macro real quick:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp"># include &lt;bits/endian.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"># if __BYTE_ORDER == __BIG_ENDIAN
</span></span></span><span class="line"><span class="cl"><span class="cp">#  define _ISbit(bit)   (1 &lt;&lt; (bit))
</span></span></span><span class="line"><span class="cl"><span class="cp"># else </span><span class="cm">/* __BYTE_ORDER == __LITTLE_ENDIAN */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#  define _ISbit(bit)   ((bit) &lt; 8 ? ((1 &lt;&lt; (bit)) &lt;&lt; 8) : ((1 &lt;&lt; (bit)) &gt;&gt; 8))
</span></span></span><span class="line"><span class="cl"><span class="cp"># endif
</span></span></span></code></pre></div><p>Oh, for fuck&rsquo;s sake. Whatever, let&rsquo;s move on and just assume this is a magic
number. The other macro is <code>__isctype</code>, which is similar to the <code>__isctype_f</code> we
were just looking at a moment ago. Let&rsquo;s go look at that <code>ifndef __cplusplus</code>
branch again:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#ifndef __cplusplus
</span></span></span><span class="line"><span class="cl"><span class="cp"># define __isctype(c, type) \
</span></span></span><span class="line"><span class="cl"><span class="cp">  ((*__ctype_b_loc ())[(int) (c)] &amp; (unsigned short int) type)
</span></span></span><span class="line"><span class="cl"><span class="cp">#elif defined __USE_EXTERN_INLINES
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#endif
</span></span></span></code></pre></div><p>&hellip;</p>
<p>Well, at least we have a pointer dereference now, that could explain the
segfault. What&rsquo;s <code>__ctype_b_loc</code>?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* These are defined in ctype-info.c.
</span></span></span><span class="line"><span class="cl"><span class="cm">   The declarations here must match those in localeinfo.h.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">   In the thread-specific locale model (see `uselocale&#39; in &lt;locale.h&gt;)
</span></span></span><span class="line"><span class="cl"><span class="cm">   we cannot use global variables for these as was done in the past.
</span></span></span><span class="line"><span class="cl"><span class="cm">   Instead, the following accessor functions return the address of
</span></span></span><span class="line"><span class="cl"><span class="cm">   each variable, which is local to the current thread if multithreaded.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">   These point into arrays of 384, so they can be indexed by any `unsigned
</span></span></span><span class="line"><span class="cl"><span class="cm">   char&#39; value [0,255]; by EOF (-1); or by any `signed char&#39; value
</span></span></span><span class="line"><span class="cl"><span class="cm">   [-128,-1).  ISO C requires that the ctype functions work for `unsigned
</span></span></span><span class="line"><span class="cl"><span class="cm">   char&#39; values and for EOF; we also support negative `signed char&#39; values
</span></span></span><span class="line"><span class="cl"><span class="cm">   for broken old programs.  The case conversion arrays are of `int&#39;s
</span></span></span><span class="line"><span class="cl"><span class="cm">   rather than `unsigned char&#39;s because tolower (EOF) must be EOF, which
</span></span></span><span class="line"><span class="cl"><span class="cm">   doesn&#39;t fit into an `unsigned char&#39;.  But today more important is that
</span></span></span><span class="line"><span class="cl"><span class="cm">   the arrays are also used for multi-byte character sets.  */</span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="o">**</span><span class="nf">__ctype_b_loc</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="n">__THROW</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">__const__</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="k">const</span> <span class="n">__int32_t</span> <span class="o">**</span><span class="nf">__ctype_tolower_loc</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="n">__THROW</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">__const__</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="k">const</span> <span class="n">__int32_t</span> <span class="o">**</span><span class="nf">__ctype_toupper_loc</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="n">__THROW</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">__const__</span><span class="p">));</span>
</span></span></code></pre></div><p>That is just so, super cool of you, glibc. I just <em>love</em> dealing with locales.
Anyway, my segfaulted process is sitting in gdb, and equipped with all of this
information I wrote the following monstrosity:</p>
<pre tabindex="0"><code>(gdb) print ((unsigned int **(*)(void))__ctype_b_loc)()[next]
Cannot access memory at address 0x11dfa68
</code></pre><p>Segfault found. Reading that comment again, we see &ldquo;ISO C requires that the
ctype functions work for &lsquo;unsigned char&rsquo; values and for EOF&rdquo;. If we
cross-reference that with the specification:</p>
<blockquote>
<p>In all cases [of functions defined by ctype.h,] the argument is an int, the
value of which shall be representable as an unsigned char or shall equal the
value of the macro EOF.</p></blockquote>
<p>So the fix is obvious at this point. Okay, fine, my bad. My code is wrong. I
apparently cannot just hand a UCS-32 codepoint to isalnum and expect it to tell
me if it&rsquo;s between 0x30-0x39, 0x41-0x5A, or 0x61-0x7A.</p>
<p>But, I&rsquo;m going to go out on a limb here: maybe isalnum should never cause a
program to segfault no matter what input you give it. Maybe because the spec
says you <em>can</em> does not mean you <em>should</em>. Maybe, just maybe, the behavior of
this function should not depend on five macros, whether or not you&rsquo;re using a
C++ compiler, the endianness of your machine, a look-up table, thread-local
storage, and two pointer dereferences.</p>
<p>Here&rsquo;s the musl version as a quick reminder:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">isalnum</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">isalpha</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">||</span> <span class="nf">isdigit</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">isalpha</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">c</span><span class="o">|</span><span class="mi">32</span><span class="p">)</span><span class="o">-</span><span class="sc">&#39;a&#39;</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">isdigit</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;0&#39;</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Bye!</p>]]></description><pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate></item><item><title>TOFU recommendations for Gemini</title><link>https://drewdevault.com/2020/09/21/Gemini-TOFU.html</link><description><![CDATA[<p>I will have more to say about <a href="https://gemini.circumlunar.space/">Gemini</a> in the future, but for now, I wanted to
write up some details about one thing in particular: the trust-on-first-use
algorithm I implemented for my client, <a href="https://sr.ht/~sircmpwn/gmni">gmni</a>. I think you should implement
this algorithm, too!</p>
<p>First of all, it&rsquo;s important to note that the Gemini specification explicitly
mentions TOFU and the role of self-signed certificates: they are the norm in
Geminiland, and if your client does not support them then you&rsquo;re going to be
unable to browse many sites. However, the exact details are left up to the
implementation. Here&rsquo;s what mine does:</p>
<p>First, on startup, it finds the known_hosts file. For my client, this is
<code>~/.local/share/gmni/known_hosts</code> (the exact path is adjusted as necessary per
the XDG basedirs specification). Each line of this file represents a known host,
and each host has four fields separated by spaces, in this order:</p>
<ul>
<li>Hostname (e.g. gemini.circumlunar.space)</li>
<li>Fingerprint algorithm (e.g. SHA-512)</li>
<li>Fingerprint, in hexadecimal, with &lsquo;:&rsquo; between each octet (e.g. 55:01:D8&hellip;)</li>
<li>Unix timestamp of the certificate&rsquo;s notAfter date</li>
</ul>
<p>If a known_hosts entry is encountered with a hashing algorithm you don&rsquo;t
understand, it is disregarded.</p>
<p>Then, when processing a request and deciding whether or not to trust its
certificate, take the following steps:</p>
<ol>
<li>Verify that the certificate makes sense. Check the notBefore and notAfter
dates against the current time, and check that the hostname is correct
(including wildcards). Apply any other scrutiny you want, like enforcing a
good hash algorithm or an upper limit on the expiration date. If these checks
do not pass, the trust state is INVALID, GOTO 5.</li>
<li>Compute the certificate&rsquo;s fingerprint. Use the entire certificate (in OpenSSL
terms, <code>X509_digest</code> will do this), not just the public key.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>Look up the known_hosts record for this hostname. If one is found, but the
record is expired, disregard it. If one is found, and the fingerprint does
not match, the trust state is UNTRUSTED, GOTO 5. Otherwise, the trust state
is TRUSTED. GOTO 7.</li>
<li>The trust state is UNKNOWN. GOTO 5.</li>
<li>Display information about the certficate and its trust state to the user, and
prompt them to choose an action, from the following options:
<ul>
<li>If INVALID, the user&rsquo;s choices are ABORT or TRUST_TEMPORARY.</li>
<li>If UNKNOWN, the user&rsquo;s choices are ABORT, TRUST_TEMPORARY, or TRUST_ALWAYS.</li>
<li>If UNTRUSTED, abort the request and display a diagnostic message. The user
must manually edit the known_hosts file to correct the issue.</li>
</ul>
</li>
<li>Complete the requested action:
<ul>
<li>If ABORT, terminate the request.</li>
<li>If TRUST_TEMPORARY, update the session&rsquo;s list of known hosts.</li>
<li>If TRUST_ALWAYS, append a record to the known_hosts file and update the
session&rsquo;s list of known hosts.</li>
</ul>
</li>
<li>Allow the request to proceed.</li>
</ol>
<p>If the trust state is UNKNOWN, instead of requring user input to proceed, the
implementation MAY proceed with the request IF the UI displays that a new
certificate was trusted and provides a means to review the certificate and
revoke that trust.</p>
<p>Note that being signed by a certificate authority in the system trust store is
not considered meaningful to this algorithm. Such a cert is TOFU&rsquo;d all the same.</p>
<p>That&rsquo;s it! If you have feedback on this approach, please <a href="mailto:sir@cmpwn.com">send me an
email</a>.</p>
<p>My implementation doesn&rsquo;t <em>entirely</em> match this behavior, but it&rsquo;s close and
I&rsquo;ll finish it up before 1.0. If you want to read the code, <a href="https://git.sr.ht/~sircmpwn/gmni/tree/master/src/tofu.c">here it is</a>.</p>
<p>Bonus recommendation for servers: you <strong>should</strong> use a self-signed certificate,
and you <strong>should not</strong> use a certificate signed by one of the mainstream
certificate authorities. We don&rsquo;t need to carry along the legacy CA cabal into
our brave new Gemini future.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Rationale: this fingerprint matches the output of <code>openssl x509 -sha512 -fingerprint</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate></item><item><title>The unrealized potential of federation</title><link>https://drewdevault.com/2020/09/20/The-potential-of-federation.html</link><description><![CDATA[<p>There are some major problems on the internet which may seem intractable. How do
we prevent centralization of our communication tools under the authority of a
few, whose motivations may not align with our interests? How do we build
internet-scale infrastructure without a megacorp-scale budget? Can we make our
systems reliable and fault-tolerant — in the face of technical <em>and</em>
social problems?</p>
<p><strong>Federation</strong> is an idea which takes a swing at all of these problems.</p>
<p><em>Note: apparently some cryptocurrency enthusiasts are parading this article
around to peddle their garbage. Cryptocurrency is the digitally woke techbro&rsquo;s
ponzi scheme, and is a massive waste of electricity and developer effort. Anyone
who tells you anything positive about anything which is even remotely connected
to cryptocurrency almost certainly has ulterior motives and you should steer
clear. So hopefully that settles that. And cryptocurrency is a P2P system,
anyway, NOT a federation!</em></p>
<p>The key trait of a software system which is <em>federated</em> is that the servers are
controlled by independent, sovereign entities, and that they exist together
under a common web of communication protocols and social agreements. This
occupies a sort of middle ground between the centralized architecture and the
peer-to-peer (or &ldquo;decentralized&rdquo;) architecture. Federation enjoys the advantages
of both, and few of the drawbacks.</p>
<p>In a federated software system, groups of users are built around small,
neighborly instances of servers. These are usually small servers, sporting only
modest resource requirements to support their correspondingly modest userbase.
Crucially, these small servers speak to <em>one another</em> using standard protocols,
allowing users of one instance to communicate seamlessly with users of other
instances. You can build a culture and shared sense of identity on your
instance, but also reach out and easily connect with other instances.</p>
<p>The governance of a federated system then becomes distributed among many
operators. Every instance has the following privileges:</p>
<ol>
<li>To set the rules which govern users of their instance</li>
<li>To set the rules which govern who they federate with</li>
</ol>
<p>And, because there are hundreds or even thousands of instances, the users get
the privilege of choosing an instance whose rules they like, and which federates
with other instances they wish to talk to. This system also makes it hard for
marketing and spam to get a foothold — it optimizes for a self-governing
system of human beings talking to human beings, and not for corporations to push
their products.</p>
<p>The costs of scaling up a federation is distributed manageably among these
operators. Small instances, with their modest server requirements, are often
cheap enough that a sysadmin can comfortably pay for the expenses out of pocket.
If not, it&rsquo;s usually quite easy to solicit donations from the users to keep
things running. New operators appear all the time, and the federation scales up
a little bit more.</p>
<p>Unlike P2P systems, the federated model allows volunteer sysadmins to use their
skills to expand access to the service to non-technical users, without placing
the burden on those non-technical users to set up, understand, maintain, or
secure servers or esoteric software. The servers are also always online and
provide strong identities and authenticity guarantees — eliminating an
entire class of P2P problems.</p>
<p>A popular up-and-coming protocol for federation is ActivityPub, but it&rsquo;s not the
only way to build a federated system. You&rsquo;re certainly familiar with another
federation which is not based on ActivityPub: email. IRC and Matrix also provide
federated protocols in the instant messaging domain. Personally, I don&rsquo;t like
ActivityPub, but AP is not necessary to reap the benefits of federation. Many
different kinds of communication systems can be designed with federation in
mind, and adjust their approach to accommodate their specific needs, evident in
each of these examples.</p>
<p>In short, federation distributes governance and cost, and can allow us to tackle
challenges that we couldn&rsquo;t overcome without it. The free software community
needs to rally behind federation, because no one else will. For all of the
reasons which make it worth doing, it is not rewarding for corporations.  They
would much rather build walled gardens and centralize, centralize, centralize
— it&rsquo;s more profitable!  Democratic software which puts control into the
hands of the users is something we&rsquo;re going to have to take for ourselves. Viva
la federación!</p>]]></description><pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate></item><item><title>Status update, September 2020</title><link>https://drewdevault.com/2020/09/15/Status-update-September-2020.html</link><description><![CDATA[<p>A mercifully cool September is upon us, and after years of searching, I finally
was able to secure Club Mate in the US. Let&rsquo;s decant a bottle and recant the
story of this month&rsquo;s progress in free software development.</p>
<p>First of all, I&rsquo;ve been able to put a pin on operations work on SourceHut for
the time being, and focus again on its software development. The GraphQL APIs
are a major focus area here, and I&rsquo;ve made a lot of progress towards OAuth 2.0
support and writable GraphQL APIs. Additionally, I&rsquo;ve laid out a number of
prioritized tickets for the beta — with the &ldquo;beta&rdquo; label on todo.sr.ht
— and have been picking items off of the list one at a time, mainly
focusing on meta.sr.ht improvements at first. I&rsquo;ll go into more detail in the
What&rsquo;s Cooking post for SourceHut later today, stay tuned.</p>
<p>There has been some advancements in the little projects: a second Python
implementation of BARE has appeared, another in Common Lisp, and one in PHP;
bringing the total implementations to nine. We have a pretty decent spread of
support among programming languages!</p>
<p>Not much more news to share today. Been focusing in on SourceHut and a secret
project, so check out the What&rsquo;s Cooking post for more details. Thanks for your
support!</p>
<details>
<summary>...</summary>
<img
  src="https://cmpwn.com/system/media_attachments/files/000/970/411/original/f5d4c6f553a5a0ce.png?1599509919"
  alt="A screenshot of a programming language with a DRAFT watermark. The page shown describes the syntax and semantics of enum types."
/>
</details>]]></description><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate></item><item><title>Linux development is distributed - profoundly so</title><link>https://drewdevault.com/2020/09/02/Linux-development-is-profoundly-distributed.html</link><description><![CDATA[<p>The standard introduction to git starts with an explanation of what it means to
use a &ldquo;distributed&rdquo; version control system. It&rsquo;s pointed out that every
developer has a complete local copy of the repository and can work independently
and offline, often contrasting this design with systems like SVN and CVS.  The
explanation usually stops here. If you want to learn more, consider git&rsquo;s roots:
it is the version control system purpose-built for Linux, the largest and most
active open source project in the world. To learn more about the true nature of
distributed development, we should observe Linux.</p>
<p>Pull up your local copy of the Linux source code (you have one of those,
right?<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>) and open the MAINTAINERS file. Scroll down to line 150 or so and
let&rsquo;s start reading some of these entries.</p>
<p>Each of these represents a different individual or group which has some interest
in the Linux kernel, often a particular driver. Most of them have an &ldquo;F&rdquo; entry,
which indicates which files they&rsquo;re responsible for in the source code. Most
have an &ldquo;L&rdquo; entry, which has a mailing list you can post questions, bug reports,
and patches to, as well as an individual maintainer (&ldquo;M&rdquo;) or maintainers who are
known to have expertise and autonomy over this part of the kernel. Many of them
— but, hmm, not all — also have a tree (&ldquo;T&rdquo;), which is a dedicated
git repo with their copy of Linux, for staging changes to the kernel. This is
common with larger drivers or with &ldquo;meta&rdquo; organizations, which oversee
development of entire subsystems.</p>
<p>However, this presents a simplified view. Look carefully at the &ldquo;DRM&rdquo; drivers
(<a href="https://en.wikipedia.org/wiki/Direct_Rendering_Manager">Direct Rendering Manager</a>); a group of drivers and maintainers who are
collectively responsible for graphics on Linux. There are many drivers and many
maintainers, but a careful eye will notice that there are many similarities as
well. A lot of them use the same mailing list, <a href="mailto:dri-devel@lists.freedesktop.org">dri-devel@lists.freedesktop.org</a>,
and many of them use the same git repository:
<code>git://anongit.freedesktop.org/drm/drm-misc</code>. It&rsquo;s not mentioned in this file,
but many of them also shared the FreeDesktop bugzilla until recently, then moved
to the FreeDesktop GitLab; and many of them share the <code>#dri-devel</code> IRC channel
on Freenode. And again I&rsquo;m simplifying — there are also many related IRC
channels and git repos, and some larger drivers like AMDGPU have dedicated
mailing lists and trees.</p>
<p>There&rsquo;s more complexity to this system still. For example, not all of these
subsystems are using git. The Intel TXT subsystem uses Mercurial. The Device
Mapper team (one of the largest and most important Linux subsystems) uses
<a href="https://savannah.nongnu.org/projects/quilt">Quilt</a>. And like Linux DRM is a meta-project for many DRM-related subsystems
&amp; drivers, there are higher-level meta projects still, such as driver-core,
which manages code and subsystems common to <em>all</em> I/O drivers. There are also
cross-cutting concerns, such as the interaction between linux-usb and various
network driver teams.</p>
<p>Patches to any particular driver could first end up on a domain-specific mailing
list, with a particular maintainer being responsible for reviewing and
integrating the patch, with their own policies and workflows and tooling. Then
it might flow upwards towards another subsystem with its own similar features,
and then up again towards meta-meta trees like linux-staging, and eventually to
Linus&rsquo; tree<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. Along the way it might receive feedback from other projects if it
has cross-cutting concerns, tracing out an ever growing and shrinking bubble of
inclusion among the trees, ultimately ending up in every tree. And that&rsquo;s
<em>still</em> a simplification — for example, an important bug fix may sidestep
all of this entirely and get applied on top of a downstream distribution kernel,
ending up on end-user machines before it&rsquo;s made much progress upstream at all.</p>
<p>This complex <em>graph</em> of Linux development has code flowing smoothly between
hundreds of repositories, emails exchanging between hundreds of mailing lists,
passing through the hands of dozens of maintainers, several bug trackers,
various CI systems, all day, every day, ten-thousand fold. This is truly
illustrative of <strong>distributed</strong> software development, well above and beyond the
typical explanation given to a new git user. The profound potential of the
distributed git system can be plainly seen in the project for which it was
principally designed. It&rsquo;s also plain to see how difficult it would be to adapt
this system to something like GitHub pull requests, despite how easy many who
are perplexed by the email-driven workflow wish it to be<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. As a matter of
fact, several Linux teams are already using GitHub and GitLab and even pull or
merge requests on their respective platforms.  However, scaling this system up
to the entire kernel would be a great challenge indeed.</p>
<p>By the way — that MAINTAINERS file? Scroll to the bottom. My copy is
<em>19,000 lines long</em>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Okay, just in case: <code>git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</code>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>That&rsquo;s not the only destination; for example, some patches will end up in the LTS kernels as well.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>If you are among the perplexed, <a href="https://git-send-email.io">my interactive git send-email tutorial</a> takes about 10 minutes and is often recommended to new developers by Greg KH himself.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 2 Sep 2020 00:00:00 +0000</pubDate></item><item><title>Embrace, extend, and finally extinguish - Microsoft plays their hand</title><link>https://drewdevault.com/2020/08/27/Microsoft-plays-their-hand.html</link><description><![CDATA[<p>GitHub took a note out of the Microsoft &ldquo;<abbr title="Embrace, Extend,
Extinguish">EEE</abbr>&rdquo; playbook when designing their git services. They
<strong>embraced</strong> git, and then rather than building an interface on top of email
— the collaboration mechanism that git was designed to use, and which is
still used for Linux kernel development<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> — they built their &ldquo;pull
requests&rdquo; mechanism.</p>
<p>They took terminology which already had meaning — &ldquo;fork&rdquo;, meaning the
creation a separate governing body and development upstream for a codebase, a
rather large task; and &ldquo;pull request&rdquo;, a git workflow which prepares an email
asking a receipient to pull a large branch of changes from a non-centralized
source — and replaced these decentralized, open systems with a completely
incompatible system designed to keep you on GitHub and to teach you to
collaborate using GitHub&rsquo;s proprietary tools. They <strong>extended</strong> git in a
proprietary way.</p>
<p>Microsoft knows a good deal when they see one, and picked up GitHub for a cool
$7,500,000,000, after they had already completed the two steps in Microsoft&rsquo;s
<a href="https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish">anti-open-source playbook</a>. They joined the Linux Foundation in late 2016,
after Azure failed to win people back to Windows Server, admitting defeat while
simultaneously carving out a space from which they could project their interests
over the kernel.</p>
<p>Today, I discovered this article, &ldquo;<a href="https://www.theregister.com/2020/08/25/linux_kernel_email/">Relying on plain-text email is a
&lsquo;barrier to entry&rsquo; for kernel development, says Linux Foundation board
member</a>&rdquo;, a title which conveniently chooses to refer to Sarah Novotny by
her role as a Linux Foundation board member, rather than by her full title,
&ldquo;Sarah Novotny, Microsoft employee, transitive owner of GitHub, and patroness
saint of conflicts of interests.&rdquo; Finally, they&rsquo;re playing the <strong>extinguish</strong>
card. Naturally, a representative of Microsoft, a company which has long waged
war against open source, and GitHub, a company which explicitly built an
incompatible proprietary system to extend git, would have an interest in
dismantling the distributed, open system that git was designed for.</p>
<p>I represent <a href="https://sourcehut.org">sourcehut</a>, a GitHub competitor which does
what GitHub wouldn&rsquo;t — interoperate with open, distributed protocols, and
in the form of 100% free and open-source software. I agree that the UX of
email-driven development could be better! But instead of investing $7.5B into
throwing the baby out with the bathwater, we&rsquo;ve <a href="https://git-send-email.io/">built interactive
tutorials</a>, <a href="https://lists.sr.ht/~emersion/mrsh-dev/patches/4728">designed better mailing lists</a>, <a href="https://sr.ht/_fUk.webm">built web interfaces for
patch submission</a>, <a href="https://sourcehut.org/blog/2020-07-14-setting-up-ci-for-mailing-lists/">implemented CI for emails</a> and <a href="https://github.com/git/git/commits?author=ddevault">sent improvements to
git upstream</a>. I wrote <a href="https://aerc-mail.org/">an entire mail client which makes it easier to use
these tools</a>. We&rsquo;re planning on web-based review interface, too. The result
is a UX which provides a similar experience to GitHub, but without disrupting
the established open ecosystem.</p>
<p><em>This</em> is how you improve the ecosystem, Microsoft. Take notes. Stick with the
embrace, move your extending <em>upstream</em>, and forget about extinguish.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>And hundreds of other projects, including git itself.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate></item><item><title>Alice in Wonderland and the theft of the public domain</title><link>https://drewdevault.com/2020/08/24/Alice-in-Wonderland.html</link><description><![CDATA[<p>Disney&rsquo;s <em>Alice in Wonderland</em> is one of my favorite movies and an undisputed
classic. After its release in 1951, <em>Alice</em> holds a fond place in billions of
children&rsquo;s hearts, over almost four generations. And it has been stolen from
those generations, as part of the theft of one of these generations&rsquo; greatest
treasures: the public domain.</p>
<p><img src="https://redacted.moe/f/5e5f11ef.jpg" alt=""></p>
<p>I often use this film as an example when arguing about copyright. Almost
everyone I speak to was born well after the film&rsquo;s release (in fact, this is
true of almost everyone <em>alive today</em>), but they remember it fondly regardless.
Many people I&rsquo;ve spoken to would agree that it even played a formative role in
their childhoods; it&rsquo;s a film dear to many hearts. My mom is very fond of the
Cheshire Cat in particular, and owns quite a bit of relevant merchandise.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Like many films from their &ldquo;Golden Age&rdquo;, Disney&rsquo;s <em>Alice</em> is itself a derivative
work, based on Lewis Carroll&rsquo;s 1865 book. However, Disney&rsquo;s film won&rsquo;t enter the
public domain until 2046, and until then, no one can create derivative works of
their own without receiving permission from and paying a tithe to Disney. And if
modern-day copyright law, <a href="https://en.wikipedia.org/wiki/Copyright_Term_Extension_Act">bought and paid for by Disney</a>, had
been in force at the time Alice in Wonderland was made, they would have released
their film 17 years <em>before</em> Carroll&rsquo;s novel entered the public domain.</p>
<p>Carroll, who died in 1898, was 53 years dead when the film was released. Everyone
who is listed in the credits for Disney&rsquo;s Alice in Wonderland is also dead, with
the exception of Kathryn Beaumont, who played the role of none other than Alice
herself.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> She was 12 years old at the time. And still today, the
copyright remains in force, though no creators remain to enjoy its privileges.
It shall remain so for another 26 years, when I can finally celebrate my
Alice-in-Wonderland-themed 53rd birthday party, having been robbed of the
privilege at age 11.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<p>Copyright was established in the United States to incentivize artists,
musicians, authors, writers, and other creatives to create novel art, allowing
them to enjoy the exclusive rights to it for a short period<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, then ultimately
<em>enriching</em> the public domain. The obscene copyright terms we&rsquo;re faced with
today have robbed the American public of its national heritage. Any work made
today will not enter the public domain during the lifetimes of any of its
contemporaries, let alone soon enough for those contemporaries to <em>do</em> anything
with it.</p>
<p>A system designed to incentivize creation has become a system which incentivises
the opposite: rent seeking. A rent which is sought from the American public, in
exchange for which we&rsquo;re no longer getting our end of the deal.</p>
<p>Well, the deal is off.</p>
<link rel="stylesheet" href="https://drewdevault.com/video-js.css">
<script>
window.HELP_IMPROVE_VIDEOJS = false;
</script>
<script src="https://drewdevault.com/video.js"></script>
<video class="video-js vjs-16-9" data-setup="{}" controls>
  <source src="https://drewdevault.com/alice.webm" type="video/webm">
  <p>Your browser does not support HTML5 video, or webm. Either way you're not
  going to watch this video.</p>
</video>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>She is not sure how much of that merchandise is officially licensed.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>The last person credited for Alice in Wonderland to have died was <a href="https://en.wikipedia.org/wiki/Don_Lusk">Don Lusk</a>, who died in 2018 at the age of 105. He lived through World War I, fought in World War II, then went on to animate 17 films for Disney.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Another honorable mention goes to <a href="https://en.wikipedia.org/wiki/Ben_Sharpsteen">Ben Sharpsteen</a>, the production director on <em>Alice</em>, who enjoyed the status of oldest staff member on the production, having been born in 1895. He was alive in Lewis Carroll&rsquo;s lifetime!&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Okay, I&rsquo;ll fess up: I never had any plans of an Alice-themed birthday party when I was 11, or at any other age. But you can bet I&rsquo;m planning one for my 53rd now!&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>14 years, or 28 years if renewed&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate></item><item><title>Software engineers solve problems</title><link>https://drewdevault.com/2020/08/17/Engineers-solve-problems.html</link><description><![CDATA[<p>Software engineers solve problems. A problem you may have encountered is, for
example, &ldquo;this function has a bug&rdquo;, and you&rsquo;re probably already more or less
comfortable solving these problems. Here are some other problems you might
encounter on the way:</p>
<ol>
<li>Actually, the bug ultimately comes from a third-party program</li>
<li>Hm, it uses a programming language I don&rsquo;t know</li>
<li>Oh, the bug is in that programming language&rsquo;s compiler</li>
<li>This subsystem of the compiler would have to be overhauled</li>
<li>And the problem is overlooked by the language specification</li>
</ol>
<p>I&rsquo;ve met many engineers who, when standing at the base of this mountain,
conclude that the summit is too far away and clearly not their responsibility,
and subsequently give up. But remember: as an engineer, your job is to apply
creativity to solving problems. Are these not themselves problems to which the
engineering process may be applied?</p>
<p>You can introduce yourself to the maintainers of the third-party program and
start working on a solution. You can study the programming language you don&rsquo;t
know, at least as much as is necessary to understand and correct the bug. You
can read the compiler&rsquo;s source code, and identify the subsystem which needs
overhauling, then introduce yourself to <em>those</em> maintainers and work on the
needed overhaul. The specification is probably managed by a working group, reach
out to them and have an erratta issued or a clarification added to the upcoming
revision.</p>
<p>The scope of fixing this bug is broader than you thought, but if you apply a
deliberate engineering process to each problem that you encounter, eventually
you will complete the solution. This process of recursively solving problems to
get at the one you want to solve is called &ldquo;<a href="http://catb.org/jargon/html/Y/yak-shaving.html">yak
shaving</a>&rdquo;, and it&rsquo;s a necessary
part of your workflow.</p>]]></description><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate></item><item><title>Status update, August 2020</title><link>https://drewdevault.com/2020/08/16/Status-update.html</link><description><![CDATA[<p>Greetings! Today is another rainy day here in Philadelphia, which rather sours
my plans of walking over to the nearby cafe to order some breakfast to-go. But I
am tired, and if I&rsquo;m going to make it to the end of this blog post in one piece,
I&rsquo;m gonna need a coffee. brb.</p>
<p>Hey, that was actually pretty refreshing. It&rsquo;s just drizzling, and the rain is
nice and cool. Alright, here goes! What&rsquo;s new? I&rsquo;ll leave the Wayland news for
<a href="https://emersion.fr/blog">Simon Ser&rsquo;s blog</a> this month - he&rsquo;s been working on
some exciting stuff. The <a href="https://baremessages.org/">BARE encoding</a> announced
last month has received some great feedback and refinements, and there are now
six projects providing BARE support for their author&rsquo;s favorite programming
language<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. There have also been some improvements to the Go implementation
which should help with some SourceHut plans later on.</p>
<p>On the subject of SourceHut, I&rsquo;ve focused mainly on infrastructure improvements
this month. There is a new server installed for hg.sr.ht, which will also be
useful as a testbed for additional ops work planned for future expansion.
Additionally, the PostgreSQL backup system has been overhauled and made more
resilient, both to data loss and to outages. A lot of other robustness
improvements have been made fleet-wide in monitoring. I&rsquo;ll be working on more
user-facing features again next month, but in the meanwhile, contributors like
наб have sent many patches in which I&rsquo;ll cover in detail in the coming &ldquo;What&rsquo;s
cooking&rdquo; post for <a href="https://sourcehut.org/blog">sourcehut.org</a>.</p>
<p>Otherwise, I&rsquo;ve been taking it easy this month. I definitely haven&rsquo;t been
spending a lot of my time on a secret project, no sir. Thanks again for your
support! I&rsquo;ll see you next month.</p>
<details>
<summary>?</summary>
<pre>
use io;
use io_uring = linux::io_uring;
use linux;
use strings;
<p>export fn main void = {
let uring = match (io_uring::init(256u32, 0u32)) {
err: linux::error =&gt; {
io::println(&ldquo;io_uring::init error:&rdquo;);
io::println(linux::errstr(err));
return;
},
u: io_uring::io_uring =&gt; u,
};</p>
<pre><code>let buf: [8192]u8 = [0u8...];
let text: nullable *str = null;
let wait = 0u;
let offs = 0z;
let read: *io_uring::sqe = null: *io_uring::sqe,
	write: *io_uring::sqe = null: *io_uring::sqe;
let eof = false;

while (!eof) {
	read = io_uring::must_get_sqe(&amp;uring);
	io_uring::prep_read(read, linux::STDIN_FILENO,
		&amp;buf, len(buf): u32, offs);
	io_uring::sqe_set_user_data(read, &amp;read);
	wait += 1u;

	let ev = match (io_uring::submit_and_wait(&amp;uring, wait)) {
		err: linux::error =&gt; {
			io::println(&quot;io_uring::submit error:&quot;);
			io::println(linux::errstr(err));
			return;
		},
		ev: uint =&gt; ev,
	};

	wait -= ev;

	for (let i = 0; i &lt; ev; i += 1) {
		let cqe = match (io_uring::get_cqe(&amp;uring, 0u, 0u)) {
			err: linux::error =&gt; {
				io::println(&quot;io_uring::get_cqe error:&quot;);
				io::println(linux::errstr(err));
				return;
			},
			c: *io_uring::cqe =&gt; c,
		};

		if (io_uring::cqe_get_user_data(cqe) == &amp;read) {
			if (text != null) {
				free(text);
			};

			if (cqe.res == 0) {
				eof = true;
				break;
			};

			text = strings::must_decode_utf8(buf[0..cqe.res]);
			io_uring::cqe_seen(&amp;uring, cqe);

			write = io_uring::must_get_sqe(&amp;uring);
			io_uring::prep_write(write, linux::STDOUT_FILENO,
				text: *char, len(text): u32, 0);
			io_uring::sqe_set_user_data(write, &amp;write);
			wait += 1u;
			offs += cqe.res;
		} else if (io_uring::cqe_get_user_data(cqe) == &amp;write) {
			assert(cqe.res &gt; 0);
			io_uring::cqe_seen(&amp;uring, cqe);
		} else {
			assert(false, &quot;Unknown CQE user data&quot;);
		};
	};
};

io_uring::close(&amp;uring);
</code></pre>
<p>};
</pre></p>
<details>
<summary>hmm?</summary>
<p>I might note that I wrote this program to test my io_uring wrapper; it's not
representative of how normal programs will do I/O in the future.</p>
</details>
</details>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Or in some cases, the language the author is begrudgingly stuck with.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate></item><item><title>Web browsers need to stop</title><link>https://drewdevault.com/2020/08/13/Web-browsers-need-to-stop.html</link><description><![CDATA[<p>Enough is enough.</p>
<p>The web and web browsers have become Lovecraftian horrors of an unprecedented
scale. They&rsquo;ve long since left &ldquo;scope creep&rdquo; territory and entered &ldquo;oh my god
please just stop&rdquo; territory, and are trucking on through to hitherto unexplored
degrees of <em>obscene</em> scope. And we <em>don&rsquo;t want</em> what they&rsquo;re selling. Google
pitches garbage like AMP<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and pushing dubious half-assed specs like Web
Components. Mozilla just fired everyone relevant<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to focus on crap no one
asked for like Pocket, and fad nonsense like a paid VPN service and <del>virtual
reality tech</del>.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> <em>[2020-08-14: It has been pointed out that the VR team was
also fired.]</em></p>
<p>Microsoft gave up entirely. Mozilla just hammered the last few nails into their
casket.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> <del>Safari is a joke</del><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>. Google is all that&rsquo;s left, and they&rsquo;re
<em>not</em> a good steward of the open web. The browsers are drowning under their own
scope.  The web is dead.</p>
<p>I call for an immediate and indefinite suspension of the addition of new
developer-facing APIs to web browsers. Browser vendors need to start thinking
about <em>reducing</em> scope and <em>cutting</em> features. WebUSB, WebBluetooth, WebXR,
<del>WebDRM</del> <del>WebMPAA</del> <del>WebBootlicking</del> <del>replacing User-Agent with
Vendor-Agent cause let&rsquo;s be honest with ourselves at this point</del> &ldquo;Encrypted
Media Extensions&rdquo; — this crap all needs to go. At some point you need to
stop adding scope and start focusing on performance, efficiency, reliability,
and security<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> at the scope you already have.</p>
<p>Enough is enough.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>No one</em> wants AMP. Google knows it, you know it, I know it. If you&rsquo;re a Google engineer who is still working on AMP, you are a disgrace to your field. <a href="https://drewdevault.com/2020/05/05/We-are-complicit-in-our-employers-deeds.html">Take responsibility for the code you write</a>. This project needs to be dead and buried and the earth above salted, and it needs to happen yesterday.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><del>No layoffs or pay cuts at the management level, of course!</del> It&rsquo;s not like they&rsquo;re <em>responsible</em> for these problems, it&rsquo;s not like anyone&rsquo;s fucking <em>responsible</em> for any of this, it&rsquo;s not like the very idea of <em>personal responsibility</em> has been forgotten by both executives and engineers, no sir! <em>[2020-08-14: It has been pointed out that some VPs were laid off. I also wish to clarify that the personal responsibility I find absent at the engineering level is more of a commentary on Google than Mozilla.]</em>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Oh good, the <em>web</em> is exactly what VR needs! It&rsquo;s definitely <em>not</em> a huge time-sink requiring the highly skilled low-level engineering talent which Mozilla just finished <em>laying off</em>, or years of effort and millions of dollars just to realize that the new state of the art is still just an expensive and underwhelming product whose few end-user applications make half of their users motion sick.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Next time they should aim for their executive&rsquo;s heads, maybe they&rsquo;ll jostle them around enough to get the two wires in each of their heads to make contact so that they&rsquo;re briefly capable of making basic decisions and not just collecting multi-million-dollar paychecks.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>2020-08-14: I haven&rsquo;t used Safari in over 10 years, so maybe it&rsquo;s not so bad. However, so long as it&rsquo;s single-platform and closed source, it&rsquo;s still a net negative on the ecosystem.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>The web <em>might</em> be one for four on these right now.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate></item><item><title>I want to contribute to your project, how do I start?</title><link>https://drewdevault.com/2020/08/10/How-to-contribute-to-FOSS.html</link><description><![CDATA[<p>I get this question a lot! The answer is usually&hellip; don&rsquo;t. If you already know
what you want to do, then the question doesn&rsquo;t need to be asked.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> But, if you
don&rsquo;t already know what you want to do, then your time might be better spent
elsewhere!</p>
<p>The best contributors are always intrinsically motivated. Some contributors show
up every now and then who appreciate the value the project gives to them and
want to give something back. Their gratitude is definitely appreciated<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, but
these kinds of contributions tend to require more effort from the maintainers,
and don&rsquo;t generally lead to recurring contributions. Projects you already like
are less likely to need help when compared to incomplete projects that you don&rsquo;t
already depend on — so this model leaves newer projects with fewer
contributors and encourages established projects to grow in complexity.</p>
<p>Instead, you should focus on scratching your own itches. Is there a bug which is
getting on your nerves? A conspicuously absent feature? Work on those!</p>
<p>If there&rsquo;s nothing specific that you want to work on, then you may be better off
finding something to do in a different project. Don&rsquo;t be afraid to work on any
free- and open-source codebase that you encounter — nearly all of them
will accept your patches. If something is bothering you about another project,
then go fix it! Someone has a cool idea and needs help realizing it? Get
involved! If we spread the contributions around, the FOSS ecosystem will
flourish and the benefits will come back around to our project, too.</p>
<p>So, if you want to contribute to open-source — as a whole — here are
my tips:</p>
<ul>
<li>Find problems which you are intrinsically motivated to work on.</li>
<li>Focus on developing skills to get up to speed on new codebases fast.</li>
<li>Don&rsquo;t be afraid to work on <em>any</em> project — new languages, tools,
libraries; learn enough of them and it&rsquo;ll only get easier to learn more.</li>
<li>When you file bug reports with a FOSS project, get into the habit of following
up with a patch which addresses the problem.</li>
<li>Get used to introducing yourself to maintainers and talking through the code;
it always pays to ask.</li>
</ul>
<p>If you want to work on a specific project, and you have a specific goal in mind:
perfect! If you don&rsquo;t have a specific goal in mind, try to come up with some.
And if you&rsquo;re still drawing a blank, consider another project.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Or perhaps the better question is &ldquo;where should I start with this goal?&rdquo;&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>For real, we don&rsquo;t hear &ldquo;thanks&rdquo; very often and expressions of gratitude are often our only reward for our work. We do appreciate it :)&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate></item><item><title>pkg.go.dev is more concerned with Google&apos;s interests than good engineering</title><link>https://drewdevault.com/2020/08/01/pkg-go-dev-sucks.html</link><description><![CDATA[<p>pkg.go.dev sucks. It&rsquo;s certainly <em>prettier</em> than godoc.org, but under the
covers, it&rsquo;s a failure of engineering characteristic of the Google approach.</p>
<p>Go is a <em>pretty good</em> programming language. I have long held that this is not
attributable to Google&rsquo;s stewardship, but rather to a small number of language
designers and a clear line of influences which is drawn entirely from outside of
Google — mostly from Bell Labs. pkg.go.dev provides renewed support for my
argument: it has all the hallmarks of Google crapware and none of the
deliberate, good engineering work that went into Go&rsquo;s design.</p>
<p>It was apparent from the start that this is what it would be. pkg.go.dev was
launched as a closed-source product,
<a href="https://blog.golang.org/pkg.go.dev-2020">justified</a> by pointing out that
godoc.org is too complex to run on an intranet, and pkg.go.dev has the same
problem. There are many problems to take apart in this explanation: the
assumption that the only reason an open source platform is desirable is for
running it on your intranet; the unstated assumption that such complexity
is necessary or agreeable in the first place; and the
<a href="https://github.com/golang/go/issues/25443">systemic</a> <a href="https://github.com/golang/go/issues/30029">erosion</a>
of the existing (and simple!) tools which <em>could</em> have been used for this
purpose prior to this change. The attitude towards open source was only changed
following pkg.go.dev&rsquo;s harsh reception by the community.</p>
<p>But this attitude <em>did</em> change, and it is open-source now<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, so let&rsquo;s give
them credit for that. The good intentions are spoilt by the fact that pkg.go.dev
fetches the list of modules from <a href="https://proxy.golang.org/">proxy.golang.org</a>:
a closed-source proxy through which all of your go module fetches are being
routed and tracked (oh, you didn&rsquo;t know? They never told you, after all).
Anyway, enough of the gross disregard for the values of open source and user
privacy; I <em>do</em> have some technical problems to talk about.</p>
<p>One concern comes from a blatant failure to comprehend the fundamentally
decentralized nature of git hosting. Thankfully, git.sr.ht is supported now<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>
— but only <em>the</em> git.sr.ht, i.e. the hosted instance, not the software.
pkg.go.dev hard-codes a list of centralized git hosting services, and completely
disregards the idea of git hosting as <em>software</em> rather than as a <em>platform</em>.
Any GitLab instance other than gitlab.com (such as
<a href="https://gitlab.freedesktop.org">gitlab.freedesktop.org</a> or
<a href="https://salsa.debian.org/public">salsa.debian.org</a>); any
<a href="https://gogs.io/">Gogs</a> or <a href="https://gitea.io/en-us/">Gitea</a> like
<a href="https://codeberg.org">Codeberg</a>; cgit instances like
<a href="https://git.kernel.org/">git.kernel.org</a>; none of these are going to work
unless every host is added and the list is kept up-to-date manually. Your
intranet instance of cgit? Not a chance.</p>
<p>They were also given an opportunity here to fix a long-standing problem with Go
package discovery, namely that it requires every downstream git repository host
has to (1) provide a web interface and (2) include <em>Go-specific</em> meta tags in
the HTML. The hubris to impose your <em>programming language</em>&rsquo;s needs onto a
language-agnostic version control system! I asked: they have no interest in the
better-engineered — but more worksome — approach of pursing a
language agnostic design.</p>
<p>The worldview of the developers is whack, the new site introduces dozens of
regressions, and all it really improves upon is the visual style — which
could trivially have been done to godoc.org. The goal is shipping a shiny new
product — not engineering a good solution. This is typical of Google&rsquo;s
engineering ethos in general. pkg.go.dev sucks, and is added the large (and
growing) body of evidence that Google is bad for Go.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Setting aside the fact that the production pkg.go.dev site is amended with closed-source patches.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>The GitHub comment explaining the change of heart included a link to a Google Groups discussion which requires you to log in with a Google account in order to <em>read</em>.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> If you go the long way around and do some guesswork searching the archives yourself, you <a href="https://groups.google.com/d/msg/golang-dev/mfiPCtJ1BGU/ibeimu3WEgAJ">can find it</a> without logging in.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Commenting on Go patches also requires a Google account, by the way.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>But not hg.sr.ht!&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 1 Aug 2020 00:00:00 +0000</pubDate></item><item><title>The falsehoods of anti-AGPL propaganda</title><link>https://drewdevault.com/2020/07/27/Anti-AGPL-propaganda.html</link><description><![CDATA[<p>Google is well-known for <a href="https://opensource.google/docs/using/agpl-policy/">forbidding the use of</a> software
using the <a href="https://www.gnu.org/licenses/agpl-3.0.en.html">GNU Affero General Public License</a>, commonly known as &ldquo;AGPL&rdquo;.
Google is also well-known for being the subject of cargo-culting by fad
startups. Unfortunately, this means that they are susceptible to what is
ultimately anti-AGPL propaganda from Google, with little to no basis in fact.</p>
<p><em>Obligatory: I&rsquo;m not a lawyer; this is for informational purposes only.</em></p>
<p>In truth, the terms of the AGPL are pretty easy to comply with. The basic
obligations of the AGPL which set it apart from other licenses are as follows:</p>
<ul>
<li>Any derivative works of AGPL-licensed software must also use the AGPL.</li>
<li>Any users of such software are entitled to the source code under the terms of
the AGPL, including users accessing it over the network such as with their web
browser or via an API or internet protocol.</li>
</ul>
<p>If you&rsquo;re using AGPL-licensed software like a database engine or <a href="https://sr.ht/~sircmpwn/sourcehut/">my own
AGPL-licensed works</a>, and you haven&rsquo;t made any changes to the source
code, you don&rsquo;t have to do anything to comply. If you <em>have</em> modified the
software, you simply have to publish your modifications. The easiest way to do
this is to send it as a patch upstream, but you could use something as simple as
providing a tarball to your users.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>The nuances are detailed and cover many edge cases to prevent abuse. But in
general, just publish your modifications under the same AGPL terms and you&rsquo;ll
be good to go. The license is usually present in the source code as a <code>COPYING</code>
or <code>LICENSE</code> file, so if you just tar up your modified source code and drop a
link on your website, that&rsquo;s good enough. If you want to go the extra mile and
express your gratitude to the original software developers, consider submitting
your changes for upstream inclusion. Generally, the feedback you&rsquo;ll receive will
help to make your changes better for your use-case, too; and submitting your
work upstream will prevent your copy from diverging from upstream.</p>
<p>That&rsquo;s pretty easy, right? I&rsquo;m positive that your business has to deal with much
more onerous contracts than the AGPL. Then why does Google make a fuss about it?</p>
<p><a href="https://opensource.google/docs/using/agpl-policy/">The Google page about the AGPL</a> details inaccurate (but
common<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>) misconceptions about the obligations of the AGPL that don&rsquo;t follow
from the text. Google states that if, for example, Google Maps used PostGIS as
its data store, and PostGIS used the AGPL, Google would be required to release
the Google Maps code. This is not true. They would be required to release <em>their
PostGIS patches</em> in this situation. AGPL does not extend the GPL in that it
makes the Internet count as a form of linking which creates a derivative work,
as Google implies, but rather that it makes anyone who uses the software via
the Internet entitled to its source code. It does not update the &ldquo;what counts
as a &lsquo;derivative work&rsquo;&rdquo; algorithm, so to speak — it updates the &ldquo;what
counts as &lsquo;distributing&rsquo; the software&rdquo; algorithm.</p>
<p>The reason they spread these misconceptions is straightforward: they want to
discourage people from using the AGPL, because they cannot productize such
software effectively. Google wants to be able to incorporate FOSS software into
their products and sell it to users without the obligation to release their
derivative works. Google is an Internet company, and they offer Internet
services. The original GPL doesn&rsquo;t threaten their scheme because their software
is accessed over the Internet, not distributed to end-users directly.</p>
<p>By discouraging the use of AGPL in the broader community, Google hopes to create
a larger set of free- and open-source software that they can take for their own
needs without any obligations to upstream. Ask yourself: why is documentation of
internal-facing decisions like what software licenses to use being published in
a public place? The answer is straightforward: to influence the public. This is
propaganda.</p>
<p>There&rsquo;s a bizarre idea that software companies which eschew the AGPL in favor of
something like MIT are doing so specifically because they want companies &ldquo;like
Google<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>&rdquo; to pay for their software, and they know that they have no chance if
they use AGPL. In truth, Google was never going to buy your software. If you
don&rsquo;t use the AGPL, they&rsquo;re just going to take your software and give nothing
back. If you do use the AGPL, they&rsquo;re just going to develop a solution in-house.
There&rsquo;s no outcome where Google pays you.</p>
<p>Don&rsquo;t be afraid to use the AGPL, and don&rsquo;t be afraid to use software which uses
the AGPL. The obligations are not especially onerous or difficult, despite what
Google would have you believe. The license isn&rsquo;t that long — read it and
see for yourself.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>December 4th, 2024</em>: A correction to this passage was made following a clarification from Florian Kohrt. Thanks!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Likely common <em>because of this page</em>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>By the way, there are no more than 10 companies world-wide which are &ldquo;like Google&rdquo; by any measure.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate></item><item><title>Status update, July 2020</title><link>https://drewdevault.com/2020/07/15/Status-update-July-2020.html</link><description><![CDATA[<p>Hello again! Another month of FOSS development behind us, and we&rsquo;re back again
to share the results. I took a week off at the end of June, so my progress this
month is somewhat less than usual. Regardless, I have some updates for you,
mainly in the domain of SourceHut work.</p>
<p>But before we get to that, let&rsquo;s go over this month&rsquo;s small victories. One was
the invention of the <a href="https://baremessages.org">BARE message format</a>, which I
wrote <a href="https://drewdevault.com/2020/06/21/BARE-message-encoding.html">a blog post about</a> if you want to learn more. Since that
article, five new implementations have appeared from various authors: Rust,
Python, JavaScript, D, and Zig.</p>
<p>I also wrote a couple of not-blogposts for this site (drewdevault.com),
including a page <a href="https://drewdevault.com/dynlib">dispelling misconceptions about static linking</a>,
and a page (that I hope you&rsquo;ll contribute to!) with <a href="https://drewdevault.com/editing">videos of people editing
text</a>. Just dropping a link here in case you missed them; they didn&rsquo;t
appear in RSS and aren&rsquo;t blog posts. To help find random stuff like that on this
site, I&rsquo;ve also established a <a href="https://drewdevault.com/misc">misc page</a>.</p>
<p>Okay, on to SourceHut. Perhaps the most exciting development is the addition of
<a href="https://sourcehut.org/blog/2020-07-14-setting-up-ci-for-mailing-lists/">continuous integration to the mailing lists</a>. I&rsquo;ve been working
towards this for some time now, and it&rsquo;s the first of many features which are
now possible thanks to the addition of the project hub. I intend to complete
some follow-up work improving the CI feature further still in the coming weeks.
I&rsquo;m also planning an upgrade for the hardware that runs hg.sr.ht during the same
timeframe.</p>
<p>That&rsquo;s all the news I have for now, somewhat less than usual. Some time off was
much-needed, though. Thanks for your continued support, and I hope you continue
to enjoy using my software!</p>
<details>
<summary>...</summary>
<pre>
$ cat main.$ext
use io;
use strings;
use sys;
<p>export fn main void =
{
for (let i = 0; sys::envp[i] != null; i += 1) {
let s = strings::from_c(sys::envp[i]);
io::println(s);
};
};
$ $redacted run main.$ext
error: main.$ext:8:41: incorrect type (&amp;char) for parameter 1 (&amp;char)
let s = strings::from_c(sys::envp[i]);
^&mdash; here
$ vim main.$ext
$ cat main.$ext
use io;
use strings;
use sys;</p>
<p>export fn main void =
{
for (let i = 0; sys::envp[i] != null; i += 1) {
let s = strings::from_c(sys::envp[i]);
io::println(s);
free(s);
};
};
$ $redacted run main.$ext
DISPLAY=:0
EDITOR=vim</p>
<h1 id="heading">&hellip;</h1>
<p></pre></p>
</details>]]></description><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate></item><item><title>March 2nd, 1943</title><link>https://drewdevault.com/2020/07/14/March-2nd-1943.html</link><description><![CDATA[<p>It&rsquo;s March 2nd, 1943. The user asks your software to schedule a meeting with
Acmecorp at &ldquo;9 AM on the first Monday of next month&rdquo;.</p>
<pre>
<code>
[6:17:45] homura ~ $ cal -3 2 March 1943
    February 1943          March 1943            April 1943
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6      1 <span style="background: black; color: white"> 2</span> 3  4  5  6               1  2  3
 7  8  9 10 11 12 13   7  8  9 10 11 12 13   4 <span style="background: #666; color: white"> 5</span>  6  7  8  9 10
14 15 16 17 18 19 20  14 15 16 17 18 19 20  11 12 13 14 15 16 17
21 22 23 24 25 26 27  21 22 23 24 25 26 27  18 19 20 21 22 23 24
28                    28 29 30 31           25 26 27 28 29 30
</code>
</pre>
<p>Right now, California is on Pacific Standard Time (PST) and Arizona is on
Mountain Standard Time (MST). On March 8th, California will transition to
Pacific Daylight Time (PDT), one hour ahead. Arizona does not observe DST, so
they&rsquo;ll stay behind.</p>
<p>At least until April 1st — when the governor will sign an emergency order
moving the state to MDT, effective immediately.</p>
<p>Back on March 2nd, you send an email to each participant telling them about the
meeting. One of them has their locale set to en_GB, so some of the participants
need to be sent &ldquo;04/05/43&rdquo; and some &ldquo;05/04/43&rdquo;.</p>
<p>A moment later, the user asks you to tell it the number of hours betweeen now
and the meeting they just scheduled. The subject of the meeting is purchasing
fuel for a machine that the user is now filling with enough fuel to last until
then.</p>
<p>On the day of the meeting, the user drives to the Navajo reservation to conduct
some unrelated business, and has to attend the meeting by phone. The reservation
has been on daylight savings time since March 8th, by the way, they never stayed
behind with the rest of Arizona. The user expects the software to warn them 1
hour prior to the meeting start. The border of the reservation is defined by a
river, which is slowly moving East.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p><a href="https://mm.icann.org/pipermail/tz-announce/">The changelog for the IANA zoneinfo database</a>
is great, by the way, you should read it.
<a href="https://mm.icann.org/mailman/listinfo/tz-announce">Or subscribe</a> to get it
periodically<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> material delivered to your inbox!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Okay, that last bit isn&rsquo;t true. But imagine if it was!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>But with what period? 😉&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate></item><item><title>General-purpose OS, special-purpose OS, and now: vendor-purpose OS</title><link>https://drewdevault.com/2020/06/26/Vendor-purpose-OS.html</link><description><![CDATA[<p>There have, historically, been two kinds of operating systems: general-purpose,
and special-purpose. These roles are defined by the function they serve for the
user. Examples of general-purpose operating systems include Unix (Linux, BSD,
etc), Solaris, Haiku, Plan 9, and so on. These are well-suited to general
computing tasks, and are optimized to solve the most problems possible, perhaps
at the expense of those in some niche domains. Special-purpose operating systems
serve those niche domains, and are less suitable for general computing. Examples
of these include FreeRTOS, Rockbox, Genode, and so on.</p>
<p>These terms distinguish operating systems by the problems they solve for the
user. However, a disturbing trend is emerging in which the user is not the party
whose problems are being solved, and perhaps this calls for a new term. I
propose &ldquo;vendor-purpose operating system&rdquo;.</p>
<p>I would use this term to describe Windows, macOS, Android, and iOS, and perhaps
some others besides. Arguably, the first two used to be general purpose
operating systems, and the latter two were once special-purpose operating
systems.  Increasingly, these operating systems are making design decisions
which benefit the vendor <em>at the expense</em> of the user. For example: Windows has
ads and excessive spyware, prevents you from making a local login without a
Microsoft account, and aggressively pushes you to switch to Edge from other web
browsers, as well as many other examples besides.</p>
<p>Apple is more subtle from the end-user&rsquo;s perspective. They eschew standards to
build walled gardens, opting for Metal rather than Vulkan, for example. They use
cryptographic signatures to enforce a racket against developers who just want to
ship their programs. They bully vendors in the app store into adding things like
microtransactions to increase their revenue. They&rsquo;ve also long been making
similar moves in their hardware design, adding anti-features which are
explicitly designed to increase their profit — adding false costs which
are ultimately passed onto the consumer.</p>
<p>All of these decisions are making the OS worse for users in order to provide
more value to the vendor. The operating system is becoming <em>less</em> suited to its
general-purpose tasks, as the vendor-purpose anti-features deliberately get in
the way. They also become less suited at special-purpose tasks for the same
reasons. These changes <em>are</em> making improvements for one purpose: the vendor&rsquo;s
purpose. Therefore, I am going to start refering to these operating systems as
&ldquo;vendor purpose&rdquo;, generally alongside a curse and a raising of the middle
finger.</p>]]></description><pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate></item><item><title>Introducing the BARE message encoding</title><link>https://drewdevault.com/2020/06/21/BARE-message-encoding.html</link><description><![CDATA[<p>I like stateless tokens. We started with state<em>ful</em> tokens: where a generated
string acts as a unique identifier for a resource, and the resource itself is
looked up separately. For example, your sr.ht OAuth token is a stateful token:
we just generate a random number and hand it to you, something like
&ldquo;a97c4aeeec705f81539aa&rdquo;. To find the information associated with this token, we
query the database — our local <em>state</em> — to find it.</p>
<a href="#announcement">
  Click here to skip the context and read the actual announcement -&gt;
</a>
<p>But, increasingly, we&rsquo;ve been using stateless tokens, which are a bloody good
idea. The idea is that, instead of using random numbers, you encode the actual
state you need into the token. For example, your sr.ht login session cookie is a
JSON blob which is encrypted and base64 encoded. Rather than associating your
session with a record in the database, we just decrypt the cookie when your
browser sends it to us, and the session information is right there. This
improves performance and simplicity in a single stroke, which is a huge win in
my book.</p>
<p>There is one big problem, though: stateless tokens tend to be a lot larger than
their stateful counterparts. For a stateful token, we just need to generate
enough random numbers to be both unique and unpredictable, and then store the
rest of the data elsewhere. Not so for a stateless token, whose length is a
function of the amount of state which has been sequestered into it. Here&rsquo;s an
example: the cursor fields on the new GraphQL APIs are stateless. This is one of
them:</p>
<pre><code>gAAAAABe7-ysKcvmyavwKIT9k1uVLx_GXI6OunjFIHa3OJmK3eBC9NT6507PBr1WbuGtjlZSTYLYvicH2EvJXI1eAejR4kuNExpwoQsogkE9Ua6JhN10KKYzF9kJKW0hA_-737NurotB
</code></pre>
<p>A whopping 141 characters long! It&rsquo;s hardly as convenient to lug this monster
around. Most of the time it&rsquo;ll be programs doing the carrying, but it&rsquo;s still
annoying when you&rsquo;re messing with the API and debugging your programs. This
isn&rsquo;t an isolated example, either: these stateless tokens tend to be large
throughout sr.ht.</p>
<p>In general, JSON messages are pretty bulky. They represent everything as text,
which can be 2x as inefficient for certain kinds of data right off the bat.
They&rsquo;re also self-describing: the schema of the message is encoded into the
message itself; that is, the names of fields, hierarchy of objects, and data
types.</p>
<p>There are many alternatives that attempt to address this problem, and I
considered many of them. Here were a selected few of my conclusions:</p>
<ul>
<li><a href="https://developers.google.com/protocol-buffers/">protobuf</a>: too
complicated and too fragile, and I&rsquo;ve never been fond of the generated code
for protobufs in any language. Writing a third-party protobuf implementation
would be a gargantuan task, and there&rsquo;s no standard. RPC support is also
undesirable for this use-case.</li>
<li><a href="https://capnproto.org/">Cap&rsquo;n Proto</a>: fixed width, alignment, and so on
— good for performance, bad for message size. Too complex. RPC support
is also undesirable for this use-case. I also passionately hate C++ and I
cannot in good faith consider something which makes it their primary target.</li>
<li><a href="http://bsonspec.org/">BSON</a>: MonogoDB implementation details have leaked into
the specification, and it&rsquo;s extensible in the worst way. I appreciate that
JSON is a closed spec and no one is making vendor extensions for it —
and, similarly, a diverse extension ecosystem is not something I want to see
for this technology. Additionally, encoding schema into the message is wasting
space.</li>
<li><a href="https://msgpack.org/">MessagePack</a>: ruled out for similar reasons: too much
extensibility, and the schema is encoded into the message, wasting space.</li>
<li><a href="https://cbor.io/">CBOR</a>: ruled out for similar reasons: too much
extensibility, and the schema is encoded into the message. Has the advantage
of a specification, but the disadvantage of that spec being 54 pages long.</li>
</ul>
<p>There were others, but hopefully this should give you an idea of what I was
thinking about when evaluating my options.</p>
<p>There doesn&rsquo;t seem to be anything which meets my criteria just right:</p>
<ul>
<li>Optimized for small messages</li>
<li>Standardized</li>
<li>Easy to implement</li>
<li>Universal — little to no support for extensions</li>
<li>Simple — no extra junk that isn&rsquo;t contributing to the core mission</li>
</ul>
<p>The solution is evident.</p>
<p><a href="https://xkcd.com/927"><img src="https://imgs.xkcd.com/comics/standards.png" alt="xkcd comic 927, &ldquo;Standards&rdquo;"></a></p>
<p><a id="announcement"></a></p>
<h2 id="bare-binary-application-record-encoding">BARE: Binary Application Record Encoding</h2>
<p><a href="https://baremessages.org">BARE</a> meets all of the criteria:</p>
<ul>
<li><strong>Optimized for small messages</strong>: messages are binary, not self-describing,
and have no alignment or padding.</li>
<li><strong>Standardized &amp; simple</strong>: the specification is just over 1,000 words —
shorter than this blog post.</li>
<li><strong>Easy to implement</strong>: the first implementation (for Go) was done in a single
weekend (this weekend, in fact).</li>
<li><strong>Universal</strong>: there is room for user extensibility, but it&rsquo;s done in a manner
which does not require expanding the implementation nor making messages which
are incompatible with other implementations.</li>
</ul>
<p>Stateless tokens aren&rsquo;t the only messages that I&rsquo;ve wanted a simple binary
encoding for. On many occasions I&rsquo;ve evaluated and re-evaluated the same set of
existing solutions, and found none of them quite right. I hope that BARE will
help me solve many of these problems in the future, and I hope you find it
useful, too!</p>
<p>The cursor token I shared earlier in the article looks like this when encoded
with BARE:</p>
<pre><code>gAAAAABe7_K9PeskT6xtLDh_a3JGQa_DV5bkXzKm81gCYqNRV4FLJlVvG3puusCGAwQUrKFLO-4LJc39GBFPZomJhkyqrowsUw==
</code></pre>
<p>100 characters (41 fewer than JSON), which happens to be the minimum size of a
padded <a href="https://github.com/fernet/spec/">Fernet</a> message. If we compare only the
cleartext:</p>
<pre><code>JSON: eyJjb3VudCI6MjUsIm5leHQiOiIxMjM0NSIsInNlYXJjaCI6bnVsbH0=
BARE: EAUxMjM0NQA=
</code></pre>
<p>Much improved!</p>
<p>BARE also has an optional schema language for defining your message structure.
Here&rsquo;s a sample:</p>
<pre tabindex="0"><code>type PublicKey data&lt;128&gt;
type Time string # ISO 8601

enum Department {
  ACCOUNTING
  ADMINISTRATION
  CUSTOMER_SERVICE
  DEVELOPMENT

  # Reserved for the CEO
  JSMITH = 99
}

type Customer {
  name: string
  email: string
  address: Address
  orders: []{
    orderId: i64
    quantity: i32
  }
  metadata: map[string]data
}

type Employee {
  name: string
  email: string
  address: Address
  department: Department
  hireDate: Time
  publicKey: optional
  metadata: map[string]data
}

type Person (Customer | Employee)

type Address {
  address: [4]string
  city: string
  state: string
  country: string
}
</code></pre><p>You can feed this into a code generator and get types which can encode &amp; decode
these messages. But, you can also describe your schema just using your
language&rsquo;s existing type system, like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span><span class="w"> </span><span class="nx">Coordinates</span><span class="w"> </span><span class="kd">struct</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">X</span><span class="w"> </span><span class="kt">uint</span><span class="w">  </span><span class="c1">// uint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">Y</span><span class="w"> </span><span class="kt">uint</span><span class="w">  </span><span class="c1">// uint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">Z</span><span class="w"> </span><span class="kt">uint</span><span class="w">  </span><span class="c1">// uint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">Q</span><span class="w"> </span><span class="o">*</span><span class="kt">uint</span><span class="w"> </span><span class="c1">// optional&lt;uint&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">func</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">var</span><span class="w"> </span><span class="nx">coords</span><span class="w"> </span><span class="nx">Coordinates</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">payload</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="p">[]</span><span class="kt">byte</span><span class="p">{</span><span class="mh">0x01</span><span class="p">,</span><span class="w"> </span><span class="mh">0x02</span><span class="p">,</span><span class="w"> </span><span class="mh">0x03</span><span class="p">,</span><span class="w"> </span><span class="mh">0x01</span><span class="p">,</span><span class="w"> </span><span class="mh">0x04</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">bare</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">payload</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="nx">coords</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;coords: %d, %d, %d (%d)\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="cm">/* coords: 1, 2, 3 (4) */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nx">coords</span><span class="p">.</span><span class="nx">X</span><span class="p">,</span><span class="w"> </span><span class="nx">coords</span><span class="p">.</span><span class="nx">Y</span><span class="p">,</span><span class="w"> </span><span class="nx">coords</span><span class="p">.</span><span class="nx">Z</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="nx">coords</span><span class="p">.</span><span class="nx">Q</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Bonus: you can get the schema language definition for this struct with
<code>schema.SchemaFor(coords)</code>.</p>
<h2 id="bare-is-under-development">BARE is under development</h2>
<p>There are some possible changes that could come to BARE before finalizing the
specification. Here are some questions I&rsquo;m thinking about:</p>
<ul>
<li>Should the schema language include support for arbitrary annotations to
inform code generators? I&rsquo;m inclined to think &ldquo;no&rdquo;, but if you use BARE and
find yourself wishing for this, tell me about it.</li>
<li>Should BARE have first-class support for bitfield enums?</li>
<li>Should maps be ordered?</li>
</ul>
<p><a href="mailto:~sircmpwn/public-inbox@lists.sr.ht">Feedback welcome</a>!</p>
<p><strong>Errata</strong></p>
<ul>
<li>This article was originally based on an older version of the draft
specification, and was updated accordingly.</li>
</ul>]]></description><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate></item><item><title>Status update, June 2020</title><link>https://drewdevault.com/2020/06/15/Status-update-June-2020.html</link><description><![CDATA[<p>Like last month, I am writing to you from the past, preparing this status update
a day earlier than usual. This time it&rsquo;s because I expect to be busy with
planned sr.ht maintenance tomorrow, so I&rsquo;m getting the status updates written
ahead of time.</p>
<p>aerc has seen lots of patches merged recently thanks to the hard work of
co-maintainer Reto Brunner and the many contributors who sent patches, ranging
from a scrollable folder list to improvements and bugfixes for PGP support. We
wrapped all of this up in the aerc 0.4.0 release in late May. Thanks to Reto and
all of the other contributors for their hard work on aerc!</p>
<p>Wayland improvements have also continued at a good pace. I&rsquo;ve mentioned before
that wlroots is a crucial core component tying together a lot of different parts
of the ecosystem — DRM/KMS, GBM, OpenGL, libinput, udev, and more —
bringing together integrations for many disparate systems and providing a single
unified multiplexer for them over the Wayland protocol. Taking full advantage of
all of these systems and becoming a more perfect integration of them is a
long-term goal, and we&rsquo;ve been continuing to make headway on these goals over
the past few weeks. We are working hard to squeeze every drop of performance out
of your system.</p>
<p>In the SourceHut world, I&rsquo;ve been working mainly on GraphQL support, as well as
Alpine 3.12 upgrades (the latter being the source of the planned outage). I
wrote in some detail <a href="https://sourcehut.org/blog/2020-06-10-how-graphql-will-shape-the-alpha/">on the sourcehut.org blog</a> about why and how
the GraphQL backends are being implemented, if you&rsquo;re curious. The main
development improvements in this respect which have occured since the last
status updates are the introduction of a JavaScript-free GraphQL playground, and
a GraphQL API for meta.sr.ht. Coming improvements will include an overhaul to
authentication and OAuth2 support, and a dramatically improved approach to
webhooks. Stay tuned!</p>
<p>That&rsquo;s all for the time being. Thank you for your support and attention, and
stay safe out there. I&rsquo;ll see you next month!</p>
<details>
<summary>...</summary>
<pre>
$ cat strconv/itos.$redacted
use bytes;
use types;
<p>/***</p>
<ul>
<li>
<p>Converts an i64 to a string, in base 10. The return value is statically</p>
</li>
<li>
<p>allocated and will be overwritten on subsequent calls; see [strings::dup] to</p>
</li>
<li>
<p>duplicate the result, or [strconv::itosb] to pass your own string buffer.</p>
</li>
<li></li>
<li>
<p>let a = strconv::i64tos(1234);</p>
</li>
<li>
<p>io::printf(&quot;%s&quot;, a); // 1234</p>
</li>
<li></li>
<li>
<p>let a = strconv::i64tos(1234);</p>
</li>
<li>
<p>let b = strconv::i64tos(4321);</p>
</li>
<li>
<p>io::printf(&quot;%s %s&quot;, a, b); // 4321 4321
*/
export fn i64tos(i: i64) const <em>str =
{
static assert(types::I64_MAX == 9223372036854775807,
&ldquo;Maximum integer value exceeds buffer length&rdquo;);
static let s = struct {
l: size = 0,
b: [22]u8 = [0: u8&hellip;], /</em> 20 digits plus NUL and &lsquo;-&rsquo; */
};
s.l = 0;
s.b = [0: u8&hellip;];</p>
<p>const isneg = i &lt; 0;
if (isneg) {
s.b[s.l] = &lsquo;-&rsquo;: u8;
s.l += 1;
i = -i;
} else if (i == 0) {
s.b[s.l] = &lsquo;0&rsquo;: u8;
s.l += 1;
};</p>
<p>while (i &gt; 0) {
s.b[s.l] = &lsquo;0&rsquo;: u8 + (i % 10): u8;
s.l += 1;
i /= 10;
};</p>
<p>const x: size = if (isneg) 1 else 0;
bytes::reverse(s.b[x..s.l]);</p>
<p>s.b[s.l] = 0: u8;
return &amp;s: *str;
};
</pre></p>
</li>
</ul>
</details>]]></description><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate></item><item><title>Can we talk about client-side certificates?</title><link>https://drewdevault.com/2020/06/12/Can-we-talk-about-client-side-certs.html</link><description><![CDATA[<p>I&rsquo;m working on improving the means by which API users authenticate with the
SourceHut API. Today, I was reading <a href="https://tools.ietf.org/html/rfc6749">RFC 6749</a> (OAuth2) for this purpose,
and it got me thinking about the original OAuth spec. I recalled vaguely that it
had the API clients actually <em>sign</em> every request, and&hellip; <a href="https://tools.ietf.org/html/rfc5849">yep, indeed it
does</a>. This also got me thinking: what else signs requests? TLS!</p>
<p>OAuth is very complicated. The RFC is 76 pages long, the separate bearer token
RFC (6750) is another 18, and no one has ever read either of them. Add JSON Web
Tokens (RFC 7519, 30 pages), too. The process is complicated and everyone
implements it themselves — a sure way to make mistakes in a
security-critical component. Not all of the data is authenticated, no
cryptography is involved at any step, and it&rsquo;s easy for either party to end up
in an unexpected state. The server has to deal with problems of revocation and
generating a secure token itself. Have you ever met anyone who feels positively
about OAuth?</p>
<p>Now, take a seat. Have a cup of coffee. I want to talk about client-side
certificates. Why didn&rsquo;t they take off? Let&rsquo;s sketch up a hypothetical TLS-based
protocol as an alternative to OAuth.  Picture the following&hellip;</p>
<ol>
<li>You, an API client developer, generate a certificate authority and
intermediate, and you upload your CA certificate to the Service Provider as
part of your registration as a user agent.</li>
<li>When you want a user to authorize you to access their account, you generate a
certificate for them, and redirect them to the Service Provider&rsquo;s
authorization page with a <abbr title="Certificate Signing Request">CSR</abbr>
in tow. Your certificate includes, among other things, the list of authorized
scopes for which you want to be granted access. It is already signed with
your client CA key, or one of its intermediates.</li>
<li>The client reviews the desired access, and consents. They are redirected back
to your API client application, along with the signed certificate.</li>
<li>Use this client-side certificate to authenticate your API requests. Hooray!</li>
</ol>
<p>Several advantages to this approach occur to me.</p>
<ul>
<li>You get strong encryption and authentication guarantees for free.</li>
<li>TLS is basically the single most ironclad, battle-tested security mechanism on
the internet, and mature implementations are available for every platform.
Everyone implements OAuth themselves, and often poorly.</li>
<li>Client-side certificates are stateless. They contain all of the information
necessary to prove that the client is entitled to access.</li>
<li>If you handle SSL termination with nginx, haproxy, etc, you can reject
unauthorized requests before your application backend ever even sees them.</li>
<li>The service provider can untrust the client&rsquo;s CA in a single revocation, if
they are malicious or lose their private keys.</li>
<li>The API client and service provider are both always certain that the process
was deliberately initiated by the API client. No weird state tokens to carry
through the process like OAuth uses!</li>
<li>Lots of free features: any metadata you like, built-in expirations, API
clients can self-organize into intermediates at their discretion, and so on.</li>
<li>Security-concious end users can toggle a flag in their account which would, as
part of the consent process, ask them to sign the API client&rsquo;s certificate
themselves, before the signed certificate is returned to the API client. Then
any API request authorized for that user&rsquo;s account has to be signed by the API
client, the service provider, <em>and</em> the user to be valid.</li>
</ul>
<p>Here&rsquo;s another example: say your organization has several services, each of
which interacts with a subset of Acme Co&rsquo;s API on behalf of their users. Your
organization generates a single root CA, and signs up for Acme Co&rsquo;s API with it.
Then you issue intermediate CAs to each of your services, which are <em>only</em>
allowed to issue CSRs for the subset of scopes they require. If any service is
compromised, it can&rsquo;t be used to get more access than it already had, and you
can revoke just that one intermediate without affecting the rest.</p>
<p>Even some famous downsides, such as <abbr title="Certificate Revocation
Lists">CRLs</abbr> and <abbr title="Online Certificate Status
Protocol">OCSP</abbr>, are mitigated here, because the system is much more
centralized. You control all of the endpoints which will be validating
certificates, you can just distribute revocations directly to them as soon as
they come in.</p>
<p>The advantages are clearly numerous. Let&rsquo;s wrap it up in a cute, Google-able
name, write some nice tooling and helper libraries for it, and ship it!</p>
<p>Or, maybe not. I have a nagging feeling that I&rsquo;m missing something here. It
doesn&rsquo;t seem right that such an obvious solution would have been left on the
table, by everyone, for decades. Maybe it&rsquo;s just that the whole certificate
signing dance has left a bad taste in everyone&rsquo;s mouth — many of us have
not-so-fond memories of futzing around with the awful OpenSSL CLI to generate a
CSR. But, there&rsquo;s no reason why we couldn&rsquo;t do it better, and more streamlined,
if we had the motivation to.</p>
<p>There are also more use-cases for client-side certificates that seem rather
compelling, such as an alternative to user passwords. Web browser support for
client-side certificates totally sucks, but that is a solvable problem.</p>
<p>For the record, I have no intention of using this approach for the SourceHut
API. This thought simply occurred to me, and I want to hear what you think. Why
aren&rsquo;t we using client-side certificates?</p>]]></description><pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate></item><item><title>Add a &quot;contrib&quot; directory to your projects</title><link>https://drewdevault.com/2020/06/06/Add-a-contrib-directory.html</link><description><![CDATA[<p>There&rsquo;s a common pattern among free- and open-source software projects to
include a &ldquo;contrib&rdquo; directory at the top of their source code tree. I&rsquo;ve seen
this in many projects for many years, but I&rsquo;ve seen it discussed only rarely
— so here we are!</p>
<p>The contrib directory is used as an unorganized (or, at best, lightly organized)
bin of various useful things <strong>contrib</strong>uted by the community around the
software, but which is not necessarily a good candidate for being a proper part
of the software. Things in contrib should not be wired into your build system,
shouldn&rsquo;t be part of your automated testing, shouldn&rsquo;t be included in your
documentation, and should not be installed with your packages. contrib entries
are not supported by the maintainers, and are given only a light code review at
the most. There is no guarantee whatsoever of workitude or maintenance for
anything found in contrib.</p>
<p>Nevertheless, it is often useful to have such a place to put various little
scripts, config files, and so on, which provide a helpful leg-up for users
hoping to integrate the software with some third-party product, configure it to
fit nicely into an unusual environment, coax it into some unusual behavior, or
whatever else the case may be. The idea is to provide a place to drop a couple
of files which might save a future someone facing similar problems from doing
all of the work themselves. Such people can contribute back small fixes or
improvements, and the maintenance burden of such contributions lies entirely
with the users.</p>
<p>If the contributor wants to take on a greater maintenance burden, this kind of
stuff is better suited to a standalone project, with its own issue tracking,
releases, and so on. If you just wrote a little script and want somewhere to
drop it so that others may find it useful, then contrib is the place for you.</p>
<p>For a quick example, let&rsquo;s consult Sway&rsquo;s <a href="https://github.com/swaywm/sway/tree/master/contrib">contrib
folder</a>:</p>
<pre tabindex="0"><code>_incr_version
autoname-workspaces.py
grimshot
grimshot.1
grimshot.1.scd
inactive-windows-transparency.py
</code></pre><p>The <code>_incr_version</code> script is something that I use myself to help with preparing
new releases. It is a tool useful only to maintainers, and therefore is not
distributed with the project.</p>
<p>Looking at <code>autoname-workspaces.py</code> next, from which we can see that the quality
criteria is reduced for members of contrib — none of Sway&rsquo;s upstream code
is written in Python, and the introduction of such a dependency would be
controversial. This script automatically changes your workspace name based on
what applications you&rsquo;re running in it — an interesting workflow, but
quite different from the <abbr title="out-of-the-box">OOTB</abbr> experience.</p>
<p><code>grimshot</code> is a shell script which ties together many third-party programs
(grim, slurp, wl-copy, jq, and notify-send) to make a convenient way of taking
screenshots. Adding this upstream would introduce <em>a lot</em> of third-party
dependencies for a minor convenience. This tool has had a bit more effort put
into it: notice that a man page is provided as well. Because the contrib
directory does not participate in the upstream build system, the contributor has
also added a pre-compiled man page so that you can skip this step when
installing it on your system.</p>
<p>Last, we have <code>inactive-windows-transparency.py</code>, which is a script for making
all windows other than your focused one semi-transparent. Some people may want
this, but again, it&rsquo;s not really something we&rsquo;d consider appropriate for the
OOTB experience. Perfect for contrib!</p>]]></description><pubDate>Sat, 6 Jun 2020 00:00:00 +0000</pubDate></item><item><title>Status update, May 2020</title><link>https://drewdevault.com/2020/05/15/Status-update-May-2020.html</link><description><![CDATA[<p>Hello, future readers! I am writing to you from one day in the past. I finished
my plans for today early and thought I&rsquo;d get a head start on writing the status
updates for tomorrow, or rather, for today. From your reference frame, that is.</p>
<p>Let&rsquo;s start with Wayland. First, as you might have heard, <a href="https://wayland-book.com">The Wayland
Protocol</a> is now free for anyone to read, and has been
relicensed as CC-BY-SA. Enjoy! It&rsquo;s still not quite done, but most of it&rsquo;s
there. In development news, wlroots continues to enjoy incremental improvements,
and is being refined further and further towards a perfect citizen of the
ecosystem in which it resides. Sway as well has seen many small bugfixes and
improvements. Both have been been stable for a while now: the only meaningful
changes will be, for the most part, a steady stream of bug fixes and performance
improvements.</p>
<p>Moving on from Wayland, then, there are some interesting developments in the
world of email as well. aerc has seen some minor changes to how it handles
templates and custom email headers, and a series of other small features and
improvements: drafts, a <code>:choose</code> meta-command, and fixes for OpenBSD and Go
1.15. Additionally, I&rsquo;ve joined <a href="https://emersion.fr/">Simon Ser</a> to work on
<a href="https://sr.ht/~emersion/alps/">Alps</a> together, to put the finishing touches on
our lightweight &amp; customizable webmail client before
<a href="https://www.migadu.com/en/index.html">Migadu</a> puts it into production.</p>
<p>On the SourceHut front, lots of cool stuff came out this month. You might have
seen the <a href="https://sourcehut.org/blog/2020-05-11-sourcehut-plus-plan-9/">announcement this week</a> that we&rsquo;ve added Plan 9 support to the
CI — a world first :D I also just published the first bits of the new,
experimental GraphQL API for git.sr.ht, which you can <a href="https://git.sr.ht/graphql">play with here</a>.
And, of course, the long-awaited project hub was released this month! <a href="https://sr.ht">Check it
out here</a> to get your projects listed. I&rsquo;ll post about all of
this in more detail on the sr.ht-announce mailing list later today.</p>
<p>That&rsquo;s all for today! I&rsquo;ll see you next month. Thank you once more for your
wonderful support.</p>
<details>
  <summary>...</summary>
<pre>/* sys::write */
fn write(fd: int, buf: *void, count: size) size;
<p>fn puts(s: str) size =
{
let n = write(1, s: *char, len(s));
n += write(1, &ldquo;\n&rdquo;: *char, 1);
n;
};</p>
<p>export fn main int =
{
puts(&ldquo;Hello world!&rdquo;);
0;
};
</pre></p>
<pre>
$ ./[redacted] < example.[redacted] | qbe > example.S
$ as -o example.o example.S
$ ld -o example lib/sys/[redacted]s.o example.o lib/sys/lib[redacted]rt.a
$ wc -c example
9640
$ ./example
Hello world!
</pre>
</details>]]></description><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate></item><item><title>We are complicit in our employer&apos;s deeds</title><link>https://drewdevault.com/2020/05/05/We-are-complicit-in-our-employers-deeds.html</link><description><![CDATA[<p>Tim Bray&rsquo;s excellent &ldquo;<a href="https://www.tbray.org/ongoing/When/202x/2020/04/29/Leaving-Amazon">Bye Amazon</a>&rdquo; post inspired me to take this
article off of my backlog, where it has been sitting for a few weeks. I applaud
Tim for stepping down from a company that has demonstrated itself incompatible
with his sense of right and wrong, and I want to take a moment to remind you
that the rest of us in the tech industry have the same opportunity — no,
the same <em>obligation</em> as Tim did.</p>
<p>As software engineers, we enjoy high salaries and extremely good job security. A
good software engineer with only a couple of years of experience under their
belt can expect to have an offer within 1 or 2 months of starting their search.
It can seem a little scary and stressful, but if you&rsquo;re a programmer already
working at $company and you&rsquo;re looking for a change, you&rsquo;re better off than 99%
of your non-technical friends. In tech, hardly anyone is &ldquo;trapped&rdquo; at a bad job;
or at least we don&rsquo;t have a good excuse for not trying for something better.</p>
<p>Tim calls out Amazon&rsquo;s terrible, unhealthy working conditions and retaliation
against staff who speak up or try to organize.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Google conducts mass
surveillance, kowtows to oppressive regimes, and punishes workers who stand up
to them. Less obvious stuff, too — Apple builds walled gardens and makes
targeted attacks on open standards, Facebook is a giant surveillance tool which
routinely disregards the law, the same behavior which made Uber and Airbnb into
the giants they are today, all while fostering a &ldquo;gig&rdquo; culture in which the poor
have no stability or security. Mass surveillance, contempt of the law, tax
evasion, oppression of the poor, of minorities&hellip; this is what our industry is
known for, and it&rsquo;s <em>our</em> fault.</p>
<p>This is why I hold my peers accountable for working at companies which are
making a negative impact on the world around them. As a general rule, it costs a
business your salary × 1.5 to employ you, given the overhead of benefits,
HR, training, and so on. When you&rsquo;re making a cool half-million annual salary
from $bigcorp, it&rsquo;s because they expect to make at least ¾ of a million that
they wouldn&rsquo;t be making without you. It does not make economic sense for them to
hire you if this weren&rsquo;t the case. Your contribution makes a big difference.</p>
<p>If the best defense we have for working at these companies is the <a href="https://en.wikipedia.org/wiki/Superior_orders">Nuremberg
defense</a>, that doesn&rsquo;t reflect well on us. But, maybe you would
object, maybe you would have the courage to say &ldquo;no&rdquo; when asked to do these
things. Maybe you would, but someday, a cool project will come across your
inbox - machine learning!  Big data! Cloud scale! It&rsquo;s everything you were
promised when you took the job, and have more fun with it for a few months than
you have had in a long time. Your superiors are thrilled - &ldquo;it&rsquo;s perfect!&rdquo;, they
say, and it&rsquo;s not until they take it and start feeding it real-world data that
<a href="https://observer.com/2020/04/amazon-whole-foods-anti-union-technology-heat-map/">you realize exactly what you have built</a>. Doublethink quickly
steps in to protect your ego from the cognitive dissonance, and you take another
little step towards becoming the person you once swore never to be.</p>
<p>The rapid computerization of society has decreased the time necessary to build
novel machines one thousand-fold. This endows us with a great responsibility,
because whatever we build with them, the changes they bring to society will be
upon us much, much faster than any changes to come before. Every software
developer possesses alone the potential of 50 engineers living just 100 years
ago. We can apply this power for good or for ill, but it&rsquo;s up to each of us to
make a deliberate choice on the matter.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.amazon.com/mc/pipelines/cancellation">Here&rsquo;s a link</a> to cancel Amazon Prime, by the way.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 5 May 2020 00:00:00 +0000</pubDate></item><item><title>How to store data forever</title><link>https://drewdevault.com/2020/04/22/How-to-store-data-forever.html</link><description><![CDATA[<p>As someone who has been often maligned by the disappearance of my data for
various reasons — companies going under, hard drive failure, etc —
and as someone who is responsible for the safekeeping of other people&rsquo;s data,
I&rsquo;ve put a lot of thought into solutions for long-term data retention.</p>
<p>There are two kinds of long-term storage, with different concerns: cold storage
and hot storage. The former is like a hard drive in your safe — it stores
your data, but you&rsquo;re not actively using it or putting wear on the storage
medium. By contrast, hot storage is storage which is available immediately and
undergoing frequent reads and writes.</p>
<h2 id="what-storage-medium-to-use">What storage medium to use?</h2>
<p>There are some bad ways to do it. The worst way I can think of is to store
it on a microSD card. These fail <em>a lot</em>. I couldn&rsquo;t find any hard data, but
anecdotally, 4 out of 5 microSD cards I&rsquo;ve used have experienced failures
resulting in permanent data loss. Low volume writes, such as from a digital
camera, are unlikely to cause failure. However, microSD cards have a tendency to
get hot with prolonged writes, and they&rsquo;ll quickly leave their safe operating
temperature and start to accumulate damage. Nearly all microSD cards will let
you perform writes fast enough to drive up the temperature beyond the operating
limits — after all, writes per second is a marketable feature — so
if you want to safely move lots of data onto or off of a microSD card, you need
to monitor the temperature and throttle your read/write operations.</p>
<p>A more reliable solution is to store the data on a hard drive<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. However, hard
drives are rated for a limited number of read/write cycles, and can be expected
to fail eventually. Backblaze publishes some great articles on <a href="https://www.backblaze.com/blog/hard-drive-stats-for-2019/">hard drive
failure rates</a> across
their fleet. According to them, the average annual failure rate of hard drives
is almost 2%. Of course, the exact rate will vary with the frequency of use and
storage conditions. Even in cold storage, the shelf life of a magnetic platter
is not indefinite.</p>
<p>There are other solutions, like optical media, tape drives, or more novel
mediums, like the <a href="https://en.wikipedia.org/wiki/Rosetta_Project">Rosetta Disk</a>.
For most readers, a hard drive will be the best balance of practical and
reliable. For serious long-term storage, if expense isn&rsquo;t a concern, I would
also recommend hot storage over cold storage because it introduces the
possibility of active monitoring.</p>
<h2 id="redundancy-with-raid">Redundancy with RAID</h2>
<p>One solution to this is redundancy — storing the same data across multiple
hard drives. For cold storage, this is often as simple as copying the data onto
a second hard drive, like an external backup HDD. Other solutions exist for hot
storage. The most common standard is <a href="https://en.wikipedia.org/wiki/RAID">RAID</a>, which offers different
features with different numbers of hard drives. With two hard drives (RAID1), for
example, it utilizes mirroring, which writes the same data to both disks. RAID
gets more creative with three or more hard drives, utilizing <em>parity</em>, which
allows it to reconstruct the contents of failed hard drives from still-online
drives. The basic idea relies on the XOR operation. Let&rsquo;s say you write the
following byte to drive A: <code>0b11100111</code>, and to drive B: <code>0b10101100</code>. By XORing
these values together:</p>
<pre><code>  11100111 A
^ 10101100 B
= 01001011 C
</code></pre>
<p>We obtain the value to write to drive C. If any of these three drives fail, we
can XOR the remaining two values again to obtain the third.</p>
<pre><code>  11100111 A
^ 01001011 C
= 10101100 B

  10101100 B
^ 01001011 C
= 11100111 A
</code></pre>
<p>This allows any drive to fail while still being able to recover its contents,
and the recovery can be performed online. However, it&rsquo;s often not that simple.
Drive failure can dramatically reduce the performance of the array while it&rsquo;s
being rebuilt — the disks are going to be seeking constantly to find the
parity data to rebuild the failed disk, and any attempts to read from the disk
that&rsquo;s being rebuilt will require computing the recovered value on the fly. This
can be improved upon by using lots of drives and multiple levels of redundancy,
but it is still likely to have an impact on the availability of your data if not
carefully planned for.</p>
<p>You should also be monitoring your drives and preparing for their failure in
advance.  Failing disks can show signs of it in advance — degraded
performance, or via S.M.A.R.T reports. Learn the tools for monitoring your
storage medium, such as smartmontools, and set it up to report failures to you
(and <em>test</em> the mechanisms by which the failures are reported to you).</p>
<h3 id="other-raid-failure-modes">Other RAID failure modes</h3>
<p>There are other common ways a RAID can fail that result in permanent data loss.
One example is using hardware RAID — there was an argument to be made for
them at one point, but these days hardware RAID is <em>almost always</em> a mistake.
Most operating systems have software RAID implementations which can achieve the
same results without a dedicated RAID card. With hardware RAID, if the RAID card
itself fails (and they often do), you might have to find the exact same card to
be able to read from your disks again. You&rsquo;ll be paying for new hardware, which
might be expensive or out of production, and waiting for it to arrive before you
can start recovering data. With software RAID, the hard drives are portable
between machines and you can always interpret the data with general purpose
software.</p>
<p>Another common failure is <em>cascading</em> drive failures. RAID can tolerate partial
drive failure thanks to parity and mirroring, but if the failures start to pile
up, you can suffer permanent data loss. Many a sad administrator has been in
panic mode, recovering a RAID from a disk failure, and at their lowest
moment&hellip; another disk fails. Then another. They&rsquo;ve suddenly lost their data,
and the challenge of recovering what remains has become ten times harder. When
you&rsquo;ve been distributing read and write operations consistently across all of
your drives over the lifetime of the hardware, they&rsquo;ve been receiving a similar
level of wear, and failing together is not uncommon.</p>
<p>Often, failures like this can be attributed to using many hard drives from the
same batch. One strategy I recommend to avoid this scenario is to use drives
from a mix of vendors, model numbers, and so on. Using a RAID improves
performance by distributing reads and writes across drives, using the time one
drive is busy to utilize an alternate. Accordingly, any differences in the
performance characteristics of different kinds of drives will be smoothed out in
the wash.</p>
<h2 id="zfs">ZFS</h2>
<p>RAID is complicated, and getting it right is difficult. You don&rsquo;t want to wait
until your drives are failing to learn about a gap in your understanding of
RAID. For this reason, I recommend ZFS to most. It automatically makes good
decisions for you with respect to mirroring and parity, and gracefully handles
rebuilds, sudden power loss, and other failures. It also has features which are
helpful for other failure modes, like snapshots.</p>
<p>Set up Zed to email you reports from ZFS. Zed has a debug mode, which will send
you emails even for working disks — I recommend leaving this on, so that
their conspicuous absence might alert you to a problem with the monitoring
mechanism. Set up a cronjob to do monthly scrubs and review the Zed reports when
they arrive. ZFS snapshots are cheap - set up a cronjob to take one every 5
minutes, perhaps with <a href="https://github.com/zfsonlinux/zfs-auto-snapshot">zfs-auto-snapshot</a>.</p>
<h2 id="human-failures-and-existential-threats">Human failures and existential threats</h2>
<p>Even if you&rsquo;ve addressed hardware failure, you&rsquo;re not done yet. There are other
ways still in which your storage may fail. Maybe your server fans fail and burn
out all of your hard drives at once. Or, your datacenter could suffer a total
existence failure — what if a fire burns down the building?</p>
<p>There&rsquo;s also the problem of human failure. What if you accidentally <code>rm -rf / *</code>
the server? Your RAID array will faithfully remove the data from all of the hard
drives for you. What if you send the sysop out to the datacenter to decommission
a machine, and no one notices that they decommissioned the wrong one until it&rsquo;s
too late?</p>
<p>This is where off-site backups come into play. For this purpose, I recommend
<a href="https://www.borgbackup.org/">Borg backup</a>. It has sophisticated features for compression and
encryption, and allows you to mount any version of your backups as a filesystem
to recover the data from. Set this up on a cronjob as well for as frequently as
you feel the need to make backups, and send them off-site to another location,
which itself should have storage facilities following the rest of the
recommendations from this article. Set up another cronjob to run <code>borg check</code>
and send you the results on a schedule, so that their conspicuous absence may
indicate that something fishy is going on. I also use <a href="https://prometheus.io/">Prometheus</a> with
<a href="https://github.com/prometheus/pushgateway">Pushgateway</a> to make a note every time that a backup is run, and
set up an alarm which goes off if the backup age exceeds 48 hours. I also have
periodic test alarms, so that the alert manager&rsquo;s own failures are noticed.</p>
<h2 id="are-you-prepared-for-the-failure">Are you prepared for the failure?</h2>
<p>When your disks are failing and everything is on fire and the sky is falling,
this is the worst time to be your first rodeo. You should have <em>practiced</em> these
problems before they became problems. Do training with anyone expected to deal
with failures. Yank out a hard drive and tell them to fix it. Have someone in
sales come yell at them partway through because the website is unbearably slow
while the RAID is rebuilding and the company is losing $100 per minute as a
result of the outage.</p>
<p>Periodically produce a working system from your backups. This proves (1) the
backups are still working, (2) the backups have coverage over everything which
would need to be restored, and (3) you know how to restore them. Bonus: if
you&rsquo;re confident in your backups, you should be able to replace the production
system with the restored one and allow service to continue as normal.</p>
<h2 id="actually-storing-data-forever">Actually storing data <em>forever</em></h2>
<p>Let&rsquo;s say you&rsquo;ve managed to keep your data around. But will you still know how
to interpret that data in the future? Is it in a file format which requires
specialized software to use? Will that software still be relevant in the future?
Is that software open-source, so you can update it yourself? Will it still
compile and run correctly on newer operating systems and hardware? Will the
storage medium still be compatible with new computers?</p>
<p>Who is going to be around to watch the monitoring systems you&rsquo;ve put in place?
Who&rsquo;s going to replace the failing hard drives after you&rsquo;re gone? How will they
be paid? Will the dataset still be comprehensible after 500 years of evolution
of written language? The dataset requires constant maintenance to remain intact,
but also to remain useful.</p>
<p>And ultimately, there is one factor to long-term data retention that you cannot
control: future generations will decide what data is worth keeping — not
us.</p>
<p>In summary: no matter what, definitely don&rsquo;t do this:</p>
<p><img src="https://redacted.moe/f/802d6207.jpg" alt="Picture of a SATA card for RAIDing 10 microSD cards together"></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Or SSDs, which I will refer to interchangeably with HDDs in this article. They have their own considerations, but we&rsquo;ll get to that.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate></item><item><title>Configuring aerc for git via email</title><link>https://drewdevault.com/2020/04/20/Configuring-aerc-for-git.html</link><description><![CDATA[<p>I use <a href="https://aerc-mail.org">aerc</a> as my email client (naturally — I
wrote it, after all), and I use <a href="https://git-send-email.io">git send-email</a> to
receive patches to many of my projects. I designed aerc specifically to be
productive for this workflow, but there are a few extra things that I use in my
personal aerc configuration that I thought were worth sharing briefly. This blog
post will be boring and clerical, feel free to skip it unless it&rsquo;s something
you&rsquo;re interested in.</p>
<p>When I want to review a patch, I first tell aerc to <code>:cd sources/&lt;that project&gt;</code>, then I open up the patch and give it a read. If it needs work, I&rsquo;ll
use &ldquo;rq&rdquo; (&ldquo;reply quoted&rdquo;), a keybinding which is available by default, to open
my editor with the patch pre-quoted to trim down and reply with feedback inline.
If it looks good, I use the first of my custom keybindings: &ldquo;ga&rdquo;, short for git
am. The entry in <code>~/.config/aerc/binds.conf</code> is:</p>
<pre tabindex="0"><code>ga = :pipe -mb git am -3&lt;Enter&gt;
</code></pre><p>This pipes the entire message (-m, in case I&rsquo;m viewing a message part) into <code>git am -3</code> (-3 uses a three-way merge, in case of conflicts), in the background
(-b). Then I&rsquo;ll use C-t (ctrl-T), another keybinding which is included by
default, to open a terminal tab in that directory, where I can compile the code,
run the tests, and so on. When I&rsquo;m done, I use the &ldquo;gp&rdquo; keybinding to push the
changes:</p>
<pre tabindex="0"><code>gp = :term git push&lt;Enter&gt;
</code></pre><p>This runs the command in a new terminal, so I can monitor the progress. Finally,
I like to reply to the patch, letting the contributor know their work was merged
and thanking them for the contribution. I have a keybinding for this, too:</p>
<pre tabindex="0"><code>rt = :reply -Tthanks&lt;Enter&gt;
</code></pre><p>My &ldquo;thanks&rdquo; template is at <code>~/.config/aerc/templates/thanks</code> and looks like
this:</p>
<pre tabindex="0"><code>Thanks!

{% raw %}
{{exec &#34;{ git remote get-url --push origin;
    git reflog -2 origin/master --pretty=format:%h; }
  | xargs printf &#39;To %s\n   %s..%s  master -&gt; master\n&#39;&#34; &#34;&#34;}}
{% endraw %}
</code></pre><p>That git command prints a summary of the most recent push to master. The result
is that my editor is pre-filled with something like this:</p>
<pre tabindex="0"><code>Thanks!

To git@git.sr.ht:~sircmpwn/builds.sr.ht
   7aabe74..191f4a0  master -&gt; master
</code></pre><p>I occasionally append a few lines asking questions about follow-up work or
clarifying the deployment schedule for the change.</p>]]></description><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate></item><item><title>Status update, April 2020</title><link>https://drewdevault.com/2020/04/15/Status-update-April-2020.html</link><description><![CDATA[<p>Wow, it&rsquo;s already time for another status update? I&rsquo;m starting to lose track of
the days stuck inside. I have it easier than many - I was already used to
working from home before any of this began. But, weeks and weeks of not spending
IRL time with anyone else is starting to get to me. Remember to call your
friends and family and let them know how you&rsquo;re doing. Meanwhile, I&rsquo;ve had a
productive month - let&rsquo;s get you up to date!</p>
<p>In the Wayland world, I&rsquo;ve made some more progress on the book. The input
chapter is now finished, including the example code. The main things which
remain to be written are the XDG positioner section (which I am dreading), drag
and drop, and protocol extensions. On the code side of things, wlroots continues
to see gradual improvements — the DRM (not the bad kind) implementation
continues to see improvements, expanding to more and more use-cases with even
better performance. Sway has also seen little bug fixes here and there, and
updates to keep up with wlroots.</p>
<p>For my part, I&rsquo;ve mostly been focused on SourceHut and Secret Project this
month. On the SourceHut side of things, I&rsquo;ve been working on hub.sr.ht, and on
an experimental GraphQL-based API for git.sr.ht. The former is progressing quite
well, and I hope to ship an early version before the next status update. As for
the latter, it&rsquo;s still very experimental, but I am optimistic about it. I have
felt that the current REST API design was less than ideal, and the best time to
change it would be during the alpha. The GraphQL design, while it has its
limitations, is a lot better than the REST design and should make it a lot
easier for services to interop with each other - which is a core design need for
sr.ht.</p>
<p>Here&rsquo;s a little demo of hub.sr.ht as of a few weeks ago to whet your appetite:</p>
<video src="https://yukari.sr.ht/hub.sr.ht.webm" muted autoplay loop controls>
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
</video>
<p>As far as the secret project is concerned, here&rsquo;s another teaser:</p>
<pre tabindex="0"><code>fn printf (fmt: str, ...) int;

fn f (ptr: &amp;int) int =
{
	let x: int = *ptr;
	free ptr;
	printf(&#34;value: %d\n&#34;, x)
};

export fn main int =
{
	let x = alloc &amp;int 10;
	f(^x);
	0
};
</code></pre><pre tabindex="0"><code>$ [redacted] -o example [redacted...]
$ ./example
value: 10
</code></pre><p>That&rsquo;s all for today! I&rsquo;ll see you again next month. Thank you for your support!</p>]]></description><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate></item><item><title>My unorthodox, branchless git workflow</title><link>https://drewdevault.com/2020/04/06/My-weird-branchless-git-workflow.html</link><description><![CDATA[<p>I have been using git for a while, and I took the time to learn about it in
great detail. Equipped with an understanding of its internals and a comfortable
familiarity with tools like <a href="https://git-rebase.io">git rebase</a> — and a
personal, intrinsic desire to strive for minimal and lightweight solutions
— I have organically developed a workflow which is, admittedly, somewhat
unorthodox.</p>
<p>In short, I use git branches very rarely, preferring to work on my local master
branch almost every time. When I want to work on multiple tasks in the same
repository (i.e. often), I just&hellip; work on all of them on master. I waste no
time creating a new branch, or switching to another branch to change contexts; I
just start writing code and committing changes, all directly on master,
intermixing different workstreams freely.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> This reduces my startup time to
zero, both for starting new tasks and revisiting old work.</p>
<p>When I&rsquo;m ready to present some or all of my changes to upstream, I grab git
rebase and reorganize all of these into their respective features, bugfixes, and
so on, forming a series of carefully organized, self-contained patchsets. When I
receive feedback, I just start correcting the code right away, then fixup the
old commits during the rebase. Often, I&rsquo;ll bring the particular patchset I&rsquo;m
ready to present upstream to the front of my master branch at the same time, for
convenient access with <a href="https://git-send-email.io">git send-email</a>.</p>
<p>I generally set my local master branch to track the remote master branch,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> so
I can update my branch with <code>git pull --rebase</code>.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> Because all of my
work-in-progress features are on the master branch, this allows me to quickly
address any merge conflicts with upstream for <em>all</em> of my ongoing work at once.
Additionally, by keeping them all on the same branch, I can be assured that my
patches are mutually applicable and that there won&rsquo;t be any surprise conflicts
in feature B after feature A is merged upstream.</p>
<p>If I&rsquo;m working on my own projects (where I can push to upstream master), I&rsquo;ll
still be working on master. If I end up with a few commits queued up and I need
to review some incoming patches, I&rsquo;ll just apply them to master, rebase them
behind my WIP work, and then use <code>git push origin HEAD~5:refs/heads/master</code> to
send them upstream, or something to that effect.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> Bonus: this instantly
rebases my WIP work on top of the new master branch.</p>
<p>This workflow saves me time in several ways:</p>
<ul>
<li>No time spent creating new branches for new features.</li>
<li>No time spent switching between branches to address feedback.</li>
<li>All of my features are guaranteed to be mutually applicable to master, saving
me time addressing conflicts.</li>
<li>Any conflicts with upstream are addressed in all of my workstreams at once,
without switching between branches or allowing any branch to get stale.</li>
</ul>
<p>I know that lightweight branches are one of git&rsquo;s flagship features, but I don&rsquo;t
really use them. I know it&rsquo;s weird, sue me.</p>
<p>Sometimes I do use branches, though, when I know that a workstream is going to
be a lot of work — it involves lots of large-scale refactoring, or will
take several weeks to complete. This isolates it from my normal workflow on
small-to-medium patches, acknowledging that the large workstream is going to be
more prone to conflicts. By addressing these separately, I don&rsquo;t waste my time
fixing up the error-prone branch all the time while I&rsquo;m working on my smaller
workstreams.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I will occasionally use <code>git add -p</code> or even just <code>git commit -p</code> to quickly separate any changes in my working directory into separate commits for their respective workstreams, to make my life easier later on. This is usually the case when, for example, I have to fix problem A before I can address problem B, and additional issues with problem A are revealed by my work on problem B. I just fix them right away, <code>git commit -p</code> the changes separately, then file each commit into their respective patchsets later.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>&ldquo;What?&rdquo; Okay, so in git, you have <em>local</em> branches and <em>remote</em> branches.  The default behavior is reasonably sane, so I would forgive you for not noticing. Your local branches can <em>track</em> remote branches, so that when you <code>git pull</code> it automatically updates any local <em>tracking branches</em>. <code>git pull</code> is actually equivalent to doing <code>git fetch</code> and then <code>git merge origin/master</code> assuming that the current branch (your <em>local</em> master) is <em>tracking</em> <code>origin/master</code>. <code>git pull --rebase</code> is the same thing, except it uses <code>git rebase</code> instead of <code>git merge</code> to update your local branch.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>In fact, I have <code>pull.rebase = true</code> in my git config, which makes <code>--rebase</code> the default behavior.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>&ldquo;What?&rdquo; Okay, so <code>git push</code> is shorthand for <code>git push origin master</code>, if you have a tracking branch set up for your local master branch to <code>origin/master</code>. But this itself is also shorthand, for <code>git push &lt;remote&gt; &lt;local&gt;:&lt;remote&gt;</code>, where <code>&lt;local&gt;</code> is the local branch you want to push, and <code>&lt;remote&gt;</code> is the remote branch you want to update. But, remember that branches are just references to commits. In git, there are other ways to reference commits. <code>HEAD~5</code>, for example, gets the commit which is 5 commits earlier than <code>HEAD</code>, which is the commit you have checked out right now. So <code>git push origin HEAD~5:refs/for/master</code> updates the <code>origin</code>&rsquo;s <code>refs/for/master</code> reference (i.e. the master branch) to the local commit at <code>HEAD~5</code>, pushing any commits that upstream master doesn&rsquo;t also have in the process.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 6 Apr 2020 00:00:00 +0000</pubDate></item><item><title>Designing and 3D printing a new part for my truck</title><link>https://drewdevault.com/2020/03/25/Designing-a-replacement-part-for-my-truck.html</link><description><![CDATA[<p>I drove a car daily for many years while I was living in Colorado, California,
and New Jersey, but since I moved to Philadelphia I have not needed a car. The
public transit here is not great, but it&rsquo;s good enough to get where I need to be
and it&rsquo;s a lot easier than worrying about parking a car. However, in the past
couple of years, I have been moving more and more large server parts back and
forth to the datacenter for SourceHut. I&rsquo;ve also developed an interest in
astronomy, which benefits from being able to carry large equipment to remote
places. These reasons, among others, put me into the market for a vehicle once
again.</p>
<p>I think of a vehicle strictly as a functional tool. Some creature comforts are
nice, but I consider them optional. Instead, I prioritize utility. A truck makes
a lot of sense — lots of room to carry things in. And, given my expected
driving schedule of &ldquo;not often&rdquo;, I wasn&rsquo;t looking to spend a lot of money or
get a loan. There are other concerns: modern cars are very complicated machines,
and many have lots of proprietary computerized components which make end-user
maintenance very difficult. Sometimes manufacturers even use cryptography and
legal threats to bring cars into their dealerships, bullying out third-party
repairs.</p>
<p>To avoid these, I got an older truck: a 1984 Dodge D250. It&rsquo;s a much simpler
machine than most modern cars, and learning how to repair and maintain it is
something I can do in my spare time.</p>
<p>It&rsquo;s an old truck, and the previous owners were not negligent, but also didn&rsquo;t
invest a lot of time or money in the vehicle&rsquo;s upkeep. The first problem I hit
was the turn signal lever snapping and becoming slack, which I fixed by pulling
open the steering column, re-aligning the lever, and tightening an internal
screw. The more interesting problem, however, was this:</p>
<p><img src="https://redacted.moe/f/d798184b.jpg" alt="Picture of a broken latch on the window over the truck bay"></p>
<p>This plastic part holds an arm in place, which is engaged by a lever in the
center of the window which folds closed over the truck bay. It&rsquo;s used to hold
the window in place and provides a weak locking mechanism. When the arm is
allowed to move freely, it can clang around while I&rsquo;m driving, and can make
opening the truck bay a frustrating procedure. I have been looking for a reason
to learn how to use <a href="http://solvespace.com/index.pl">solvespace</a>, and this
seemed like a great start.</p>
<p>I ordered a caliper<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and measured the dimensions of the broken part, and took
pictures of it from several angles for later reference. I took some notes:</p>
<p><img src="https://redacted.moe/f/dc939c36.jpg" alt="Picture of my notes on the measurements of the part"></p>
<p>Then, I used solvespace to design the following part:</p>
<p><img src="https://redacted.moe/f/49cc6bba.png" alt="Screenshot of the replacement part in solvespace"></p>
<p>This was the third iteration — I printed one version, brought it out to
the truck to compare with the broken part, made refinements to the design, then
rinse and repeat. Here&rsquo;s an earlier revision being compared with the broken
piece:</p>
<p><img src="https://redacted.moe/f/7407f94b.jpg" alt="A hand holds up a 3D printed part for comparison with the original"></p>
<p>Finally, I arrived at a design I liked and sent it to the printer.</p>
<p><img src="https://redacted.moe/f/e37b2b5a.jpg" alt="Picture of my 3D printer working on the part"></p>
<p>I took some pliers to the remaining plastic bits from the broken part, and sawed
off the rivets. I attached the replacement with superglue and ta-da!</p>
<p><img src="https://redacted.moe/f/681bff34.jpg" alt="Picture of the replacement part in place"></p>
<p>If the glue fails, I&rsquo;ll drill out what&rsquo;s left of the rivets and secure it with
screws. This may require another revision of the design, which will also give me
a chance to address some minor shortcomings. I don&rsquo;t expect to need this,
though, because this is not part under especially high stress.</p>
<p>You can get the CAD files and an STL from my <a href="https://git.sr.ht/~sircmpwn/open-dodge-d250">repository
here</a>, which I intend to keep
updating as I learn more about this truck and encounter more fun problems to
solve.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Oh man, I&rsquo;ve always wanted a caliper, and now I have an excuse!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate></item><item><title>The reckless, infinite scope of web browsers</title><link>https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html</link><description><![CDATA[<p>Since the first browser war between Netscape and Internet Explorer, web browsers
have been using features as their primary means of competing with each other.
This strategy of unlimited scope and perpetual feature creep is reckless, and
has been allowed to go on for far too long.</p>
<p>I used wget to download all 1,217 of the <a href="https://www.w3.org/TR/">W3C specifications</a>
which have been published at the time of writing<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, of which web browsers need
to implement a substantial subset in order to provide a modern web experience.
I ran a word count on all of these specifications. How complex would you guess
the web is?</p>
<p>The total word count of the W3C specification catalogue is 114 million words at
the time of writing. If you added the combined word counts of the C11, C++17,
UEFI, USB 3.2, and POSIX specifications, all 8,754 published RFCs, and the
combined word counts of everything on Wikipedia&rsquo;s <a href="https://en.wikipedia.org/wiki/List_of_longest_novels">list of longest
novels</a>, you would be 12 million words short of the W3C
specifications.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>I conclude that <strong>it is impossible to build a new web browser</strong>. The complexity
of the web is <em>obscene</em>. The creation of a new web browser would be comparable
in effort to the Apollo program or the Manhattan project.</p>
<p>It is impossible to:</p>
<ul>
<li>Implement the web correctly</li>
<li>Implement the web securely</li>
<li>Implement the web <strong>at all</strong></li>
</ul>
<p>Starting a bespoke browser engine with the intention of competing with Google or
Mozilla is a fool&rsquo;s errand. The last serious attempt to make a new browser,
Servo, has become one part incubator for Firefox refactoring, one part
playground for bored Mozilla engineers to mess with technology no one wants, and
zero parts viable modern web browser. But WebVR is cool, right? Right?</p>
<p>The consequences of this are obvious. Browsers are the most expensive piece of
software a typical consumer computer runs. They&rsquo;re infamous for using all of
your RAM, pinning CPU and I/O, draining your battery, etc. <em>Web browsers are
responsible for more than 8,000 CVEs</em>.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>Because of the monopoly created by the insurmountable task of building a
competitive alternative, browsers have also been free to stop being the &ldquo;user
agent&rdquo; and start being the agents of their creators instead. Firefox is filling
up with ads, tracking, and mandatory plugins. Chrome is used as a means for
Google to efficiently track your eyeballs and muscle anti-technologies like DRM
and AMP into the ecosystem.  The browser duopoly is only growing stronger, too,
as Microsoft drops Edge and WebKit falls well behind its competition.</p>
<p>The major projects are open source, and usually when an open-source project
misbehaves, we&rsquo;re able to fork it to offer an alternative. But even this
is an impossible task where web browsers are concerned. The number of W3C
specifications grows at an average rate of 200 new specs per year, or about 4
million words, or about one POSIX every 4 to 6 months. How can a new team
possibly keep up with this on top of implementing the outrageous scope web
browsers already have <em>now</em>?</p>
<p>The browser wars have been allowed to continue for far too long. They should
have long ago focused on competing in terms of performance and stability, not in
adding new web &ldquo;features&rdquo;. This is absolutely ridiculous, and it has to stop.</p>
<p><em>Note: I have prepared a write-up on <a href="https://paste.sr.ht/~sircmpwn/13c1951014a256e9f551296a129bf6d10e9303dc">how I arrived at these word counts</a>.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Not counting WebGL, which is maintained by Khronos.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>You could fit the 5,038 page Intel x86 ISA manual into the remainder, six times.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Combined search results for CVEs mentioning &ldquo;firefox&rdquo;, &ldquo;chrome&rdquo;, &ldquo;safari&rdquo;, and &ldquo;internet explorer&rdquo;, on cve.mitre.org.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate></item><item><title>GitHub&apos;s new notifications: a case of regressive design</title><link>https://drewdevault.com/2020/03/13/GitHub-notifications.html</link><description><![CDATA[<p><em>Disclaimer: I am the founder of a company which competes with GitHub. However,
I still use tools like GitHub, GitLab, and so on, as part of regular
contributions to projects all over the FOSS ecosystem. I don&rsquo;t dislike GitHub,
and I use it frequently in my daily workflow.</em></p>
<p>GitHub is rolling out a new notifications UI. A few weeks ago, I started seeing
the option to try it. Yesterday, I received a warning that the old UI will soon
be deprecated. At this pace, I would not be surprised to see the new UI become
mandatory in a week or two. I&rsquo;m usually optimistic about trying out new
features, but this change worried me right away. I still maintain a few projects
on GitHub, and I frequently contribute to many projects there. Using the
notification page to review these projects is a ritual I usually conduct several
times throughout the workday. So, I held my breath and tried it out.</p>
<p>The new UI looks a lot more powerful initially. The whole page is used to
present your notifications, and there are a lot more buttons to click, many of
them with cute emojis to quickly convey meaning. The page is updated in
real-time, so as you interact with the rest of the website your notifications
page in the other tab will be updated accordingly.</p>
<p>Let&rsquo;s stop and review my workflow using the <em>old</em> UI. I drew this beautiful
graphic up in GIMP to demonstrate:</p>
<p><img src="https://cmpwn.com/system/media_attachments/files/000/659/354/original/d9abc4befe1a074c.png" alt=""></p>
<p>I open the page, then fix my eyes on the notification titles. I move my mouse to
the right, and while reading titles I move the mouse down, clicking to mark any
notifications as read that I don&rsquo;t need to look at, and watching in my
peripheral vision to see that the mouse hits its mark over the next button. The
notifications are grouped by repository, so I can read the name of the repo then
review all of its notifications in one go. The page is fairly narrow, so reading
the titles usually leads my eyes naturally into reading any other information I
might need, like the avatars of participants or age of the notification.</p>
<p>I made an equally beautiful picture for the new UI<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<p><img src="https://cmpwn.com/system/media_attachments/files/000/659/353/original/b15f20de0ae35cd3.png" alt=""></p>
<p>This one is a lot harder to scan quickly or get into your muscle memory. The
title of the notification no longer stands out, as it&rsquo;s the same size as the
name of the repo that was affected. They&rsquo;re no longer grouped by repo, either,
so I have to read both every time to get the full context. I then have to move
my eyes <em>all the way</em> across the page to review any of those other details,
through vast fields of whitespace, where I can easily lose my place and end up
on a different row.</p>
<p>Once I&rsquo;ve decided what to do with it, I have to move my mouse over the row, and
wait for the action buttons to appear. They were invisible a second ago, so I
have to move my mouse again to get closer to the target. Clicking it will mark
it as read. Then, because I have it filtered to unread (because &ldquo;all&rdquo;
notifications is really <em>all</em> notifications, and there&rsquo;s no &ldquo;new&rdquo; notifications
like the old UI had), the row disappears, making it difficult to undo if it was
a mistake. Then I heave my eyes to the left again to read the next one.</p>
<p>This page is updated in real-time. In the old UI, after I had marked everything
as read that I didn&rsquo;t need to look at, I would middle click on each remaining
notification to open it in a new tab. On the new real-time page, as soon as the
other tab loads, the notification I clicked disappears (again, because I have it
filtered to &ldquo;unread&rdquo;). This isn&rsquo;t immediate, though — it takes at least as
long as it takes for the new tab to load. Scanning the list and middle-clicking
every other message becomes a Sisyphean task.</p>
<p>And the giant sticky header that follows you around! A whole 160 pixels, 14% of
my vertical space, is devoted to a new header which shows up on the next page
when I follow through a notification. And it&rsquo;s implemented with JavaScript and
done in a bizzare way, so writing a user style to get rid of it was rather
difficult.</p>
<p>Aside: I tried adding a custom filter to show only pull requests, but it seems
to silently fail, and I just see all of my notifications when I use it.</p>
<hr>
<p>Anyway, we&rsquo;re probably stuck with this. Now that they&rsquo;ve announced the imminent
removal of the old UI, we can probably assume that this feature is on the
non-stop release train. Negative feedback almost never leads to cancelling the
roll-out of a change, because the team&rsquo;s pride is on the line.</p>
<p>I haven&rsquo;t spoken to anyone who likes the new UI. Do you?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Both of these pictures were sent to GitHub as feedback on the feature, three weeks ago.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate></item><item><title>An open letter to Senator Bob Casey on end-to-end encryption</title><link>https://drewdevault.com/2020/03/07/Open-letter-to-Senator-Casey.html</link><description><![CDATA[<p>To Senator Bob Casey, I&rsquo;m writing this open letter.</p>
<p>As your constituent, someone who voted for you in 2018, and an expert in
software technology, I am disappointed in your support of the EARN IT Act. I am
aware that encryption is a challenging technology to understand, even for us
software engineers, and that it raises difficult problems for the legislature.
The EARN IT Act does not protect our children, and it has grave implications for
the freedoms of our citizens.</p>
<p>The mathematics underlying strong end-to-end encryption have been proven to be
unbreakable. Asking service providers to solve them or stop using it is akin to
forcing us to solve time travel or quit recording history. Banning the use of a
technology without first accomplishing a sisyphean task is equivalent to banning
the technology outright. Ultimately, these efforts are expensive and futile. The
technology necessary to implement unbreakable encryption can be described
succinctly on a single 8.5&quot;x11&quot; sheet of paper. I would be happy to send such a
paper to your office, if you wish. The cat is out of the bag: encryption is not
a secret, and its use to protect our citizens is a widespread industry standard.
Attempting to ban it is equivalent to trying to ban algebra or trigonometry.</p>
<p>Citizen use of end-to-end encryption is necessary to uphold our national
security. One way that child abuse material is often shared is via the Tor
secure internet network. This system utilizes strong end-to-end encryption to
secure the communications of its users, which makes it well-suited to hiding
the communications of child abusers. However, the same guarantees that enable
the child abusers to securely share materials are also essential for
journalists, activists, watchdog groups - and for our national security. The
technology behind Tor was designed by the US Navy and DARPA and the ability for
the public to use it to secure their communications is essential to the
network&rsquo;s ability to delivery on its national security guarantees as well.</p>
<p>Protecting our children is important, but this move doesn&rsquo;t help. Breaking
end-to-end encryption is no substitute for good police work and effective
courts. Banning end-to-end encryption isn&rsquo;t going to make it go away - the
smart criminals are still going to use it to cover their tracks, and law
enforcement still needs to be prepared to solve cases with strong encryption
involved. Even on the Tor network, where strong end-to-end encryption is
utilized, many child abusers have been caught and brought to justice thanks to
good investigative work. It&rsquo;s often difficult to conduct an investigation within
the limits of the law and with respect to the rights of our citizens, but it&rsquo;s
necessary for law enforcement to endure this difficulty to protect our freedom.</p>
<p>End-to-end encryption represents an important tool for the preservation of our
fundamental rights, as enshrined in the bill of rights. Time and again, our
alleged representatives levy attacks on this essential technology. It doesn&rsquo;t
get any less important each time it&rsquo;s attacked - rather, the opposite seems to
be true. On the face of it, the EARN IT Act appears to use important and morally
compelling problems of child abuse as a front for an attack on end-to-end
encryption. Using child abuse as a front to attack our fundamental right to
privacy is reprehensible, and I&rsquo;m sure that you&rsquo;ll reconsider your position.</p>
<p>As freedom of the press is an early signal for the failure of democracy and rise
of tyranny, so holds for the right to encrypt. I am an American, I am free to
speak my mind. I am free to solve a simple mathematical equation which
guarantees that my thoughts are shared only with those I choose. The right to
private communications is essential to a functioning democracy, and if you claim
to represent the American people, you must work to defend that right.</p>]]></description><pubDate>Sat, 7 Mar 2020 00:00:00 +0000</pubDate></item><item><title>The Abiopause</title><link>https://drewdevault.com/2020/03/03/Abiopause.html</link><description><![CDATA[<p>The sun has an influence on its surroundings. One of these is in the form of
small particles that are constantly ejected from the sun in all directions,
which exerts an outward pressure, creating an expanding sphere of particles that
moves away from the sun. These particles are the solar wind. As the shell of
particles expands, the density (and pressure) falls. Eventually the solar wind
reaches the <em>interstellar medium</em> — the space between the stars —
which, despite not being very dense, is not empty. It exerts a pressure that
pushes inwards, towards the sun.</p>
<p>Where the two pressures balance each other is an interesting place. The sphere
up to this point is called the <em>heliosphere</em> — which can be roughly
defined as the zone in which the influence of the sun is the dominant factor.
The <em>termination shock</em> is where the change starts to occur. The plasma from the
sun slows, compresses, and heats, among other changes. The physical interactions
here are interesting, but aren&rsquo;t important to the metaphor. At the
termination shock begins the <em>heliosheath</em>. This is a turbulent place where
particles from the sun and from the interstellar medium mix. The interactions in
this area are complicated and interesting, you should read up about it later.</p>
<p><img src="https://legacy.sr.ht/_FIT.svg" alt="Picture of a faucet pouring into a sink"></p>
<div class="text-center">
  <small>Yanpas via Wikimedia Commons, CC-BY-SA</small>
</div>
<p>Finally, we reach the <em>heliopause</em>, beyond which the influence of the
interstellar medium is dominant. Once crossing this threshold, you are said to
have left the solar system. The Voyager 1 space probe, the first man-made object
to leave the solar system, crossed this point on August 25th, 2012. Voyager 2
completed the same milestone on November 12th, 2018<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>In the world of software, the C programming language clearly stands out as the
single most important and influential programming language.  Everything
forming the critical, foundational parts of your computer is written in it:
kernels, drivers, compilers, interpreters, runtimes, hypervisors, databases,
libraries, and more are almost all written in C.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> For this reason, any
programming language which wants to get anything useful done is certain to
support a C FFI (foreign function interface), which will allow programmers to
communicate with C code from the comfort of a high-level language. No other
language has the clout or ubiquity to demand this level of deference from
everyone else.</p>
<p>The way that an application passes information back and forth with its
subroutines is called its <em>ABI</em>, or application binary interface. There are a
number of ABIs for C, but the most common is the System-V ABI, which is used on
most modern Unix systems. It specifies details like which function parameters to
put in which registers, what goes on the stack, the structure and format of
these values, and how the function returns a value to the caller. In order to
interface with C programs, the FFI layers in other programs have to utilize this
ABI to pass information to and from C functions.</p>
<p>Other languages often have their own ABIs. C, being a different programming
language from $X, naturally has different semantics. The particular semantics of
C don&rsquo;t necessarily line up to the semantics the language designers want $X to
have, so the typical solution is to define functions with C &ldquo;linkage&rdquo;, which
means they&rsquo;re called with the C ABI. It&rsquo;s from this that we get keywords like
<code>extern &quot;C&quot;</code> (C++, Rust), Go&rsquo;s Cgo tooling, <code>[DllImport]</code> in C#, and so on.
Naturally, these keywords come with a lot of constraints on how the function
works, limiting the user to the mutually compatible subset of the two ABIs, or
else using some kind of translation layer.</p>
<p>I like to think of the place where this happens as the &ldquo;abiopause&rdquo;, and draw
comparisons with the solar system&rsquo;s heliopause. Within the &ldquo;abiosphere&rdquo;, the
programming language you&rsquo;re using is the dominant influence. The idioms and
features of the language are used to their fullest extent to write idiomatic
code. However, the language&rsquo;s sphere of influence is but a bubble in a sea of C
code, and the interface between these two areas of influence is often quite
turbulent. Directly using functions with C linkage from the abiosphere is not
pleasant, as the design of good C APIs do not match the semantics of good
$X APIs. Often there are layers to this transition, much like our solar
system, where some attempt is made to wrap the C interface in a more idiomatic
abstraction.</p>
<p>I don&rsquo;t really like this boundary, and I think most programmers who have worked
here would agree. If you like C, you&rsquo;re stuck either writing bad C code or using
poorly-suited tools to interface badly with an otherwise good API. If you like
$X, you&rsquo;re stuck writing very non-idiomatic $X code to interface with a foreign
system. I don&rsquo;t know how to fix this, but it&rsquo;s interesting to me that the
&ldquo;abiopause&rdquo; appears to be an interface full of a similar turbulence and
complexity as we find in the heliopause.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>It took longer because Voyager 2 went on to see Uranus and Neptune. Voyager 1 just swung around Saturn and was shot directly up and out of the solar system. Three other man-made objects are currently on trajectories which will leave the solar system.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Even if you don&rsquo;t like C, it would be ridiculous to dismiss its influence and importance.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 3 Mar 2020 00:00:00 +0000</pubDate></item><item><title>Thoughts on performance &amp; optimization</title><link>https://drewdevault.com/2020/02/21/Thoughts-on-performance.html</link><description><![CDATA[<p>The idea that programmers ought to or ought not to be called &ldquo;software
engineers&rdquo; is a contentious one. How you approach optimization and performance
is one metric which can definitely push my evaluation of a developer towards the
engineering side. Unfortunately, I think that a huge number of software
developers today, even senior ones, are approaching this problem poorly.</p>
<p>Centrally, I believe that you cannot effectively optimize a system which you do
not understand. Say, for example, that you&rsquo;re searching for a member of a
linked list, which is an O(n) operation. You know this can be improved by
switching from a linked list to a sorted array and using a binary search. So,
you spend a few hours refactoring, commit the implementation, and&hellip; the
application is no faster. What you failed to consider is that the lists are
populated from data received over the network, whose latency and bandwidth
constraints make the process much slower than any difference made by the kind of
list you&rsquo;re using.  If you&rsquo;re not optimizing your bottleneck, then you&rsquo;re
wasting your time.</p>
<p>This example seems fairly obvious, and I&rsquo;m sure you, our esteemed reader, would
not have made this mistake. In practice, however, the situation is usually more
subtle. Thinking about your code really hard, making assumptions, and then
acting on them is not the most effective way to make performance improvements.
Instead, we apply the scientific method: we think really hard, <em>form a
hypothesis</em>, make predictions, test them, and then apply our conclusions.</p>
<p>To implement this process, we need to describe our performance in factual terms.
All software requires a certain amount of resources — CPU time, RAM, disk
space, network utilization, and so on. These can also be described over time,
and evolve as the program takes on different kinds of work. For example, we
could model our program&rsquo;s memory use as bytes allocated over time, and perhaps
we can correlate this with different stages of work — &ldquo;when the program
starts task C, the rate of memory allocation increases by 5MiB per second&rdquo;. We
identify bottlenecks — &ldquo;this program&rsquo;s primary bottleneck is disk I/O&rdquo;.
When we hit performance problems, then we know that we need to upgrade to SSDs,
or predict what reads will be needed later and prep them in advance, cache data
in RAM, etc.</p>
<p>Good optimizations are based on factual evidence that the program is not
operating within its constraints in certain respects, then improving on those
particular problems. You should always conduct this analysis before trying to
solve your problems. I generally recommend conducting this analysis in advance,
so that you can predict performance issues before they occur, and plan for them
accordingly. For example, if you know that your disk utilization grows by 2 GiB
per day, and you&rsquo;re on a 500 GiB hard drive, you&rsquo;ve got about 8 months to plan
your next upgrade, and you shouldn&rsquo;t be surprised by an ENOSPC when the time
comes.</p>
<p>For CPU bound tasks, this is also where a general understanding of the
performance characteristics of various data structures and algorithms is useful.
When you know you&rsquo;re working on something which <em>will become</em> the application&rsquo;s
bottleneck, you would be wise to consider algorithms which can be implemented
efficiently. However, it&rsquo;s equally important to re-prioritize performance when
you&rsquo;re not working on your bottlenecks, and instead consider factors like
simplicity and conciseness more seriously.</p>
<p>Much of this will probably seem obvious to many readers. Even so, I think the
general wisdom described here is institutional, so it&rsquo;s worth writing down. I
also want to call out some specific behaviors that I see in software today which
I think don&rsquo;t take this well enough into account.</p>
<p>I opened by stating that I believe that you cannot effectively optimize a system
which you do not understand. There are two groups of people I want to speak to
with this in mind: library authors (especially the standard library), and
application programmers. There are some feelings among library authors that
libraries should be fairly opaque, and present high-level abstractions over
their particular choices of algorithms, data structures, and so on. I think this
represents a fundamental lack of trust with the programmer downstream. Rather
than write idiot-proof abstractions, I think it&rsquo;s better to trust the downstream
programmer, explain to them how your system works, and equip them with the tools
to audit their own applications. After all: your library is only a small
component of <em>their</em> system, not yours — and you cannot optimize a system
you don&rsquo;t understand.</p>
<p>And to the application programmer, I urge you to meet your dependencies in the
middle. Your entire system is your responsibility, including your dependencies.
When the bottleneck lies in someone else&rsquo;s code, you should be prepared to dig
into their code, patch it, and send a fix upstream, or to restructure your code
to route the bottleneck out. Strive to understand how your dependencies, up to
and including the stdlib, compiler, runtime, kernel, and so on, will perform in
your scenario. And again to the standard library programmer: help them out by
making your abstractions thin, and your implementations simple and debuggable.</p>]]></description><pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate></item><item><title>Fucking laptops</title><link>https://drewdevault.com/2020/02/18/Fucking-laptops.html</link><description><![CDATA[<p>The best laptop ever made is the ThinkPad X200, and I have two of them. The
caveats are: I get only 2-3 hours of battery life even with conservative use;
and it struggles to deal with 1080p videos.</p>
<p>The integrated GPU, Bluetooth and WiFi, internal sensors, and even the
fingerprint reader can all be driven by the upstream Linux kernel. In fact, the
hardware is so well understood that I have successfully used almost all of the
laptop&rsquo;s features on Linux, FreeBSD, NetBSD, Minix, Haiku, and Plan 9. Plan
fucking 9. It can run coreboot, too. The back of the laptop has all of the
screws (Phillips head) labelled so you know which to remove to service which
parts. User replacable parts include the screen, keyboard (multiple layouts are
available and are interchangeable), the RAM, hard drive (I put a new SSD in one
of mine a few weeks ago, and it took about 30 seconds) — actually, there
are a total of 26 replacable parts in this laptop.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> There is a detailed
278-page service manual to assist you or your local repair tech in addressing
any problems that arise.</p>
<p>They&rsquo;re quite durable, too. Mine still looks like it just rolled off the
assembly line yesterday. In fact, it was built 12 years ago.</p>
<p>The X200 was made in 2008. In the time since, the modern laptops&rsquo; battery life
and video decoding performance has improved. In every other respect, the market
is regressive, half-assed garbage.</p>
<p>I am usually near power, so I&rsquo;ve been reasonably happy even with the pithy
battery life of the X200. I also have a T520, which sucks in its own way<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>,
but can decode 1080p videos just fine. I generally don&rsquo;t need a lot of power -
compiling most programs is fast enough that I don&rsquo;t really notice, especially
with incremental compilation, and for any large workloads I just SSH out into a
build server somewhere. However, I&rsquo;ve been planning some astronomy outings
lately, and the battery life matters for this - so I was looking for a laptop I
could run <a href="https://stellarium.org/">Stellarium</a> on to drive my telescope into
the wee hours of the night.</p>
<p>It has since come to my attention that in 2020, every laptop <em>still</em> fucking
sucks. Even the ones people pretend to like have crippling, egregious flaws. The
Dell XPS series has a firmware so bad that its engineers should be strung up in
the town square for building it - if yours works, it&rsquo;s because you were <em>lucky</em>.
System76 laptops are bulky and priced at 2x or 3x what they&rsquo;re worth. Same goes
for Purism, plus a company I have no desire to support any longer, and they&rsquo;re
out of stock anyway. Pine64 requires nonfree blobs, patched kernels, and booting
up ARM devices is a fucking nightmare, and they&rsquo;re out of stock anyway. The Star
Lite looks promising, but they&rsquo;re out of stock too. Huewei laptops are shameless
Macbook ripoffs with the same shitty keyboards, and you can&rsquo;t buy them in the US
anyway. Speaking of Macbooks, even Apple fanboys are fed up with them these
days.</p>
<p>The laptop market is in an atrocious state, folks. If you work at any of these
companies and you&rsquo;re proud of the garbage you&rsquo;re shipping, then I&rsquo;m disappointed
in you. Come on, let&rsquo;s get our shit together and try to make a laptop which is
<em>at least</em> as good as the 12 year-old one I&rsquo;m stuck with now.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Which just means you can basically take the entire thing apart and replace almost any part.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>It barely gets an hour and a half of battery life on a good day. And there&rsquo;s an Nvidia optimus GPU, which is just, ugh.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate></item><item><title>Status update, February 2020</title><link>https://drewdevault.com/2020/02/15/Status-update-February-2020.html</link><description><![CDATA[<p>Today I thought it&rsquo;d try out something new: I have an old family recipe
simmering on the stove right now, but instead of beef I&rsquo;m trying out impossible
beef. It cooked up a bit weird — it doesn&rsquo;t brown up in the same way I
expect of ground beef, and it made a lot more fond than I expected. Perhaps the
temperature is too high? We&rsquo;ll see how it fares when it&rsquo;s done. In the
meanwhile, let&rsquo;s get you up to speed on my free software projects.</p>
<p>First, big thanks to everyone who stopped by to say &ldquo;hello&rdquo; at FOSDEM! Putting
faces to names and getting to know everyone on a personal level is really
important to me, and I would love FOSDEM even if that was all I got out of it.
Got a lot of great feedback on the coming plans for SourceHut and aerc, too.</p>
<p>That aside, what&rsquo;s new? On the Wayland scene, the long-promised Sway 1.3^W1.4
was finally released, and with it wlroots 0.10.0. I&rsquo;ve been talking it up for a
while, so I won&rsquo;t bore you by re-listing all of the cool stuff in this release -
it&rsquo;ll suffice to say that I think you&rsquo;ll enjoy it. The related tools —
swayidle, swaylock, swaybg — all saw releases around the same time. The
other release this month was scdoc 1.10.1, which was a simple patch release.
Beyond releases, there&rsquo;s been some Wayland development work as well: wev
received a simple bugfixes, and casa&rsquo;s OpenGL-based renderer rewrite has been
completed nicely.</p>
<p>aerc progresses nicely this month as well, thanks to the support of its many
dedicated contributors. Many bugfixes have landed, alongside contextual
configuration options — so you can have different config settings, for
example, when you have an email selected whose subject line matches a regex. A
series of notmuch patches should be landing soon as well. himitsu has also seen
slow progress — this pace being deliberate, as this is security-sensitive
software. Several bugs have been fixed in the existing code, but there are a few
more to address still. imrsh also had a little bit of improvement this month,
as I started down the long road towards properly working UTF-8 support.</p>
<p>SourceHut improvements have also landed recently. I did some work shoring up our
accessibility standards throughout the site, and SourceHut is now fully
complaint with the WCAG accessibility guidelines. We now score 100% on standard
performance, accessibility, and web standards compliance tests. SourceHut is the
lightest weight, most usable forge. I recently fixed a bug report from a Lynx,
user, too 😉 In terms of feature development, the big addition this month is
support for attaching files to annotated git tags, so you can attach binaries,
PGP signatures, and so on to your releases. More cool SourceHut news is coming
in the post to sr.ht-announce later today.</p>
<p>This month&rsquo;s update is a little bit light on content, I&rsquo;ll admit. Between FOSDEM
and taking some personal time, I&rsquo;ve had less time for work this month. However,
there&rsquo;s another reason: I have a new secret project which I&rsquo;ve been working on.
I intend to keep this project under wraps for a while still, because I don&rsquo;t
want people to start using it before I know if it&rsquo;s going to pan out or not.
This project is going to take a lot of time to complete, so I hope you&rsquo;ll bear
with me for a while and trust that the results will speak for themselves. As
always, thank you for your support, and I&rsquo;m looking forward to another month of
awesome FOSS work.</p>]]></description><pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate></item><item><title>Dependencies and maintainers</title><link>https://drewdevault.com/2020/02/06/Dependencies-and-maintainers.html</link><description><![CDATA[<p>I&rsquo;m 34,018 feet over the Atlantic at the moment, on my way home from FOSDEM. It
was as always a lovely event, with far too many events of interest for any
single person to consume. One of the few talks I was able to attend<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> left a
persistent worm of thought in my brain. This talk was put on by representatives
of Microsoft and GitHub and discusses whether or not there is a sustainability
problem in open source (<a href="https://fosdem.org/2020/schedule/event/foss_sustainability_issues/">link</a>). The content of the talk,
interpreted within the framework in which it was presented, was moderately
interesting. It was more fascinating to me, however, as a lens for interpreting
GitHub&rsquo;s (and, indirectly, Microsoft&rsquo;s) approach to open source, and of the
mindset of developers who approach problems in the same ways.</p>
<p>The presenters drew attention to a few significant crises open-source
communities have faced in recent years — left-pad, in which a trivial
library was removed from npm and was unknowingly present in thousands of
dependency graphs; event-stream, in which a maintainer transferred project
ownership to an unknown individual who added crypto mining; and heartbleed, in
which a bug in a critical security library caused mass upgrades and panic
— and asks whether or not these can be considered sustainability issues.
The talk has a lot to dissect and will frame my thinking and writings for a
while. Today I&rsquo;ll focus on one specific problem, which I called attention to
during the Q&amp;A.</p>
<p>At a few points, the presenters spoke from the perspective of a business which
depends on up to thousands of open-source libraries or tools. In such a context,
how do you prioritize which of your thousands of dependencies requires
attention, for financial support, contributions upstream, and so on? I found
this worldview dissonant, and asked the following question: &ldquo;why do you have
thousands of dependencies in the first place?&rdquo; Because this approach seems to be
fast becoming the norm, this may seem like a stupid question.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> If any Node
developers are reading, scan through your nearest node_modules directory and see
how many of these dependencies you&rsquo;ve even heard of.</p>
<p>Such an environment is primed to fail in the ways enumerated by this talk.
Consider the case of the maintainer who lost interest and gave their project to
an untrusted third party. If I had depended on this library, I would have
noticed long ago that the project was effectively unmaintained. It&rsquo;s likely that
I or my peers would have sent patches to this project, given that bugfixes would
have stopped coming from upstream. We would be aware of the larger risk this
project posed, and have studied alternatives. Earlier than that, I would
probably have lent my ear to the maintainer to vent their frustrations, and
offered my help where possible.</p>
<p>For most of my projects, I can probably list the entire dependency graph,
including transitive dependencies, off of the top of my head. I can name most of
their maintainers, and many of their contributors. I have shaken the hands of
these people, shared drinks and meals with them, and count many of them among my
close friends. The idea of depending on a library I&rsquo;ve never heard of, several
degrees removed via transitive dependencies, maintained by someone I&rsquo;ve never
met and have no intention of speaking to, is <em>absolutely nuts</em> to me. I know of
these problems well in advance because I know the people affected as my friends.
If someone is frustrated or overworked, I&rsquo;m right there with them trying to find
solutions and correct the over-burden. If someone is in dire financial
straights, I&rsquo;m helping them touch up their resume and introducing them to
companies that I know are looking for their skillset, or helping them work on
more sustainable sources of donations and grants. They do the same for me, and
for each other.</p>
<p>Quit treating open-source projects like a black box that conveniently solves
your problem. Engage with the human beings who work on it, participate in the
community, and <em>make</em> it healthy and sustainable. You shouldn&rsquo;t be surprised
when the 3 AM alarm goes off if the most you see of a project is a line in your
<code>package.json</code>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>And strictly speaking I even had to slip in under the radar to attend in the first place — the room was full.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>If so, you may be pleased by a Microsoft&rsquo;s ridiculous answer: &ldquo;we have 60,000 developers, that&rsquo;s why.&rdquo;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 6 Feb 2020 00:00:00 +0000</pubDate></item><item><title>KnightOS was an interesting operating system</title><link>https://drewdevault.com/2020/01/27/KnightOS-was-interesting.html</link><description><![CDATA[<p><a href="https://knightos.org">KnightOS</a> is an operating system I started writing about
10 years ago, for Texas Instruments line of z80 calculators — the TI-73,
TI-83+, TI-84+, and similar calculators are supported. It still gets the rare
improvements, but these days myself and most of the major contributors are just
left with starry eyed empty promises to themselves that one day they&rsquo;ll do one
of those big refactorings we&rsquo;ve been planning&hellip; for 4 or 5 years now.</p>
<p>Still, it was a really interesting operating system which was working under some
challenging constraints, and overcame them to offer a rather nice Unix-like
environment, with a filesystem, preemptive multiprocessing <em>and</em> multithreading,
assembly and C programming environments, and more. The entire system was written
in handwritten z80 assembly, almost 50,000 lines of it, on a compiler toolchain
we built from scratch.</p>
<p>There was only 64 KiB of usable RAM. The kernel stored <em>all</em> of its state in
1024 bytes of statically allocated RAM. Many subsystems used overlapping parts
of this memory, which was carefully planned for to avoid conflicts. The
userspace memory allocator used a simple linked list for tracking allocations,
to minimize the overhead of each allocation and maximize the usable space for
userspace programs. There was no MMU in the sense that we have on modern
computers, so any program could freely overwrite any other programs. In fact,
the &ldquo;userspace&rdquo; task switching GUI would read the kernel&rsquo;s process table
directly to make a list of running programs.</p>
<p>The non-volatile storage was NOR Flash, which presents some interesting
constraints. In the worst case we only had 512 KiB of storage, and even in the
best case just 4MiB (this for a device released in 2013). This space was shared
with the kernel, whose core code was less than 4KiB, and including high-address
subsystems still clocked in at less than 16KiB. Due to the constraints of NOR
Flash, a custom filesystem was designed which did all daily operations by only
<em>resetting</em> bits in the underlying storage. In order to <em>set</em> any bits, we had
to set the entire 64 KiB sector to 1. Overhead was also kept to a bare minimum
here to maximize storage space available to users.</p>
<p>Writing to Flash storage also renders it unreadable while the operation is in
progress. The kernel normally executes directly from Flash, resident at the
bottom of the memory. Therefore, in order to modify Flash, the kernel&rsquo;s Flash
driver copies part of itself to RAM, jumps to it, and then jumps back after the
operation is complete. Recall that all of the kernel&rsquo;s memory is statically
allocated, and there&rsquo;s not much of it — we used only 128 bytes for the
code which runs in RAM, and it&rsquo;s shared with some other stuff that we had to
plan around. In order to meet these constraints, we employ <em>self modifying code</em>
— the Flash driver copies some of itself into RAM, then pre-computes some
information and <em>modifies</em> that machine code in-place before jumping to it.</p>
<p>We also had some basic networking support. The calculator has a 2.5mm jack,
similar to headphone jacks — if you had a 3.5mm adapter, we had a music
player which would play MIDI or WAV files. The kernel had direct control of the
voltages on the ring and tip, and had to bitbang them directly in software<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
Based on this we built some basic networking support, which supported
calculator-to-calculator and calculator-to-PC information exchange. Later models
had a mini-USB controller (which, funnily enough, can also be bitbanged in
software), but we never ended up writing a driver for it.</p>
<p>The KnightOS kernel also includes some code which is the first time I ever wrote
<a href="https://github.com/KnightOS/kernel/blob/e257f54e021ee743306a2a4a5a152860728fb3f8/src/00/restarts.asm#L129-L130">&ldquo;here be dragons&rdquo;</a>
into a comment, and I don&rsquo;t think I&rsquo;ve topped it since.</p>
<p>Despite these constraints, KnightOS is completely booted up to a useful
Unix-like (with a graphical interface) faster than you can lift your finger off
of the power button. The battery could last the entire semester, if you&rsquo;re
lucky. Can the device you&rsquo;re reading this on claim the same?<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p><video controls src="https://yukari.sr.ht/knightos.webm"></video></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Newer hardware revisions had some support hardware which was capable of transferring a single byte without software intervention.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>The device I&rsquo;m writing this blog post with is 3500× faster than my calculator, has 262,144× more RAM, and 2.1×10<sup>6</sup> times more storage space.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate></item><item><title>The happinesses and stresses of full-time FOSS work</title><link>https://drewdevault.com/2020/01/21/Stress-and-happiness.html</link><description><![CDATA[<p>In the past few days, several free software maintainers have come out to discuss
the stresses of their work. Though the timing was suggestive, my article last
week on the philosophy of project governance was, at best, only tangentially
related to this topic - I had been working on that article for a while. I do
have some thoughts that I&rsquo;d like to share about what kind of stresses I&rsquo;ve
dealt with as a FOSS maintainer, and how I&rsquo;ve managed (or often mismanaged) it.</p>
<p>February will mark one year that I&rsquo;ve been working on self-directed free
software projects full-time. I was planning on writing an optimistic
retrospective article around this time, but given the current mood of the
ecosystem I think it would be better to be realistic. In this stage of my
career, I now feel at once happier, busier, more fulfilled, more engaged, more
stressed, and more depressed than I have at any other point in my life.</p>
<p>The good parts are numerous. I&rsquo;m able to work on my life&rsquo;s passions, and my
projects are in the best shape they&rsquo;ve ever been thanks to the attention I&rsquo;m
able to pour into them. I&rsquo;ve also been able to do more thoughtful, careful work;
with the  extra time I&rsquo;ve been able to make my software more robust and reliable
than it&rsquo;s ever been. The variety of projects I can invest my time into has also
increased substantially, with what was once relegated to minor curiosities now
receiving a similar amount of attention as my larger projects were receiving in
my spare time before. I can work from anywhere in the world, at any time, not
worrying about when to take time off and when to put my head down and crank out
a lot of code.</p>
<p>The frustrations are numerous, as well. I often feel like I&rsquo;ve bit off more than
I can chew. This has been the default state of affairs for me for a long time;
I&rsquo;m often neglecting half of my projects in order to obtain progress by leaps
and bounds in just a few. Working on FOSS full-time has cast this model&rsquo;s
disadvantages into greater relief, as I focus on a greater breadth of projects
and spend more time on them.</p>
<p>The attention and minor fame I&rsquo;ve received as a result of my prolific efforts
also has profound consequences. On the positive line of thought, I&rsquo;m somewhat
embarrassed to admit that I&rsquo;ve noticed my bug reports and feature requests on
random projects (or even my own projects) being taken more seriously now, which
is almost certainly more related to name recognition than merit. I often receive
thanks and words of admiration from my&hellip; fans? I guess I have those now.
Sometimes these are somewhat unwelcome, with troubled individuals writing
difficult to decipher half-rants laden with strange praises and bizarre
questions. Other times I&rsquo;m asked out of the blue to join a discussion I was
unaware of, to comment on some piece of technology I&rsquo;ve never used or to take a
stand on some argument which I wasn&rsquo;t privy to. I don&rsquo;t enjoy these kinds of
comments. But, they&rsquo;re not far removed from the ones I like - genuine,
thoughtful praise arrives in my inbox fairly often and it makes the job a lot
more worthwhile.</p>
<p>Of course, a similar sort of person exists on the opposite extreme. There are
many people who hate my guts and anything I&rsquo;ve ever worked on, and who&rsquo;ll go out
of their way to let me and anyone else who&rsquo;ll listen to them know how they feel.
Of course, I have <em>earned</em> the ire of no small number of people, and I regret
many of these failed interpersonal relationships. These cases are in the
minority, however - most of the people who will tell tales of my evil are people
who I&rsquo;ve never met. There&rsquo;s a lot of spaces online that I just won&rsquo;t visit
anymore because of them. As for the less extreme of this sort of person, I&rsquo;ll
also reiterate what others have said - the negative effects of entitled,
arrogant, or outright toxic users is profound. Don&rsquo;t be that person.</p>
<p>In either case, I can never join new communities on the same terms as anyone
else does. At least one person in every new community already has some
preconception of me when I arrive. Often I think about making an alias just to
enjoy the privilege of anonymity again.</p>
<p>A great help has been my daily interactions with the many friends and colleagues
who are dear to me. I&rsquo;ve made lifelong friends of many of the people I&rsquo;ve met
through these projects.  Thanks to FOSS, I have met an amazing number of kind,
talented, generous people.  Every day, I&rsquo;m thankful to and amazed by the
hundreds of people who have found my ideas compelling, and who come together to
contribute their own ideas and set aside their precious time to work together
realizing our shared dreams. If I&rsquo;m feeling blue, often all it takes to snap me
out of it is to reflect on the gratitude I feel for these wonderful people. I&rsquo;ll
never be able to thank my collaborators enough, but hell, I could stand to do it
some more anyway.</p>
<p>I also have mixed feelings about how <em>busy</em> I am. Every day I wake up to a
hundred new emails, delete half of them, and spend 3-4 hours working on the
rest. Patches, questions, support inquiries, monitoring &amp; reports, it&rsquo;s endless.
On top of that, I have dozens of things I already need to work on. The CI work
distribution algorithm needs to be completely redone; I need to provision new
hardware — oh yeah, and, the hardware that I need ran into shipping
issues, again; I need to improve monitoring; I need to plan for FOSDEM; I need
to finish the Wayland book; I need to figure out the memory issues in himitsu
— not to mention write the rest of the software; I need to file taxes,
twice as much work when you own a business; I need to implement data export
&amp; account deletion; I need to finish the web-driven patch review UI; I need
to finish writing docs for Alpine; I have to work more on the PinePhone; I have
a legacy server which needs to be overhauled and is now on the clock because of
ACMEv1; names.sr.ht needs to be finished&hellip;</p>
<p>Not to mention the tasks which have been on hold for longer now than they&rsquo;ve
been planned for in the first place. Alpine is still going to have hundreds of
Python 2 packages by EoL; the ppc64le server is gathering dust in the
datacenter; there&rsquo;s been some bug with fosspay for several months, in which it
doesn&rsquo;t show Patreon figures unless I reboot the process every now and then;
RISC-V work is stalled because the work is currently blocked by a large problem
that I can&rsquo;t automate; the list of blog posts I want to write is well over 100
entries long. There are <em>several dozen</em> other loose ends I haven&rsquo;t mentioned
here but am painfully aware of anyway.</p>
<p>That&rsquo;s not even considering any personal goals, which I have vanishingly little
time for. I get zero exercise, and though my diet is mostly reasonable the
majority of it is delivery unless I get the odd 2 hours to visit the grocery
store. That is, unless I want to spend those 2 hours with my friends, which
means it&rsquo;s back to delivery. My dating life is almost nonexistent. I want to
spend more time studying Japanese, but it&rsquo;s either that or keeping up with my
leisure reading. Lofty goals of also studying Chinese or Arabic are but dust in
the wind. I&rsquo;m addicted to caffeine, again.</p>
<p>There have been healthy ways and unhealthy ways of dealing with the occasional
feelings of being overwhelmed by all of this. The healthier ways have included
taking walks, reading my books, spending a few minutes with my cat, doing
chores, and calling my family to catch up. Less healthy ways have included
walking to the corner store to buy unhealthy comfort foods, consuming alcohol or
weed too much or too often, getting in stupid internet arguments, being mean to
my friends and colleagues, and googling myself to read negative comments.</p>
<p>Despite being swamped with all of this work, it&rsquo;s all work that I love. I love
writing code, and immeasurably more so when writing <em>my</em> code. Sure, there are
tech debt skeletons in the closet here and they&rsquo;re keeping me awake at night, but
on the whole I feel lucky to be able to write the software I want to write, the
way I want to write it. I&rsquo;ve been trying to do that my entire life —
writing code for someone else has always been a huge drain on my emotional
well-being.  That&rsquo;s why I worked on my side projects in the first place, to have
an outlet through which I could work on self-directed projects without making
compromises for some arbitrary deadline.</p>
<p>When I&rsquo;m in the zone, writing lots of code for a project I&rsquo;m interested in,
knowing it&rsquo;s going to have a meaningful impact on my users, knowing that it&rsquo;s
being written under my terms, it&rsquo;s the most rewarding work I&rsquo;ve ever done. I get
to do that every day.</p>
<p>This isn&rsquo;t the retrospective I wanted to write, but it&rsquo;s nice to drop the veneer
for a few minutes and share an honest take on what this is like. This year has
been nothing like what I expected it to be - it&rsquo;s both terrible and wonderful
and very busy, very goddamn busy. In any case, I&rsquo;m extremely grateful to be here
doing it, and it&rsquo;s thanks to many, many supportive people - users, contributors,
co-maintainers, and friends. Thank you, thank you, thank you, thank you.</p>]]></description><pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate></item><item><title>A philosophy of project governance</title><link>https://drewdevault.com/2020/01/17/Effective-project-governance.html</link><description><![CDATA[<p>I&rsquo;ve been in the maintainer role for dozens of projects for a while now, and
have moderated my fair share of conflicts. I&rsquo;ve also been on the other side,
many times, as a minor contributor watching or participating in conflict within
other projects. Over the years, I&rsquo;ve developed an approach to project governance
which I believe is lightweight, effective, and inclusive.</p>
<p>I hold the following axioms to be true:</p>
<ol>
<li>Computer projects are organized by humans, creating a social system.</li>
<li>Social systems are fundamentally different from computer systems.</li>
<li>Objective rules cannot be programmed into a social system.</li>
</ol>
<p>And the following is true of individuals within those systems:</p>
<ol>
<li>Project leadership is in a position to do anything they want.</li>
<li>Project leadership will ultimately do whatever they want, even if they have
to come up with an interpretation of the rules which justifies it.</li>
<li>Individual contributors who have a dissonant world-view from project
leadership will never be welcome under those leaders.</li>
</ol>
<p>Any effective project governance model has to acknowledge these truths. To this
end, the simplest effective project governance model is a BDFL, which scales a
lot further than people might expect.</p>
<p>The BDFL (Benevolent Dictator for Life) is a term which was first used to
describe Python&rsquo;s governance model with Guido van Rossum at the helm. The &ldquo;for
life&rdquo; in BDFL is, in practice, until the &ldquo;dictator&rdquo; resigns from their role.
Transfers of power either involve stepping away and letting lesser powers decide
between themselves how to best fill the vacuum, or simply directly appointing a
successor (or successors). In this model, a single entity is in charge —
often the person who started the project, at first — and while they may
delegate their responsibilities, they ultimately have the final say in all
matters.</p>
<p>This decision-making authority derives from the BDFL. Consequently, the
project&rsquo;s values are a reflection of that BDFL&rsquo;s values. Conflict resolution and
matters of exclusion or inclusion of specific people from the project is the
direct responsibility of the BDFL. If the BDFL delegates this authority to other
groups or project members, that authority derives from the BDFL and is exercised
at their leisure, on their terms. In practice, for projects of a certain size,
most if not all of the BDFL&rsquo;s authority is delegated across many people, to the
point where the line between BDFL and core contributor is pretty blurred. The
relationships in the project are built on trust between individuals, not trust
in the system.</p>
<p>As a contributor, you should evaluate the value system of the leadership and
make a personal determination as to whether or not it aligns with your own. If
it does, participate. If it does not, find an alternative or fork the
project.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Consider the main competing model: a Code of Conduct as the rule of law.</p>
<p>These attempt to boil subjective matters down into objectively enforcible rules.
Not even in sovereign law do we attempt this. Programmers can easily fall into
the trap of thinking that objective rules can be applied to social systems, and
that they can deal with conflict by executing a script. This is quite untrue,
and attempting to will leave loopholes big enough for bad actors to drive a
truck through.</p>
<p>Additionally, governance models which provide a scripted path onto the decision
making committee can often have this path exploited by bad actors, or by people
for whom the politics are more important than the software. By implementing this
system, the values of the project can easily shift in ways the leaders and
contributors don&rsquo;t expect or agree with.</p>
<p>The worst case can be that a contributor is ostracized due to the letter of the
CoC, but not the spirit of it. Managing drama is a sensitive, subjective issue,
but objective rules break hearts. Enough of this can burn out the leaders,
creating a bigger power vacuum, without a plan to fill it.</p>
<p>In summary:</p>
<p><strong>For leaders</strong>: Assume good faith until proven otherwise.</p>
<p>Do what you think is right. If someone is being a
dickhead<small><sup>†</sup></small>,
tell them to stop.  If they don&rsquo;t stop, kick them out. Work with contributors
you trust to elevate their role in the project so you can delegate
responsibilities to them and have them act as good role models for the
community. If you&rsquo;re not good at moderating discussions or conflict resolution,
find someone who is among your trusted advisors and ask them to exercise their
skills.</p>
<p>If you need to, sketch up informal guidelines to give an approximation of your
values, so that contributors know how to act and what to expect, but make it
clear that they&rsquo;re guidelines rather than rules. Avoid creating complex systems
of governance. Especially avoid setting up systems which create paths that
untrusted people can use to quickly weasel their way into positions of power.
Don&rsquo;t give power to people who don&rsquo;t have a stake in the project.</p>
<p><strong>For contributors</strong>: Assume good faith until proven otherwise.</p>
<p>Do what you think is right. If someone is being a
dickhead<small><sup>†</sup></small>,
talk to the leadership about it. If you don&rsquo;t trust the project leadership, the
project isn&rsquo;t for you, and future conflicts aren&rsquo;t going to go your way. Be
patient with your maintainers — remember that you have the easier job.</p>
<p><small><sup>†</sup> According to your subjective definition of dickhead.</small></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Note that being able to fork is the escape hatch which makes this model fair and applicable to free &amp; open source projects. The lack of a similarly accessible escape hatch in, for example, the governments of soverign countries, prevents this model from generalizing well.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate></item><item><title>Status update, January 2020</title><link>https://drewdevault.com/2020/01/15/Status-update-January-2020.html</link><description><![CDATA[<p>I forgot to write this post this morning, and I&rsquo;m on cup 3 of coffee while
knee-deep in some arcane work with tarballs in Python. Forgive the brevity of
this introduction. Let&rsquo;s get right into the status update.</p>
<p>First of all, <a href="https://fosdem.org/2020/">FOSDEM 2020</a> is taking place on February 1st and 2nd, and
I&rsquo;m planning on being there again this year. I hope to see you there! I&rsquo;ll be
hosting another <a href="https://fosdem.org/2020/schedule/event/bof_sourcehut/">small session</a> for SourceHut and aerc users
where I&rsquo;ll take questions, demo some new stuff, and give out stickers.</p>
<p>In Wayland news, the upcoming Sway 1.3 release is getting very close - rc3 is
planned to ship later today. We&rsquo;ve confirmed that it&rsquo;ll ship with VNC support
via <a href="https://github.com/any1/wayvnc">wayvnc</a> and improvements to input latency.
I haven&rsquo;t completed much extra work on Casa (and &ldquo;Sway Mobile&rdquo; alongside it),
but there have been some small improvements. I did find some time to work on
<a href="https://git.sr.ht/~sircmpwn/sedna">Sedna</a>, however. We&rsquo;ve decided to use it as
a proving grounds for the new wlroots scene graph API, which plans to
incorporate Simon Ser&rsquo;s <a href="https://github.com/emersion/libliftoff">libliftoff</a> and put to rest the eternal
debate over how wlroots renderer should take shape. This&rsquo;ll be <em>lots</em> of work
but the result will be a remarkably good foundation on which we can run
performant compositors on a huge variety of devices — and, if we&rsquo;re
lucky, might help resolve the Nvidia problem. I also did a bit more work on the
<a href="https://wayland-book.com">Wayland Book</a>, refactoring some of the chapter
ordering to make more sense and getting started with the input chapter. More
soon.</p>
<p>On SourceHut, lots of new developments have been underway. The latest round of
performance improvements for git.sr.ht finally landed with the introduction of
new server hardware, and it&rsquo;s finally competitive with its peers in terms of
push and web performance. I&rsquo;ve also overhauled our monitoring infrastructure
<a href="https://metrics.sr.ht">and made it public</a>. Our <a href="https://sourcehut.org/blog/2020-01-13-sourcehut-q4-2019-financial-report/">Q4 2019 financial
report</a> was also published earlier this week. I&rsquo;m currently
working on pushing forward through the self-service data ownership goals, and
we&rsquo;ve already seen some improvements in that todo.sr.ht can now re-import
tracker exports from itself or other todo.sr.ht instances.</p>
<p>I&rsquo;ve also been working more on <a href="https://git.sr.ht/~sircmpwn/himitsu">himitsu</a>
recently, though I&rsquo;m taking it pretty slowly because it&rsquo;s a security-sensitive
project. Most of the crypto code has been written at this point - writing
encrypted secrets to disk, reading and writing the key index - but reading
encrypted secrets back from the disk remains to be implemented. I know there are
some bugs in the current implementation, which I&rsquo;ll be sorting out before I
write much more code. I also implemented most of the support code for the Unix
socket RPC, and implemented a couple of basic commands which have been helpful
with proving out the secret store code (proving that it&rsquo;s wrong, at least).</p>
<p>Simon Ser&rsquo;s <a href="https://mrsh.sh">mrsh</a> has also been going very well lately, and is
now a nearly complete implementation of the POSIX shell. I&rsquo;ve started working on
something I&rsquo;ve long planned to build on top of mrsh: a comfortable interactive
shell, inspired by fish&rsquo;s interactive mode, but with a strictly POSIX syntax. I
call the project <a href="https://git.sr.ht/~sircmpwn/imrsh">imrsh</a>, for interactive
mrsh. I&rsquo;ve already got it in somewhat good shape, but many of the features
remain to be implemented. The bulk of the work was in Simon&rsquo;s mrsh, so it
shouldn&rsquo;t be too hard to add a pretty interface on top. We&rsquo;ll see how it goes.</p>
<p>That&rsquo;s all for today. In the coming month I hope to expand on each of these, and
I&rsquo;m also working on a new Secret Project which may start bearing fruits soon
(but likely not). Thank you for your continued support! I&rsquo;ll see you at FOSDEM.</p>]]></description><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate></item><item><title>Following up on &quot;Hello world&quot;</title><link>https://drewdevault.com/2020/01/08/Re-Slow.html</link><description><![CDATA[<p>This is a follow-up to my last article, <a href="https://drewdevault.com/2020/01/04/Slow.html">Hello
world</a>, which is easily the most
negatively received article I&rsquo;ve written — a remarkable feat for someone
who&rsquo;s written as much flame bait as me. Naturally, the fault lies with the
readers.</p>
<p><a href="https://xkcd.com/1984/" rel="noopener"><img src="https://imgs.xkcd.com/comics/misinterpretation_2x.png" width="294" /></a></p>
<p>All jokes aside, I&rsquo;ll try to state my point better. The &ldquo;Hello world&rdquo; article
was a lot of work to put together — frustrating work — by the time
I had finished collecting numbers, I was exhausted and didn&rsquo;t pay much mind to
putting context to them. This left a lot of it open to interpretation, and a lot
of those interpretations didn&rsquo;t give the benefit of the doubt.</p>
<p>First, it&rsquo;s worth clarifying that the assembly program I gave is a
<em>hypothetical, idealized</em> hello world program, and in practice not even the
assembly program is safe from bloat. After it&rsquo;s wrapped up in an ELF, even after
stripping, the binary bloats up to <strong>157×</strong> the size of the
actual machine code. I had hoped this would be more intuitively clear, but the
take-away is that the ideal program is a pipe dream, not a standard to which the
others are held. As the infinite frictionless plane in vacuum is to physics,
that assembly program is to compilers.</p>
<p>I also made the mistake of including the runtime in the table. What I wanted you
to notice about the timestamp is that it <em>rounds to zero</em> for 15 of the 21 test
cases, and arguably only one or two approach the realm of human perception.
It&rsquo;s meant to lend balance to the point I&rsquo;m making with the number of syscalls:
despite the complexity on display, the user generally can&rsquo;t even tell. The other
problem with including the runtimes is that it makes it look like a benchmark,
which it&rsquo;s not (you&rsquo;ll notice that if you grep for &ldquo;benchmark&rdquo;, you will find no
results).</p>
<p>Another improvement would have been to group rows of the table by orders of
magnitude (in terms of number of syscalls), and maybe separate the outliers in
each group. There is little difference between many of the languages in the
middle of the table, but when one of them is your favorite language, &ldquo;stacking
it up&rdquo; against its competitors like this is a good way to get the reader&rsquo;s blood
pumping and bait some flames. If your language appears to be represented
unfavorably on this chart, you&rsquo;re likely to point out the questionable
methodology, golf your way to a more generous sample code, etc; things I could
have done myself were I trying to make a benchmark rather than a point about
complexity.</p>
<p>And hidden therein is my actual point: complexity. There has long been a trend
in computing of endlessly piling on the abstractions, with no regard for the
consequences. The web is an ever growing mess of complexity, with larger and
larger blobs of inscrutable JavaScript being shoved down pipes with no regard
for the pipe&rsquo;s size or the bridge toll charged by the end-user&rsquo;s telecom.
Electron apps are so far removed from hardware that their jarring non-native UIs
can take seconds to respond and eat up the better part of your RAM to merely
show a text editor or chat application.</p>
<p>The PC in front of me is literally five thousand times faster than the graphing
calculator in my closet - but the latter can boot to a useful system in a
fraction of a millisecond, while my PC takes almost a minute. Productivity per
CPU cycle per Watt is the lowest it&rsquo;s been in decades, and is orders of
magnitude (plural) beneath its potential. So far as most end-users are
concerned, computers haven&rsquo;t improved in meaningful ways in the past 10 years,
and in many respects have become worse. The cause is well-known: programmers
have spent the entire lifetime of our field recklessly piling abstraction on top
of abstraction on top of abstraction. We&rsquo;re more concerned with shoving more
spyware at the problem than we are with optimization, outside of a small number
of high-value problems like video decoding.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Programs have grown fat and
reckless in scope, and it affects literally everything, even down to the last
bastion of low-level programming: C.</p>
<p>I use syscalls as an approximation of this complexity. Even for one of the
simplest possible programs, there is a huge amount of abstraction and complexity
that comes with many approaches to its implementation. If I just print &ldquo;hello
world&rdquo; in Python, users are going to bring along almost a million lines of code
to run it, the fraction of which isn&rsquo;t dead code is basically a rounding error.
This isn&rsquo;t <em>always</em> a bad thing, but it often is and no one is thinking about
it.</p>
<p>That&rsquo;s the true message I wanted you to take away from my article: most
programmers aren&rsquo;t thinking about this complexity. Many choose tools because
it&rsquo;s easier for them, or because it&rsquo;s what they know, or because developer time
is more expensive than the user&rsquo;s CPU cycles or battery life and the engineers
aren&rsquo;t signing the checks. I hoped that many people would be surprised at just
how much work their average programming language could end up doing even when
given simple tasks.</p>
<p>The point was not that your programming language is wrong, or that being higher
up on the table is better, or that programming languages should be blindly
optimizing these numbers. The point is, if these numbers surprised you, then you
should find out why! I&rsquo;m a systems programmer — I want you to be
interested in your systems! And if this surprises you, I wonder what else
might&hellip;</p>
<p>I know that article didn&rsquo;t do a good job of explaining any of this. I&rsquo;m sorry.</p>
<hr>
<p>Now to address more specific comments:</p>
<p><strong>What the fuck is a syscall</strong>?</p>
<p>This question is more common with users of the languages which make more of
them, ironically. A syscall is when your program asks the kernel to do something
for it. This causes a transition from <em>user space</em> to <em>kernel space</em>. This
transition is one of the more expensive things your programs can do, but a
program that doesn&rsquo;t make any syscalls is not a useful program: syscalls are
necessary to do any kind of I/O (input or output). <a href="https://en.wikipedia.org/wiki/System_call">Wikipedia
page</a>.</p>
<p>On Linux, you can use the <a href="https://linux.die.net/man/1/strace">strace</a> tool to
analyze the syscalls your programs are making, which is how I obtained the
numbers in the original article.</p>
<p><strong>This &ldquo;benchmark&rdquo; is biased against JIT&rsquo;d and interpreted languages</strong>.</p>
<p>Yes, it is. It <em>is</em> true that many programming environments have to factor
in a &ldquo;warm up&rdquo; time. This argument on its face-value is apparently validated by
the cargo-culted (and often correct) wisdom that benchmarks should be conducted
with timers in-situ, post warm-up period, with the measured task being
repeated many times so that trends become more obvious.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> It&rsquo;s precisely these
details, which the conventional benchmarking wisdom aims to obscure, that I&rsquo;m
trying to cast a light on. While a benchmark which shows how quickly a bunch of
programming languages can print &ldquo;hello world&rdquo; a million times<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> might be
interesting, it&rsquo;s not what I&rsquo;m going for here.</p>
<p><strong>Rust is doing important things with those syscalls</strong>.</p>
<p>My opinion on this is mixed: yes, stack guards are useful. However, my &ldquo;hello
world&rdquo; program has zero chance of causing a stack overflow. In theory, Rust
should be able to reckon whether or not many programs are at risk of stack
overflow.  If not, it can ask the programmer to specify some bounds, or it can
emit the stack guards <em>only in those cases</em>. The worst option is panicking, and
I&rsquo;m surprised that Crustaceans feel like this is sufficient. Funny, given their
obsession with &ldquo;zero cost&rdquo; abstractions, that a nonzero-cost abstraction would
be so fiercely defended. They&rsquo;re already used to overlong compile times, adding
more analysis probably won&rsquo;t be noticed ;)</p>
<p><strong>Go is doing important things with those syscalls</strong>.</p>
<p>On this I wholly disagree. I hate the Go runtime, it&rsquo;s the worst thing about an
otherwise great language. Go programs are almost impossible to debug for having
to sift through mountains of unrelated bullshit the program is doing, all to
support a concurrency/parallelism model that I also strongly dislike. There are
some bad design decisions in Golang and stracing the average Go program brings a
lot of them to light. Illumos has many of its own problems, but <a href="http://dtrace.org/blogs/wesolows/2014/12/29/golang-is-trash/">this
article</a> about
porting Go to it covers a number of related problems.</p>
<p><strong>Wow, Zig is competitive with assembly?</strong></p>
<p>Yeah, I totally had the same reaction. I&rsquo;m interested to see how it measures up
under more typical workloads. People keep asking me what I think about Zig in
general, and I think it has potential, but I also have a lot of complaints. It&rsquo;s
not likely to replace C for me, but it might have a place somewhere in my stack.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For efficient display of unskippable 30 second video ads, of course.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This approach is the most &ldquo;fair&rdquo; for comparison&rsquo;s sake, but it also often obscures a lot of the practical value of the benchmark in the first place. For example, how often is the branch predictor and L1 cache going to be warmed up in favor of the measured code in practice?&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>All of them being handily beaten by <code>/bin/yes &quot;hello world&quot;</code>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 8 Jan 2020 00:00:00 +0000</pubDate></item><item><title>Hello world</title><link>https://drewdevault.com/2020/01/04/Slow.html</link><description><![CDATA[<p>Let&rsquo;s say you ask your programming language to do the simplest possible task:
print out &ldquo;hello world&rdquo;. Generally this takes two syscalls: write and exit.
The following assembly program is the ideal Linux x86_64 program for this
purpose. A perfect compiler would emit this hello world program for any
language.</p>
<pre tabindex="0"><code>bits 64
section .text
global _start
_start:
	mov rdx, len
	mov rsi, msg
	mov rdi, 1
	mov rax, 1
	syscall

	mov rdi, 0
	mov rax, 60
	syscall

section .rodata
msg: db &#34;hello world&#34;, 10
len: equ $-msg
</code></pre><p>Most languages do a whole lot of other crap other than printing out &ldquo;hello
world&rdquo;, even if that&rsquo;s all you asked for.</p>
<table class="table table-bordered">
  <thead>
    <tr>
      <th>Test case</th>
      <th>Source</th>
      <th>Execution time</th>
      <th>Total syscalls</th>
      <th>Unique syscalls</th>
      <th>Size (KiB)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Assembly</strong> (x86_64)</td>
      <td>
        <a href="#tests">test.S</a>
      </td>
      <td>0.00s real</td>
      <td>2</td>
      <td>2</td>
      <td>8.6 KiB*</td>
    </tr>
    <tr>
      <td><strong>Zig</strong> (small)</td>
      <td>
        <a href="#testzig">test.zig</a>
      </td>
      <td>0.00s real</td>
      <td>2</td>
      <td>2</td>
      <td>10.3 KiB</td>
    </tr>
    <tr>
      <td><strong>Zig</strong> (safe)</td>
      <td>
        <a href="#testzig">test.zig</a>
      </td>
      <td>0.00s real</td>
      <td>3</td>
      <td>3</td>
      <td>11.3 KiB</td>
    </tr>
    <tr>
      <td><strong>C</strong> (musl, static)</td>
      <td>
        <a href="#testc">test.c</a>
      </td>
      <td>0.00s real</td>
      <td>5</td>
      <td>5</td>
      <td>95.9 KiB</td>
    </tr>
    <tr>
      <td><strong>C</strong> (musl, dynamic)</td>
      <td>
        <a href="#testc">test.c</a>
      </td>
      <td>0.00s real</td>
      <td>15</td>
      <td>9</td>
      <td>602 KiB</td>
    </tr>
    <tr>
      <td><strong>C</strong> (glibc, static*)</td>
      <td>
        <a href="#testc">test.c</a>
      </td>
      <td>0.00s real</td>
      <td>11</td>
      <td>9</td>
      <td>2295 KiB</td>
    </tr>
    <tr>
      <td><strong>C</strong> (glibc, dynamic)</td>
      <td>
        <a href="#testc">test.c</a>
      </td>
      <td>0.00s real</td>
      <td>65</td>
      <td>13</td>
      <td>2309 KiB</td>
    </tr>
    <tr>
      <td><strong>Rust</strong></td>
      <td>
        <a href="#testrs">test.rs</a>
      </td>
      <td>0.00s real</td>
      <td>123</td>
      <td>21</td>
      <td>244 KiB</td>
    </tr>
    <tr>
      <td><strong>Crystal</strong> (static)</td>
      <td>
        <a href="#testcr">test.cr</a>
      </td>
      <td>0.00s real</td>
      <td>144</td>
      <td>23</td>
      <td>935 KiB</td>
    </tr>
    <tr>
      <td><strong>Go</strong> (static w/o cgo)</td>
      <td>
        <a href="#testgo">test.go</a>
      </td>
      <td>0.00s real</td>
      <td>152</td>
      <td>17</td>
      <td>1661 KiB</td>
    </tr>
    <tr>
      <td><strong>D</strong> (dmd)</td>
      <td>
        <a href="#testd">test.d</a>
      </td>
      <td>0.00s real</td>
      <td>152</td>
      <td>20</td>
      <td>5542 KiB</td>
    </tr>
    <tr>
      <td><strong>D</strong> (ldc)</td>
      <td>
        <a href="#testd">test.d</a>
      </td>
      <td>0.00s real</td>
      <td>181</td>
      <td>21</td>
      <td>10305 KiB</td>
    </tr>
    <tr>
      <td><strong>Crystal</strong> (dynamic)</td>
      <td>
        <a href="#testcr">test.cr</a>
      </td>
      <td>0.00s real</td>
      <td>183</td>
      <td>25</td>
      <td>2601 KiB</td>
    </tr>
    <tr>
      <td><strong>Go</strong> (w/cgo)</td>
      <td>
        <a href="#testgo">test.go</a>
      </td>
      <td>0.00s real</td>
      <td>211</td>
      <td>22</td>
      <td>3937 KiB</td>
    </tr>
    <tr>
      <td><strong>Perl</strong></td>
      <td>
        <a href="#testpl">test.pl</a>
      </td>
      <td>0.00s real</td>
      <td>255</td>
      <td>25</td>
      <td>5640 KiB</td>
    </tr>
    <tr>
      <td><strong>Java</strong></td>
      <td>
        <a href="#testjava">Test.java</a>
      </td>
      <td>0.07s real</td>
      <td>226</td>
      <td>26</td>
      <td>15743 KiB</td>
    </tr>
    <tr>
      <td><strong>Node.js</strong></td>
      <td>
        <a href="#testjs">test.js</a>
      </td>
      <td>0.04s real</td>
      <td>673</td>
      <td>40</td>
      <td>36000 KiB</td>
    </tr>
    <tr>
      <td><strong>Python 3</strong> (PyPy)</td>
      <td>
        <a href="#testpy">test.py</a>
      </td>
      <td>0.68s real</td>
      <td>884</td>
      <td>32</td>
      <td>9909 KiB</td>
    </tr>
    <tr>
      <td><strong>Julia</strong></td>
      <td>
        <a href="#testjl">test.jl</a>
      </td>
      <td>0.12s real</td>
      <td>913</td>
      <td>41</td>
      <td>344563 KiB</td>
    </tr>
    <tr>
      <td><strong>Python 3</strong> (CPython)</td>
      <td>
        <a href="#testpy">test.py</a>
      </td>
      <td>0.02s real</td>
      <td>1200</td>
      <td>33</td>
      <td>15184 KiB</td>
    </tr>
    <tr>
      <td><strong>Ruby</strong></td>
      <td>
        <a href="#testrb">test.rb</a>
      </td>
      <td>0.04s real</td>
      <td>1401</td>
      <td>38</td>
      <td>1283 KiB</td>
    </tr>
  </tbody>
</table>
<div style="text-align: right">
  <small>* See notes for this test case</small>
</div>
<p>This table is sorted so that the number of syscalls goes up, because I reckon
more syscalls is a decent metric for how much shit is happening that you didn&rsquo;t
ask for (i.e. <code>write(&quot;hello world\n&quot;); exit(0)</code>). Languages with a JIT fare much
worse on this than compiled languages, but I have deliberately chosen not to
account for this.</p>
<p>These numbers are real. This is more complexity that someone has to debug, more
time your users are sitting there waiting for your program, less disk space
available for files which actually matter to the user.</p>
<h3 id="environment">Environment</h3>
<p>Tests were conducted on January 3rd, 2020.</p>
<ul>
<li>gcc 9.2.0</li>
<li>glibc 2.30</li>
<li>musl libc 1.1.24</li>
<li>Linux 5.4.7 (Arch Linux)</li>
<li>Linux 4.19.87 (vanilla, Alpine Linux) is used for musl libc tests</li>
<li>Go 1.13.5</li>
<li>Rustc 1.40.0</li>
<li>Zig 0.5.0</li>
<li>OpenJDK 11.0.5 JRE</li>
<li>Crystal 0.31.1</li>
<li>NodeJS 13.5.0</li>
<li>Julia 1.3.1</li>
<li>Python 3.8.1</li>
<li>PyPy 7.3.0</li>
<li>Ruby 2.6.4p114 (2019-10-01 rev 67812)</li>
<li>dmd 1:2.089.0</li>
<li>ldc 2:1.18.0</li>
<li>Perl 5.30.1</li>
</ul>
<p>For each language, I tried to write the program which would give the most
generous scores without raising eyebrows at a code review. The size of all
files which must be present at runtime (interpreters, stdlib, libraries, loader,
etc) are included. Binaries were stripped where appropriate.</p>
<p>This was not an objective test, this is just an approximation that I hope will
encourage readers to be more aware of the consequences of their abstractions,
and their exponential growth as more layers are added.</p>
<h3 id="tests">test.S</h3>
<pre tabindex="0"><code>bits 64
section .text
global _start
_start:
	mov rdx, len
	mov rsi, msg
	mov rdi, 1
	mov rax, 1
	syscall

	mov rdi, 0
	mov rax, 60
	syscall

section .rodata
msg: db &#34;hello world&#34;, 10
len: equ $-msg
</code></pre><pre tabindex="0"><code>nasm -f elf64 test.S
gcc -o test -static -nostartfiles -nostdlib -nodefaultlibs
strip test: 8.6 KiB
</code></pre><p><strong>Notes</strong></p>
<ul>
<li>This program only works on x86_64 Linux.</li>
<li>The size depends on how you measure it:<br />
<em>Instructions + data alone</em>: 52 bytes<br />
<em>Stripped ELF</em>: 8.6 KiB<br />
<em>Manually minified ELF</em>: <a href="http://timelessname.com/elfbin/">142 bytes</a></li>
</ul>
<h3 id="testzig">test.zig</h3>
<pre tabindex="0"><code>const std = @import(&#34;std&#34;);

pub fn main() !void {
    const stdout = try std.io.getStdOut();
    try stdout.write(&#34;hello world\n&#34;);
}
</code></pre><pre tabindex="0"><code># small
zig build-exe test.zig --release-small --strip
# safe
zig build-exe test.zig --release-safe --strip
</code></pre><p><strong>Notes</strong></p>
<ul>
<li>Written with the assistance of Andrew Kelly (maintainer of Zig)</li>
</ul>
<h3 id="testc">test.c</h3>
<pre tabindex="0"><code>int puts(const char *s);

int main(int argc, char *argv[]) {
    puts(&#34;hello world&#34;);
    return 0;
}
</code></pre><pre tabindex="0"><code># dynamic
gcc -O2 -o test test.c
strip test

# static
gcc -O2 -o test -static test.c
strip test
</code></pre><p><strong>Notes</strong></p>
<ul>
<li>glibc programs can never truly be statically linked. The size reflects this.</li>
</ul>
<h3 id="testrs">test.rs</h3>
<pre tabindex="0"><code>fn main() {
    println!(&#34;hello world&#34;);
}
</code></pre><pre tabindex="0"><code>rustc -C opt-levels=s test.rs
</code></pre><p><strong>Notes</strong></p>
<ul>
<li>The final binary is dynamically linked with glibc, which is included in the
size.</li>
</ul>
<h3 id="testgo">test.go</h3>
<pre tabindex="0"><code>package main

import &#34;os&#34;

func main() {
    os.Stdout.Write([]byte(&#34;hello world\n&#34;))
}
</code></pre><pre tabindex="0"><code># dynamic
go build -o test test.go

# static w/o cgo
GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o test -ldflags &#39;-extldflags &#34;-f no-PIC -static&#34;&#39; -buildmode pie -tags &#39;osusergo netgo static_build&#39; test.go
</code></pre><p>Aside: it is getting way too goddamn difficult to build static Go binaries.</p>
<p><strong>Notes</strong></p>
<ul>
<li>The statically linked test was run on Alpine Linux with musl libc. It doesn&rsquo;t
link to libc in theory, but hey.</li>
</ul>
<h3 id="testjava">Test.java</h3>
<pre tabindex="0"><code>public class Test {
    public static void main(String[] args) {
        System.out.println(&#34;hello world&#34;);
    }
}
</code></pre><pre tabindex="0"><code>javac Test.java
java Test
</code></pre><h3 id="testcr">test.cr</h3>
<pre tabindex="0"><code>puts &#34;hello world\n&#34;
</code></pre><pre tabindex="0"><code># Dynamic
crystal build -o test test.cr

# Static
crystal build --static -o test test.cr
</code></pre><p><strong>Notes</strong></p>
<ul>
<li>The Crystal tests were run on Alpine Linux with musl libc.</li>
</ul>
<h3 id="testjs">test.js</h3>
<pre tabindex="0"><code>console.log(&#34;hello world&#34;);
</code></pre><pre tabindex="0"><code>node test.js
</code></pre><h3 id="testjl">test.jl</h3>
<pre tabindex="0"><code>println(&#34;hello world&#34;)
</code></pre><pre tabindex="0"><code>julia test.jl
</code></pre><p><strong>Notes</strong></p>
<ul>
<li>Julia numbers were provided by a third party</li>
</ul>
<h3 id="testpy">test.py</h3>
<pre tabindex="0"><code>print(&#34;hello world&#34;)
</code></pre><pre tabindex="0"><code># cpython
python3 test.py
# pypy
pypy3 test.py
</code></pre><h3 id="testpl">test.pl</h3>
<pre tabindex="0"><code>print &#34;hello world\n&#34;
</code></pre><pre tabindex="0"><code>perl test.pl
</code></pre><p><strong>Notes</strong></p>
<ul>
<li>Passing /dev/urandom into perl is equally likely to print &ldquo;hello world&rdquo;</li>
</ul>
<h3 id="testd">test.d</h3>
<pre tabindex="0"><code>import std.stdio;
void main()
{
    writeln(&#34;hello world&#34;);
}
</code></pre><pre tabindex="0"><code># dmd
dmd -O test.d
# ldc
ldc -O test.d
</code></pre><h3 id="testrb">test.rb</h3>
<pre tabindex="0"><code>puts &#34;hello world\n&#34;
</code></pre><pre tabindex="0"><code>ruby test.rb
</code></pre>]]></description><pubDate>Sat, 4 Jan 2020 00:00:00 +0000</pubDate></item><item><title>Managing my dotfiles as a git repository</title><link>https://drewdevault.com/2019/12/30/dotfiles.html</link><description><![CDATA[<p>There are many tools for managing your dotfiles - user-specific configuration
files. GNU stow is an example. I&rsquo;ve tried a few solutions over the years, but I
settled on a very simple system several years ago which has served me very well
in the time since: my $HOME is a git repository. <a href="https://git.sr.ht/~sircmpwn/dotfiles">This
repository</a>, in fact. This isn&rsquo;t an
original idea, but I&rsquo;m not sure where I first heard it from either, and I&rsquo;ve
extended upon it somewhat since.</p>
<p>The key to making this work well is my one-byte <code>.gitignore</code> file:</p>
<pre tabindex="0"><code>*
</code></pre><p>With this line, and git will ignore all of the files in my $HOME directory, so I
needn&rsquo;t worry about leaving personal files, music, videos, other git
repositories, and so on, in my public dotfiles repo. But, in order to track
anything at all, we need to override the gitignore file on a case-by-case basis
with <code>git add -f</code>, or <code>--force</code>. To add my vimrc, I used the following command:</p>
<pre tabindex="0"><code>git add -f .vimrc
</code></pre><p>Then I can commit and push normally, and .vimrc is tracked by git. The gitignore
file does not apply to any files which are already being tracked by git, so any
future changes to my vimrc show up in git status, git diff, etc, and can be
easilly committed with <code>git commit -a</code>, or added to the staging area normally
with <code>git add</code> — using <code>-f</code> is no longer necessary. Setting up a new
machine is quite easy. After the installation, I run the following commands:</p>
<pre tabindex="0"><code>cd ~
git init
git remote add origin git@git.sr.ht:~sircmpwn/dotfiles
git fetch
git checkout -f master
</code></pre><p>A quick log-out and back in and I feel right at $HOME. Additionally, I have
configured $HOME as a prefix, so that ~/bin is full of binaries, ~/lib has
libraries, and so on; though I continue to use ~/.config rather than ~/etc. I
put $HOME/bin ahead of anything else in my path, which allows me to shadow
system programs with wrapper scripts as necessary. For example, ~/bin/xdg-open
is as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">case</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">1</span><span class="p">%%:*</span><span class="si">}</span><span class="s2">&#34;</span> in
</span></span><span class="line"><span class="cl">	http<span class="p">|</span>https<span class="p">|</span>*.pdf<span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">exec</span> qutebrowser <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="p">;;</span>
</span></span><span class="line"><span class="cl">	mailto<span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">exec</span> aerc <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="p">;;</span>
</span></span><span class="line"><span class="cl">	*<span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">exec</span> /usr/bin/xdg-open <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="p">;;</span>
</span></span><span class="line"><span class="cl"><span class="k">esac</span>
</span></span></code></pre></div><p>Replacing the needlessly annoying-to-customize xdg-open with one that just
does what I want, falling back to /usr/bin/xdg-open if necessary. Many other
non-shadowed scripts and programs are found in ~/bin as well.</p>
<p>However, not all of my computers are configured equally. Some run different
Linux (or non-Linux) distributions, or have different concerns being desktops,
servers, laptops, phones, etc. It&rsquo;s often useful for this reason to be able to
customize my configuration for each host. For example, before $HOME/bin in my
$PATH, I have $HOME/bin/$(hostname). I also run several machines on
different architectures, so I include $HOME/bin/$(uname -m)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> as well. To
customize my sway configuration to consider the different device configurations
of each host, I use the following directive in ~/.config/sway/config:</p>
<pre tabindex="0"><code>include ~/.config/sway/`hostname`
</code></pre><p>Then I have a host-specific configuration there, also tracked by git so I can
conveniently update one machine from another. I take a similar approach to
per-host configuration for many other pieces of software I use.</p>
<p>Rather than using (and learning) any specialized tools, I find my needs quite
adequately satisfied by a simple composition of several Unix primitives with a
tool I&rsquo;m already very familiar with: git. Version controlling your configuration
files is a desirable trait even with other systems, so why not ditch the
middleman?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><code>uname -m</code> prints out the system architecture. Try it for yourself, I bet it&rsquo;ll read &ldquo;x86_64&rdquo; or maybe &ldquo;aarch64&rdquo;.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate></item><item><title>PinePhone review</title><link>https://drewdevault.com/2019/12/18/PinePhone-review.html</link><description><![CDATA[<p><strong>tl;dr</strong>: Holy shit! This is the phone I have always wanted. I have never been
this excited about the mobile sector before. However: the software side is
totally absent — phone calls are very dubious, SMS is somewhat dubious,
LTE requires some hacks, and everything will have to be written from the ground
up.</p>
<p>I have a PinePhone developer edition model, which I paid for out of pocket<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
and which took an excruciatingly long time to arrive. When it finally arrived,
it came with no SIM or microSD card (expected), and the eMMC had some half-assed
version of Android on it which just boot looped without POSTing to anything
useful<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. This didn&rsquo;t bother me in the slightest — like any other
computer I&rsquo;ve purchased, I planned on immediately flashing my own OS on it. My
Linux distribution of choice for it is
<a href="https://postmarketos.org/">postmarketOS</a>, which is basically the mobile OS I&rsquo;d
build if I wanted to build a mobile OS.</p>
<p>Let me make this clear: <strong>right now, there are very few people, perhaps only
dozens, for whom this phone is the right phone, given the current level of
software support</strong>. I am not using it as my daily driver, and I won&rsquo;t for some
time. The only kind of person I would recommend this phone to is a developer who
believes in the phone and wants to help build the software necessary for it to
work.  However, it seems to me that all of the right people <em>are</em> working on the
software end of this phone — everyone I&rsquo;d expect from the pmOS community,
from KDE, from the kernel hackers — this phone has an unprecedented level
of community support and the software <em>will</em> be written.</p>
<p>So, what&rsquo;s it actually like?</p>
<details>
  <summary>Expand for a summary of the specs</summary>
  <p>
    The device is about
    <abbr title="The thickness of a GameBoy cartridge">1 cm thick</abbr>
    and weighs
    <abbr
      title="The weight of one GameBoy Color, with batteries, without cartridge"
    >188 grams</abbr>. The screen is about 16 cm tall, of which 1.5 cm is bezel,
    and <abbr
      title="About the width and height of a GameBoy color, plus 1 inch of height"
    >7.5 cm wide</abbr> (5 mm of bezel). The physical size and weight is very
    similar to my daily driver, a Samsung Galaxy J7 Refine. It has a USB-C port,
    which I understand can be reconfigured for DisplayPort, and a standard
    headphone jack and speakers, both of which sound fine in my experience. The
    screen is 720x1440, and looks about as nice as any other phone. It has
    front- and back-facing cameras, which I've yet to get working (I understand
    that someone has got them working at some point), plus a flash/lamp on the
    back, and an <abbr
      title="Note that the only values for R, G, and B that I've managed to get working are 0.0 and 1.0 each, for a total of 7 possible colors (including off)"
    >RGB LED</abbr> on the front.
  </p>
  <p>
    The eMMC is 16G and, side note, had <em>seventeen</em> partitions on it when
    I first got the phone. 2G of RAM, 4 cores. It's not very powerful, but in my
    experience it runs lightweight UIs (such as <a
    href="https://swaywm.org">sway</a>) just fine. With very little effort by
    way of power management, and with obvious power sinks left unfixed, the
    battery lasts about 5 hours.
  </p>
</details>
<p>In short, I&rsquo;m quite satisfied with it, but I&rsquo;ve never had especially strenuous
demands of my phone. I haven&rsquo;t run any benchmarks on the GPU, but it seems
reasonably fast and the open-source Lima driver supports GLESv2. The modem is
supported by <a href="https://01.org/ofono">Ofono</a>, which is a telephony daemon based on
dbus — however, I understand that we can just open <code>/dev/ttyUSB1</code> and talk
to the modem ourselves, and I may just write a program that does this. Using
Ofono, I have successfully spun up LTE internet, sent and received SMS messages,
and placed and answered phone calls - though the last one without working
audio. A friend from KDE, Bhushan Shah, is working on this and rumor has it that
a call has successfully been placed. I have not had success with MMS, but I
think it&rsquo;s possible. WiFi works. All of this with zero blobs and a kernel which
is&hellip; admittedly, pretty heavily patched, but <a href="https://gitlab.com/pine64-org/linux">open
source</a> and making its way upstream.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>Of course, no one wants to place phone calls by typing a lengthy command into
their terminal, but that these features can be done in an annoying way means
that it&rsquo;s feasible to write applications that do this in a convenient way. For
my part, I have been working on some components of a mobile-friendly Wayland
compositor, based on Sway, which I&rsquo;m calling Sway Mobile for the time being. I&rsquo;m
not sure if Sway will actually stick around once it becomes difficult to bend to
my will (it&rsquo;s designed for keyboard-driven operation, after all), but I&rsquo;m
building mobile shell components which will translate nicely to any other
wlroots-based compositors.</p>
<p>The first of these is a simple app drawer, which I&rsquo;ve dubbed
<a href="https://git.sr.ht/~sircmpwn/casa">casa</a>. I have a lot more stuff planned:</p>
<ul>
<li>A new bar/notification drawer/quick action thing</li>
<li>A dialer &amp; call manager, maybe integrated with gnome-contacts</li>
<li>A telephony daemon which records incoming SMS messages and pulls up the call
manager for incoming phone calls. Idea: write incoming SMS messages into a
Maildir.</li>
<li>A new touch-friendly Wayland lock screen</li>
<li>An on-screen keyboard program</li>
</ul>
<p>Here&rsquo;s a video showing casa in action:</p>
<p><video
src="https://yukari.sr.ht/casa.webm?cache-break"
style="max-width: 50%; margin: 0 auto; display: block"
autoplay loop muted >
Your browser does not support webm playback. Please choose a browser which
supports free and open standards.
</video></p>
<p>The latest version has 4 columns and uses the space a bit better. Also, in the
course of this work I put together the
<a href="https://gitlab.freedesktop.org/ddevault/fdicons">fdicons</a> library, which may be
useful to some.</p>
<p>I have all sorts of other small things to work on, like making audio behave
better and improving power management. I intend to contribute these tools to
postmarketOS upstream as a nice lightweight plug-and-play UI package you can
choose from when installing pmOS, either improving their existing
postmarketos-ui-sway meta-package or making something new.</p>
<p>In conclusion: I have been waiting for this phone for years and years and years.
I have been hoping that someone would make a phone whose hardware was compatible
with upstream Linux drivers, and could <em>theoretically</em> be used as a daily driver
if only the software were up to snuff. I wanted this because I knew that the
free software community was totally capable of building the software for such a
phone, if only the hardware existed. This is actually happening — all of
the free software people I would hope are working on the PinePhone, are working
on the PinePhone. And it&rsquo;s only $150! I could buy four of them for the price of
the typical smartphone! And I just might!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In other words, no one paid me to or even asked me to write this review.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I understand that the final production run of the PinePhone is going to ship with postmarketOS or something.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>The upstream kernel actually does work if you patch in the DTS, but WiFi doesn&rsquo;t work and it&rsquo;s not very stable.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate></item><item><title>Status update, December 2019</title><link>https://drewdevault.com/2019/12/15/Status-update-December-2019.html</link><description><![CDATA[<p>It&rsquo;s December 15th and it still hasn&rsquo;t snowed here. Why did I move to this
godforsaken den of unholy heat and rain? I think I have chosen a latitude <em>just</em>
southerly enough to deprive me of the climate I yearn for. I take some comfort
in the knowledge that I&rsquo;m travelling home to see the family in a couple of
weeks, and sure enough Colorado has been covered in snow for some time now.
Anyway, none of this is relevant to my work, which is what you came here for.
Let&rsquo;s take a look at this past month.</p>
<p>I&rsquo;ve started a couple of new projects this month, the first of which I call
&ldquo;<a href="https://git.sr.ht/~sircmpwn/himitsu">himitsu</a>&rdquo;. The goal is to build a
key-value store for secure information like passwords, keys, and so on. The
design is inspired by Plan 9&rsquo;s factotum, redesigned for Unix systems and
somewhat broader in scope. One interesting goal of himitsu is the ability for
programs to establish authenticated connections without ever handling your
secret information - for example, your email client could ask himitsu to connect
to an IMAP server, log in with your authentication details, then hand the
authenticated file descriptor to the mail reader. The key-value store can also
store things like the IMAP server address &amp; port, your username, and so on,
meaning your mail reader could work out of the box with zero configuration. Work
on this project will be slow going, as I have to use extra care to make sure
that it&rsquo;s secure and correct.</p>
<p>In SourceHut news, I focused mainly on two workstreams: single-sign-on and
names.sr.ht, the upcoming DNS and domain registration service. The first finally
fixes the problems with login across *.sr.ht, and now logging in once will log
you in everywhere. Other issues with internal OAuth keys expiring have been
fixed alongside these changes, and I&rsquo;ve implemented a lot of improvements to
the billing system as well. All of these should address some inconveniences
which have been frustrating users for a while now. As for names.sr.ht, let&rsquo;s
just share another teaser screenshot:</p>
<p><a href="https://sr.ht/LLkW.png"><img src="https://sr.ht/LLkW.png" alt="Screenshot of domain contact management on names.sr.ht"></a></p>
<p>I also received my <a href="https://www.pine64.org/pinephone/">PinePhone</a> this week, and
I&rsquo;ve been terribly excited to work on it. I&rsquo;ve already sent a few patches to
postmarketOS upstream, and intend to write more, to get sway working well as a
daily driver phone interface. &ldquo;Sway Mobile&rdquo; is now starting to take shape. The
first of the projects for this is the development of a touch-friendly
application launcher, which I&rsquo;ve dubbed
&ldquo;<a href="https://git.sr.ht/~sircmpwn/casa">casa</a>&rdquo;. Other projects I intend to work on
for Sway Mobile include a new, touch-friendly bar and lock screen, a new
on-screen keyboard program, and hopefully the development of touch bindings for
the compositor itself. I&rsquo;ll be writing up my plans in more detail, along with a
review of the PinePhone itself, in a blog post next week.</p>
<p>In the course of this work, I also made a small library that readers may find
useful for their own projects:
<a href="https://gitlab.freedesktop.org/ddevault/fdicons">libfdicons</a>. It implements the
FreeDesktop icon specification in a single small C library, which I need for
Casa. In other Wayland news, I&rsquo;ve made some modest progress on the book, and I
plan on writing more for it soon. I apologise for letting it get somewhat
sidelined while I focused on other projects. I ended up overhauling the XDG
chapter somewhat, as I found it pretty weak on a later reading. I intend to
write about seats (input) next, and will likely move the XDG chapter after the
seat chapter so things flow better. I&rsquo;ve also started a new Wayland compositor,
<a href="https://git.sr.ht/~sircmpwn/sedna">sedna</a>, which aims to reach a broader
audience than Sway can, and I&rsquo;ll be working on this as time permits.</p>
<p>Speaking of Sway, the next release (1.3) has been coming along, slowly but
surely. We&rsquo;re only blocked by one change now, and with the original author busy
I&rsquo;ve stepped up to offer what time I can implementing the last few changes. Once
we get that merged, I&rsquo;ll start working on the release process for Sway 1.3.
Thank you for your patience <img src="https://drewdevault.com/img/heart.png" style="height: 1rem;
display: inline" /></p>
<p><a href="https://git.sr.ht/~sircmpwn/aerc/refs/0.3.0">aerc 0.3.0</a> was released this
month, and progress on the next version has been going strong. Improvements to
aerc have been almost entirely community driven, and I&rsquo;ve only stepped in to
write a few small patches here and there. Thanks to all of the contributors for
their help! There are already quite a few changes in for 0.4.0, and more are in
review now, including many bug fixes, more sophisticated email templates,
contacts autocompletion, bulk email management, and more. All of this is thanks
to the great community which has grown around it!</p>
<p>That&rsquo;s all the updates I have for you today. I&rsquo;m still touched by the support
the community has given me to work on these projects. I could never be this
productive without your help. Thank you.</p>]]></description><pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate></item><item><title>Developers shouldn&apos;t distribute their own software</title><link>https://drewdevault.com/2019/12/09/Developers-shouldnt-distribute.html</link><description><![CDATA[<p>An oft-heard complaint about Linux is that software distribution often takes
several forms: a Windows version, a macOS version, and&hellip; a Debian version, an
Ubuntu version, a Fedora version, a CentOS version, an openSUSE version&hellip; but
these complaints miss the point. The true distributable form for Linux software,
and rather for Unix software in general, is a .tar.gz file containing the source
code.</p>
<p><strong>Note</strong>: This article presumes that proprietary/nonfree software is irrelevant,
and so should you.</p>
<p>That&rsquo;s not to imply that end-users should take this tarball and run <code>./configure &amp;&amp; make &amp;&amp; sudo make install</code> themselves. Rather, the responsibility for
end-user software distribution is on the distribution itself. That&rsquo;s why we call
it a <em>distribution</em>. This relationship may feel like an unnecessary middleman to
the software developer who just wants to get their code into their user&rsquo;s hands,
but on the whole this relationship has far more benefits than drawbacks.</p>
<p>As the old complaint would suggest, there are hundreds of variants of Linux
alone, not to mention the BSD flavors and any novel new OS that comes out next
week. Each of these environments has its own take on how the system as a whole
should be organized and operate, and it&rsquo;s a fools&rsquo; errand for a single team to
try and make sense of it all. More often than not, software which tries to field
this responsibility itself sticks out like a sore thumb on the user&rsquo;s operating
system, totally flying in the face the conventions set out by the distribution.</p>
<p>Thankfully, each distro includes its own set of volunteers dedicated to this
specific job: packaging software for the distribution and making sure it
conforms to the norms of the target environment. This model also adds a set of
checks and balances to the system, in which the distro maintainers can audit
each other&rsquo;s work for bugs and examine the software being packaged for
anti-features like telemetry or advertisements, patching it out as necessary.
These systems keep malware out of the repositories, handle distribution of
updates, cryptographically verifying signatures, scaling the distribution out
across many mirrors - it&rsquo;s a robust system with decades of refinement.</p>
<p>The difference in trust between managed software repositories like Debian,
Alpine Linux, Fedora, and so on; and unmanaged software repositories like PyPI,
npm, Chrome extensions, the Google Play store, Flatpak, etc — is starkly
obvious. Debian and its peers are full of quality software which integrates well
into the host system and is free of malware. Unmanaged repositories, however,
are <a href="https://www.zdnet.com/article/two-malicious-python-libraries-removed-from-pypi/">constant sources</a> for crapware and malware. I don&rsquo;t trust
developers to publish software with my best interests in mind, and developers
shouldn&rsquo;t ask for that level of trust. It&rsquo;s only through a partnership with
distributions that we can build a mutually trustworthy system for software
distribution.</p>
<p>Some developers may complain that distros ship their software too slowly, but
you shouldn&rsquo;t sweat it. End-user distros ship updates reasonably quickly, and
server distros ship updates at a schedule which meets the user&rsquo;s needs. This
inconsistent pace in release schedules among free software distributions is a
feature, not a bug, and allows the system to work to the needs of its specific
audience. You should use a distro that ships updates to <em>you</em> at the pace you
wish, and let your users do the same.</p>
<p>So, to developers: just don&rsquo;t worry about distribution! Stick a tarball on your
release page and leave the rest up to distros. And to users: install packages
from your distro&rsquo;s repositories, and learn how its packaging process works so
you can get involved when you find a package missing. It&rsquo;s not as hard as it
looks, and they could use your help. For my part, I work both as a developer,
packager, and end-user, publishing my software as tarballs, packaging some of it
up for my <a href="https://pkgs.alpinelinux.org/packages?name=&amp;branch=edge&amp;arch=x86_64&amp;maintainer=Drew+DeVault">distro of choice</a>, report bugs to other maintainers, and field
requests from maintainers of other distros as necessary. Software distribution
is a social system and it works.</p>]]></description><pubDate>Mon, 9 Dec 2019 00:00:00 +0000</pubDate></item><item><title>Take action to save .org and prosecute those who sold out the internet</title><link>https://drewdevault.com/2019/11/29/dotorg.html</link><description><![CDATA[<p>As many of you have no doubt heard, control of the .org registry has been sold
to private interests. There have been attempts to call them to reason, like
<a href="https://savedotorg.org/">Save .ORG</a>, but let&rsquo;s be realistic: they knew what
they&rsquo;re doing is wrong, the whole time. If they were a commercial entity, our
appeals would fall on deaf ears and that would be the end of it. But, they&rsquo;re
not a commercial entity - so our appeals may fall on deaf ears, but that doesn&rsquo;t
have to be the end of it.</p>
<p>The level of corruption on display by the three organizations involved in this
scam: ICANN (Internet Corporation for Assigned Names and Numbers), ISOC (The
Internet Society), and PIR (Public Interest Registry), is astounding and very
illegal. If you are not familiar with the matter, click this to read a summary:</p>
<details>
  <summary>Summary of the corrupt privatization of .org</summary>
  <p>
    The governance of names on the internet is kind of complicated. ISOC
    oversees a lot of activities in internet standards and governance, but their
    role in this mess is as the parent company of PIR. PIR is responsible for
    the .org registry, which oversees the governance of .org directly and
    collects fees for every sale of a .org domain. ICANN is the broader
    authority which oversees all domain allocation on the internet, and also
    collects a fee for every domain sold. There's a complex web of documents and
    procedures which govern these three organizations, and the name system as a
    whole, and all three of them were involved in this process. Each of these
    organizations is a non-profit, except for PIR, which in the course of this
    deal is trying to convert to a B corp.
  </p>
  <p>
    ICANN can set price limits on the sale of .org domains. In March of 2019,
    they proposed removing these price caps entirely. During the period for
    public comment, they received 3,300 comments against, and 6 in favor. On May
    13, they removed these price caps anyway.
  </p>
  <p>
    In November 2019, ISOC announced that they had approved the sale of PIR, the
    organization responsible for .org, to Ethos Capital, for an unspecified
    amount. According to
    <a
      href="https://www.internetsociety.org/board-of-trustees/minutes/147"
      rel="nofollow noopener"
    >the minutes</a>, the decision to approve this sale was unanimously voted on
    by the board. Additionally, it seems that Goldman Sachs had been involved in
    the sale to some degree.
  </p>
  <p>
    Fadi Chehadé became the CEO of ICANN in 2012. In 2016, he leaves his
    position before it expires to start a consulting company, and he later joins
    Abry Partners. One of the 3 partners is Erik Brooks. They later acquire
    Donuts, a private company managing domains. Donuts co-founder Jon Nevett
    becomes the CEO of PIR in December 2018. On May 7th, Chehadé registers
    EthosCapital.com, and on May 13th ICANN decided to remove the price caps
    despite 0.2% support from the public. On May 14th, the following day, Ethos
    Capital was incorporated, with Brooks as the CEO. In November 2019, ISOC
    approved the acquisition of PIR by Ethos Capital, a for-profit company.
  </p>
  <p>
    These are the names of the criminals who sold the internet. If you want to
    read more, <a
      href="https://www.privateinternetaccess.com/blog/2019/11/isoc-pir-ethos-capital-deal-timeline/"
      rel="noopener"
    >Private Internet Access</a> has a good write-up.
  </p>
  <p>Okay, now let's talk about what you can do about it.</p>
</details>
<p>If you are familiar with the .org heist, then like me, you&rsquo;re probably pissed
off. Here&rsquo;s how you can take action: all of these organizations are 501c3
non-profits. The sale of a non-profit to a for-profit entity like this is
illegal without very specific conditions being met. Additionally, this kind of
behavior is not the sort the IRS likes to see in a tax-exempt organization.
Therefore, we can take the following steps to put a stop to this:</p>
<ol>
<li>Write to the CA and VA attorney general offices encouraging them to
investigate the misbehavior of these three non-profits, which are
incorporated in their respective states.</li>
<li>File form 13909 with the IRS, encouraging them to review the organization&rsquo;s
non-profit status.</li>
</ol>
<p>This kind of behavior is illegal. The sale of a non-profit requires a letter
from the Attorneys General in both California (ICANN) and Virginia (ISOC, PIR).
Additionally, much of this behavior qualifies as &ldquo;self-dealing&rdquo;, or leveraging
one&rsquo;s power within an organization for their own benefit, rather than the
benefit of the organization. To report this, I&rsquo;ve prepared a letter to the CA
and VA Attorney&rsquo;s General offices, which you can read here:</p>
<ul>
<li><a href="https://yukari.sr.ht/ag-letter.pdf">Letter to the Attorney General</a></li>
</ul>
<p>I encourage you to consider writing a letter of your own, but I would not
recommend copying and pasting this letter. However, this kind of behavior is
also illegal in the eyes of the IRS, and a form is provided for this purpose.
Form 13909 is the appropriate means for reporting this behavior. You can
download a pre-filled form here, and I do encourage you to submit one of this
yourself:</p>
<ul>
<li><a href="https://yukari.sr.ht/dotorg-form-13909.pdf">Form 13909 for ICANN and ISOC complaints (PDF)</a></li>
<li><a href="https://yukari.sr.ht/dotorg-form-13909.odg">Form 13909 for ICANN and ISOC complaints (ODG)</a></li>
</ul>
<p>This only includes complaints for ICANN and ISOC, as PIR is seeking to lose its
non-profit status anyway. You can print out the PDF, fill in your details on
both pages, and mail it to the address printed on the form; or you can download
the ODG, open it up with LibreOffice Draw, and fill in the remaining details
digitally, then email it to the address shown on the page.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Happy Thanksgiving! Funny how this all happened right when the American public
would be distracted&hellip;</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Crash course in LibreOffice Draw: press F2, then click and drag to make a new textbox. Select text and use Ctrl+[ to reduce the font size to something reasonable. The red button on the toolbar along the top will export the result as a PDF.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate></item><item><title>Software developers should avoid traumatic changes</title><link>https://drewdevault.com/2019/11/26/Avoid-traumatic-changes.html</link><description><![CDATA[<p>A lot of software has gone through changes which, in retrospect, I would
describe as &ldquo;traumatic&rdquo; to their communities. I recognize these sorts of changes
by their effect: we might have pulled through in the end, but only after a lot
of heartbreak, struggle, and hours of wasted hacking; but the change left a scar
on the community.</p>
<p>There are two common cases in which a change risks introducing this kind of
trauma:</p>
<ol>
<li>It requires everyone in the community, or nearly everyone, to overhaul their
code to get it <strong>working</strong> again</li>
<li>It requires everyone in the community, or nearly everyone, to overhaul their
code to get it <strong>idiomatic</strong> again</li>
</ol>
<p>Let&rsquo;s call these cases, respectively, strong and weak trauma. While these are
both traumatic changes, the kind of trauma they inflict on the community is
different. The first kind is more severe, but the latter is a bad idea, too. We
can examine these through two case-studies in Python: the (in)famous transition
to Python 3, and the less notorious introduction of asyncio.</p>
<p>In less than one month, Python 2 will reach its end of life, and even as a
staunch advocate of Python 3, I too have some software which is not going to
make it to the finish line in time<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. There&rsquo;s no doubt that Python 3 is much,
much better than Python 2. However, the transition was poorly handled, and
upgrading can be no small task for some projects. The result has been hugely
divisive and intimately familiar to anyone who works with Python, creating
massive rifts in the community and wasting millions of hours of engineer time
addressing. This kind of &ldquo;strong&rdquo; trauma is fairly easy to spot in advance.</p>
<p>The weaker kind of traumatic change is more subtle, and less talked about. It&rsquo;s
a slow burn, and it takes a long time for its issues to manifest. Consider the
case of asyncio: clearly it&rsquo;s an improvement for Python, whose previous attempts
at concurrency have fallen completely flat. The introduction of async/await and
coroutines throughout the software ecosystem is something I&rsquo;m generally very
pleased about. You&rsquo;ll see me reach for threads to solve a problem when hell
freezes over, and no earlier, so I&rsquo;m quite fond of first-class coroutines.</p>
<p>Unfortunately, this has a chilling effect on existing Python code.  The
introduction of asyncio has made large amounts of code idiomatically obsolete.
Requests, the darling of the Python world, is effectively useless in a
theoretical idiomatic post-asyncio world. The same is true of Flask, SQLAlchemy,
and many, many other projects. Just about anything that does I/O is unidiomatic
now.</p>
<p>Since nothing has actually <em>broken</em> with this change, the effects are more
subtle than with strong traumatic changes. The effect of asyncio has been to
hasten the onset of code rot. Almost all of SourceHut&rsquo;s code pre-dates asyncio,
for example, and I&rsquo;m starting to feel the limitations of the pre-asyncio model.
The opportunity to solve this problem by rewriting with asyncio in mind,
however, also presents me a chance to rewrite in anything else, and reevaluate
my choice of Python for the project entirely. It&rsquo;s a tough decision to think
about — the mature and diverse ecosystem of libraries that help to make a
case for Python is dramatically reduced when asyncio support is a consideration.</p>
<p>It may take years for the trauma to fully manifest, but the rift is still there
and can only grow. Large amounts of code is rotting and will have to be thrown
away for the brave new asyncio world. The introduction of asyncio has made
another clear &ldquo;before&rdquo; and &ldquo;after&rdquo; in the Python ecosystem. The years in between
will be rough, because all new Python code will either leverage the rotting
pre-asyncio ecosystem or suffer through an immature post-asyncio ecosystem.
It&rsquo;ll likely turn out for the better — years from now.</p>
<p>And sometimes these changes <em>are</em> for the better, but they should be carefully
thought out, and designed to minimize the potential impact. In practical terms,
it&rsquo;s for this reason that I urge caution with ideas like adding generics to
Go. In a post-generics world, a large amount of the Go ecosystem will suddenly
become unidiomatic, and breaking changes will required to bring it up to spec.
Let&rsquo;s think carefully about it, eh?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Eh, kind of. I&rsquo;m theoretically behind the effort to drop Python 2 from Alpine Linux, but the overhaul is tons of work and the time I can put into the effort isn&rsquo;t going to be enough to finish before 2020.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate></item><item><title>China</title><link>https://drewdevault.com/2019/11/20/China.html</link><description><![CDATA[<p>This article will be difficult to read and was difficult to write. I hope that
you can stomach the uncomfortable nature of this topic and read my thoughts in
earnest.  I usually focus on technology-related content, but at the end of the
day, this is my personal blog and I feel that it would betray my personal
principles to remain silent. I&rsquo;ve made an effort to provide citations for all of
my assertions.</p>
<p><em>Note: if you are interested in conducting an independent review of the
factuality of the claims expressed in this article, please <a href="mailto:sir@cmpwn.com">contact
me</a>.</em></p>
<p>The keyboard I&rsquo;m typing these words into bears &ldquo;Made in China&rdquo; on the bottom.
The same is true of the monitor I&rsquo;m using to edit the article. It&rsquo;s not true of
all of my electronics — the graphics processing unit which is driving the
monitor was made in Taiwan<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and my phone was made in
Vietnam.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> Regardless, there&rsquo;s no doubt that my life would be,
to some degree, worse off if not for trade with China. Despite this, I am
prepared to accept the consequences of severing economic relations with China.</p>
<p>How bad would being cut-off from China&rsquo;s economy be? We&rsquo;re a net importer from
China, and by over 4 times the volume.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> Let&rsquo;s assume, in
the worst case, trade ties were completely severed. The United States would be
unable to buy $155B worth of electronics, which we already have domestic
manufacturing capabilities for<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> and which have a productive
life of several years. We could definitely stand to get used to repairing and
reusing these instead of throwing them out. We&rsquo;d lose $34B in mattresses and
furniture — same story. The bulk of our imports from China are luxury
goods that we can already make here at home<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> — it&rsquo;s just
cheaper to buy them from China. But cheaper for whom?</p>
<p>This gets at the heart of the reason why we&rsquo;re tied to China economically. It&rsquo;s
economically productive <em>for the 1%</em> to maintain a trade relationship with
China. The financial incentives don&rsquo;t help any Americans, and in fact, most of
us are hurt by this relationship.<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> Trade is what keeps
us shackled to the Chinese Communist Party government, but it&rsquo;s not beneficial
to anyone but those who are already obscenely rich, and certainly not for our
poorest — who, going into 2020, are as likely to be high school dropouts
as they are to be doctors.<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup></p>
<p>So, we can cut off China. Why should we? Let&rsquo;s lay out the facts: China is
conducting human rights violations on the largest scale the world has seen since
Nazi Germany. China executes political prisoners<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup> and
harvests their organs for transplant to sick elites on an industrial scale,
targeting and killing civilians based on not only political, but also ethnic and
religious factors. This is commonly known as genocide. China denies using the
organs of prisoners, but there&rsquo;s credible doubt<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup> from
the scientific community.</p>
<p>Recent evidence directly connecting executions to organ harvesting is somewhat
unreliable, but I don&rsquo;t think China deserves the benefit of the doubt.
China is a world leader in executions, and is believed to conduct more
executions than the rest of the world combined.<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup>
Wait times for organ transplantation are extraordinarily low in
China,<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup> on the order of weeks — in most of the developed
world these timeframes are measured in terms of years,<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup> and China has
been unable to explain the source for tens of thousands of transplants in the
past<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup>. And, looking past recent evidence, China directly admitted to
using the organs of executed prisoners in 2005.<sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup></p>
<p>These atrocities are being committed against cultural minorities to further
China&rsquo;s power. The UN published a statement in August 2018 stating that they
have credible reports of over a million ethnic Uighurs being held in internment
camps in Xinjiang,<sup id="fnref:15"><a href="#fn:15" class="footnote-ref" role="doc-noteref">15</a></sup> imprisoned with various other ethnic
minorities from the region. Leaks in November 2019 reported by the New York
Times showed that China admits the imprisoned have committed no crimes other
than dissent,<sup id="fnref:16"><a href="#fn:16" class="footnote-ref" role="doc-noteref">16</a></sup> and that the camps were to be run with, quote,
&ldquo;absolutely no mercy&rdquo;.</p>
<p>It&rsquo;s nice to believe that we would have stood up to Nazi Germany if we had been
there in the 1940&rsquo;s. China is our generation&rsquo;s chance to prove ourselves of that
conviction. We talk a big game about fighting against white nationalists in our
own country, and pride ourselves on standing up against &ldquo;fascists&rdquo;. It&rsquo;s time we
turned attention to the real fascists, on the world stage.</p>
<p>Instead, the staunch capitalism of America, and the West as a whole, has swooped
in to leverage Chinese fascism for a profit. Marriott Hotels apologized for
listing Hong Kong, Macau, and Taiwan as countries separate from China.<sup id="fnref:17"><a href="#fn:17" class="footnote-ref" role="doc-noteref">17</a></sup>
Apple removed the Taiwanese flag from iOS in China and the territories it
claims.<sup id="fnref:18"><a href="#fn:18" class="footnote-ref" role="doc-noteref">18</a></sup> Activision/Blizzard banned several players for making pro-Hong
Kong statements in tournaments and online.<sup id="fnref:19"><a href="#fn:19" class="footnote-ref" role="doc-noteref">19</a></sup> These behaviors make me
ashamed to be an American.</p>
<p>Fuck that.</p>
<p>A brief history lesson: Hong Kong was originally controlled by the United
Kingdom at the end of the Opium Wars. It&rsquo;s beyond the scope of this article, but
it&rsquo;ll suffice to say that the United Kingdom was brutal and out of line, and the
end result is that Hong Kong became a British colony. Because of this, it was
protected from direct Chinese influence during China&rsquo;s turbulent years
following, and they were insulated from the effects of the Great Leap Forward
and the Cultural Revolution, which together claimed tens of millions of lives
and secured the Communist Party of China&rsquo;s power into the present.</p>
<p>On July 1st, 1997, the <a href="https://en.wikipedia.org/wiki/Sino-British_Joint_Declaration">Sino-British Joint
Declaration</a> <a href="https://www.youtube.com/watch?v=k7YzJzq1Mvk">went
into effect</a>, and Hong Kong was
turned over to China. The agreement stipulated that Hong Kong would remain
effectively autonomous and self-governing for a period of 50 years —
until 2047. China has been gradually and illegally eroding that autonomy
ever since. Today, Hong Kong citizens have effectively no representation in
their government. The Legislative Council of Hong Kong has been deliberately
engineered by China to be pro-Beijing — a majority of the council is
selected through processes with an inherent pro-Beijing bias, giving Hong Kong
effectively no autonomous power to pass laws.<sup id="fnref:20"><a href="#fn:20" class="footnote-ref" role="doc-noteref">20</a></sup></p>
<p>Hong Kong&rsquo;s executive branch is even worse. The Chief Executive of Hong Kong
(Carrie Lam) is elected by a committee of 1,200 members largely controlled by
pro-Beijing seats, from a pool of pro-Beijing candidates, and the people have
effectively no representation in the election. The office has been held by
pro-Beijing politicians since it was established.<sup id="fnref:21"><a href="#fn:21" class="footnote-ref" role="doc-noteref">21</a></sup></p>
<p>The ongoing protests in Hong Kong were sparked by a mainland attempt to rein
in Hong Kong&rsquo;s judicial system in a similar manner, with the introduction of the
&ldquo;Fugitive Offenders and Mutual Legal Assistance in Criminal Matters Legislation
(Amendment) Bill 2019&rdquo;,<sup id="fnref:22"><a href="#fn:22" class="footnote-ref" role="doc-noteref">22</a></sup> which would have allowed the authorities
to extradite suspects awaiting trial to mainland China. These protests inspired
the Hong Kong people to stand up against all of the injustices they have faced
from China&rsquo;s illegal encroachments on their politics. The protesters have five
demands:<sup id="fnref:23"><a href="#fn:23" class="footnote-ref" role="doc-noteref">23</a></sup></p>
<ol>
<li>Complete withdrawal of the extradition bill</li>
<li>No prosecution of the protesters</li>
<li>Retraction of the characterization of the protests as &ldquo;riots&rdquo;</li>
<li>Establish an independent inquiry into police misconduct</li>
<li>Resignation of Carrie Lam and the implementation of universal suffrage</li>
</ol>
<p>Their first demand has been met, but the others are equally important and the
protests show no signs of slowing. Unfortunately, China shows no signs of
slowing their crackdown either, and have been consistently escalating the
matter. The police are now threatening to use live rounds on the
protesters,<sup id="fnref:24"><a href="#fn:24" class="footnote-ref" role="doc-noteref">24</a></sup> and people are already being shot in the
streets.<sup id="fnref:25"><a href="#fn:25" class="footnote-ref" role="doc-noteref">25</a></sup> China is going to kill the protesters, [again][tiananmen].</p>
<p>The third demand — the retraction of the characterization of the
demonstrations as &ldquo;riots&rdquo; — and the government&rsquo;s refusal to meet it,
conveys a lot about China&rsquo;s true intentions. Chinese law defines rioting as a
capital offense,<sup id="fnref:26"><a href="#fn:26" class="footnote-ref" role="doc-noteref">26</a></sup> and we&rsquo;ve already demonstrated their
willingness to execute political prisoners on a massive scale. These protesters
are going to be killed if their demands aren&rsquo;t met.<sup id="fnref:27"><a href="#fn:27" class="footnote-ref" role="doc-noteref">27</a></sup></p>
<p>Hong Kong is the place where humanity makes its stand against oppressors. The
people of Hong Kong have been constant allies to the West, and their liberty is
at stake. If we want others to stand up for us when our liberties are on the
line, then it&rsquo;s our turn to pay it forward now. The founding document of the
United States of America<sup id="fnref:28"><a href="#fn:28" class="footnote-ref" role="doc-noteref">28</a></sup> describes the rights they&rsquo;re defending as
&ldquo;unalienable&rdquo; — endowed upon all people by their Creator. The people of
Hong Kong are our friends and we&rsquo;re watching them get killed for rights that we
hold dear in our own nation&rsquo;s founding principles.</p>
<p>We have a legal basis for demanding these rights for Hong Kong&rsquo;s people —
China is blatantly violating their autonomy, which they agreed to uphold
in 1984. The United Kingdom should feel obligated to step in, but they&rsquo;ll need
the support of the international community, which we need to be prepared to give
them. We need to make an ultimatum: if China uses deadly force in Hong Kong,
the international community will respond in kind.</p>
<p>China isn&rsquo;t the only perpetrator of genocide today, but they are persecuting our
friends. China has the second highest GDP<sup id="fnref:29"><a href="#fn:29" class="footnote-ref" role="doc-noteref">29</a></sup> in the world, and somehow
this makes it okay. If we won&rsquo;t stand up to them, then who will? I call for a
worldwide boycott of Chinese products, and of companies who kowtow to their
demands or accept investment from China. I call for international condemnation
of the Communist Party of China&rsquo;s behavior and premise for governance. And I
call for an ultimatum to protect our allies from slaughter.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>An island in the sea east of China governed by the sovereign Republic of China.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Which, admittedly, raises concerns of its own.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://www.census.gov/foreign-trade/balance/c5700.html">US Census Bureau, International Trade Data</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://www.lg.com/us/press-release/lg-electronics-to-build-us-factory-for-home-appliances-in-tennessee">LG</a>, <a href="http://download.intel.com/newsroom/kits/22nm/pdfs/Global-Intel-Manufacturing_FactSheet.pdf">Intel</a> (PDF)&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://www.trademap.org/Bilateral_TS.aspx?nvpm=1%7C842%7C%7C156%7C%7CTOTAL%7C%7C%7C2%7C1%7C1%7C1%7C2%7C1%7C1%7C1%7C1">ITC Trade Map</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Source(s): Ebenstein, Avraham, et al. &ldquo;Understanding the Role of China in the ‘Decline’of US Manufacturing.&rdquo; Manuscript, Hebrew University of Jerusalem (2011); <a href="https://www.epi.org/publication/the-china-toll-deepens-growth-in-the-bilateral-trade-deficit-between-2001-and-2017-cost-3-4-million-u-s-jobs-with-losses-in-every-state-and-congressional-district/">The China toll deepens</a>, Robert E. Scott and Zane Mokhiber, Economic Policy Institute&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Source: Ulbrich, Timothy R., and Loren M. Kirk. &ldquo;It’s time to broaden the conversation about the student debt crisis beyond rising tuition costs.&rdquo; American journal of pharmaceutical education 81.6 (2017): 101.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>A political prisoner is someone who is imprisoned for political reasons, rather than legal reasons. In the eyes of Chinese law, there may be a legal standing for the imprisonment of some of these people, but because this is often based on dissent from the single political party, I consider these prisoners political as well. A related term is &ldquo;prisoner of conscience&rdquo;, and for the purposes of this article I do not distinguish between the two; the execution of either kind of prisoner is a crime against humanity regardless.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>Trey, T., et al. &ldquo;Transplant medicine in China: need for transparency and international scrutiny remains.&rdquo; American Journal of Transplantation 16.11 (2016): 3115-3120.&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p><a href="https://www.amnesty.org/en/latest/news/2017/04/china-must-come-clean-about-capital-punishment/">Death Penalty: World’s biggest executioner China must come clean about ‘grotesque’ level of capital punishment</a>, Amnesty International, 11 April 2017&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>Jensen, Steven J., ed. The ethics of organ transplantation. CUA Press, 2011.&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>UK has some of the best times in the developed world, and averages about 3 years. Source: <a href="https://web.archive.org/web/20110903084007/http://www.organdonation.nhs.uk/ukt/statistics/centre-specific_reports/pdf/waiting_time_to_transplant.pdf">NHS</a>&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p>Matas, David, and David Kilgour. &ldquo;An independent investigation into allegations of organ harvesting of Falun Gong practitioners in China.&rdquo; Electronic document accessed September 5 (2007): 2008.&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:14">
<p><a href="https://web.archive.org/web/20140304045314/http://www.thetimes.co.uk/tto/news/world/asia/article2612313.ece">China to ‘tidy up’ trade in executed prisoners’ organs</a>, the UK Times, December 3 2005&#160;<a href="#fnref:14" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:15">
<p><a href="https://www.bbc.com/news/world-asia-china-45147972">China Uighurs: One million held in political camps, UN told</a>, BBC, 10 August 2018&#160;<a href="#fnref:15" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:16">
<p><a href="https://www.nytimes.com/interactive/2019/11/16/world/asia/china-xinjiang-documents.html">‘Absolutely No Mercy’: Leaked Files Expose How China Organized Mass Detentions of Muslims</a>, New York Times, 16 November 2019&#160;<a href="#fnref:16" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:17">
<p><a href="https://www.nytimes.com/2018/01/11/business/china-marriott-tibet-taiwan.html">Marriott to China: We Do Not Support Separatists</a>, New York Times, 11 January 2018&#160;<a href="#fnref:17" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:18">
<p><a href="https://qz.com/1723334/apple-removes-taiwan-flag-emoji-in-hong-kong-macau-in-ios-13-1-1/">Apple bows to China by censoring Taiwan flag emoji</a>, Quartz, 7 October 2019&#160;<a href="#fnref:18" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:19">
<p><a href="https://www.npr.org/2019/10/08/768245386/blizzard-entertainment-bans-esports-player-after-pro-hong-kong-comments">Blizzard Entertainment Bans Esports Player After Pro-Hong Kong Comments</a>, NPR, 8 October 2019&#160;<a href="#fnref:19" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:20">
<p><a href="https://en.wikipedia.org/wiki/Legislative_Council_of_Hong_Kong#Procedure">Legislative Council of Hong Kong, Wikipedia</a>&#160;<a href="#fnref:20" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:21">
<p><a href="https://en.wikipedia.org/wiki/Chief_Executive_of_Hong_Kong#List_of_Chief_Executives_of_Hong_Kong">List of Chief Executives of Hong Kong</a>, Wikipedia&#160;<a href="#fnref:21" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:22">
<p><a href="https://www.hklii.hk/eng/hk/legis/ord/503/index.html">https://www.hklii.hk/eng/hk/legis/ord/503/index.html</a>&#160;<a href="#fnref:22" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:23">
<p><a href="https://focustaiwan.tw/news/acs/201906270014.aspx">https://focustaiwan.tw/news/acs/201906270014.aspx</a>&#160;<a href="#fnref:23" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:24">
<p><a href="https://www.washingtonpost.com/world/hong-kong-police-pummel-university-with-water-cannon-as-officer-hit-by-arrow/2019/11/17/f004c978-091f-11ea-8054-289aef6e38a3_story.html">Hong Kong police move on university campus, threaten live rounds, retreat before growing flames</a>, The Washington Post, 17 November 2019
[tiananmen]: <a href="https://en.wikipedia.org/wiki/1989_Tiananmen_Square_protests">https://en.wikipedia.org/wiki/1989_Tiananmen_Square_protests</a>&#160;<a href="#fnref:24" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:25">
<p>Source: <a href="https://streamable.com/0pexa">Video (graphic)</a>&#160;<a href="#fnref:25" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:26">
<p>Criminal Law of the People&rsquo;s Republic of China, <a href="https://www.cecc.gov/resources/legal-provisions/criminal-law-of-the-peoples-republic-of-china">translation provided by US Congressional-Executive Commission of China</a>&#160;<a href="#fnref:26" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:27">
<p>As pointed out by Hong Kongers reading this article, Hong Kong has a <a href="https://en.wikipedia.org/wiki/Public_Order_Ordinance">separate definition of rioting</a>, which is not a capital offense. For my part, I am not entirely convinced that China isn&rsquo;t planning to use the &ldquo;riots&rdquo; classification as justification for a violent response.&#160;<a href="#fnref:27" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:28">
<p><a href="https://www.archives.gov/founding-docs/declaration-transcript">Declaration of Independence, full text</a>&#160;<a href="#fnref:28" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:29">
<p><a href="https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)">List of countries by GDP (nominal) - Wikipedia</a>&#160;<a href="#fnref:29" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate></item><item><title>Status update, November 2019</title><link>https://drewdevault.com/2019/11/15/Status-update-November-2019.html</link><description><![CDATA[<p>Today&rsquo;s update is especially exciting, because today marks the 1 year
anniversary of Sourcehut <a href="https://drewdevault.com/2018/11/15/sr.ht-general-availability.html">opening it&rsquo;s alpha</a> to public
registration. I wrote a <a href="https://sourcehut.org/blog/2019-11-15-sourcehut-1-year-alpha/">nice long article</a> which goes into
detail about what Sourcehut accomplished in 2019, what&rsquo;s to come for 2020, and
it lays out the entire master plan for your consideration. Be sure to give that
a look if you have the time. I haven&rsquo;t slowed down on my other projects, though,
so here&rsquo;re some more updates!</p>
<p>I&rsquo;ve been pushing hard on the VR work this month, with lots of help from Simon
Ser. We&rsquo;ve put together <a href="https://git.sr.ht/~sircmpwn/wxrc">wxrc</a> - Wayland XR
Compositor - which does what it says on the tin. It&rsquo;s similar to what you&rsquo;ve
seen in my earlier updates, but it&rsquo;s a bespoke C project instead of a
Godot-based compositor, resulting in something much lighter weight and more
efficient. The other advantage is that it&rsquo;s based on OpenXR, thanks to <a href="https://gitlab.freedesktop.org/monado/monado/merge_requests?scope=all&amp;utf8=%E2%9C%93&amp;state=all&amp;author_username=ddevault">our
many</a> <a href="https://gitlab.freedesktop.org/monado/monado/merge_requests?scope=all&amp;utf8=%E2%9C%93&amp;state=all&amp;author_username=emersion">contributions</a> to Monado, an open-source
OpenXR runtime - the previous incarnations were based on SteamVR, which is
a proprietary runtime and proprietary API. We&rsquo;ve also got 3D Wayland clients
working as of this week, check out our video:</p>
<video src="https://yukari.sr.ht/wxrc-demo3.webm" muted autoplay loop>
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
</video>
<p>This work has generated more patches for a large variety of projects - Mesa,
Wayland, Xorg, wlroots, sway, new Vulkan and OpenXR standards, and more. This
is really cross-cutting work and we&rsquo;re making improvements across the whole
graphics ecosystem to support it.</p>
<p>Speaking of Wayland, the upcoming Sway release is looking like it&rsquo;s going to be
really good. I mentioned this last month, but we&rsquo;re still on track for getting
lots of great features in - VNC support, foreign toplevel management (taskbars),
input latency reductions, drawing tablet support, and more. I&rsquo;m pretty excited.
I wrote chapters 9 and 9.1 for the Wayland book this month as well.</p>
<p>In aerc news, thanks entirely to its contributors and not to me, lots of new
features have been making their way in. Message templates are one of them, which
you can take advantage of to customize the reply and forwarded message
templates, or make new templates of your own. aerc has learned AUTH LOGIN
support as well, and received a number of bugfixes. ctools has also seen a
number of patches coming in, including support for echo, tee, and nohup, along
with several bug fixes.</p>
<p>In totally off-the-wall news, I&rsquo;ve <a href="https://drewdevault.com/japanese.html">started a page</a> cataloguing my
tools and recommendations for Japanese language learners.</p>
<p>That&rsquo;s all I&rsquo;ve got for you today, I hope it&rsquo;s enough! Thank you for your
continued love and support, I&rsquo;m really proud to be able to work on these
projects for you.</p>]]></description><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate></item><item><title>An old-school shell hack on a line printer</title><link>https://drewdevault.com/2019/10/30/Line-printer-shell-hack.html</link><description><![CDATA[<p>It&rsquo;s been too long since I last did a good hack, for no practical reason other
than great hack value. In my case, these <a href="https://drewdevault.com/2016/03/22/Integrating-a-VT220-into-my-life.html">often amount</a> to a nostalgia
for an age of computing I wasn&rsquo;t present for. In a recent bid to capture more of
this nostalgia, I recently picked up a dot matrix line printer, specifically the
Epson LX-350 printer. This one is nice because it has a USB port, so I don&rsquo;t
have to break out my pile of serial cable hacks to get it talking to Linux 😁</p>
<p>This is the classic printer style, with infinite paper and a lovely noise during
printing. They are also fairly simple to operate - you can just write text
directly to <code>/dev/lp</code> (or <code>/dev/usb/lp9</code> in my case) and it&rsquo;ll print it out.
Slightly more sophisticated instructions can be written to them with ANSI escape
sequences, just like a terminal. They can also be rigged up to CUPS, then you
can use something like <code>man -t 5 scdoc</code> to produce printouts like this:</p>
<p><a href="https://sr.ht/gHCA.jpg"><img src="https://sr.ht/gHCA.jpg" alt=""></a></p>
<p>Plugging the printer into Linux and writing out pages isn&rsquo;t much for hack value,
however. What I really wanted to make was something resembling an old-school
TTY - teletypewriter. So I wrote some <a href="https://git.sr.ht/~sircmpwn/lpsh">glue code in
Golang</a>, and soon enough I had a shell:</p>
<iframe width="560" height="315" sandbox="allow-same-origin allow-scripts
allow-popups"
src="https://spacepub.space/videos/embed/d8943b2d-8280-497b-85ec-bc282ec2afdc"
frameborder="0" allowfullscreen style="width: 100%"></iframe>
<p>The glue code I wrote for this is fairly straightforward. In the simplest form,
it spins up a pty (pseudo-terminal), runs <code>/bin/sh</code> in it, and writes the pty
output into the line printer device. For those unaware, a pseudo-terminal is the
key piece of software infrastructure for running interactive text applications.
Applications which want to do things like print colored text, move
the cursor around and draw a TUI, and so on, will open <code>/dev/tty</code> to open the
current TTY device. For most applications used today, this is a
&ldquo;pseudo-terminal&rdquo;, or pty, which is a terminal emulated in userspace - i.e. by
your terminal emulator. However, your terminal emulator is <em>emulating</em> a
terminal - the control sequences applications send to these are
backwards-compatible with 50 years of computing history.  Interfaces like these
are the namesake of the TTY.</p>
<p>Visual terminals came onto the scene later on, and in the classic computing
tradition, the old hands complained that it was less useful - you could no
longer write notes on your backlog, tear off a page and hand it to a colleague,
or <a href="https://en.wikipedia.org/wiki/Wite-Out">white-out</a> mistakes. Early
<a href="https://en.wikipedia.org/wiki/Computer_terminal">visual terminals</a> could also
be plugged directly into a line printer, and you could configure them to echo to
the printer or print out a screenfull of text at a time. A distinct advantage of
visual terminals is not having to deal with so much bloody paper, a problem that
I&rsquo;ve become acutely familiar with in the past few days<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Getting back to the glue code, I chose Golang because setting up a TTY is a bit
of a hassle in C, but in Golang it&rsquo;s pretty straightforward. There is a serial
port and in theory I could have plugged it in and spawned a getty on the
resulting serial device - but (1) it&rsquo;d be write-only, so not especially
interactive without <em>hardware</em> hacks, and (2) I didn&rsquo;t feel like digging out my
serial cables. So:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="s">&#34;git.sr.ht/~sircmpwn/pty&#34;</span><span class="w"> </span><span class="c1">// fork of github.com/kr/pty</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nx">winsize</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">pty</span><span class="p">.</span><span class="nx">Winsize</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nx">Cols</span><span class="p">:</span><span class="w"> </span><span class="mi">160</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nx">Rows</span><span class="p">:</span><span class="w"> </span><span class="mi">24</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nx">cmd</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;/bin/sh&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nx">cmd</span><span class="p">.</span><span class="nx">Env</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nb">append</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nf">Environ</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#34;TERM=lp&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;COLUMNS=%d&#34;</span><span class="p">,</span><span class="w"> </span><span class="mi">180</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nx">tty</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">pty</span><span class="p">.</span><span class="nf">StartWithSize</span><span class="p">(</span><span class="nx">cmd</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="nx">winsize</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p><em>P.S. We&rsquo;re going to dive through the code in detail now. If you just want more
cool videos of this in action, skip to the bottom.</em></p>
<p>I set the TERM environment variable to <code>lp</code>, for line printer, which doesn&rsquo;t
really exist but prevents most applications from trying anything too tricksy
with their escape codes. The <code>tty</code> variable here is an <code>io.ReadWriter</code> whose
output is sent to the printer and whose input is sourced from wherever, in my
case from the stdin of this process<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>For a little more quality-of-life, I looked up Epson&rsquo;s proprietary ANSI escape
sequences and found out that you can tell the printer to feed back and forth in
216th&quot; increments with the j and J escape sequences. The following code will
feed 2.5&quot; out, then back in:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">f</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;\x1BJ\xD8\x1BJ\xD8\x1BJ\x6C&#34;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nx">f</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;\x1Bj\xD8\x1Bj\xD8\x1Bj\x6C&#34;</span><span class="p">))</span><span class="w">
</span></span></span></code></pre></div><p>Which happens to be the perfect amount to move the last-written line up out of
the printer for the user to read, then back in to be written to some more. A
little bit of timing logic in a goroutine manages the transition between &ldquo;spool
out so the user can read the output&rdquo; and &ldquo;spool in to write some more output&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span><span class="w"> </span><span class="nf">lpmgr</span><span class="p">(</span><span class="nx">in</span><span class="w"> </span><span class="kd">chan</span><span class="w"> </span><span class="p">(</span><span class="kd">interface</span><span class="p">{}),</span><span class="w"> </span><span class="nx">out</span><span class="w"> </span><span class="kd">chan</span><span class="w"> </span><span class="p">([]</span><span class="kt">byte</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// TODO: Runtime configurable option? Discover printers? dunno</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nx">f</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">os</span><span class="p">.</span><span class="nf">OpenFile</span><span class="p">(</span><span class="s">&#34;/dev/usb/lp9&#34;</span><span class="p">,</span><span class="w"> </span><span class="nx">os</span><span class="p">.</span><span class="nx">O_RDWR</span><span class="p">,</span><span class="w"> </span><span class="mo">0755</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nx">feed</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nx">f</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;\n\n\n\r&#34;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nx">timeout</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="mi">250</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">select</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="o">&lt;-</span><span class="nx">in</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="c1">// Increase the timeout after input</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="nx">timeout</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="nx">data</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="o">&lt;-</span><span class="nx">out</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="nx">feed</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="nx">f</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;\x1Bj\xD8\x1Bj\xD8\x1Bj\x6C&#34;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="nx">feed</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="nx">f</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nf">lptl</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">case</span><span class="w"> </span><span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">timeout</span><span class="p">):</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="nx">timeout</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="mi">200</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">!</span><span class="nx">feed</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="nx">feed</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="nx">f</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;\x1BJ\xD8\x1BJ\xD8\x1BJ\x6C&#34;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p><code>lptl</code> is a work-in-progress thing which tweaks the outgoing data for some
quality-of-life changes, like changing backspace to ^H. Then, the main event
loop looks something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">inch</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nb">make</span><span class="p">(</span><span class="kd">chan</span><span class="w"> </span><span class="p">(</span><span class="kd">interface</span><span class="p">{}))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nx">outch</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nb">make</span><span class="p">(</span><span class="kd">chan</span><span class="w"> </span><span class="p">([]</span><span class="kt">byte</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">go</span><span class="w"> </span><span class="nf">lpmgr</span><span class="p">(</span><span class="nx">inch</span><span class="p">,</span><span class="w"> </span><span class="nx">outch</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nx">inbuf</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span><span class="w"> </span><span class="mi">4096</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">go</span><span class="w"> </span><span class="kd">func</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">for</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">n</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">inbuf</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">tty</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">inbuf</span><span class="p">[:</span><span class="nx">n</span><span class="p">])</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">inch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">nil</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nx">outbuf</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span><span class="w"> </span><span class="mi">4096</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">for</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nx">n</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">tty</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">outbuf</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nx">b</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span><span class="w"> </span><span class="nx">n</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nb">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="w"> </span><span class="nx">outbuf</span><span class="p">[:</span><span class="nx">n</span><span class="p">])</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nx">outch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nx">b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The tty will echo characters written to it, so we just write to it from stdin
and increase the form feed timeout closer to the user&rsquo;s input so that it&rsquo;s not
constantly feeding in and out as you write. The resulting system is pretty
pleasant to use! I spent about hour working on improvements to it on a <a href="https://live.drewdevault.com">live
stream</a>. You can watch the system in action on the
archive here:</p>
<iframe width="560" height="370" sandbox="allow-same-origin allow-scripts"
src="https://spacepub.space/videos/embed/a8be6c87-9267-452e-8d3e-dd206880fa98"
frameborder="0" allowfullscreen style="width: 100%"></iframe>
<p>If you were a fly on the wall when Unix was written, it would have looked a lot
like this. And remember: <a href="https://www.gnu.org/fun/jokes/ed-msg.html">ed is the standard text
editor</a>.</p>
<p>?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Don&rsquo;t worry, I recycled it all.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>In the future I want to make this use libinput or something, or eventually make a kernel module which lets you pair a USB keyboard with a line printer to make a TTY directly. Or maybe a little microcontroller which translates a USB keyboard into serial TX and forwards RX to the printer. Possibilities!&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate></item><item><title>Status update, October 2019</title><link>https://drewdevault.com/2019/10/15/Status-update-October-2019.html</link><description><![CDATA[<p>Last month, I gave you an update at the conclusion of a long series of travels.
But, I wasn&rsquo;t done yet - this month, I spent a week in Montreal for <a href="https://xdc2019.x.org/">XDC</a>.
Simon Ser put up <a href="https://emersion.fr/blog/2019/xdc2019-wrap-up/">a great write-up</a> which goes over a lot of the
important things we discussed there. It was a wonderful conference and well
worth the trip - but I truly am sick of travelling. Now, I can enjoy some time
at home, working on free and open source software.</p>
<p>I have a video to share today, of a workflow on git.sr.ht that I&rsquo;m very excited
about: sending patchsets as emails from the web.</p>
<video src="https://sr.ht/_fUk.webm" controls muted>
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
</video>
<p>Sourcehut&rsquo;s development plans can be described in three broad strokes: (1) make
a bunch of services (or: primitives for a development hub); (2) rig them all up
with APIs and webhooks; and (3) teach them how to talk to each other. Over the
past year, (1) and (2) are mostly complete, and (3) is now underway. Teaching
git.sr.ht and lists.sr.ht to talk to each other is an important step, because it
will give us a web-based code review flow which is backed by emails. This meets
an original design goal of Sourcehut: to build user-friendly tools on top of
existing systems.</p>
<p>The other end of this work is on lists.sr.ht, but for now it&rsquo;s indirect: I&rsquo;ve
also been working on <a href="https://github.com/libgit2/pygit2/pulls?q=is%3Apr+author%3Addevault+is%3Aclosed">pygit2</a> fleshing out the Odb backend API, so
that I can make a pygit2 repo which is backed by the git.sr.ht API. From there,
it&rsquo;ll be easy to teach lists.sr.ht about git.sr.ht - and perhaps other git
services as well.</p>
<p>There&rsquo;s also a fourth stage of Sourcehut: giving back to the free software
community. To this end, I intend to spend Sourcehut&rsquo;s profits on sponsoring
motivated and talented free software developers to work on self-directed
projects. I&rsquo;m very excited to announce that there&rsquo;s progress here as well:
<a href="https://emersion.fr">Simon Ser</a> is now joining Sourcehut and will be doing just
that: self-directed free software projects. He&rsquo;s written more about this on <a href="https://emersion.fr/blog/2019/working-full-time-on-open-source/">his
blog</a> and I&rsquo;ll
be writing more on <a href="https://sourcehut.org">sourcehut.org</a> later.</p>
<p>Wrapping up Sourcehut news, I&rsquo;ll leave you with an out-of-context screenshot of
a mockup I made this month:</p>
<p><a href="https://sr.ht/_yhw.png"><img src="https://sr.ht/_yhw.png" alt="Screenshot of a Sourcehut DNS service showing DNS records managed by zone
files in a git repository"></a></p>
<p>Let&rsquo;s move on to Wayland news. We&rsquo;ve started the planning for the next sway
release, and it&rsquo;s shaping up to be really cool. We expect to ship patches which
can reduce input latency to as low as 1ms, introduce the foreign toplevel
management protocol for better mate-panel support, and introduce damage tracking
to our screencopy protocol - which is being used to make a VNC server for
sway and other wlroots-based compositors; and proper drawing tablet support.
We&rsquo;re also making strong headway on a long-term project to overhaul rendering
and DRM in wlroots, with the long term goal of achieving the holy grail levels
of performance on any device.</p>
<p><a href="https://wayland-book.com">The Wayland book</a> is also in good shape. A lot of
people have purchased the drafts - over a hundred! Thank you for picking it up,
and please send your feedback along. I completed chapter 8 this month. I also
expect to receive the last few parts for my second POWER9 machine today, and I
plan on using this to test Wayland, Mesa, etc - on ppc64le. The <a href="https://drewdevault.com/2019/10/10/RaptorCS-redemption.html">first POWER9
machine</a> is now provisioned and humming along in the Sourcehut
datacenter, by the way.</p>
<p>VR work has also been chugging along again this month. I&rsquo;ve started contributing
to <a href="https://gitlab.freedesktop.org/monado/monado/merge_requests?scope=all&amp;utf8=%E2%9C%93&amp;state=merged&amp;author_username=ddevault">Monado</a>, which is basically to OpenXR as Mesa is to OpenGL. I&rsquo;ve
seen merged an overhaul to their build system, an overhaul for their dated
Wayland backend, and even some deeper work ensuring conformance with the OpenXR
specification. A lot of this work has also been in getting to know everyone and
planning the future of the project, as it&rsquo;s still in early stages.</p>
<p>To quickly summarize my other various projects:</p>
<ul>
<li><strong>ctools</strong> has seen many small improvements and bug fixes, and has grown the
dirname, rmdir, env, and sleep utilities.</li>
<li><strong>aerc</strong> has also seen small improvements and bug fixes, but has also learned
about sorting and will soon grow a threaded message list</li>
<li><strong>chopsui</strong> is stirring in its sleep, and I&rsquo;ve been giving some new attention
to its design problems in the hopes that the next iteration will be the
correct design for a new GUI toolkit.</li>
<li><a href="https://git.sr.ht/~sircmpwn/wshowkeys"><strong>wshowkeys</strong></a> is a new little tool I
built to display your keypresses on-screen during a Wayland session, useful
for live streaming or video recording</li>
<li><strong>9front</strong> has been eating some of my evenings lately, and I&rsquo;ve been making
small improvements to various tools and improving Plan 9 support among some
packages in the Go ecosystem. I have more plans for this&hellip; stay tuned.</li>
</ul>
<p>That&rsquo;s all I&rsquo;ve got for today. Thank you for your support! Oh, and one last
note: I&rsquo;ve been invited to the <a href="https://github.com/users/ddevault/sponsorship">Github sponsors
program</a>, so if you want to
donate through it Github will match your donation for a little while. Cheers!</p>]]></description><pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate></item><item><title>How to fuck up software releases</title><link>https://drewdevault.com/2019/10/12/how-to-fuck-up-releases.html</link><description><![CDATA[<p>I manage releases for a bunch of free &amp; open-source software. Just about every
time I ship a release, I find a novel way to fuck it up. Enough of these
fuck-ups have accumulated now that I wanted to share some of my mistakes and how
I (try to) prevent them from happening twice.</p>
<p>At first, I did everything manually. This is fine enough for stuff with simple
release processes - stuff that basically amounts to tagging a commit, pushing
it, and calling it a day. But even this gets tedious, and I&rsquo;d often make a
mistake when picking the correct version number. So, I wrote a small script:
<a href="https://paste.sr.ht/~sircmpwn/34bd575b4c37ae6102d6ede2a4ba17b2e1bb9cf8">semver</a>. <code>semver patch</code> bumps the patch version, <code>semver minor</code> bumps the minor version, and
<code>semver major</code> bumps the major version, based on semantic versioning. I got into
the habit of using this script instead of making the tags manually. The next
fuckup soon presented itself: when preparing the
<a href="https://git-scm.com/docs/git-shortlog">shortlog</a>, I would often feed it the
wrong commits, and the changelog would be messed up. So, I updated the script to
run the appropriate shortlog command and pre-populate the annotated tag with it,
launching the editor to adjust the changelog as necessary.</p>
<p>Soon I wanted to apply this script to other projects, but not all of them used
semantic versioning. I updated it to work for projects which just use
<code>major.minor</code> versions as well. However, another problem arose: some projects
have the version number specified in the Makefile or meson.build. I would
frequently fuck this up in many creative ways: forgetting it entirely; updating
it but not committing it; updating it and committing it, but tagging the wrong
commit; etc. <a href="https://github.com/swaywm/wlroots">wlroots</a> in particular was
difficult because I also had to update the soversion, which had special
requirements. To address these issues, I added a custom <code>.git/_incr_version</code>
script which can add additional logic on a per-repo basis, and updated semver to
call this script if present.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Eventually, I went on vacation and shipped a release while I was there. The
<code>_incr_version</code> script I had put into <code>.git</code> on my home workstation wasn&rsquo;t
checked into version control and didn&rsquo;t come with me on vacation, leading to yet
another fucked up release. I moved it from <code>.git/_incr_version</code> to
<code>contrib/_incr_version</code>. I made the mistake, however, of leaving the old path in
as a fallback, which meant that I never noticed that <em>another</em> project&rsquo;s script
was still in <code>.git</code> until I went on another vacation and fucked up another
release. Add a warning which detects if the script is at the old path&hellip;</p>
<p>Some of my projects don&rsquo;t use semantic versioning at all, but still have all of
these other gotchas, so I added an option to just override the automatic version
increment with a user-specified override. For a while, this worked well. But,
inevitably, no matter how much I scripted away my mistakes I would always find a
new and novel way of screwing up. The next one came when I shipped a release
while on an Alpine Linux machine, which ships Busybox instead of GNU tools.
Turns out Busybox gzip produces output which does not match the GNU output,
which means the tarballs I signed locally differed from the ones generated by
Github. Update the signing script to save the tarball to disk (previously,
it lived in a pipe) and upload these alongside the releases&hellip;<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Surely, there are no additional ways to fuck it up at this point. I must have
every base covered, right? Wrong. Dead wrong. On the very next release I
shipped, I mistakenly did everything from a feature branch, and shipped
experimental, incomplete code in a stable release. Update the script to warn if
the master branch isn&rsquo;t checked out&hellip; Then, of course, another fuckup: I tagged
a release without pulling first, and when I pushed, git happily rejected my
branch and accepted the tag - shipping an outdated commit as the release. Update
the script to <code>git pull</code> first&hellip;</p>
<p>I am doomed to creatively outsmart my tools in releases. If you&rsquo;d like to save
yourself from some of the mistakes I&rsquo;ve made, you can <a href="https://paste.sr.ht/~sircmpwn/34bd575b4c37ae6102d6ede2a4ba17b2e1bb9cf8">find my semver script
here</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Each of these <code>_incr_version</code> scripts proved to have many bugs of their own, of course.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Eli Schwartz of Arch Linux also sent a patch to Busybox which made their gzip implementation consistent with GNU&rsquo;s.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate></item><item><title>RaptorCS&apos;s redemption: the POWER9 machine works</title><link>https://drewdevault.com/2019/10/10/RaptorCS-redemption.html</link><description><![CDATA[<p>This is a follow-up to my earlier article, &ldquo;<a href="https://drewdevault.com/2019/09/23/RaptorCS-Blackbird-a-horror-story.html">RaptorCS POWER9 Blackbird PC: An
expensive mistake</a>&rdquo;. Since I published that article, I&rsquo;ve been in
touch with Raptor and they&rsquo;ve been much more communicative and helpful. I now
have a working machine!</p>
<hr>
<p>Update Feb. 2024: Seems the improvements I asked for may not have stuck. <a href="https://posixcafe.org/blogs/2024/02/26/0/">Buyer
beware</a>.</p>
<hr>
<p><img src="https://sr.ht/OTyo.jpeg" alt="Picture of uname -sm showing &ldquo;Linux ppcle64&rdquo;"></p>
<p>After I published my article, Raptor reached out and apologised for my
experience. They offered a full refund, but I agreed to work on further
diagnosis now that we had opened a dialogue<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. They identified that my CPU was
defective and sent me a replacement, then we found the mainboard to be
defective, too, and the whole thing was shipped back and replaced. I installed
the new hardware into the datacenter today and it was quite pleasant to get up
and running. Raptor assures me that my nightmares with the old board are
atypical, and if the new board is representative of the usual user experience, I
would have to agree. The installation was completely painless.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>However, I refuse to give any company credit for waking up their support team
only when a scathing article about them frontpages on Hacker News. I told them I
wouldn&rsquo;t publish a positive follow-up unless they also convinced me that the
support experience had been fixed for the typical user as well. To this end,
Raptor has made a number of substantive changes. To quote their support staff:</p>
<blockquote>
<p>After investigation, we are implementing new mechanisms to avoid support
issues like the one you experienced. We now have a
<a href="https://twitter.com/RaptorCompSys/status/1176432946670186498">self-serve RMA generation system</a>
which would have significantly reduced your wait time, and are taking measures
to ensure that tickets are no longer able to be ignored by front line support
staff. We believe we have addressed the known failure modes at this time, and
management will be keeping a close eye on the operation of the support system
to ensure that new failure modes are handled rapidly.</p></blockquote>
<p>They&rsquo;ve tweeted this about their new self-service RMA system as well:</p>
<blockquote>
<p>We&rsquo;ve made it easy to submit RMA requests for defective products on our Web
site. Simply go to your account, select the &ldquo;Submit RMA Request&rdquo; link, and
fill out the form.  Your product will be warranty checked and, if valid, you
will receive an RMA number and shipping address!</p></blockquote>
<p>— @RaptorCompSys via <a href="https://twitter.com/RaptorCompSys/status/1176432946670186498">Twitter</a></p>
<p>They&rsquo;re also working on other improvements to make the end-user experience
better, including <a href="https://wiki.raptorcs.com/wiki/Main_Page">more content on the
wiki</a>, such as a <a href="https://wiki.raptorcs.com/wiki/Troubleshooting/Support_Request_Checklist">flowchart for
dealing with common
problems</a>.</p>
<p>Thanks to Raptor for taking the problem seriously, quickly fixing the problems
with my board, and for addressing the systemic problems which led to the
failure of their support system.</p>
<p>On the subject of the working machine, I am quite impressed with it so far.
Installation was a breeze, it compiles the kernel on 32 threads from spinning
rust in 4m15s, and I was able to get KVM working without much effort. I have
christened it &ldquo;flandre&rdquo;<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, which I think is fitting. I plan on bringing it up
as a build slave for builds.sr.ht in the coming weeks/months, and offering
ppc64le builds on Sourcehut in the near future. I have another board which was
generously donated by another Raptor customer<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>, which arrived last week and
that I hope to bring up and use for testing Wayland before introducing it to the
Sourcehut fleet.</p>
<hr>
<p>P.S. For those interested in more details of the actual failures:</p>
<p>This machine is so badly broken that it would actually be hilarious if the
manufacturer had been more present in the troubleshooting process. I think the
best way to sum it up is &ldquo;FUBAR&rdquo;. Among problems I encountered were:</p>
<ul>
<li>The CPU experiences a &ldquo;ZCAL failure&rdquo; (???)</li>
<li>The BMC (responsible for bringing up the main CPU(s)) had broken ethernet,
making login over SSH impossible</li>
<li>The BMC&rsquo;s getty would boot loop, making login over serial impossible</li>
<li>The BMC&rsquo;s u-Boot would boot loop if the TX pin on the serial cable was plugged
in, making diagnosing issues from that stage impossible</li>
<li>petitboot&rsquo;s ncurses output was being piped into a shell and executed (what the fuck?)</li>
</ul>
<p>In the immortal words of James Mickens, &ldquo;I HAVE NO TOOLS BECAUSE I HAVE
DESTROYED MY TOOLS WITH MY TOOLS.&rdquo; A staff member at Raptor tells me:
&ldquo;Your box ended up on my desk [&hellip;] This is easily the most broken board I&rsquo;ve
seen, ever, and that includes prototypes. This will help educate us for a while
to come due to the unique nature of some of the faults.&rdquo;</p>
<p>Not sure what can cause such an impressive cacophony of failures, but it&rsquo;s so
catastrophic that I can easily believe that this is far from typical. The
hardware is back in Raptor&rsquo;s hands now, and I would be interested to hear about
their insights after further diagnosis.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>They did refund the RAM which was unfulfilled from my original order.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>They did give me a little heart attack, however, by sending the replacement CPU to me in the same box I had returned the faulty CPU back to them with - a box which I had labelled &ldquo;BAD CPU&rdquo;.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Sourcehut virtual machines are named after their purpose, but our physical servers are named after <a href="https://en.wikipedia.org/wiki/Touhou_Project">Touhou</a> characters.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>This happened prior to any of the problems with the first machine.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate></item><item><title>Why Collabora really added Digital Restrictions Management to Weston</title><link>https://drewdevault.com/2019/10/07/HDCP-in-Weston.html</link><description><![CDATA[<p>A recent article from Collabora, <a href="https://www.collabora.com/news-and-blog/blog/2019/10/03/why-hdcp-support-in-weston-is-a-good-thing/">Why HDCP support in Weston is a good
thing</a>, proports to offer a lot of insight into why
<a href="https://en.wikipedia.org/wiki/High-bandwidth_Digital_Content_Protection">HDCP</a> - a Digital Restrictions Management (DRM) related technology - was
added to <a href="https://gitlab.freedesktop.org/wayland/weston">Weston</a> - a well known basic Wayland compositor which was once
the reference compositor for Wayland. But this article is gaslighting you.
There is one reason and one reason alone that explains why HDCP support landed
in Weston.</p>
<p>Q: Why was HDCP added to Weston?</p>
<p>A: $$$$$</p>
<p>Why does Collabora want you to <em>believe</em> that HDCP support in Weston is a good
thing? Let&rsquo;s look into this in more detail. First: <em>is</em> HDCP a bad thing?</p>
<p>DRM (Digital Restrictions Management) is the collective term for software which
attempts to restrict the rights of users attempting to access digital media.
It&rsquo;s mostly unrelated to Direct Rendering Manager, an important Linux subsystem
for graphics which is closely related to Wayland. Digital Restrictions
Management is software used by media owners to prevent you from enjoying their
content except in specific, pre-prescribed ways.</p>
<p>There is universal agreement among the software community that DRM is
ineffective. Ultimately, these systems are defeated by the simple fact that no
amount of DRM can stop you from pointing your camera at your screen and pushing
record. But in practice, we don&rsquo;t even need to resort to that - these systems
are far too weak to demand such measures. <a href="https://www.amazon.com/HSV321/dp/B07C6KCBYB">Here&rsquo;s a $100 device on Amazon which
can break HDCP</a>. DRM is shown to be impossible even in <em>theory</em>, as the
decryption keys have to live somewhere in your house in order to watch movies
there. Exfiltrating them is just a matter of putting forth the effort.  For most
users, it hardly requires any effort to bypass DRM - they can just punch &ldquo;watch
[name of movie] for free&rdquo; into Google. It&rsquo;s well-understood and rather obvious
that DRM systems completely and entirely fail at their stated goal.</p>
<p>No reasonable engineer would knowingly agree to adding a broken system like that
to their system, and trust me - the entire engineering community has been made
well-aware of these faults. Any other system with these obvious flaws would be
discarded immediately, and if the media industry hadn&rsquo;t had their hands firmly
clapped over their ears, screaming &ldquo;la la la&rdquo;, and throwing money at the
problem, it would have been. But, just adding a broken system isn&rsquo;t necessarily
going to hurt much.  The problem is that, in its failure to achieve its stated
goals, DRM brings with it some serious side-effects. DRM is closely tied to
nonfree software - the RIAA mafia wants to keep their garbage a secret, after
all. Moreover, DRM takes away the freedom to play your media when and where you
want. Why should you have to have an internet connection? Why can&rsquo;t you watch it
on your ancient iPod running Rockbox? DRM exists to restrict users from doing
what they want. More sinisterly, it exists to further the industry&rsquo;s push to
end consumer ownership of its products - preferring to steal from you monthly
subscription fees and lease the media to you. Free software maintainers are
responsible for protecting their users from this kind of abuse, and putting DRM
into our software betrays them.</p>
<p>The authors are of the opinion that HDCP support in Weston does not take away
any rights from users. It doesn&rsquo;t <em>stop</em> you from doing anything. This is true,
in the same way that killing environmental regulations doesn&rsquo;t harm the
environment. Adding HDCP support is handing a bottle of whiskey to an abusive
husband. And the resulting system - and DRM as a whole - is known to be
inherently broken and ineffective, a fact that they even acknowledge in their
article. This feature <em>enables</em> media companies to abuse <em>your</em> users. Enough
cash might help some devs to doublethink their way out of it, but it&rsquo;s true all
the same. They added these features to help abusive companies abuse their users,
in the hopes that they&rsquo;ll send back more money or more patches. They say as much
in the article, it&rsquo;s no secret.</p>
<p>Or, let&rsquo;s give them the benefit of the doubt: perhaps their bosses forced them
to add this<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. There have been other developers on this ledge, and I&rsquo;ve talked
them down. Here&rsquo;s the thing: it worked. Their organizations didn&rsquo;t pursue DRM
any further. You are not the lowly code monkey you may think you are. Engineers
have real power in the organization. You can say &ldquo;no&rdquo; and it&rsquo;s your
responsibility to say &ldquo;no&rdquo; when someone asks you to write unethical code.</p>
<p>Some of the people I&rsquo;ve spoken to about HDCP for Wayland, particularly for
Weston, are of the opinion that &ldquo;a protocol for it exists, therefore we will
implement it&rdquo;. This is reckless and stupid. We already know what happens when
you bend the knee to our DRM overlords: look at Firefox. In 2014, Mozilla
added DRM to Firefox after a year of fighting against its standardization in the
W3C (a <a href="https://en.wikipedia.org/wiki/Regulatory_capture">captured</a> organization which governs<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> web standards). They
capitulated, and it did absolutely nothing to stop them from being steamrolled
by Chrome&rsquo;s growing popularity. Their market-share freefall didn&rsquo;t even slow
down in 2014, or in any year since<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Collabora went down without a fight in
the first place.</p>
<p>Anyone who doesn&rsquo;t recognize that self-interested organizations with a great
deal of resources are working against <em>our</em> interests as a free software
community is an idiot. We are at war with the bad actors pushing these systems,
and they are to be <a href="https://en.wikipedia.org/wiki/No_quarter">given no quarter</a>.
Anyone who realizes this and turns a blind eye to it is a coward. Anyone who
doesn&rsquo;t stand up to their boss, sits down, implements it in our free software
ecosystem, and cashes their check the next Friday - is not only a coward, but a
traitor to their users, their peers, and to society as a whole.</p>
<p>&ldquo;HDCP support in Weston is a good thing&rdquo;? It&rsquo;s a good thing for <em>you</em>, maybe.
It&rsquo;s a good thing for media conglomerates which want our ecosystem crushed
underfoot. It&rsquo;s a bad thing for your users, and you know it, Collabora. Shame on
you for gaslighting us.</p>
<p>However&hellip; the person who <em>reverts</em> these changes is a hero, even in the face of
past mistakes. Weston, Collabora, you still have a chance to repent. Do what you
know is right and stand by those principles in the future.</p>
<hr>
<p>P.S. To make sure I&rsquo;m not writing downers all the time, rest assured that the
next article will bring good news - RaptorCS has been working hard to correct
the issues I raised in my last article.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is just for the sake of argument. I&rsquo;ve spoken 1-on-1 with some of the developers responsible and they stand by their statements as their personal opinions.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Or at least attempts to govern.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://en.wikipedia.org/wiki/File:StatCounter-browser-ww-monthly-200901-201905.png">Source: StatCounter</a>. Measuring browser market-share is hard, collect your grain of salt <a href="https://en.wikipedia.org/wiki/Usage_share_of_web_browsers">here</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 7 Oct 2019 00:00:00 +0000</pubDate></item><item><title>RaptorCS POWER9 Blackbird PC review</title><link>https://drewdevault.com/2019/09/23/RaptorCS-Blackbird-a-horror-story.html</link><description><![CDATA[<p><strong>November 2018</strong>: Ordered <a href="https://www.raptorcs.com/content/BK1B01/intro.html">Basic Blackbird
Bundle</a> w/32 GB RAM:
$1,935.64</p>
<p><strong>Update 2019-12-23</strong>: This article was originally titled &ldquo;RaptorCS POWER9
Blackbird PC: An expensive mistake&rdquo;. Please read the follow-up article,
published 2019-10-10:
<a href="https://drewdevault.com/2019/10/10/RaptorCS-redemption.html">RaptorCS&rsquo;s redemption: the POWER9 machine works</a></p>
<p><strong>June 2019</strong></p>
<p>Order ships, and arrives without RAM. It had been long enough that I didn&rsquo;t
realize the order had only been partially fulfilled, so I order some RAM from
the <a href="https://wiki.raptorcs.com/wiki/POWER9_Hardware_Compatibility_List/Memory">list of recommended chips</a> ($338.40), along with the other necessities
that I didn&rsquo;t purchase from Raptor: a case ($97.99) and a PSU ($68.49), and grab
some hard drives I have lying around. Total cost: about $2,440. Worth it to get
POWER9 builds working on builds.sr.ht!</p>
<p>I carefully put everything together, consulting the manual at each step, plug in
a display, and turn it on. Lights come on, things start whizzing, and the screen
comes to life - and promptly starts boot looping.</p>
<p><strong>June 27th</strong></p>
<p>Support ticket created. What&rsquo;s going on with my board?</p>
<p><strong>June 28th</strong></p>
<p>Support gets back to me the next day with a suggestion which is unrelated to the
problem, but no matter - I spoke with volunteers in the IRC channel a few hours
earlier and we found out that - whoops! - I hadn&rsquo;t connected the CPU power to
the motherboard. This is the end of the PEBKAC errors, but not the end of the
problems. The machine gets further ahead in the boot - almost to &ldquo;petitboot&rdquo;,
and then the display dies and the machine reveals no further secrets.</p>
<p>I sent an update to the support team.</p>
<p><strong>July 1st</strong></p>
<blockquote>
<p>We have normally only seen this type of failure when there is a RAM-related
fault, or if the PSU is underpowered enough that bringing the CPUs online at
full power causes a power fault and immediate safety power off.</p>
<p>Can you watch the internal lights while the system is booting, and see if the
power LED cluster immediately changes from green to orange as the system stops
responding over SSH?</p></blockquote>
<p>The IRC channel suspects this is not related to the problem. Regardless, I reply
a few hours later with two videos showing the boot up process from power-out to
display death, with the internal LEDs and the display output clearly visible.</p>
<p><strong>July 4th</strong></p>
<p>&ldquo;Any progress on this issue?&rdquo;, I ask.</p>
<p><strong>July 15th</strong></p>
<p>&ldquo;Hi guys, I&rsquo;m still experiencing this problem. If you&rsquo;re unsure of the issue I
would like to send the board back to you for diagnosis or a refund.&rdquo;</p>
<p><strong>July 25th</strong></p>
<blockquote>
<p>Sorry for the delay. Having senior support check out the videos.</p>
<p>Thanks for writing back. We should have something for you by tomorrow during
the day.</p></blockquote>
<p><strong>July 31st</strong></p>
<blockquote>
<p>Hi Drew.</p>
<p>The videos are being reviewed this week. Thank you for sending them.</p>
<p>Please stay tuned.</p></blockquote>
<p><strong>September 15th</strong></p>
<p>No reply from support. I have since bought a little more hardware for
self-diagnosis, namely the necessary pieces to connect to the two (or is it 3?)
serial ports. I manage to get a log, which points to several failures, but none
of them seem to be related to the problem at hand (they do indicate some network
failures, which would explain why I can&rsquo;t log into the BMC over SSH for further
diagnosis). And the getty is looping, so I can&rsquo;t log in on the serial console to
explore any further.</p>
<hr>
<p>That was a week ago. Radio silence since.</p>
<p>So, 10 months after I placed an order for a POWER9 machine, 3 months after I
received it (without the RAM I purchased, no less), and over $2,500 invested&hellip;
it&rsquo;s clear that buying the Blackbird was an expensive mistake. Maybe someday
I&rsquo;ll get it working. If I do, I doubt the &ldquo;support&rdquo; team will have been
involved. Currently my best bet seems to be waiting for some apparent staff
member (the only apparent staff member) who idles in the IRC channel on Freenode
and allegedly comes online from time to time.</p>
<p>I&rsquo;m not alone in these problems. Here are some (anonymized) quotes I&rsquo;ve heard
from others while trying to troubleshoot this on IRC.</p>
<p>On support:</p>
<blockquote>
<p>ugh, ddevault, yeah. [Blackbird ownership] has not been a smooth experience
for me, either.</p></blockquote>
<blockquote>
<p>my personal theory is that they have really bad ticket software that &rsquo;loses'
tickets somehow</p></blockquote>
<p>On reliability:</p>
<blockquote>
<p>I&rsquo;ve found openbmc&rsquo;s networking to be&hellip; a bit unreliable&hellip; maybe 20% of the
time it does not responed[sic]/does not respond fast enough to networking
requests.</p></blockquote>
<blockquote>
<p>yeah the vga handoff failing doesn&rsquo;t surprise me (other people here have
reported it). but the BMC not getting a DHCP lease is odd. (well maybe not
that odd if you look at the crumminess of the OpenBMC software stack&hellip;)</p></blockquote>
<p>So, yeah, don&rsquo;t buy from Raptor Computer Systems. It&rsquo;s too large and unwieldly
to be an effective paper weight, either!</p>
<hr>
<p><strong>Erratta</strong></p>
<p><em>2019-09-24 @ 00:19 UTC</em>: Raptor has reached out and apologized for my support
experience. We are discussing these problems in more detail now. They have also
issued a refund for the unshipped RAM.</p>
<p><em>2019-09-24 @ 00:51 UTC</em>: Raptor believes the CPU to be faulty and is shipping a
replacement. They attribute the delay to having to reach out to IBM about the
problem, but don&rsquo;t have a satisfactory answer to why the support process failed.
I understand it&rsquo;s being discussed internally.</p>
<p><em>2019-09-24 @ 13:08 UTC</em>:</p>
<blockquote>
<p>After investigation, we are implementing new mechanisms to avoid support
issues like the one you experienced. We now have a self-serve RMA generation
system which would have significantly reduced your wait time, and are taking
measures to ensure that tickets are no longer able to be ignored by front line
support staff. We believe we have addressed the known failure modes at this
time, and management will be keeping a close eye on the operation of the
support system to ensure that new failure modes are handled rapidly.</p></blockquote>
<p>They&rsquo;ve tweeted this about their new self-service RMA system as well:</p>
<blockquote>
<p>We&rsquo;ve made it easy to submit RMA requests for defective products on our Web
site. Simply go to your account, select the &ldquo;Submit RMA Request&rdquo; link, and
fill out the form.  Your product will be warranty checked and, if valid, you
will receive an RMA number and shipping address!</p></blockquote>
<p>— @RaptorCompSys via <a href="https://twitter.com/RaptorCompSys/status/1176432946670186498">Twitter</a></p>
<p>I agree that this shows positive improvements and a willingness to continue
making improvements in their support experience. Thanks to Raptor for taking
these concerns seriously. I hope to have a working Blackbird system soon, and
will publish a follow-up review when the time comes.</p>
<p><em>2019-10-08 @ 22:30 UTC</em> A source quoted anonymously in this article asked me to
remove their quote, after a change of heart. They feel that the attention this
article has received has made their statement reach beyond the level of
dissatisfaction they had with Raptor at the time.</p>]]></description><pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate></item><item><title>Don&apos;t sacrifice the right ideas to win the right words</title><link>https://drewdevault.com/2019/09/17/The-wrong-words-but-the-right-ideas.html</link><description><![CDATA[<p>There is a difference between free software and open-source software. But you
have to squint to see it. Software licenses which qualify for one title but not
the other are exceptionally rare.</p>
<p>A fascination with linguistics is common among hackers, and I encourage and
participate in language hacking myself. Unfortunately, that seems to seep into
the Free Software Foundation&rsquo;s message a bit too much. Let&rsquo;s see if any of this
rings familiar:</p>
<blockquote>
<p>It&rsquo;s not actually open source, but free software. You see, &ldquo;open source&rdquo; is a
plot by the commercial software industry to subvert the &ldquo;free software&rdquo;
movement&hellip;</p></blockquote>
<blockquote>
<p>No, it&rsquo;s free-as-in-freedom, not free-as-in-beer. Sometimes we call it &ldquo;libre&rdquo;
software, borrowing the French or Spanish word, because in English&hellip;</p></blockquote>
<blockquote>
<p>What you&rsquo;re referring to as Linux, is in fact, GNU/Linux, or as I&rsquo;ve recently
taken to calling it, GNU plus Linux. Linux is not an operating system&hellip;</p></blockquote>
<p>What do all of these have in common? The audience already agrees with the
speaker on the ideas, but this becomes less so with every word. This kind of
pedantry lacks tact and pushes people away from the movement. No one wants to
talk to someone who corrects them like this, so people shut down and stop
listening. The speaker gains the self-satisfaction that comes with demonstrating
that you&rsquo;re smarter than someone else, but the cost is pushing that person away
from the very ideals you&rsquo;re trying to clarify. This approach doesn&rsquo;t help the
movement, it&rsquo;s just being a dick.</p>
<p>For this reason, even though I fully understand the difference between free and
open-source software, I use the terms basically interchangeably. In practice
they are effectively the same thing. Then, I preach the ideologies behind free
software even when discussing open-source software.  The ideas are what matters,
the goal is to get people thinking on your wavelength. If they hang around long
enough, they&rsquo;ll start using your words, too.  That&rsquo;s how language works.</p>
<p>The crucial distinction of the free software movement is less about &ldquo;free
software&rdquo;, after all, and more about copyleft. But, because the FSF pushes
copyleft <em>and</em> free software, and because many FSF advocates are pedantic and
abrasive, many people check out before they&rsquo;re told the distinction between free
software and copyleft. This leads to the listener <em>equivocating</em> free software
with copyleft software, which undermines the message and hurts both.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>This lack of tact is why I find it difficult to accept the FSF as a
representative of the movement I devote myself to. If your goal is to strengthen
the resolve and unity of people who already agree with you by appealing to
tribalism, then this approach is effective - but remember that it strengthens
the opposing tribes, too. If your goal is to grow the movement and win the
hearts and minds of the people, then you need to use more tact in your language.
Turn that hacker knack for linguistic hacking towards <em>this</em> goal, of thinking
over how your phrasing and language makes different listeners feel. The
resulting literature will be much more effective.</p>
<p>Attack the systems and individuals who brought about the circumstances that
frustrate your movement, but don&rsquo;t attack their victims. It&rsquo;s not the user&rsquo;s
fault that they were raised on proprietary software. The system which installed
proprietary software on their school computers is the one to blame. Our goals
should be things like introducing Linux to the classroom, petitioning our
governments to require taxpayer-funded software to be open source, eliminating
Digital Restrictions Management<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, pushing for right to repair, and so on. Why
is &ldquo;get everyone to say &rsquo;libre&rsquo; instead of &lsquo;open-source&rsquo;&rdquo; one of our goals
instead?</p>
<p>An aside: sometimes language <em>is</em> important. When someone has the wrong words
but the right ideas, it&rsquo;s not a big deal. When someone has the wrong <em>ideas</em> and
is appropriating the words to support them, that&rsquo;s a problem. This is why I
still come down hard on companies which gaslight users with faux-open software
licenses like the Commons Clause or the debacle with RedisLabs.</p>
<p><em>Note: this article is not about Richard Stallman. I have no comment on the
recent controversies.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For those unaware, copyleft is any &ldquo;viral&rdquo; license, where using copyleft code requires also using a copyleft license for your derived work.  Free software is just software which meets the <a href="https://www.gnu.org/philosophy/free-sw.html">free software definition</a>, which is in practice just about all free <em>and</em> open-source software, including MIT or BSD licensed works.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This kind of pedantry, which deliberately misrepresents the acronym (which is rightly meant to be &ldquo;Digital Rights Management&rdquo;), is more productive, since the people insulted by it are not the victims of DRM, but the perpetrators of it. Also, &ldquo;Digital Rights Management&rdquo; is itself a euphemism, or perhaps more accurately a kind of doublespeak, which invites a similar response.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate></item><item><title>Status update, September 2019</title><link>https://drewdevault.com/2019/09/15/Status-update-September-2019.html</link><description><![CDATA[<p>Finally home again after a long series of travels! I spent almost a month in
Japan, then visited my sister&rsquo;s new home in Hawaii on the way eastwards, then
some old friends in Seattle, and finally after 5½ long weeks, it&rsquo;s home sweet
home here in Philadelphia. At least until I leave for
<a href="https://xdc2019.x.org/">XDC</a> in Montreal 2 weeks from now. Someday I&rsquo;ll have
some rest&hellip; throughout all of these wild travels, I&rsquo;ve been hard at work on my
free software projects. Let&rsquo;s get started with this month&rsquo;s status update!</p>
<p><img src="https://sr.ht/iuDE.jpg" alt=""></p>
<p style="text-align: center">
  <small>Great view from a hike on O'ahu</small>
</p>
<p>First, Wayland news. I&rsquo;m happy to share with you that the Wayland book is now
more than halfway complete, and I&rsquo;ve made the drafts available online for a
discounted price: <a href="https://wayland-book.com">The Wayland Protocol</a>. Thanks to
all of my collaborators and readers who volunteered to provide feedback! There&rsquo;s
more Wayland-related news still, as this month marked the release of <a href="https://github.com/swaywm/sway/releases/tag/1.2">sway
1.2</a> and <a href="https://github.com/swaywm/wlroots/releases/tag/0.7.0">wlroots 0.7.0</a>. I like this release
because it&rsquo;s light on new features - showing that sway is maturing into a stable
and reliable Wayland desktop. The features which were added are subtle and serve
to improve sway&rsquo;s status as a member of the broader ecosystem - sway 1.2
supports the new <a href="https://github.com/mate-desktop/mate-panel/pull/991">layer shell support in the MATE panel</a>, and the
same improvements are already helping with the development of other software.</p>
<p><a href="https://sr.ht/9Oro.png"><img src="https://sr.ht/9Oro.png" alt="Screenshot of MATE panel running on sway"></a></p>
<p style="text-align: center">
  <small>Rest assured, the weird alignment issues were fixed</small>
</p>
<p>On the topic of <a href="https://aerc-mail.org">aerc</a>, I still haven&rsquo;t gotten around to
that write-up responding to <a href="http://www.kroah.com/log/blog/2019/08/14/patch-workflow-with-mutt-2019/">Greg KH&rsquo;s post</a>&hellip; but I will. Travels have
made it difficult to sit down for a while and do some serious long-term project
planning. Regardless, the current plans have still been being executed well.
Notmuch support continues to improve thanks to Reto Brunner&rsquo;s help, completions
are improving throughout, and heaps of little features - signatures, unread
message counts, :prompt, forward-as-attachment - are now supported.</p>
<p>I also spent some time this month working on Simon Ser&rsquo;s
<a href="https://mrsh.sh">mrsh</a>. I cleaned up call frames, implemented the <code>return</code>
builtin, finished the <code>pwd</code> builtin, improved readline support, fleshed out job
control, and made many other small improvements. With mrsh nearing completion,
I&rsquo;ve started up another project: <a href="https://git.sr.ht/~sircmpwn/ctools">ctools</a>. This provides the rest of the
POSIX commands required of a standard scripting environment (it replaces
coreutils or busybox). I&rsquo;m taking this one pretty seriously from the start -
every command has full POSIX.1-2017 support with a conformance test and a man
page, in one C source file and no dependencies. If you&rsquo;re looking for a good
afternoon project (or weekend, for some utilities), how about picking up your
favorite <a href="https://pubs.opengroup.org/onlinepubs/9699919799/">POSIX</a> tool and
sending along an implementation?</p>
<p><a href="https://builds.sr.ht/~sircmpwn/job/88955"><img src="https://sr.ht/DSxS.png" alt="Screenshot of ctools test suite"></a></p>
<p>With these projects, along with ~mcf&rsquo;s <a href="https://git.sr.ht/~mcf/cproc">cproc</a>,
we&rsquo;re starting to see a simple and elegant operating system come together -
exactly the kind I wish we already had. To track our progress towards this goal,
I&rsquo;ve put up <a href="https://arewesimpleyet.org">arewesimpleyet.org</a>. A day may soon
come when computers become the again elegant and simple tools they were always
meant to be! At least if we assume &ldquo;within a few decades&rdquo; as a valid definition
of &ldquo;soon&rdquo;.</p>
<p>To cover SourceHut news briefly: we hit 10,000 users this month! And it&rsquo;s
continued to grow since, up to 10,649 users at the time of writing. On the
subject of feature development, with Denis Laxalde&rsquo;s help we&rsquo;re starting to put
together a Debian repository for installing the services on Debian hosts. On
todo.sr.ht, users without accounts can now create and comment on tickets via
email. I also redesigned <a href="https://sourcehut.org">sourcehut.org</a>, adding a blog
with a greater breadth of topics than we&rsquo;ll see on the sr.ht-announce mailing
list.</p>
<p>That&rsquo;s all for this month! I enjoyed my vacation and some much needed time away
from work&hellip; though for me a &ldquo;day off&rdquo; is a day where I write less than 1,000
lines of code. Thank you again for your support - it means the world to me. I&rsquo;ll
see you next month!</p>
<p><img src="https://sr.ht/1cuE.jpg" alt=""></p>
<p style="text-align: center">
  <small>Had the best seats at a concert in Tokyo!</small>
</p>]]></description><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate></item><item><title>How I decide between many programming languages</title><link>https://drewdevault.com/2019/09/08/Enough-to-decide.html</link><description><![CDATA[<p>I have a few old standards in my toolbelt that I find myself calling upon most
often, but I try to learn enough about many programming languages to reason
about whether or not they&rsquo;re suitable to any use-case I&rsquo;m thinking about. The
best way is to learn by doing, so getting a general impression of the utility of
many languages helps equip you with the knowledge of whether or not they&rsquo;d be
useful for a particular problem even if you don&rsquo;t know them yet.</p>
<p>Only included are languages which I feel knowledgable enough about to comment
on, there are many that aren&rsquo;t here and which I encourage you to research.</p>
<h2 id="c">C</h2>
<p>Pros: good performance, access to low-level tooling, useful in systems
programming, statically typed, standardized and venerable, the lingua franca,
universal support on all platforms.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Cons: string munging, extensible programming, poor availability of ergonomic
libraries in certain domains, has footguns, some programmers in the wild think
the footguns are useful.</p>
<style>
.bullshit {
    color: white;
    font-style: italic;
    font-weight: bold;
    text-shadow: -1px -1px 0 #000,
           1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
}
</style>
<h2 id="go">Go</h2>
<p>Pros: fast, conservative, good package manager and a healthy ecosystem, standard
library is well designed, best in class for many problems, has a spec and
multiple useful implementations, easy interop with C.</p>
<p>Cons: the runtime is too complicated, no distinction between green threads and
real threads (meaning all programs deal with the problems of the latter).</p>
<h2 id="rust">Rust</h2>
<p>Pros: it&rsquo;s <em class="bullshit">SAFE</em>, useful for systems programming,
better than C++, ecosystem which is diverse but just short of the npm disease,
easy interop with C.</p>
<p>Cons: far too big, non-standardized, only one meaningful implementation.</p>
<h2 id="python">Python</h2>
<p>Pros: easy and fast to get things done, diverse package ecosystem of reasonably
well designed packages, deeply extensible, useful for server-side web software.</p>
<p>Cons: bloated, poor performance, dynamically typed, cpython internals being
available to programmers has led to an implementation monoculture.</p>
<h2 id="javascript">JavaScript</h2>
<p><em>* and all of its derivatives, which ultimately inherit its problems.</em></p>
<p>Pros: functional but with an expressive and C-like syntax, ES6 improved on many
fronts, async/await/promises are well designed, no threading.</p>
<p>Cons: dynamic types, package ecosystem is a flaming pile, many JS programmers
aren&rsquo;t very good at it and they make ecosystem-defining libraries anyway, born
in web browsers and inherited their many flaws.</p>
<h2 id="java">Java</h2>
<p><em>* and all of its derivatives, which ultimately inherit its problems.</em></p>
<p>Pros: has had enough long-term investment to be well understood and reasonably
fast.</p>
<p>Cons: hella boilerplate, missing lots of useful things, package management, XML
is everywhere, not useful for low-level programming (this applies to all
Java-family languages).</p>
<h2 id="c-1">C#</h2>
<p>Pros: less boilerplate than Java, reasonably healthy package ecosystem, good
access to low level tools for interop with C, async/await started here.</p>
<p>Cons: ecosystem is in turmoil because Microsoft cannot hold a singular vision,
they became open-source too late and screwed over Mono.</p>
<h2 id="haskell">Haskell</h2>
<p><em>* and every other functional-oriented programming language in its class, such
as elixir, erlang, most lisps, even if they resent being lumped together</em></p>
<p>Pros: it&rsquo;s <em class="bullshit">FUNCTIONAL</em>, reasonably fast, useful
when the answer to your problem is more important than the means by which you
find it, good for research-grade<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> compilers.</p>
<p>Cons: it&rsquo;s <em class="bullshit">FUNCTIONAL</em>, somewhat inscrutable, awful
package management, does not fit well into its environment, written by people
who wish the world could be described with a pure function and design software
as if it could.</p>
<h2 id="perl">Perl</h2>
<p>Pros: <a href="https://github.com/Perl/perl5/blob/blead/Configure">entertaining</a>, best in class at regexes/string munging,
useful for making hacky kludges when such solutions are appropriate.</p>
<p>Cons: inscrutable, too extensible, too much junk/jank.</p>
<h2 id="lua">Lua</h2>
<p>Pros: embeddable &amp; easily plugged into its host, fairly simple, portable.</p>
<p>Cons: 1-based indexing is objectively bad, the upstream maintainers are kind of
doing their own thing and no one really likes it.</p>
<h2 id="posix-shell-scripts">POSIX Shell scripts</h2>
<p>Pros: nothing can string together commands better, if you learn 90% of it then
you can make pretty nice and expressive programs with it for a certain class of
problem, standardized (I do not use bash).</p>
<p>Cons: most people learn only 10% of it and therefore make pretty bad and
unintuitive programs with it, not useful for most complex tasks.</p>
<hr>
<p>Disclaimer: I don&rsquo;t like the rest of these programming languages and would not
use them to solve any problem. If you don&rsquo;t want your sacred cow gored, leave
here.</p>
<h2 id="c-2">C++</h2>
<p>Pros: none</p>
<p>Cons: ill-defined, far too big, <em class="bullshit">
Object Oriented Programming</em>, loads of baggage, ecosystem that buys into
its crap, enjoyed by bad programmers.</p>
<h2 id="php">PHP</h2>
<p>Pros: none</p>
<p>Cons: every PHP programmer is bad at programming, the language is designed to
accommodate them with convenient footguns (or faceguns) at every step, and the
ecosystem is accordingly bad. No, PHP7 doesn&rsquo;t fix this. Use a real programming
language, jerk.</p>
<h2 id="ruby">Ruby</h2>
<p>Pros: It&rsquo;s both <em class="bullshit">ENTERPRISE</em> and <em
class="bullshit">HIP</em> at the same time, and therefore effective at herding a
group of junior to mid-level programmers in a certain direction, namely towards
your startup&rsquo;s exit.</p>
<p>Cons: bloated, awful performance, before Node.js took off this is what all of
those programmers used.</p>
<h2 id="scala">Scala</h2>
<p>Pros: more expressive than Java, useful for <em class="bullshit">Big
Data</em> problems.</p>
<p>Cons: Java derivative, type system requires a PhD to comprehend, too siloed from
Java, meaning it gets all of the disadvantages of being a Java ecosystem member
but few of the advantages. The type system is so needlessly complicated that it
basically cripples the language on its own merits alone.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Except one, and it can go suck an egg for all I care.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>but not production-grade.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 8 Sep 2019 00:00:00 +0000</pubDate></item><item><title>Building interactive SSH applications</title><link>https://drewdevault.com/2019/09/02/Interactive-SSH-programs.html</link><description><![CDATA[<p>After the announcement of <a href="https://drewdevault.com/2019/08/19/Introducing-shell-access-for-builds.html">shell access for builds.sr.ht jobs</a>, a few people sent me some questions, wondering how this sort of
thing is done. Writing interactive SSH applications is actually pretty easy, but
it does require some knowledge of the pieces involved and a little bit of
general Unix literacy.</p>
<p>On the server, there are three steps which you can meddle with using OpenSSH:
authentication, the shell session, and the command. The shell is pretty easily
manipulated. For example, if you set the user&rsquo;s login shell to
<code>/usr/bin/nethack</code>, then <a href="https://www.nethack.org/">nethack</a> will run when they log in. Editing
this is pretty straightforward, just pop open <code>/etc/passwd</code> as root and set
their shell to your desired binary. If the user SSHes into your server with a
TTY allocated (which is done by default), then you&rsquo;ll be able to run a curses
application or something interactive.</p>
<script
  id="asciicast-CQ5iaFl8kMnOGV3x0TeI7vfjV"
  src="https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js" async
></script>
<p><noscript><i>This article includes third-party JavaScript content from
asciinema.org, a free- and open-source platform that I trust.</i></noscript></p>
<p>However, a downside to this is that, if you choose a &ldquo;shell&rdquo; which does not
behave like a shell, it will break when the user passes additional command line
arguments, such as <code>ssh user@host ls -a</code>. To address this, instead of overriding
the shell, we can override the <em>command</em> which is run. The best place to do this
is in the user&rsquo;s <code>authorized_keys</code> file. Before each line, you can add options
which apply to users who log in with that key. One of these options is the
&ldquo;command&rdquo; option. If you add this to <code>/home/user/.ssh/authorized_keys</code> instead:</p>
<pre tabindex="0"><code>command=&#34;/usr/bin/nethack&#34; ssh-rsa ... user
</code></pre><p>Then it&rsquo;ll use the user&rsquo;s shell (which should probably be <code>/bin/sh</code>) to run
<code>nethack</code>, which will work regardless of the command supplied by the user (which
is stored into <code>SSH_ORIGINAL_COMMAND</code> in the environment, should you need it).
There are probably some other options you want to set here, as well, for
security reasons:</p>
<pre tabindex="0"><code>restrict,pty,command=&#34;...&#34; ssh-rsa ... user
</code></pre><p>The full list of options you can set here is available in the <code>sshd(8)</code> man
page. <code>restrict</code> just turns off most stuff by default, and <code>pty</code> explicitly
re-enables TTY allocation, so that we can do things like curses. This will work
if you want to explicitly authorize specific people, one at a time, in your
<code>authorized_keys</code> file, to use your SSH-driven application.  However, there&rsquo;s
one more place where we can meddle: the <code>AuthorizedKeysCommand</code> in
<code>/etc/ssh/sshd_config</code>. Instead of having OpenSSH read from the
<code>authorized_keys</code> file in the user&rsquo;s home directory, it can execute an arbitrary
program and read the <code>authorized_keys</code> file from its stdout. For example, on
Sourcehut we use something like this:</p>
<pre tabindex="0"><code>AuthorizedKeysCommand /usr/bin/gitsrht-dispatch &#34;%u&#34; &#34;%h&#34; &#34;%t&#34; &#34;%k&#34;
AuthorizedKeysUser root
</code></pre><p>Respectively, these format strings will supply the command with the username
attempting login, the user&rsquo;s home directory, the type of key in use (e.g.
<code>ssh-rsa</code>), and the base64-encoded key itself. More options are available - see
<code>TOKENS</code>, in the <code>sshd_config(8)</code> man page. The key supplied here can be used to
identify the user - on Sourcehut we look up their SSH key in the database. Then
you can choose whether or not to admit the user based on any logic of your
choosing, and print an appropriate <code>authorized_keys</code> to stdout. You can also
take this opportunity to forward this information along to the command that gets
executed, by appending them to the command option or by using the environment
options.</p>
<h2 id="how-this-works-on-buildssrht">How this works on builds.sr.ht</h2>
<p>We use a somewhat complex system for incoming SSH connections, which I won&rsquo;t go
into here - it&rsquo;s only necessary to support multiple SSH applications on the same
server, like git.sr.ht and builds.sr.ht. For builds.sr.ht, we accept all
connections and authenticate later on. This means our AuthorizedKeysCommand is
quite simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># We just let everyone in at this stage, authentication is done later on.</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="n">key_type</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">b64key</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">keys</span> <span class="o">=</span> <span class="p">(</span><span class="sa">f</span><span class="s2">&#34;command=</span><span class="se">\&#34;</span><span class="s2">buildsrht-shell &#39;</span><span class="si">{</span><span class="n">b64key</span><span class="si">}</span><span class="s2">&#39;</span><span class="se">\&#34;</span><span class="s2">,restrict,pty &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">key_type</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">b64key</span><span class="si">}</span><span class="s2"> somebody</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">keys</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><p>The command, <code>buildsrht-shell</code>, does some more interesting stuff. First, the
user is told to connect with a command like <code>ssh builds@buildhost connect &lt;job ID&gt;</code>, so we use the <code>SSH_ORIGINAL_COMMAND</code> variable to grab the command line
they included:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cmd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;SSH_ORIGINAL_COMMAND&#34;</span><span class="p">)</span> <span class="ow">or</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span> <span class="o">=</span> <span class="n">shlex</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">fail</span><span class="p">(</span><span class="s2">&#34;Usage: ssh ... connect &lt;job ID&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">op</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">op</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">&#34;connect&#34;</span><span class="p">,</span> <span class="s2">&#34;tail&#34;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="n">fail</span><span class="p">(</span><span class="s2">&#34;Usage: ssh ... connect &lt;job ID&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">job_id</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">cmd</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span></code></pre></div><p>Then we do some authentication, fetching the job info from the local job runner
and checking their key against meta.sr.ht (the authentication service).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">b64key</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_info</span><span class="p">(</span><span class="n">job_id</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;http://localhost:8080/job/</span><span class="si">{</span><span class="n">job_id</span><span class="si">}</span><span class="s2">/info&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="n">job_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">fail</span><span class="p">(</span><span class="s2">&#34;No such job found.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">meta_origin</span> <span class="o">=</span> <span class="n">get_origin</span><span class="p">(</span><span class="s2">&#34;meta.sr.ht&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">meta_origin</span><span class="si">}</span><span class="s2">/api/ssh-key/</span><span class="si">{</span><span class="n">b64key</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">username</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s2">&#34;owner&#34;</span><span class="p">][</span><span class="s2">&#34;name&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">elif</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">fail</span><span class="p">(</span><span class="s2">&#34;We don&#39;t recognize your SSH key. Make sure you&#39;ve added it to &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="sa">f</span><span class="s2">&#34;your account.</span><span class="se">\n</span><span class="si">{</span><span class="n">get_origin</span><span class="p">(</span><span class="s1">&#39;meta.sr.ht&#39;</span><span class="p">,</span> <span class="n">external</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="si">}</span><span class="s2">/keys&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">fail</span><span class="p">(</span><span class="s2">&#34;Temporary authentication failure. Try again later.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">username</span> <span class="o">!=</span> <span class="n">info</span><span class="p">[</span><span class="s2">&#34;username&#34;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="n">fail</span><span class="p">(</span><span class="s2">&#34;You are not permitted to connect to this job.&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>There are two modes from here on out: connecting and tailing. The former logs
into the local build VM, and the latter prints the logs to the terminal.
Connecting looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="n">info</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Opens a shell on the build VM&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">limit</span> <span class="o">=</span> <span class="n">naturaltime</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()</span> <span class="o">-</span> <span class="n">deadline</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Your VM will be terminated </span><span class="si">{</span><span class="n">limit</span><span class="si">}</span><span class="s2">, or when you log out.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;http://localhost:8080/job/</span><span class="si">{</span><span class="n">job_id</span><span class="si">}</span><span class="s2">/claim&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">tty</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&#34;/dev/tty&#34;</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">O_RDWR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">tty</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ssh&#34;</span><span class="p">,</span> <span class="s2">&#34;-qt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;-p&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s2">&#34;port&#34;</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;-o&#34;</span><span class="p">,</span> <span class="s2">&#34;UserKnownHostsFile=/dev/null&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;-o&#34;</span><span class="p">,</span> <span class="s2">&#34;StrictHostKeyChecking=no&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;-o&#34;</span><span class="p">,</span> <span class="s2">&#34;LogLevel=quiet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;build@localhost&#34;</span><span class="p">,</span> <span class="s2">&#34;bash&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;http://localhost:8080/job/</span><span class="si">{</span><span class="n">job_id</span><span class="si">}</span><span class="s2">/terminate&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>This is pretty self explanatory, except perhaps for the dup2 - we just open
<code>/dev/tty</code> and make <code>stdin</code> a copy of it. Some interactive applications
misbehave if stdin is not a tty, and this mimics the normal behavior of SSH.
Then we log into the build VM over SSH, which with stdin/stdout/stderr rigged up
like so will allow the user to interact with the build VM. After that completes,
we terminate the VM.</p>
<p>This is mostly plumbing work that just serves to get the user from point A to
point B. The tail functionality is more application-like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">tail</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="n">info</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Tails the build logs to stdout&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">logs</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cfg</span><span class="p">(</span><span class="s2">&#34;builds.sr.ht::worker&#34;</span><span class="p">,</span> <span class="s2">&#34;buildlogs&#34;</span><span class="p">),</span> <span class="nb">str</span><span class="p">(</span><span class="n">job_id</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s2">&#34;tail&#34;</span><span class="p">,</span> <span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">logs</span><span class="p">,</span> <span class="s2">&#34;log&#34;</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">    <span class="n">tasks</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">procs</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># holy bejeezus this is hacky</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">task</span> <span class="ow">in</span> <span class="n">manifest</span><span class="o">.</span><span class="n">tasks</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">task</span><span class="o">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">tasks</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl">            <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">logs</span><span class="p">,</span> <span class="n">task</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s2">&#34;log&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">procs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="sa">f</span><span class="s2">&#34;tail -f </span><span class="si">{</span><span class="n">shlex</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">path</span><span class="p">)</span><span class="si">}</span><span class="s2"> | &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;awk &#39;{ print </span><span class="se">\&#34;</span><span class="s2">[&#34;</span> <span class="o">+</span> <span class="n">shlex</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">name</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;] </span><span class="se">\&#34;</span><span class="s2"> $0 }&#39;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">shell</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">tasks</span><span class="o">.</span><span class="n">update</span><span class="p">({</span> <span class="n">task</span><span class="o">.</span><span class="n">name</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="n">job_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">info</span><span class="p">[</span><span class="s2">&#34;task&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="n">info</span><span class="p">[</span><span class="s2">&#34;tasks&#34;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">procs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span><span class="o">.</span><span class="n">kill</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">op</span> <span class="o">==</span> <span class="s2">&#34;connect&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">info</span><span class="p">[</span><span class="s2">&#34;task&#34;</span><span class="p">]</span> <span class="o">!=</span> <span class="n">info</span><span class="p">[</span><span class="s2">&#34;tasks&#34;</span><span class="p">]</span> <span class="ow">and</span> <span class="n">info</span><span class="p">[</span><span class="s2">&#34;status&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;running&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">tail</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">connect</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">elif</span> <span class="n">op</span> <span class="o">==</span> <span class="s2">&#34;tail&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">tail</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span>
</span></span></code></pre></div><p>This&hellip; I&hellip; let&rsquo;s just pretend you never saw this. And that&rsquo;s how SSH access to
builds.sr.ht works!</p>]]></description><pubDate>Mon, 2 Sep 2019 00:00:00 +0000</pubDate></item><item><title>Shell access for builds.sr.ht CI</title><link>https://drewdevault.com/2019/08/19/Introducing-shell-access-for-builds.html</link><description><![CDATA[<p>Have you ever found yourself staring at a failed CI build, wondering desperately
what happened? Or, have you ever needed a fresh machine on-demand to test out an
idea in? Have you been working on Linux, but need to test something on OpenBSD?
Starting this week, builds.sr.ht can help with all of these problems, because
you can now SSH into the build environment.</p>
<small class="text-muted">
  If you didn't know, <a href="https://sourcehut.org">Sourcehut</a> is the 100%
  open/libre software forge for hackers, complete with git and Mercurial
  hosting, CI, mailing lists, and more - with no JavaScript. Try it out!
</small>
<p>The next time your build fails on builds.sr.ht, you&rsquo;ll probably notice the
following message:</p>
<p><img src="https://sr.ht/thL-.png" alt="Screenshot of builds.sr.ht showing a prompt to SSH into the failed build
VM and examine it"></p>
<p>After the build fails, we process everything normally - sending emails,
webhooks, and so on - but keep the VM booted for an additional 10 minutes. If
you do log in during this window, we keep the VM alive until you log out or
until your normal build time limit has elapsed. Once you&rsquo;ve logged in, you get a
shell and can do anything you like, such as examining the build artifacts or
tweaking the source and trying again.</p>
<pre tabindex="0"><code>$ ssh -t builds@azusa.runners.sr.ht connect 81809
Connected to build job #81809 (failed):
https://builds.sr.ht/jobs/~sircmpwn/81809
Your VM will be terminated 4 hours from now, or when you log out.

bash-5.0 $
</code></pre><p>You can also connect to any build over SSH by adding <code>shell: true</code> to your build
manifest. When you do, the VM will be kept alive after all of the tasks have
finished (even if it doesn&rsquo;t fail) so you can SSH in. You can also SSH in before
the tasks have finished, and tail the output of the build in your terminal. An
example use case might be getting a fresh Alpine environment to test build your
package on:</p>
<script
  id="asciicast-wnLYZwDuvkbIHwgTdmnqtQpXh"
  src="https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js" async
></script>
<p><noscript><i>This article includes third-party JavaScript content from
asciinema.org, a free- and open-source platform that I trust.</i></noscript></p>
<p>This was accomplished with a simple build manifest:</p>
<pre tabindex="0"><code>image: alpine/edge
shell: true
sources:
- https://git.alpinelinux.org/aports
tasks:
- &#34;prep-abuild&#34;: |
    abuild-keygen -an
</code></pre><p>Since build manifests run normally in advance of your shell login, you can do
things like install your preferred editor and dotfiles, pull down your SSH keys
through <a href="https://man.sr.ht/tutorials/builds.sr.ht/using-build-secrets.md">build
secrets</a>, or
anything else you desire to set up a comfortable working environment.</p>
<p>Furthermore, by leveraging the <a href="https://man.sr.ht/builds.sr.ht/api.md">builds.sr.ht
API</a>, you can write scripts which take
advantage of the shell features. Need a NetBSD shell? With a little scripting
you can get something like this working:</p>
<script
  id="asciicast-8etTNE7Ptgmu6hO3cVDlvrAal"
  src="https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js" async
></script>
<p>With experimental multiarch support being rolled out, soon you&rsquo;ll be just a few
keystrokes away from an ARM or PowerPC shell, too.</p>
<p>I want to expand more on SSH access in the future. Stay tuned and <a href="mailto:sir@cmpwn.com">let me
know</a> if you have any cool ideas!</p>]]></description><pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate></item><item><title>Status update, August 2019</title><link>https://drewdevault.com/2019/08/15/Status-update-August-2019.html</link><description><![CDATA[<p>Outside my window, the morning sun can be seen rising over the land of the
rising sun, as I sip from a coffee purchased at the konbini down the street. I
almost forgot to order it, as the staffer behind the counter pointed out with a
smile and a joke that, having been told in Japanese, mostly went over my head.
It&rsquo;s on this quiet Osaka morning I write today&rsquo;s status update - there are lots
of existing developments to share!</p>
<p>Let&rsquo;s start with sourcehut news. I deployed a cool feature yesterday - SSH
access to builds.sr.ht. You can now SSH into a failed build to examine the
failure and investigate the root cause. You can also get a shell on-demand for
any build image, including for experimental arm64 support. I&rsquo;ll be writing a
full-length blog post going into detail about this feature later in the week.
Additionally, with contributor Ryan Chan&rsquo;s help, man.sr.ht received a huge
overhaul which moved wikis out of man.sr.ht&rsquo;s dedicated git subsystem and into
git.sr.ht repositories, allowing you to make your wiki out of a branch of your
main project repo or browse the git data on the web. I&rsquo;ll be posting more sr.ht
news to sr.ht-announce later today if you want to hear more!</p>
<p><img src="https://sr.ht/thL-.png" alt="Screenshot of a failed build on builds.sr.ht offering SSH access to the build
environment"></p>
<p><a href="https://git.sr.ht/~sircmpwn/aerc/refs/0.2.0">aerc 0.2.0</a> has been released,
which included nearly 200 changes from 34 contributors. I&rsquo;m grateful to the
community for this crazy amount of support - working together we&rsquo;ll make aerc
amazing in no time. Highlights include maildir and sendmail transports, search
and filtering, support for <code>mailto:</code> links, tab completion, and more. We haven&rsquo;t
slowed down since, and the next release already has support lined up for
notmuch, more tab completion support, and more features for mail composition. In
related news, Greg Kroah-Hartman of Linux kernel fame was kind enough to <a href="http://www.kroah.com/log/blog/2019/08/14/patch-workflow-with-mutt-2019/">write
up</a>
details about his email workflow to help guide the direction of aerc. I&rsquo;ll be
writing a follow-up post next week explaining how aerc aims to solve the
problems he lays out.</p>
<p>Sway and wlroots continue chugging along as well, with the release of Sway
1.2-rc1 coming earlier this week. This release adds many features from the
recent i3 4.17 release, and adds a handful of small features and bug fixes. The
corresponding wlroots release will be pretty cool, too, adding support for
direct scanout and fixing dozens of bugs. I&rsquo;d like to draw your attention as
well to a cool project from the Sway community: Jason Francis&rsquo;s
<a href="https://github.com/cyclopsian/wdisplays">wdisplays</a>, a GUI for arranging and
configuring displays on wlroots-based desktops. The changes necessary for it to
work will land in sway 1.2, and users building from git can try it out today.</p>
<p><img src="https://sr.ht/iyU4.png" alt=""></p>
<p>On the DRM leasing and VR for Wayland work I was discussing in the last update,
I&rsquo;m happy to share that I&rsquo;ve got it working with SteamVR! I&rsquo;ve written a
<a href="https://drewdevault.com/2019/08/09/DRM-leasing-and-VR-for-Wayland.html">detailed blog post</a> which
explains all of the work that went into this project, if you want to learn about
it in depth and watch some cool videos summing up the work. There&rsquo;s still a lot
of work to do in negotiating the standardization of new interfaces to support
this feature in several projects, but all of the unknowns have been discovered
and answered. We will have VR on Wayland soon. I plan on making my way to the
<a href="https://monado.dev/">Monado</a> and <a href="https://www.khronos.org/openxr">OpenXR</a> to
help realize a top-to-bottom free software VR stack designed with Wayland in
mind. I&rsquo;ll also be joining many members of the wlroots gang at
<a href="https://xdc2019.x.org/">XDC</a> in October, where I hope to meet the people
working on OpenXR.</p>
<p>I&rsquo;ve also invested more time into my Wayland book, because I&rsquo;ve realized that at
my current pace it won&rsquo;t be done any time soon. It&rsquo;s now about half complete and
I&rsquo;ve picked up the pace considerably. If you&rsquo;re interested in helping review the
drafts, please let me know!</p>
<p>That&rsquo;s all for today. Thank you for your continued support!</p>
<small class="text-muted">
This work was possible thanks to users who support me financially. Please
consider <a href="https://drewdevault.com/donate">donating to my work</a> or <a
href="https://sourcehut.org">buying a sourcehut.org subscription</a>. Thank you!
</small>]]></description><pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate></item><item><title>DRM leasing: VR for Wayland</title><link>https://drewdevault.com/2019/08/09/DRM-leasing-and-VR-for-Wayland.html</link><description><![CDATA[<p>As those who read my <a href="https://drewdevault.com/2019/07/15/Status-update-July-2019.html">status updates</a>
have been aware, recently I&rsquo;ve been working on bringing VR to Wayland (and vice
versa). The deepest and most technical part of this work is <em>DRM leasing</em>
(Direct Rendering Manager, <em>not</em> Digital Restrictions Management), and I think
it&rsquo;d be good to write in detail about what&rsquo;s involved in this part of the
effort. This work has been sponsored by <a href="https://status.im/">Status.im</a>, as part
of an effort to build a comprehensive Wayland-driven VR workspace. When we got
started, most of the plumbing was missing for VR headsets to be useful on
Wayland, so this has been my focus for a while. The result of this work is
summed up in this crappy handheld video:</p>
<video src="https://yukari.sr.ht/steamvr.webm" controls>
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
</video>
<p>Keith Packard, a long time Linux graphics developer, <a href="https://keithp.com/blogs/DRM-lease/">wrote several blog posts
documenting his work implementing this feature for
X11</a>. My journey was somewhat similar,
though thanks to his work I was able to save a lot of time. The rub of this idea
is that the Wayland compositor, the DRM (Direct Rendering Manager) master, can
&ldquo;lease&rdquo; some of its resources to a client so they can drive your display
directly. DRM is the kernel subsystem we use for enumerating and setting modes,
allocating pixel buffers, and presenting them in sync with the display&rsquo;s refresh
rate. For a number of reasons, minimizing latency being an important one, VR
applications prefer to do these tasks directly rather than be routed through the
display server like most applications are. The main tasks for implementing this
for Wayland were:</p>
<ol>
<li>Draft a <a href="https://lists.freedesktop.org/archives/wayland-devel/2019-July/040768.html">protocol extension</a> for issuing DRM leases</li>
<li>Write implementations for <a href="https://github.com/swaywm/wlroots/pull/1730">wlroots</a> and <a href="https://github.com/swaywm/sway/pull/4289">sway</a></li>
<li>Get a <a href="https://git.sr.ht/~sircmpwn/kmscube">simple test client</a> working</li>
<li>Draft a Vulkan extension for leasing via Wayland</li>
<li>Write an implementation for <a href="https://gitlab.freedesktop.org/mesa/mesa/merge_requests/1509">Mesa&rsquo;s Vulkan WSI implementation</a></li>
<li>Get a more complex <a href="https://git.sr.ht/~sircmpwn/xrgears">Vulkan test client</a> working</li>
<li>Add support to <a href="https://gitlab.freedesktop.org/xorg/xserver/merge_requests/248">Xwayland</a></li>
</ol>
<p>Let&rsquo;s break down exactly what was necessary for each of these steps.</p>
<h2 id="wayland-protocol-extension">Wayland protocol extension</h2>
<p>Writing a protocol extension was the first order of business. There was an
<a href="https://lists.freedesktop.org/archives/wayland-devel/2018-January/036652.html">earlier attempt</a> which petered off in January. I started
with this, by cleaning it up based on my prior experience writing protocols,
normalizing much of the terminology and style, and cleaning up the state
management. After some initial rounds of review, there were some questions to
answer. The most important ones were:</p>
<ul>
<li>How do we identify the display? Should we send the EDID, which may be
bigger than the maximum size of a Wayland message?</li>
<li>Are there security concerns? Could malicious clients read from framebuffers
they weren&rsquo;t given a lease for?</li>
</ul>
<p>The EDID I ended up sending in a side channel (file descriptor to shared
memory), and the latter was proven to be a non-issue by writing a malicious
client and demonstrating that the kernel rejects its attempts to do evil.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;event</span> <span class="na">name=</span><span class="s">&#34;edid&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;description</span> <span class="na">summary=</span><span class="s">&#34;edid&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    The compositor may send this event once the connector is created to
</span></span><span class="line"><span class="cl">    provide a file descriptor which may be memory-mapped to read the
</span></span><span class="line"><span class="cl">    connector&#39;s EDID, to assist in selecting the correct connectors
</span></span><span class="line"><span class="cl">    for lease. The fd must be mapped with MAP_PRIVATE by the recipient.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Note that not all displays have an EDID, and this event will not be
</span></span><span class="line"><span class="cl">    sent in such cases.
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&#34;edid&#34;</span> <span class="na">type=</span><span class="s">&#34;fd&#34;</span> <span class="na">summary=</span><span class="s">&#34;EDID file descriptor&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&#34;size&#34;</span> <span class="na">type=</span><span class="s">&#34;uint&#34;</span> <span class="na">summary=</span><span class="s">&#34;EDID size, in bytes&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/event&gt;</span> 
</span></span></code></pre></div><p>A few more changes would happen to this protocol in the following weeks, but
this was good enough to move on to&hellip;</p>
<h2 id="wlroots--sway-implementation">wlroots &amp; sway implementation</h2>
<p>After a chat with Scott Anderson (the maintainer of DRM support in wlroots) and
thanks to his timely refactoring efforts, the stage was well set for introducing
this feature to wlroots. I had a good idea of how it would take shape. <a href="https://github.com/swaywm/wlroots/pull/1730/files#diff-77b17feac8a8af251811a20e5b9bbdd1">Half of
the work</a> - the state machine which maintains the server-side
view of the protocol - is well trodden ground and was fairly easy to put
together. Despite being a well-understood problem in the wlroots codebase, these
state machines are always a bit tedious to implement correctly, and I was still
to flushing out bugs well into the remainder of this workstream.</p>
<p>The other half of this work was in <a href="https://github.com/swaywm/wlroots/pull/1730/files#diff-8b05a774317ee8e87d51422170f82d4b">the DRM subsystem</a>. We
decided that we&rsquo;d have leased connectors appear &ldquo;destroyed&rdquo; to the compositor,
and thus the compositor would have an opportunity to clean it up and stop using
them, similar to the behavior of when an output is hotplugged. Further changes
were necessary to have the DRM internals elegantly carry around some state for
the leased connector and avoid using the connector itself, as well as dealing
with the termination of the lease (either by the client or by the compositor).
With all of this in place, it&rsquo;s a <a href="https://github.com/swaywm/wlroots/pull/1730/files#diff-8b05a774317ee8e87d51422170f82d4bR1601">simple matter</a> to enumerate
the DRM object IDs for all of the resources we intend to lease and issue the
lease itself.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">nobjects</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nconns</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">wlr_drm_connector</span> <span class="o">*</span><span class="n">conn</span> <span class="o">=</span> <span class="n">conns</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="nf">assert</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">!=</span> <span class="n">WLR_DRM_CONN_LEASED</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">nobjects</span> <span class="o">+=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="o">+</span> <span class="mi">1</span> <span class="cm">/* connector */</span>
</span></span><span class="line"><span class="cl">		<span class="o">+</span> <span class="mi">1</span> <span class="cm">/* crtc */</span>
</span></span><span class="line"><span class="cl">		<span class="o">+</span> <span class="mi">1</span> <span class="cm">/* primary plane */</span>
</span></span><span class="line"><span class="cl">		<span class="o">+</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">cursor</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">)</span> <span class="cm">/* cursor plane */</span>
</span></span><span class="line"><span class="cl">		<span class="o">+</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">num_overlays</span><span class="p">;</span> <span class="cm">/* overlay planes */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">nobjects</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">wlr_log</span><span class="p">(</span><span class="n">WLR_ERROR</span><span class="p">,</span> <span class="s">&#34;Attempted DRM lease with &lt;= 0 objects&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nf">wlr_log</span><span class="p">(</span><span class="n">WLR_DEBUG</span><span class="p">,</span> <span class="s">&#34;Issuing DRM lease with the %d objects:&#34;</span><span class="p">,</span> <span class="n">nobjects</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">uint32_t</span> <span class="n">objects</span><span class="p">[</span><span class="n">nobjects</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nconns</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">wlr_drm_connector</span> <span class="o">*</span><span class="n">conn</span> <span class="o">=</span> <span class="n">conns</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">objects</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">objects</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">objects</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">primary</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">wlr_log</span><span class="p">(</span><span class="n">WLR_DEBUG</span><span class="p">,</span> <span class="s">&#34;connector: %d crtc: %d primary plane: %d&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">conn</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">primary</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">cursor</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">wlr_log</span><span class="p">(</span><span class="n">WLR_DEBUG</span><span class="p">,</span> <span class="s">&#34;cursor plane: %d&#34;</span><span class="p">,</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">cursor</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">objects</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">cursor</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">num_overlays</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">wlr_log</span><span class="p">(</span><span class="n">WLR_DEBUG</span><span class="p">,</span> <span class="s">&#34;+%zd overlay planes:&#34;</span><span class="p">,</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">num_overlays</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">num_overlays</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">objects</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">overlays</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="nf">wlr_log</span><span class="p">(</span><span class="n">WLR_DEBUG</span><span class="p">,</span> <span class="s">&#34;</span><span class="se">\t</span><span class="s">overlay plane: %d&#34;</span><span class="p">,</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">overlays</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">lease_fd</span> <span class="o">=</span> <span class="nf">drmModeCreateLease</span><span class="p">(</span><span class="n">backend</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="n">objects</span><span class="p">,</span> <span class="n">nobjects</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">lessee_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">lease_fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">lease_fd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nf">wlr_log</span><span class="p">(</span><span class="n">WLR_DEBUG</span><span class="p">,</span> <span class="s">&#34;Issued DRM lease %d&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">lessee_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nconns</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">wlr_drm_connector</span> <span class="o">*</span><span class="n">conn</span> <span class="o">=</span> <span class="n">conns</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn</span><span class="o">-&gt;</span><span class="n">lessee_id</span> <span class="o">=</span> <span class="o">*</span><span class="n">lessee_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn</span><span class="o">-&gt;</span><span class="n">crtc</span><span class="o">-&gt;</span><span class="n">lessee_id</span> <span class="o">=</span> <span class="o">*</span><span class="n">lessee_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">=</span> <span class="n">WLR_DRM_CONN_LEASED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn</span><span class="o">-&gt;</span><span class="n">lease_terminated_cb</span> <span class="o">=</span> <span class="n">lease_terminated_cb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">conn</span><span class="o">-&gt;</span><span class="n">lease_terminated_data</span> <span class="o">=</span> <span class="n">lease_terminated_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">wlr_output_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">output</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">lease_fd</span><span class="p">;</span>
</span></span></code></pre></div><p>The <a href="https://github.com/swaywm/sway/pull/4289">sway implementation</a> is very simple. I added a note in wlroots
which exposes whether or not an output is considered &ldquo;non-desktop&rdquo; (a property
which is set for most VR headsets), then sway just rigs up the lease manager and
offers all non-desktop outputs for lease.</p>
<h2 id="kmscube">kmscube</h2>
<p>Testing all of this required the use of a simple test client. During his earlier
work, Keith wrote some patches on top of
<a href="https://gitlab.freedesktop.org/mesa/kmscube/">kmscube</a>, a simple Mesa demo
which renders a spinning cube directly via DRM/KMS/GBM. A <a href="https://git.sr.ht/~sircmpwn/kmscube/commit/60d89ef1d9304427a1289174d9a311ab06e39b44">few simple
tweaks</a> was suitable to get this working through my protocol
extension, and for the first time I saw something rendered on my headset through
sway!</p>
<video src="https://yukari.sr.ht/vr.webm" controls>
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
</video>
<h2 id="vulkan">Vulkan</h2>
<p>Vulkan has a subsystem called WSI - Window System Integration - which handles
the linkage between Vulkan&rsquo;s rendering process and the underlying window system,
such as Wayland, X11, or win32. Keith added an extension to this system called
<a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VK_EXT_acquire_xlib_display">VK_EXT_acquire_xlib_display</a>, which lives on top
of <a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VK_EXT_direct_mode_display">VK_EXT_direct_mode_display</a>, a system for
driving displays directly with Vulkan. As the name implies, this system is
especially X11-specific, so I&rsquo;ve drafted my own VK extension for Wayland:
VK_EXT_acquire_wl_display. This is the crux of it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;command</span> <span class="na">successcodes=</span><span class="s">&#34;VK_SUCCESS&#34;</span> <span class="na">errorcodes=</span><span class="s">&#34;VK_ERROR_INITIALIZATION_FAILED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;proto&gt;&lt;type&gt;</span>VkResult<span class="nt">&lt;/type&gt;</span> <span class="nt">&lt;name&gt;</span>vkAcquireWaylandDisplayEXT<span class="nt">&lt;/name&gt;&lt;/proto&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;param&gt;&lt;type&gt;</span>VkPhysicalDevice<span class="nt">&lt;/type&gt;</span> <span class="nt">&lt;name&gt;</span>physicalDevice<span class="nt">&lt;/name&gt;&lt;/param&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;param&gt;</span>struct <span class="nt">&lt;type&gt;</span>wl_display<span class="nt">&lt;/type&gt;</span>* <span class="nt">&lt;name&gt;</span>display<span class="nt">&lt;/name&gt;&lt;/param&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;param&gt;</span>struct <span class="nt">&lt;type&gt;</span>zwp_drm_lease_manager_v1<span class="nt">&lt;/type&gt;</span>* <span class="nt">&lt;name&gt;</span>manager<span class="nt">&lt;/name&gt;&lt;/param&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;param&gt;&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span> <span class="nt">&lt;name&gt;</span>nConnectors<span class="nt">&lt;/name&gt;&lt;/param&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;param&gt;&lt;type&gt;</span>VkWaylandLeaseConnectorEXT<span class="nt">&lt;/type&gt;</span>* <span class="nt">&lt;name&gt;</span>pConnectors<span class="nt">&lt;/name&gt;&lt;/param&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/command&gt;</span>
</span></span></code></pre></div><p>I chose to leave it up to the user to enumerate the leasable connectors from the
Wayland protocol, then populate these structs with references to the connectors
they want to lease:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;type</span> <span class="na">category=</span><span class="s">&#34;struct&#34;</span> <span class="na">name=</span><span class="s">&#34;VkWaylandLeaseConnectorEXT&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;member&gt;</span>struct <span class="nt">&lt;type&gt;</span>zwp_drm_lease_connector_v1<span class="nt">&lt;/type&gt;</span>* <span class="nt">&lt;name&gt;</span>pConnectorIn<span class="nt">&lt;/name&gt;&lt;/member&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;member&gt;&lt;type&gt;</span>VkDisplayKHR<span class="nt">&lt;/type&gt;</span> <span class="nt">&lt;name&gt;</span>displayOut<span class="nt">&lt;/name&gt;&lt;/member&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/type&gt;</span>
</span></span></code></pre></div><p>Again, this was the result of some iteration and design discussions with other
folks knowledgable in these topics. I owe special thanks to Daniel Stone for
sitting down with me (figuratively, on IRC) and going over ideas for how to
design the Vulkan API. Armed with this specification, I now needed a Vulkan
driver which supported it.</p>
<h2 id="implementing-the-vk-extension-in-mesa">Implementing the VK extension in Mesa</h2>
<p><a href="https://www.mesa3d.org/">Mesa</a> is the premier free software graphics suite
powering graphics on Linux and other operating systems. It includes an
implementation of OpenGL and Vulkan for several GPU vendors, and is the home of
the userspace end of AMDGPU, Intel, nouveau, and other graphics drivers. A
specification is nothing without its implementation, so I set out to
implementing this extension for Mesa. In the end, it turned out to be much
simpler than the corresponding X version. This is the complete code for the WSI
part of this feature:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">drm_lease_handle_lease_fd</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">struct</span> <span class="n">zwp_drm_lease_v1</span> <span class="o">*</span><span class="n">zwp_drm_lease_v1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int32_t</span> <span class="n">leased_fd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">struct</span> <span class="n">wsi_display</span> <span class="o">*</span><span class="n">wsi</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">wsi</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">=</span> <span class="n">leased_fd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">drm_lease_handle_finished</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">struct</span> <span class="n">zwp_drm_lease_v1</span> <span class="o">*</span><span class="n">zwp_drm_lease_v1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">struct</span> <span class="n">wsi_display</span> <span class="o">*</span><span class="n">wsi</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="p">(</span><span class="n">wsi</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">close</span><span class="p">(</span><span class="n">wsi</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">wsi</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">zwp_drm_lease_v1_listener</span> <span class="n">drm_lease_listener</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">drm_lease_handle_lease_fd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="n">drm_lease_handle_finished</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* VK_EXT_acquire_wl_display */</span>
</span></span><span class="line"><span class="cl"><span class="n">VkResult</span>
</span></span><span class="line"><span class="cl"><span class="nf">wsi_acquire_wl_display</span><span class="p">(</span><span class="n">VkPhysicalDevice</span> <span class="n">physical_device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="k">struct</span> <span class="n">wsi_device</span> <span class="o">*</span><span class="n">wsi_device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="k">struct</span> <span class="n">wl_display</span> <span class="o">*</span><span class="n">display</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="k">struct</span> <span class="n">zwp_drm_lease_manager_v1</span> <span class="o">*</span><span class="n">manager</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="kt">int</span> <span class="n">nConnectors</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="n">VkWaylandLeaseConnectorEXT</span> <span class="o">*</span><span class="n">connectors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">struct</span> <span class="n">wsi_display</span> <span class="o">*</span><span class="n">wsi</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="k">struct</span> <span class="n">wsi_display</span> <span class="o">*</span><span class="p">)</span> <span class="n">wsi_device</span><span class="o">-&gt;</span><span class="n">wsi</span><span class="p">[</span><span class="n">VK_ICD_WSI_PLATFORM_DISPLAY</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/* XXX no support for mulitple leases yet */</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="p">(</span><span class="n">wsi</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">VK_ERROR_INITIALIZATION_FAILED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/* XXX no support for mulitple connectors yet */</span>
</span></span><span class="line"><span class="cl">   <span class="cm">/* The solution will eventually involve adding a listener to each
</span></span></span><span class="line"><span class="cl"><span class="cm">    * connector, round tripping, and matching EDIDs once the lease is
</span></span></span><span class="line"><span class="cl"><span class="cm">    * granted. */</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="p">(</span><span class="n">nConnectors</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">VK_ERROR_INITIALIZATION_FAILED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">struct</span> <span class="n">zwp_drm_lease_request_v1</span> <span class="o">*</span><span class="n">lease_request</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">      <span class="nf">zwp_drm_lease_manager_v1_create_lease_request</span><span class="p">(</span><span class="n">manager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nConnectors</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">zwp_drm_lease_request_v1_request_connector</span><span class="p">(</span><span class="n">lease_request</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                 <span class="n">connectors</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pConnectorIn</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">struct</span> <span class="n">zwp_drm_lease_v1</span> <span class="o">*</span><span class="n">drm_lease</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">      <span class="nf">zwp_drm_lease_request_v1_submit</span><span class="p">(</span><span class="n">lease_request</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="nf">zwp_drm_lease_request_v1_destroy</span><span class="p">(</span><span class="n">lease_request</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="nf">zwp_drm_lease_v1_add_listener</span><span class="p">(</span><span class="n">drm_lease</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">drm_lease_listener</span><span class="p">,</span> <span class="n">wsi</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="nf">wl_display_roundtrip</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="p">(</span><span class="n">wsi</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">VK_ERROR_INITIALIZATION_FAILED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">nconn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">drmModeResPtr</span> <span class="n">res</span> <span class="o">=</span> <span class="nf">drmModeGetResources</span><span class="p">(</span><span class="n">wsi</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">drmModeObjectListPtr</span> <span class="n">lease</span> <span class="o">=</span> <span class="nf">drmModeGetLease</span><span class="p">(</span><span class="n">wsi</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span><span class="kt">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">res</span><span class="o">-&gt;</span><span class="n">count_connectors</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="p">(</span><span class="kt">uint32_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">lease</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">connectors</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">lease</span><span class="o">-&gt;</span><span class="n">objects</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">         <span class="k">struct</span> <span class="n">wsi_display_connector</span> <span class="o">*</span><span class="n">connector</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="nf">wsi_display_get_connector</span><span class="p">(</span><span class="n">wsi_device</span><span class="p">,</span> <span class="n">res</span><span class="o">-&gt;</span><span class="n">connectors</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">         <span class="cm">/* TODO: Match EDID with requested connector */</span>
</span></span><span class="line"><span class="cl">         <span class="n">connectors</span><span class="p">[</span><span class="n">nconn</span><span class="p">].</span><span class="n">displayOut</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="nf">wsi_display_connector_to_handle</span><span class="p">(</span><span class="n">connector</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">         <span class="o">++</span><span class="n">nconn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="nf">drmModeFreeResources</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">VK_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Rigging it up to each driver&rsquo;s WSI shim is pretty straightforward from this
point. I only did it for radv - AMD&rsquo;s Vulkan driver (cause that&rsquo;s the hardware I
was using at the time) - but the rest should be trivial to add. Equipped with a
driver in hand, it&rsquo;s time to make a Real VR Application work on Wayland.</p>
<h2 id="xrgears">xrgears</h2>
<p><a href="https://gitlab.com/lubosz/xrgears">xrgears</a> is another simple demo application
like kmscube - but designed to render a VR scene. It leverages Vulkan and
<a href="http://www.openhmd.net/">OpenHMD</a> (Open Head Mounted Display) to display this
scene and stick the camera to your head. With the Vulkan extension implemented,
it was a fairly simple matter to <a href="https://git.sr.ht/~sircmpwn/xrgears/commit/41ef1d1dfe3e56766d1f8b72b335567eb7842d04">rig up a Wayland backend</a>. The
result:</p>
<video src="https://yukari.sr.ht/xrgears.webm" controls>
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
</video>
<h2 id="xwayland">Xwayland</h2>
<p>The final step was to integrate this extension with Xwayland, so that X
applications which took advantage of Keith&rsquo;s work would work via Xwayland. This
ended up being more difficult than I expected for one reason in particular:
modes. Keith&rsquo;s Vulkan extension is designed in two steps:</p>
<ol>
<li>Convert an RandR output into a VkDisplayKHR</li>
<li>Acquire a lease for a set of VkDisplayKHRs</li>
</ol>
<p>Between these steps, you can query the modes (available resolutions and refresh
rates) of the display. However, the Wayland protocol I designed does not let you
query modes until <em>after</em> you get the DRM handle, at which point you should
query them through DRM, thus reducing the number of sources of truth and
simplifying things considerably. This is arguably a design misstep in the
original Vulkan extension, but it&rsquo;s shipped in a lot of software and is beyond
fixing. So how do we deal with it?</p>
<p>One way (which was suggested at one point) would be to change the protocol to
include the relevant mode information, so that Xwayland could populate the RandR
modes from it. I found this distasteful, because it was making the protocol more
complex for the sake of a legacy system. Another option would be to make a
second protocol which includes this extra information especially for Xwayland,
but this also seemed like a compromise that compositors would rather not make.
Yet another option would be to have Xwayland request a lease with zero objects
and scan connectors itself, but zero-object leases are not possible.</p>
<p>The option I ended up going with is to have Xwayland open the DRM device itself
and scan connectors there. This is less palatable because (1) we can&rsquo;t be sure
which DRM device is correct, and (2) we can&rsquo;t be sure Xwayland will have
permission to read it. We&rsquo;re still not sure how best to solve this in the long
term. As it stands, this approach is sufficient to get it working in the common
case. The code looks something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="n">RRModePtr</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">xwl_get_rrmodes_from_connector_id</span><span class="p">(</span><span class="kt">int32_t</span> <span class="n">connector_id</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">nmode</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">npref</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">drmDevicePtr</span> <span class="n">devices</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">drmModeConnectorPtr</span> <span class="n">conn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">drmModeModeInfoPtr</span> <span class="n">kmode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">RRModePtr</span> <span class="o">*</span><span class="n">rrmodes</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">drm</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pref</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">nmode</span> <span class="o">=</span> <span class="o">*</span><span class="n">npref</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* TODO: replace with zero-object lease once kernel supports them */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">drmGetDevices2</span><span class="p">(</span><span class="n">DRM_NODE_PRIMARY</span><span class="p">,</span> <span class="n">devices</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="o">||</span> <span class="o">!*</span><span class="n">devices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ErrorF</span><span class="p">(</span><span class="s">&#34;Failed to enumerate DRM devices&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">drm</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">devices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">drmFreeDevices</span><span class="p">(</span><span class="n">devices</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">conn</span> <span class="o">=</span> <span class="nf">drmModeGetConnector</span><span class="p">(</span><span class="n">drm</span><span class="p">,</span> <span class="n">connector_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">conn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">close</span><span class="p">(</span><span class="n">drm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ErrorF</span><span class="p">(</span><span class="s">&#34;drmModeGetConnector failed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">rrmodes</span> <span class="o">=</span> <span class="nf">xallocarray</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">count_modes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RRModePtr</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rrmodes</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">close</span><span class="p">(</span><span class="n">drm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ErrorF</span><span class="p">(</span><span class="s">&#34;Failed to allocate connector modes&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* This spaghetti brought to you courtesey of xf86RandrR12.c
</span></span></span><span class="line"><span class="cl"><span class="cm">     * It adds preferred modes first, then non-preferred modes */</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">pref</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">pref</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">pref</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">count_modes</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">kmode</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">modes</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">((</span><span class="n">pref</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="p">((</span><span class="n">kmode</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">&amp;</span> <span class="n">DRM_MODE_TYPE_PREFERRED</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">xRRModeInfo</span> <span class="n">modeInfo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">RRModePtr</span> <span class="n">rrmode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">nameLength</span> <span class="o">=</span> <span class="nf">strlen</span><span class="p">(</span><span class="n">kmode</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">hdisplay</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">dotClock</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">clock</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">hSyncStart</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">hsync_start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">hSyncEnd</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">hsync_end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">hTotal</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">htotal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">hSkew</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">hskew</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">vdisplay</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">vSyncStart</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">vsync_start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">vSyncEnd</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">vsync_end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">vTotal</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">vtotal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">modeInfo</span><span class="p">.</span><span class="n">modeFlags</span> <span class="o">=</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="n">rrmode</span> <span class="o">=</span> <span class="nf">RRModeGet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">modeInfo</span><span class="p">,</span> <span class="n">kmode</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">rrmode</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">rrmodes</span><span class="p">[</span><span class="o">*</span><span class="n">nmode</span><span class="p">]</span> <span class="o">=</span> <span class="n">rrmode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="o">*</span><span class="n">nmode</span> <span class="o">=</span> <span class="o">*</span><span class="n">nmode</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="o">*</span><span class="n">npref</span> <span class="o">=</span> <span class="o">*</span><span class="n">npref</span> <span class="o">+</span> <span class="n">pref</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">close</span><span class="p">(</span><span class="n">drm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">rrmodes</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A simple update to the Wayland protocol was necessary to add the <code>CONNECTOR_ID</code>
atom to the RandR output, which is used by Mesa&rsquo;s Xlib WSI code for acquiring
the display, and was reused here to line up a connector offered by the Wayland
compositor with a connector found in the kernel. The <a href="https://gitlab.freedesktop.org/xorg/xserver/merge_requests/248">rest of the
changes</a> were pretty simple, and the result is that SteamVR works,
capping everything off nicely:</p>
<video src="https://yukari.sr.ht/steamvr.webm" controls>
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
</video>]]></description><pubDate>Fri, 9 Aug 2019 00:00:00 +0000</pubDate></item><item><title>FOSS contributor tracks</title><link>https://drewdevault.com/2019/07/29/FOSS-contributor-tracks.html</link><description><![CDATA[<p>Just like many companies have different advancement tracks for their employees
(for example, a management track and an engineering track), similar concepts
exist in free software projects. One of the roles of a maintainer is to help
contributors develop into the roles which best suit them. I&rsquo;d like to explain
what this means to me in my role as a maintainer of several projects, though I
should mention upfront that I&rsquo;m just some guy and, while I can explain what has
and hasn&rsquo;t worked for me, I can&rsquo;t claim to have all of the answers. People are
hard.</p>
<p>There are lots of different tasks which need doing on a project. A few which
come up fairly often include:</p>
<ul>
<li>End-user support</li>
<li>Graphic design</li>
<li>Marketing</li>
<li>Release planning</li>
<li>Reviewing code</li>
<li>Translations</li>
<li>Triaging tickets</li>
<li>Writing code</li>
<li>Writing documentation</li>
</ul>
<p>Within these tasks there&rsquo;s room still for more specialization - different
modules have different maintainers, each contributor&rsquo;s skills may be applicable
to different parts of the codebase, some people may like blogging about the
project where others like representing the project at conferences, and so on. To
me, one of my most important jobs is to figure out these relationships between
tasks and people.</p>
<p>There are several factors that go into this. Keeping an eye on code reviews,
social channels, etc, gives you a good pulse on what people are good at now.
Talking with them directly and discussing possible future work is a good way to
understand what they want to work on. I also often consider what they could be
good at but don&rsquo;t have exposure to yet, and encourage them to take on more of
these tasks. The most common case where I try to get people to branch out is
code review - once they&rsquo;ve contributed to a module they&rsquo;re put on the shortlist
for reviewers for future changes to nearby code. Don&rsquo;t be afraid to take risks -
a few bugs is a small price to pay for an experienced contributor.</p>
<p>This also touches on another key part of this work - fostering collaboration.
For example, if someone is taking on a cross-cutting task, I&rsquo;ll give them the
names of experts on all of the affected modules so they can ask questions and
seek buy-in on their approach. Many developers aren&rsquo;t interested in end-user
support, so getting people who are interested in this to bubble up technical
issues when they&rsquo;re found is helpful as well.</p>
<p>The final step is to gradually work your way out of the machine. Just like you
onboard someone with feature development or code review, you can onboard people
with maintainer tasks. If someone asks you to connect them to experts on some
part of the code, defer to a senior contributor - who has likely asked you the
same question at some point. Ask a contributor to go over the shortlog and
prepare a draft for the next release notes. Pull a trusted contributor aside and
ask them what they think needs to be improved in the project - then ask them to
make those improvements, and equip them with any tools they need to accomplish
it.</p>
<p>One role I tend to reserve for myself is conflict prevention and moderation. I
keep a light watch on collaboration channels and periodically sync with major
contributors, keeping a pulse for the flow of information through the project.
When arguments start brewing or things start getting emotional, I try to notice
early and smooth things over before they get heated. At an impasse, I&rsquo;ll make a
final judgement call on a feature, design decision, or whatever else. By making
the decision, I aim to make it neither party&rsquo;s fault that someone didn&rsquo;t get
their way. Instead, I point any blame at myself, and rely on the mutual trust
between myself and the contributors to see the decision through amicably. When
this works correctly, it can help preserve a good relationship between each
party.</p>
<p>If you&rsquo;re lucky, the end result is a project which can grow arbitrarily large,
with contributors bringing a variety of skills to support each other at every
level and enjoy the work they&rsquo;re doing. The bus factor is low and everyone
maintains a healthy and productive relationship with the project - yourself
included.</p>]]></description><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate></item><item><title>Status update, July 2019</title><link>https://drewdevault.com/2019/07/15/Status-update-July-2019.html</link><description><![CDATA[<p>Today I received the keys to my new apartment, which by way of not being
directly in the middle of the city<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> saves me a decent chunk of money - and
allows me to proudly announce that I have officially broken even on doing free
software full time! I owe a great deal of thanks to all of you who have <a href="https://drewdevault.com/donate">donated
to support my work</a> or purchased a paid
<a href="https://sourcehut.org">SourceHut</a> account. I&rsquo;ve dreamed of sustainably working
on free software for a long, long time, and I&rsquo;m very grateful for all of your
support in helping realize that dream. Now let me share with you what your money
has bought over the past month!</p>
<p>First, my <a href="https://drewdevault.com/make-a-blog">make a blog</a> offer has closed
for the time being, and the world is now 13 blogs richer for it. Be sure to
check them out! I have also started a mailing list for tech writers: the <a href="https://lists.sr.ht/~sircmpwn/free-writers-club">free
writers club</a>, which I
encourage anyone using free software to blog about technology to join for
editorial advice, software recommendations, and periodic reminders to keep
writing. The offer to get paid for your own new blog will reopen in the future,
keep an eye out!</p>
<p>As far as projects are concerned, lots of good stuff this month. aerc has been
making excellent progress. We just pulled in the first batch of patches adding
maildir support, and will soon have sendmail and mbox support as well. We&rsquo;ve
also begun on mouse support, and you can now click to switch between tabs. The
initial patches for tab completion have also been added. Additional changes
include an :unsubscribe command to unsubscribe from marketing emails and mailing
lists, basic search functionality, OAuth IMAP authentication, changing config
options at runtime, and DNS lookups to complete your settings in the new account
wizard more quickly. Building more upon these features, and a handler for mailto
links, are the main blockers for aerc 0.2.0.</p>
<p>In Wayland news, VR work continues. I&rsquo;ve taken on the goal of implementing DRM
leasing for Wayland, which will allow VR applications to take exclusive control
over the headset&rsquo;s graphical resources from Wayland compositor. A similar
technology exists for X11, and I&rsquo;ve written a Wayland protocol for the same
purpose on Wayland. I&rsquo;ve also written a Vulkan extension to utilize this
protocol in Vulkan&rsquo;s WSI layer. I&rsquo;ve written implementations of these for
wlroots, sway, mesa, and the radv (AMD) Vulkan driver. The result: a working VR
demo on Sway (audio warning):</p>
<p><video src="https://yukari.sr.ht/xrgears.webm" controls></video></p>
<p>There&rsquo;s still some details to sort out on the standardization of these
extensions, which are under discussion now. In the coming weeks I hope to have
an implementation for Xwayland (which will get working games based on Steam&rsquo;s
OpenVR runtime), and get a proof-of-concept of a VR-driven Wayland compositor
based on the demo shown in the previous status update. Exciting stuff!</p>
<p>I&rsquo;ve also had time to write a few more chapters for my Wayland book, which I&rsquo;ll
be speeding up my work on. I&rsquo;ll soon be leaving for an extended trip to Japan,
and on these grueling flights I&rsquo;ll have plenty of time to work on it. In
additional Wayland news, we&rsquo;ve been chugging along with small bugfixes and
improvements to wlroots and sway, and implementing more plumbing work to round
out our implementation of everything. Our work continues to evolve into the most
robust Wayland implementation available today, and I can only see it getting
stronger.</p>
<p>On SourceHut, I have plenty of developments to share, but will leave the details
for the <a href="https://lists.sr.ht/~sircmpwn/sr.ht-announce">sr.ht-announce mailing
list</a>. The most exciting news is
that <a href="https://alpinelinux.org">Alpine Linux</a>, my favorite Linux distribution,
has completed their mailing list infrastructure migration to <a href="https://lists.alpinelinux.org">their own
lists.sr.ht instance</a>! I&rsquo;ve also been hard at
work expanding lists.sr.ht&rsquo;s capabilities to this end. The other big piece of
news was announced on my blog last week: <a href="https://drewdevault.com/2019/07/08/Announcing-annotations-for-sourcehut.html">code
annotations</a>.
All of our services have also been upgraded to Alpine 3.10, and the Alpine
mirror reorganized a bit to make future upgrades smooth.  There&rsquo;s all sorts of
other goodies to share, but I&rsquo;ll leave the rest for the sr.ht-announce post
later today.</p>
<p>All sorts of other little things have gotten done, like sending patches upstream
for kmscube fixes, minor improvements to scdoc, writing a new build system for
mrsh, improvements to openring&hellip; but I&rsquo;m running out of patience and I imagine
you are, too. Again I&rsquo;m eternally grateful for your support: thank you. I&rsquo;ll see
you again for the next status update, same time next month!</p>
<small class="text-muted">
This work was possible thanks to users who support me financially. Please
consider <a href="https://drewdevault.com/donate">donating to my work</a> or <a
href="https://sourcehut.org">buying a sourcehut.org subscription</a>. Thank you!
</small>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I can see city hall out the window of my old apartment&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate></item><item><title>Announcing code annotations for SourceHut</title><link>https://drewdevault.com/2019/07/08/Announcing-annotations-for-sourcehut.html</link><description><![CDATA[<p>Today I&rsquo;m happy to announce that code annotations are now available for
<a href="https://sourcehut.org">SourceHut</a>! <img style="display: inline; height: 1.2rem"
src="https://drewdevault.com/img/party.png" /> These allow you to decorate your code with arbitrary
links and markdown. The end result looks something like this:</p>
<p><strong>NOTICE</strong>: Annotations were ultimately removed from sourcehut.</p>
<p><img src="https://sr.ht/w767.png" alt=""></p>
<small class="text-muted">
  <a href="https://sourcehut.org">SourceHut</a> is the "hacker's forge", a
  100% open-source platform for hosting Git &amp; Mercurial repos, bug trackers,
  mailing lists, continuous integration, and more. No JavaScript required!
</small>
<p>The annotations shown here are sourced from a JSON file which you can generate
and upload during your CI process. It looks something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;98bc0394a2f15171fb113acb5a9286a7454f22e7&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;markdown&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;lineno&#34;</span><span class="p">:</span> <span class="mi">33</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;title&#34;</span><span class="p">:</span> <span class="s2">&#34;1 reference&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;content&#34;</span><span class="p">:</span> <span class="s2">&#34;- [../main.c:123](https://example.org)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;link&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;lineno&#34;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;colno&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;len&#34;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;to&#34;</span><span class="p">:</span> <span class="s2">&#34;#L6&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span></code></pre></div><p>You can probably infer from this that annotations are very powerful. Not only
can you annotate your code&rsquo;s semantic elements to your heart&rsquo;s content, but you
can also do exotic things we haven&rsquo;t thought of yet, for every programming
language you can find a parser for.</p>
<p>I&rsquo;ll be going into some detail on the thought process that went into this
feature&rsquo;s design and implementation in a moment, but if you&rsquo;re just excited and
want to try it out, here are a few interesting annotated repos to browse:</p>
<ul>
<li><a href="https://git.sr.ht/~sircmpwn/scdoc/tree/master/src/main.c">~sircmpwn/scdoc</a>: man page generator (C)</li>
<li><a href="https://git.sr.ht/~sircmpwn/aerc/tree/master/widgets/msgviewer.go">~sircmpwn/aerc</a>: TUI email client (Go)</li>
<li><a href="https://git.sr.ht/~mcf/cproc/tree/master/scan.c">~mcf/cproc</a>: C compiler (C)</li>
</ul>
<p>And here are the docs for generating your own: <a href="https://man.sr.ht/git.sr.ht/annotations.md">annotations on
git.sr.ht</a>. Currently annotators are
available for C and Go, and I intend to write another for Python. For the rest,
I&rsquo;ll be relying on the community to put together annotators for their favorite
programming languages, and to help me expand on the ones I&rsquo;ve built.</p>
<h2 id="design">Design</h2>
<p>A lot of design thought went into this feature, but I knew one thing from the
outset: I wanted to make a generic system that users could use to annotate their
source code in any manner they chose. My friend Andrew Kelley (of
<a href="https://ziglang.org/">Zig</a> fame) once expressed to me his frustration with
GitHub&rsquo;s refusal to implement syntax highlighting for &ldquo;small&rdquo; languages, citing
a shortage of manpower. It&rsquo;s for this reason that it&rsquo;s important to me that
SourceHut&rsquo;s open-source platform allows users large and small to volunteer to
build the perfect integration for their needs - I don&rsquo;t scale alone<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>To get a head start for the most common use-cases - scanning source files and
linking references and definitions together - the best approach was unclear. I
spent a lot of time studying <a href="http://ctags.sourceforge.net/">ctags</a>, for
example, which supports a huge set of programming languages, but unfortunately
only finds definitions. I thought about combining this with another approach for
finding references, but the only generic library with lots of parsers I&rsquo;m aware
of is <a href="http://pygments.org/">Pygments</a>, and I didn&rsquo;t necessarily want to bring
Python into every user&rsquo;s CI process if they weren&rsquo;t already using it. That
approach would also make it more difficult to customize the annotations for each
language. Other options I considered were
<a href="http://cscope.sourceforge.net/">cscope</a> and
<a href="https://www.gnu.org/software/global/">gtags</a>, but the former doesn&rsquo;t have many
programming languages supported (making the tradeoff questionable), and the
latter just uses Pygments anyway.</p>
<p>So I decided: I&rsquo;m going to write my own annotators for each language. Or at
least the languages I use the most:</p>
<ul>
<li>C, because I like it but also because
<a href="https://git.sr.ht/~sircmpwn/scdoc">scdoc</a> is the demo repo shown on the
<a href="https://sourcehut.org">SourceHut marketing page</a>.</li>
<li>Python, because SourceHut is largely written in Python and using it to browse
itself would be cool.</li>
<li>Go, because parts of SourceHut are written in it but also because I use it a
lot for <a href="https://git.sr.ht/~sircmpwn/aerc">my own projects</a>. I also knew that
Go had at least <em>some</em> first-class support for working with its AST - and boy
was I in for a surprise.</li>
</ul>
<p>With these initial languages decided, let&rsquo;s turn to the implementations.</p>
<h2 id="annotating-c-code">Annotating C code</h2>
<p>I began with the C annotator, because I knew it would be the most difficult.
There does not exist any widely available standalone C parsing library to
provide C programs with access to an AST. There&rsquo;s LLVM, but I have a deeply held
belief that programming language compiler and introspection tooling should be
implemented in the language itself. So, I set about to write a C parser from
scratch.</p>
<p>Or, almost from scratch. There exist two standard POSIX tools for writing
compilers with: <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/lex.html">lex</a> and <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/yacc.html">yacc</a>, which are respectively a lexer
generator and a compiler compiler. Additionally, there are <a href="http://www.quut.com/c/ANSI-C-grammar-y.html">pre-fab lex and
yacc files</a> which <em>mostly</em>
implement the C11 standard grammar. However, C is <a href="https://eli.thegreenplace.net/2007/11/24/the-context-sensitivity-of-cs-grammar/">not a context-free
language</a>, so additional work was necessary to track typedefs and use
them to change future tokens emitted by the scanner. A little more work was also
necessary for keeping track of line and column numbers in the lexer. Overall,
however, this was relatively easy, and in less than a day&rsquo;s work I had a fully
functional C11 parser.</p>
<p>However, my celebration was short-lived as I started to feed my parser C
programs from the wild. The GNU C Compiler, GCC, implements many C extensions,
and their use, while inadvisable, is extremely common. Not least of the
offenders is glibc, and thus running my parser on any system with glibc headers
installed would likely immediately run into syntax errors.  GCC&rsquo;s extensions are
not documented in the form of an addendum to the C specification, but rather as
end-user documentation and a 15 million lines-of-code compiler for you to
reverse engineer. It took me almost a week of frustration to get a parser which
worked passably on a large subset of the C programs found in the wild, and I
imagine I&rsquo;ll be dealing with GNU problems for years to come. Please don&rsquo;t use C
extensions, folks.</p>
<p>In any case, the result now works fairly well for a lot of programs, and I have
plans on expanding it to integrate more nicely with build systems like meson.
Check out the code here: <a href="https://git.sr.ht/~sircmpwn/annotatec">annotatec</a>. The
features of the C annotator include:</p>
<ul>
<li>Annotating function definitions with a list of files/linenos which call them</li>
<li>Linking function calls to the definition of that function</li>
</ul>
<p>In the future I intend to add support for linking to external symbols as well -
for example, linking to the POSIX spec for functions specified by POSIX, or to
the Linux man pages for Linux calls. It would also be pretty cool to support
linking between related projects, so that wlroots calls in sway can be linked to
their declarations in the wlroots repo.</p>
<h2 id="annotating-go-code">Annotating Go code</h2>
<p>The Go annotator was far easier. I started over my morning cup of coffee today
and I was finished with the basics by lunch. Go has a bunch of support in the
standard library for parsing and analyzing Go programs - I was very impressed:</p>
<ul>
<li><a href="https://golang.org/pkg/go/ast/">go/ast</a></li>
<li><a href="https://golang.org/pkg/go/scanner/">go/scanner</a></li>
<li><a href="https://golang.org/pkg/go/token/">go/token</a></li>
<li><a href="https://golang.org/pkg/go/types/">go/types</a></li>
</ul>
<p>To support Go 1.12&rsquo;s go modules, the experimental (but good enough)
<a href="https://godoc.org/golang.org/x/tools/go/packages">packages</a> module is available
as well. All of this is nicely summarized by a lovely document in the <a href="https://github.com/golang/example/tree/master/gotypes">golang
examples repository</a>. The
type checker is also available as a library, something which is less common even
among languages with parsers-as-libraries, and allows for many features which
would be very difficult without it. Nice work, Go!</p>
<p>The <a href="https://git.sr.ht/~sircmpwn/annotatego">resulting annotator</a> clocks in at
just over 250 lines of code - compare that to the C annotator&rsquo;s ~1,300 lines of
C, lex, and yacc source code. The Go annotator is more featureful, too, it can:</p>
<ul>
<li>Link function calls to their definitions, and in reverse</li>
<li>Link method calls to their definitions, and in reverse</li>
<li>Link variables to their definitions, even in other files</li>
<li>Link to godoc for symbols defined in external packages</li>
</ul>
<p>I expect a lot more to be possible in the future. It might get noisy if you turn
everything on, so each annotation type is gated behind a command line flag.</p>
<h2 id="displaying-annotations">Displaying annotations</h2>
<p>Displaying these annotations required a bit more effort than I would have liked,
but the end result is fairly clean and reusable. Since SourceHut uses Pygments
for syntax highlighting, I ended up writing a <a href="http://pygments.org/docs/formatterdevelopment/">custom
Formatter</a> based on the existing
Pygments HtmlFormatter. The result is the <a href="https://git.sr.ht/~sircmpwn/git.sr.ht/tree/master/gitsrht/annotations.py">AnnotationFormatter</a>, which splices annotations into the highlighted code. One downside of
this approach is that it works at the token level - a more sophisticated
implementation will be necessary for annotations that span more than a single
token. Annotations are fairly expensive to render, so the rendered HTML is
stowed in Redis.</p>
<h2 id="the-future">The future?</h2>
<p>I intend to write a Python annotator soon, and I&rsquo;ll be relying on the community
to build more. If you&rsquo;re looking for a fun weekend hack and a chance to learn
more about your favorite programming language, this&rsquo;d be a great project. The
format for annotations on SourceHut is also pretty generalizable, so I encourage
other code forges to reuse it so that our annotators are useful on every code
hosting platform.</p>
<p>builds.sr.ht will also soon grow first-class support for making these annotators
available to your build process, as well as for making an OAuth token available
(ideally with a limited set of permissions) to your build environment. Rigging
up an annotator is a bit involved today (<a href="https://man.sr.ht/git.sr.ht/annotations.md">though the docs
help</a>), and streamlining that
process will be pretty helpful. Additionally, this feature is only available for
git.sr.ht, though it should generalize to hg.sr.ht fairly easily and I hope
we&rsquo;ll see it available there soon.</p>
<p>I&rsquo;m also looking forward to seeing more novel use-cases for annotation. Can we
indicate code coverage by coloring a gutter alongside each line of code? Can we
link references to ticket numbers in the comments to your bug tracker? If you
have any cool ideas, I&rsquo;m all ears. Here&rsquo;s that list of cool annotated repos to
browse again, if you made it this far and want to check them out:</p>
<ul>
<li><a href="https://git.sr.ht/~sircmpwn/scdoc/tree/master/src/main.c">~sircmpwn/scdoc</a>: man page generator (C)</li>
<li><a href="https://git.sr.ht/~sircmpwn/aerc/tree/master/widgets/msgviewer.go">~sircmpwn/aerc</a>: TUI email client (Go)</li>
<li><a href="https://git.sr.ht/~mcf/cproc/tree/master/scan.c">~mcf/cproc</a>: C compiler (C)</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For the syntax highlighting problem, by the way, this is accomplished by using Pygments. Improvements to Pygments reach not only SourceHut, but a large community of projects, making the software ecosystem better for everyone.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 8 Jul 2019 00:00:00 +0000</pubDate></item><item><title>Absence of certain features in IRC considered a feature</title><link>https://drewdevault.com/2019/07/01/Absence-of-features-in-IRC.html</link><description><![CDATA[<p>The other day a friend of mine (an oper on Freenode) wanted to talk about IRC
compared to its peers, such as Matrix, Slack, Discord, etc. The ensuing
discussion deserves summarization here. In short: I&rsquo;m glad that IRC doesn&rsquo;t have
the features that are &ldquo;showstoppers&rdquo; for people choosing other platforms, and
I&rsquo;m worried that attempts to bring these showstopping &ldquo;features&rdquo; to IRC will
worsen the platform for the people who use it now.</p>
<p>On IRC, features like embedded images, a nice UX for messages longer than a few
lines (e.g. pasted code), threaded messages, etc; are absent. Some sort of
&ldquo;graceful degradation&rdquo; to support mixed channels with clients which support
these features and clients which don&rsquo;t may be possible, but it still <em>degrades</em>
the experience for many people. By instead making everyone work within the
limitations of IRC, we establish a shared baseline, and expressing yourself
within these limitations is not only possible but makes a better experience for
everyone.</p>
<p>Remember that [not everyone is like you][old hardware]. I regularly chat with
people on ancient hardware that slows to a crawl when a web browser is
running<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, or people working from a niche operating system for which porting a
graphical client is a herculean task, or people with accessibility concerns for
whom the &ldquo;one line of text per statement&rdquo; fits nicely into their TTS<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> system
and screenreading Slack is a nightmare.</p>
<p>Let&rsquo;s consider what happens when these features are added but non-uniformly
available. Let&rsquo;s use rich text as an example and examine the fallback
implementation. Which of these is better?</p>
<p><span>(A) &lt;user&gt; check out [this website](<a href="https://example.org"><a href="https://example.org">https://example.org</a></a>)</span></p>
<p><span>(B) &lt;user&gt; check out this website: <a href="https://example.org"><a href="https://example.org">https://example.org</a></a></span></p>
<p>Example B is what people naturally do when rich text is unavailable, and most
clients will recognize it as a link and make it clickable anyway. But many
clients cannot and will not display example A as a link, which makes it harder
to read. Example A also makes phishing <em>much</em> easier.</p>
<p>Here&rsquo;s another example: how about a nice UI for long messages, such as pasted
code snippets? Let&rsquo;s examine how three different clients would implement this:
(1) a GUI client, (2) a TUI<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> client, and (3) a client which refuses to
implement it or is unmaintained<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>The first case is the happy path, we probably get a little scrollbox that the
user can interact with their mouse. Let&rsquo;s say <a href="https://weechat.org/">Weechat</a>
takes up option 2, but how do they do that? Some terminal emulators have mouse
support, so they could have a similar box, but since Weechat is primarily
keyboard-driven (and some terminal emulators do not support mice!), a
keyboard-based alternative will be necessary. Now we have to have some kind of
command or keybinding for scrolling through the message, and picking which of
the last few long messages we want to scroll through. This will have to be
separate from scrolling through the backlog normally, of course. The third
option is the worst: they just see a hundred lines pasted into their backlog,
which is already highly scorned behavior on most IRC channels. Only the GUI
users come away from this happy, and on IRC they&rsquo;re in the minority.</p>
<p>Some IRC clients (Matrix) have this feature today, but most Matrix users don&rsquo;t
realize what a nuisance they&rsquo;re being on the chat. Here&rsquo;s what they see:</p>
<p><img src="https://sr.ht/VOeY.png" alt=""></p>
<p>And here&rsquo;s what I see:</p>
<p><img src="https://sr.ht/HZ7Z.png" alt=""></p>
<p>Conservative improvements built on top of existing IRC norms, such as <a href="https://thelounge.chat/">The
Lounge</a>, are much better. Most people post images on
IRC as URLs, which clients can do a quick HEAD request against and embed if the
mimetype is appropriate:</p>
<p><img src="https://sr.ht/9RsR.png" alt=""></p>
<p>For most of these features, I think that people who have and think they need
them are in fact unhappier for having them. What are some of the most common
complaints from Slack users et al? &ldquo;It&rsquo;s distracting.&rdquo; &ldquo;It&rsquo;s hard to keep up
with what people said while I was away.&rdquo; &ldquo;Threads get too long and hard to
understand.&rdquo; Does any of this sound familiar? Most of these problems are caused
by or exacerbated by features which are missing from IRC.  It&rsquo;s distracting
because your colleagues are posting gifs all day. It&rsquo;s hard to keep up with
because the infinite backlog encourages a culture of catching up rather than
setting the expectation that conversations are ephemeral<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>. Long conversations
shouldn&rsquo;t be organized into threads, but moved into email or another medium more
suitable for that purpose.</p>
<p>None of this even considers what <em>is</em> good about IRC. It&rsquo;s a series of
decentralized networks built on the shoulders of volunteers. It&rsquo;s venerable and
well-supported with hundreds of client and server implementations. You can
connect to IRC manually using telnet and have a pretty good user experience!
Accordingly, <a href="https://drewdevault.com/2018/03/10/How-to-write-an-IRC-bot.html">a working IRC bot can be written in about 2
minutes</a>. No one is trying to monetize you on IRC.
It&rsquo;s free, in both meanings, and nothing which has come since has presented a
compelling alternative. I&rsquo;ve used IRC all day, every day for over ten years, and
that&rsquo;s not even half of IRC&rsquo;s lifetime. It&rsquo;s outlived everything else by years
and years, and it&rsquo;s not going anywhere soon.</p>
<p>In summary, I like IRC the way it is. It has problems which we ought to address,
but many people focus on the wrong problems. The culture that it fosters is good
and worth preserving, even at the expense of the features users of other
platforms demand - or those users themselves.</p>
<hr>
<p>P.S. A friend pointed out that the migration of non-hackers away from IRC is
like a reverse <a href="https://en.wikipedia.org/wiki/Eternal_September">Eternal September</a>, which sounds <em>great</em> 😉</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Often, I <em>am</em> this person.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Text to speech.
[old hardware]: <a href="https://drewdevault.com/2019/01/23/Why-I-use-old-hardware.html">https://drewdevault.com/2019/01/23/Why-I-use-old-hardware.html</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Text user interface&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>IRC is over 30 years old and has barely changed since - so using unmaintained or barely-maintained clients is not entirely uncommon nor wrong.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Many people have bouncers which allow them to catch up the last few lines, and keep logs which they can reference later if necessary. This is nice to have but adds enough friction to keep the expectation that discussions are ephemeral, which has a positive effect on IRC culture.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 1 Jul 2019 00:00:00 +0000</pubDate></item><item><title>Status update, June 2019</title><link>https://drewdevault.com/2019/06/15/Status-update-June-2019.html</link><description><![CDATA[<p>Summer is in full swing here in Philadelphia. Last night I got great views of
Jupiter and a nearly-full Moon, and my first Saturn observation of the year.  I
love astronomy on clear Friday nights, there&rsquo;s always plenty of people coming
through the city. And today, on a relaxing lazy Saturday, waiting for friends
for dinner later, I have the privilege of sharing another status report with
you.</p>
<p>First, I want to talk about some work I&rsquo;ve done with blogs lately. On the bottom
of this article you&rsquo;ll find a few blog posts from around the net. This is
populated with <a href="https://git.sr.ht/~sircmpwn/openring">openring</a>, a small Go tool
I made to fetch a few articles from a list of RSS feeds. A couple of other
people have added this to their own sites as well, and I hope to use this to
encourage the growth of a network of bloggers supporting each other without any
nonfree or centralized software. I&rsquo;ll write about this in its own article in
time. I&rsquo;ve also made an <a href="https://drewdevault.com/make-a-blog">open offer</a> to give $20 to anyone who
wants to make their own blog, and so far 5 new blogs have taken me up on the
offer. Maybe you&rsquo;ll be the next?</p>
<p>Other side projects have seen some nice progress this month, too.
<a href="https://git.sr.ht/~sircmpwn/wio">Wio</a> has received a few patches from Leon
Plickat improving the UX, and I understand more are on the way. I&rsquo;m also happy
to tell you that the RISC-V musl libc port I was working on is heading upstream
and slated for inclusion in the next release! Big thanks to everyone who helped
with that, and to Rich Felker for reviewing it and assembling the final patches.
I was also able to find some time this month to contribute to
<a href="https://git.sr.ht/~emersion/mrsh">mrsh</a>, adding support for job IDs, the
<code>wait</code>, <code>break</code>, and <code>continue</code> builtins, and a handful of other improvements.
I&rsquo;m really excited about mrsh, it&rsquo;s getting close to completion. My friend
Luminarys also finally released <a href="https://synapse-bt.org/">synapse 1.0</a>, a
bittorrent client that I had a <a href="https://github.com/Luminarys/synapse/commit/ac92bb424c3d7d99905f4c0988c924001b688080#diff-d981183863e690e9f0f2bd20145a7a16">hand in
designing</a>,
and <a href="https://github.com/ddevault/receptor">building</a>
<a href="https://broca.synapse-bt.org/">frontends</a> for. Congrats, Lumi! This one has
been a long time coming.</p>
<p>Alright, now for some updates on the larger, long-term projects. The initial
pre-release of aerc <a href="https://drewdevault.com/2019/06/03/Announcing-aerc-0.1.0.html">shipped</a> two weeks
ago! Even since then it&rsquo;s already attracted a flurry of patches from the
community. I&rsquo;m tremendously excited about this project, I think it has heaps of
potential and a community is quickly forming to help us live up to it. Since
0.1.0 it&rsquo;s already grown support for formatting the index list, swapped the
Python dependency for POSIX awk, grown temporary accounts and the ability to
view headers, and more. I&rsquo;ve already started planning 0.2.0 - check out <a href="https://todo.sr.ht/~sircmpwn/aerc2?search=label:%22blocker%22%20status%3Aopen">the
list of
blockers</a>
for a sneak peek.</p>
<p>The Godot+Wayland workstream has picked up again, and I&rsquo;ve secured some VR
hardware (an HTC Vive) and started working on <a href="https://github.com/swaywm/wlroots/issues/1723">planning the changes
necessary</a> for first-class VR
support on wlroots. In the future I also would like to contribute with the
OpenXR and OpenHMD efforts for bringing a full-stack free software solution for
VR. I also did a proof-of-concept 3D Wayland compositor that I intend to
translate to VR once I have the system up and running on Wayland:</p>
<p><video src="https://yukari.sr.ht/godot3d.webm" muted autoplay controls></video></p>
<p>In other respects, sway &amp; wlroots have been somewhat quiet. We&rsquo;ve been focusing
on small bug fixes and quality-of-life improvements, while some beefier changes
are stewing on the horizon. wlroots has seen some slow and steady progress on
refining its DRM implementation, improvements to which are going to lead to even
further improved performance and capability of the downstream compositors -
notably, direct scan-out has just been merged with the help of Scott Anderson
and Simon Ser.</p>
<p>In SourceHut news, the most exciting is perhaps that todo.sr.ht has grown an API
and webhooks! That makes it the last major sr.ht service to gain these features,
which unblocks a lot of other stuff in the pipeline. The biggest workstream
unblocked by this is dispatch.sr.ht, which has an design proposal for an
overhaul under discussion on the development list. This&rsquo;ll open the door for
features like building patches sent to mailing lists, linking tickets to
commits, and much more. I&rsquo;ve also deployed another compute server to pick up the
load as git.sr.ht grows to demand more resources, which frees up the box it used
to be on with more space for smaller services to get comfortable. I was also
happy to bring Ludovic Chabant, the driving force behind hg.sr.ht, with me to
attend a Mercurial conference in Paris, where I learned heaps about the
internals (and externals, to be honest) of Mercurial. Cool things are in store
here, too! Big thanks to the Mercurial maintainers for being so accommodating of
my ignorance, and for putting on a friendly and productive conference.</p>
<p>In the next month, I&rsquo;m moving aerc to the backburner and turning my focus back
to SourceHut &amp; wlroots VR. I&rsquo;m getting a consistent stream of great patches for
aerc to review, so I&rsquo;m happy to leave it in the community&rsquo;s hands for a while.
For SourceHut, the upcoming dispatch workstream is going to be a huge boon to
the community there. On its coattails will come more powerful data import &amp;
export tools, giving the users more ownership and autonomy over their data, and
perhaps following this will be some nice improvements to git.sr.ht. I&rsquo;m also
going to try and find time to invest more in Alpine Linux on RISC-V this month.</p>
<p>From the bottom of my heart, thank you again for lending your support. I&rsquo;ve
never been busier, happier, and more productive than I have been since working
on FOSS full-time. Let&rsquo;s keep building awesome software together.</p>
<small class="text-muted">
This work was possible thanks to users who support me financially. Please
consider <a href="https://drewdevault.com/donate">donating to my work</a> or <a
href="https://sourcehut.org">buying a sourcehut.org subscription</a>. Thank you!
</small>]]></description><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate></item><item><title>My personal journey from MIT to GPL</title><link>https://drewdevault.com/2019/06/13/My-journey-from-MIT-to-GPL.html</link><description><![CDATA[<p>As I got started writing open source software, I generally preferred the MIT
license. I actually made fun of the &ldquo;copyleft&rdquo; GPL licenses, on the grounds that
they are less free. I still hold this opinion today: the GPL license is less
free than the MIT license - but today, I believe this in a good way.</p>
<p>If you haven&rsquo;t yet, I suggest reading the <a href="https://opensource.org/licenses/MIT">MIT
license</a> - it&rsquo;s very short. It satisfies
the four essential freedoms guaranteed of <a href="https://www.gnu.org/philosophy/free-sw.html">free
software</a>:</p>
<ol>
<li>The right to use the software for any purpose.</li>
<li>The right to study the source code and change it as you please.</li>
<li>The right to redistribute the software to others.</li>
<li>The right to distribute your modifications to the software.</li>
</ol>
<p>The MIT license basically allows you to do whatever you want with the software.
It&rsquo;s one of the most hands-off options: &ldquo;here&rsquo;s some code, you can do anything
you want with it.&rdquo; I favored this because I wanted to give users as much freedom
to use my software as possible. The GPL, in addition to being a <a href="https://www.gnu.org/licenses/gpl-3.0.html">much more
complex tome to understand</a>, is more
restrictive. The GPL forces you to use the GPL for derivative works as well.
Clearly this affords you less freedom to use the software. Obligations are the
opposite of freedoms.</p>
<p>When I first got into open source, I was still a Windows user. As I gradually
waded deeper and deeper into the free software pond, I began to use Linux more
often<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Even once I started using Linux as my daily driver, however, it took
a while still for the importance of free software to set in. But this
realization is inevitable, for a programmer immersed in Linux. It radically
changes your perspective when all of the software you use guarantees these four
freedoms. If I&rsquo;m curious about how something works, I can usually be reading the
code within a few seconds. I can find the author&rsquo;s name and email in the git
blame and shoot them some questions. And when I find a bug, I can fix it and
send them a patch.</p>
<p>The weight of these possibilities did not occur to me immediately, instead
slowly becoming evident over time. Today, this cycle is almost muscle memory.
Pulling down source, grepping for files related to an itch I need to scratch,
compiling and installing the modified version, and sending my work upstream -
it&rsquo;s become second nature to me. These days, on the rare occasion that I run
into some proprietary software, this all grinds to a halt. It&rsquo;s like miscounting
the number of steps on your staircase in the dark. These moments drive the truth
home: Free software is good. It&rsquo;s starkly better than the alternative. And
copyleft defends it. Now that I&rsquo;ve had a taste, you bet your ass I&rsquo;m not going
to give it up.</p>
<p>As the number of hours I&rsquo;ve spent on FOSS projects grew from tens of hours, to
hundreds, to thousands and tens of thousands, I&rsquo;ve learned that the effort I
sink into my work far outstrips the effort required to reuse my work. The
collective effort of the free software community amounts to tens of millions of
hours of work, which you can download at touch of a button, for free. If the
people with their fingers on that button held these same ideals, we wouldn&rsquo;t
need the GPL. The reality, however, is that we live in a capitalist world. Our
socialist free software utopia is ripe for exploitation by capitalists, and
they&rsquo;ll be rewarded for doing so. Capitalism is about enriching yourself - not
enriching your users and certainly not enriching society.</p>
<p>Your parents probably taught you about the Golden Rule when you were young: do
unto others as you would have them do unto you. The GPL is the legal embodiment
of this Golden Rule: in exchange for benefiting from my hard work, you just have
to extend me the same courtesy. Its the unfortunate acknowledgement that we&rsquo;ve
created a society that incentivises people to forget the Golden Rule. I give
people free software because I want them to reciprocate with the same. That&rsquo;s
really all the GPL does. Its restrictions just protect the four freedoms in
derivative works. Anyone who can&rsquo;t agree to this is looking to exploit your work
for their gain - and definitely not yours.</p>
<p>I don&rsquo;t plan on relicensing my historical projects, but my new projects have
used the GPL family of licenses for a while now. I think you should seriously
consider it as well.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Fun fact: the first time I used Linux was as a teenager, in order to get around the internet filtering software my parents had installed on our Windows PC at home.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate></item><item><title>Initial pre-release of aerc: an email client for your terminal</title><link>https://drewdevault.com/2019/06/03/Announcing-aerc-0.1.0.html</link><description><![CDATA[<p>After years of painfully slow development, the <a href="https://aerc-mail.org">aerc email
client</a> has seen a huge boost in its pace of development
recently. This leads to today&rsquo;s announcement: <a href="https://git.sr.ht/~sircmpwn/aerc/refs/0.1.0">aerc 0.1.0 is now
available</a>! After my transition to <a href="https://drewdevault.com/2019/01/15/Im-doing-FOSS-full-time.html">working on free software full
time</a> allowed me to spend more time on more projects, I was able
to invest considerably more time into aerc. Your support led us here: thank you
to all of the people who <a href="https://drewdevault.com/donate">donate to my work</a>!</p>
<p>I&rsquo;ve prepared a short webcast demonstrating aerc&rsquo;s basic features - give it a
watch if you&rsquo;re curious about what aerc looks like &amp; what makes it interesting.</p>
<video controls>
  <source src="https://yukari.sr.ht/aerc-intro.webm"></source>
  <source src="https://yukari.sr.ht/aerc-intro.mp4"></source>
  A video would be shown here, but your web browser does not support it.
</video>
<p>In summary, aerc is an email client which runs in your terminal emulator. If
you&rsquo;re coming from mutt, you&rsquo;ll appreciate its more efficient &amp; reliable
networking, a keybinding system closer to vims, and embedded terminal emulator
allowing you to compose emails and read new ones at the same time. It builds on
this foundation with a lot of new and exciting features. For example, its
&ldquo;filter&rdquo; feature allows us to review patches with syntax highlighting:</p>
<p><img src="https://sr.ht/JoqH.png" alt="Screenshot of aerc displaying a patch"></p>
<p>The embedded terminal emulator also allows us convenient access to nearby git
repositories for running tests against incoming patches, pushing the changes
once accepted, or anything else you might want to do. Want to run
<a href="https://weechat.org/">Weechat</a> in an aerc tab? Just like that, aerc has a chat
client! Writing emails in vim, manipulating git &amp; hg repositories, playing
nethack to kill some time&hellip; all stuff you never realized your email client was
missing.</p>
<p>I plan on extending aerc in the future with more integrations with version
control systems, calendar &amp; contacts support, and more email configurations like
notmuch and JMAP. Please consider
<a href="https://git.sr.ht/~sircmpwn/aerc">contributing</a> if you&rsquo;re interested in writing
a little Go, or <a href="https://drewdevault.com/donate">donating monthly</a> to ensure I
always have time to work on this and other free software projects. Give aerc a
try and let me know what you think!</p>]]></description><pubDate>Mon, 3 Jun 2019 00:00:00 +0000</pubDate></item><item><title>What is a fork, really, and how GitHub changed its meaning</title><link>https://drewdevault.com/2019/05/24/What-is-a-fork.html</link><description><![CDATA[<p>The fork button on GitHub - with the little number next to it for depositing
dopamine into your brain - is a bit misleading. GitHub co-opted the meaning of
&ldquo;fork&rdquo; to trick you into participating in their platform more. They did this in
a well-intentioned way, for the sake of their pull requests feature, but
ultimately this design is self-serving and causes some friction when
contributors venture out of their GitHub sandbox and into the rest of the
software development ecosystem. Let&rsquo;s clarify what &ldquo;fork&rdquo; really means, and what
we do without GitHub&rsquo;s concept of one - for it is in this difference that we
truly discover how git is a <em>distributed</em> version control system.</p>
<p><strong>Disclaimer</strong>: I am the founder of <a href="https://sourcehut.org">SourceHut</a>, a
product which competes with GitHub and embraces the &ldquo;bazaar<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>&rdquo; model described
in this article.</p>
<p>On GitHub, a fork refers to a copy of a repository used by a contributor<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to
stage changes they&rsquo;d like to propose upstream. Prior to GitHub (and in many
places still today), we&rsquo;d call such a repository a &ldquo;personal branch&rdquo;. A personal
branch doesn&rsquo;t need to be published to be useful - you can just <code>git clone</code> it
locally and make your changes there without pushing them to a public, hosted
repository. Using <a href="https://git-send-email.io">email</a>, you can send changes from
your local, unpublished repository for consideration upstream. Outside of
GitHub and its imitators, most contributors to a project don&rsquo;t have a published
version of their repository online at all, skipping that step and saving some
time.</p>
<p>In some cases, however, it&rsquo;s useful to publish your personal branch online. This
is often done when a team of people is working on a long-lived branch to later
propose upstream - for example, I&rsquo;ve been doing this while working on the RISC-V
port of musl libc. It gives us a space to collaborate and work while preparing
changes which will eventually be proposed upstream, as well as a place for
interested testers to obtain our experimental work to try themselves. This is
also done by individuals, such as Greg Kroah-Hartman&rsquo;s Linux branches, which are
useful for testing upcoming changes to the Linux kernel.</p>
<p>Greg is not alone in publishing a repo like this. In fact, there are <a href="https://git.kernel.org/pub/scm/linux/kernel/git/">hundreds of
kernel trees like this</a>. These act as staging areas for long-term
workstreams, or for the maintainers of many subsystems of the kernel.  Changes
in these repositories gradually flow upwards towards the &ldquo;main&rdquo; tree,
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/">torvalds/linux</a>. The precise meaning of &ldquo;linux&rdquo; is rather loose
in this context. An argument could be made that torvalds/linux is Linux, but
that definition wouldn&rsquo;t capture the LTS branches. Many distros also apply their
own patches on top of Torvalds, perhaps sourcing them from the maintainers of
drivers they need a bugfix for, or they maintain their own independent trees
which periodically pull in lump sums of changes from other trees - meaning that
the simple definition might not include the version of Linux which is installed
on your computer, either. This ambiguity is a feature - each of these trees is a
valid definition of Linux in its own right.</p>
<p>This is the sense in which git is &ldquo;distributed&rdquo;. The idea of a canonical
upstream is not written in stone in the way that GitHub suggests it might be.
After all, open-source software is a collaborative endeavour. What makes Jim&rsquo;s
branch more important that John&rsquo;s branch? John&rsquo;s branch is definitely more
important if it has the bugfixes you need. In fact, your branch, based on Jim&rsquo;s,
with some patches cherry-picked from John, and a couple of fixes of your own
mixed in, may in fact be the best version of the software for you.</p>
<p>This is how the git community gets along without the GitHub model of &ldquo;forks&rdquo;.
This design has allowed the largest and most important projects in the world to
flourish, and git was explicitly designed around this model. We refer to this as
the &ldquo;bazaar&rdquo; model, the metaphor hopefully being fairly obvious at this point.
There is another model, which GitHub embodies instead: the cathedral. In this
model, the project has a central home and centralized governance, run by a small
number of people. The cathedral doesn&rsquo;t necessarily depend on the GitHub idea of
&ldquo;forks&rdquo; and pull requests - that is, you can construct a cathedral with
email-driven development or some other model - but on GitHub the bazaar option
is basically absent.</p>
<p>In the introduction I said that GitHub attempts to replace an existing meaning
for &ldquo;fork&rdquo;. So what does forking actually mean, then? Consider a project with
the cathedral model. What happens when there&rsquo;s a schism in the church? The
answer is that some of the contributors can take the code, put up a new branch
somewhere, and stake a flag in the ground. They rename it and commit to
maintaining it entirely independently of the original project, and encourage
contributors, new and old alike, to abandon the old dogma in favor of theirs.
At this point, the history<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> begins to diverge. The new contingent pulls in
all of the patches that were denied upstream and start that big refactoring to
mold it in their vision. The project has been <strong>forked</strong>. A well known example
is when ffmpeg was forked to create libav.</p>
<p>This is usually a traumatic event for the project, and can have repercussions
that last for years. The precise considerations that should go into forking a
project, these repercussions and how to address them, and other musings are
better suited for a separate article. But this is what &ldquo;fork&rdquo; meant before
GitHub, and this meaning is still used today - albeit more ambiguously.</p>
<p>If &ldquo;fork&rdquo; already had this meaning, why did GitHub adopt their model? The
answer, as it often will be, is centralization of power. GitHub is a
proprietary, commercial service, and their ultimate goal is to turn a profit.
The design of GitHub&rsquo;s fork and pull request model creates a cathedral that
keeps people on their platform in a way that a bazaar would not. A distributed
version control system like git, built on a distributed communications protocol
like email, is hard to disrupt with a centralized service. So GitHub designed
their own model.</p>
<p>As a parting note, I would like to clarify that this isn&rsquo;t a condemnation of
GitHub. I still use their service for a few projects, and appreciate the
important role GitHub has played in the popularization of open source. However,
I think it&rsquo;s important to examine the services we depend on, to strive to
understand their motivations and design. I also hope the reader will view the
software ecosystem through a more interesting lens for having read this article.
Thank you for reading!</p>
<hr>
<p><strong>P.S.</strong> Did you know that GitHub also captured the meaning of &ldquo;pull request&rdquo;
from git&rsquo;s own <a href="https://www.git-scm.com/docs/git-request-pull">request-pull</a>
tool? git request-pull prepares an email which will ask the recipient to fetch
changes from a public repository and integrate them into their own branch. This
is used when a patch is insufficient - for example, when Linux subsystem
maintainers want to ship a large group of changes to Torvalds for the next
kernel release. Again, the original version is distributed and bazaar-like,
whereas GitHub&rsquo;s is centralized and makes you stay on their platform.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Not the bazaar version control system, but bazaar the concept. This is explained later in the article.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>And by bots to increase their reputation, and by confused users who don&rsquo;t know what the button means.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Git history in particular, but also the other kind.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate></item><item><title>Status update, May 2019</title><link>https://drewdevault.com/2019/05/15/Status-update-May-2019.html</link><description><![CDATA[<p>This month, it seems the most exciting developments again come from the realm of
email. I&rsquo;ve got cool email-related news to share for aerc, lists.sr.ht, and
todo.sr.ht, and many cool developments in my other projects to share.</p>
<p>Let&rsquo;s start with lists.sr.ht: I have broken ground on the web-based patch review
tools! I promised these features when I started working on sourcehut, to make
the email-based workflow more enticing to those who would rather work on the
web. Basically, this gives us a Github or Gerrit-esque review UI for patches
which arrive on the mailing list. Thanks to <a href="https://git.sr.ht/~emersion/python-emailthreads">a cool
library</a> Simon Ser wrote for
me&hellip; almost a year ago&hellip; I&rsquo;m able to take a thread of emails discussing a
patch and organically convert them into inline feedback on the web.</p>
<p><a href="https://lists.sr.ht/~philmd/qemu/patches/5556"><img src="https://sr.ht/sjtE.png" alt=""></a></p>
<small style="display: block; text-align: center;">
  Click the screenshot to visit this page on the web
</small>
<p>This is generated from organic discussions where the participants don&rsquo;t have to
do anything special to participate - in the discussion this screenshot is
generated from, the participants aren&rsquo;t even aware that this process is taking
place. This approach allows users who prefer a web-based workflow to interact
with traditional email-based patch review seamlessly. Future improvements will
include detecting new revisions of a patch, side-by-side diff and diffs between
different versions of a patch, and using the web interface to review a patch -
which will generate an email on the list. I&rsquo;d also like to extend git.sr.ht with
web support for git send-email, allowing you to push to your git repo and send a
patch off to the mailing list from the web. It should also be possible to
combine this with dispatch.sr.ht to have bidirectional code reviews between
mailing lists and Github, Gitlab, etc - with no one on either side being any the
wiser to the preferred workflow of the other.</p>
<p>In other exciting email-related news, aerc2 now supports composing emails -
a feature which has been a long time coming, and was not even present in aerc1!
Check it out:</p>
<script
  id="asciicast-CqTukJZoTq7ZgPmsjhIbQyUjb"
  src="https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js" async
></script>
<p>Outgoing email configuration supports SMTP, STARTTLS, and SMTPS, with sendmail
support planned. Outgoing emails are edited with our embedded terminal emulator
using vim, or your favorite <code>$EDITOR</code>. Still to come: replying to emails &amp; PGP
support. I could use your help here! If you want a chance to write some cool Go
code, stop by the IRC channel and say hello: <a href="http://webchat.freenode.net/?channels=aerc&amp;uio=d4">#aerc on
irc.freenode.net</a>. Once aerc
matures a little bit, I also want to start working on a git integration which
will continue making email an even more compelling platform for software
development.</p>
<p>Let&rsquo;s talk about Wayland next. I&rsquo;ve been shipping release candidates for sway
1.1 - <a href="https://github.com/swaywm/sway/issues/3861#issuecomment-487073065">check out the provisional changelog
here</a>. The
highlights are probably the ability to inhibit idle with arbitrary criteria, and
touch support for swaybar. The release candidates have been pretty quiet - we
might end up shipping this as early as rc4. wlroots 0.6.0 was also released,
though for end-users it doesn&rsquo;t include much. We&rsquo;ve removed the long-deprecated
wl_shell, and have made plans to start removing other deprecated protocols. I&rsquo;ve
also been working with the broader Wayland community on establishing a
governance model for protocol standardization - <a href="https://lists.freedesktop.org/archives/wayland-devel/2019-May/040532.html">read the latest draft
here</a>.</p>
<p>I&rsquo;ve also started working on a Wayland book! It&rsquo;s intended as a comprehensive
reference on the Wayland protocol, useful for authors hoping to write both
Wayland compositors and Wayland clients. It does not go into all of the
nitty-gritty details necessary for writing a Wayland compositor for Linux (that
is, the sort of knowledge necessary for using wlroots, or even making wlroots
itself), but that&rsquo;ll be a task for another time. Instead, I focus on the Wayland
protocol itself, explaining how the wire protocol works and the purpose and
usage of each interface in <code>wayland.xml</code>, as well as <code>libwayland</code>. I intend to
sell this book, but when you buy it you&rsquo;ll receive a DRM-free CC-NC-ND copy that
you can share freely with your friends.</p>
<p>Before I move on from Wayland news, also check out
<a href="https://wio-project.org/">Wio</a> if you haven&rsquo;t yet - I wrote a blog post about
it <a href="https://drewdevault.com/2019/05/01/Announcing-wio.html">here</a>. In short: I
made a novel new Wayland compositor in my spare time which behaves like plan 9&rsquo;s
Rio.  See the blog post for more details!</p>
<p>Following the success of <a href="https://git-send-email.io">git-send-email.io</a>, I
published a similar website last week: <a href="https://git-rebase.io">git-rebase.io</a>.
The purpose of this website is to teach readers how to use git rebase,
explaining how to use its primitives to accomplish common high-level tasks in a
way that leaves the reader equipped to apply those primitives to novel
high-level tasks in the course of their work. I hope you find it helpful! I&rsquo;ve
also secured git-filter-branch.io and git-bisect.io to explain additional
useful, but confusing git commands in the future.</p>
<p>Brief updates for other projects: I&rsquo;ve been ramping up RISC-V work again,
helping Golang test their port, testing out u-Boot, and working on the Alpine
port some more. cozy has seen only a little progress, but the parser is
improving and it&rsquo;s now emitting a (very incomplete) AST for source files you
feed to it. Godot is on hold pending additional upstream bandwidth for code
review.</p>
<p>That&rsquo;s all for today! Thank you so much for your support. It&rsquo;s pretty clear by
now that my productivity is way higher now that I&rsquo;m able to work full-time on
open source, thanks to your support. I&rsquo;ll see you for next month&rsquo;s update!</p>
<small class="text-muted">
This work was possible thanks to users who support me financially. Please
consider <a href="https://drewdevault.com/donate">donating to my work</a> or <a
href="https://sourcehut.org">buying a sourcehut.org subscription</a>. Thank you!
</small>]]></description><pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate></item><item><title>Webcast: Reviewing git &amp; mercurial patches with email</title><link>https://drewdevault.com/2019/05/13/Git-email-webcast.html</link><description><![CDATA[<p>With the availability of new resources like
<a href="https://git-send-email.io">git-send-email.io</a>, I&rsquo;ve been working on making the
email-based workflow more understandable and accessible to the world. One thing
that&rsquo;s notably missing from this tutorial, however, is the maintainer side of
the work. I intend to do a full write-up in the future, but for now I thought
it&rsquo;d be helpful to clarify my workflow a bit with a short webcast. In this
video, I narrate my workflow as I review a few
<a href="https://sourcehut.org">sourcehut</a> patches and participate in some dicsussions.</p>
<video src="https://yukari.sr.ht/git-screencast.webm" controls>
  Your browser does not support HTML5 video, or webm video.
</video>
<p>Links:</p>
<ul>
<li><a href="http://www.mutt.org/">mutt</a>: my email client</li>
<li><a href="https://git.sr.ht/~sircmpwn/dotfiles/tree/master/.config/mutt/muttrc">my personal mutt config</a></li>
<li><a href="https://git.sr.ht/~sircmpwn/dotfiles/tree/master/bin/semver">my &ldquo;semver&rdquo; script</a></li>
</ul>
<p>Also check out <a href="https://git.sr.ht/~sircmpwn/aerc2">aerc</a>, a replacement for mutt
that I&rsquo;ve been working on over the past year or two. I will be writing more
about that project soon.</p>]]></description><pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate></item><item><title>Calculating your donation&apos;s value following Patreon&apos;s fee changes</title><link>https://drewdevault.com/2019/05/06/Calculate-your-doation-fees-for-Patreon.html</link><description><![CDATA[<p>In January 2018, I wrote a blog post which included a <a href="https://drewdevault.com/2018/01/16/Fees-on-donation-platforms.html">fee
calculator</a>.
Patreon <a href="https://www.patreon.com/new-creator-plans">changes their fee model
tomorrow</a>, and it&rsquo;s time for an
updated calculator. I&rsquo;m grandfathered into the old fees, so not much has changed
for me, but I want to equip Patreon users - creators and supporters - with more
knowledge of how their money is moving through the platform.</p>
<p>Patreon makes money by siphoning some money off the top of a donation flow
between supporters and creators. Because of the nature of its business (a
private, VC-backed corporation), the siphon&rsquo;s size and semantics are prone to
change in undesirable ways, since VC&rsquo;s expect infinite growth and a private
business generally puts profit first. For this reason, I diversify my income, so
that when Patreon makes these changes it limits their impact on my financial
well-being.  Even so, Patreon is the biggest of my donation platforms,
representing over $500/month at the time of writing (<a href="https://drewdevault.com/donate/">full breakdown
here</a>)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>So, for any patrons who are curious about where their money goes, here&rsquo;s a handy
calculator to help you navigate the complex fees. Enjoy!</p>
<p><strong>Note</strong>: I don&rsquo;t normally ask you to share my posts, but the Patreon community
is too distributed for me to effectively reach them alone. Please share this
with your Patreon creators and communities!</p>
<p><noscript>Sorry, the calculator requires JavaScript.</noscript></p>
<div id="react-root"></div>
<script src="https://drewdevault.com/js/donation-calc.js"></script>
<p><strong>Note</strong>: this calculator does not include the withdrawal fee. When the creator
withdraws their funds from the platform, an additional fee is charged, but the
nature of that fee changes depending on the frequency with which they make
withdrawals and the total amount of money they make from all patrons - which is
information that&rsquo;s not easily available to the average patron for using with
this calculator. For details on the withdrawal fees, see <a href="https://support.patreon.com/hc/en-us/articles/203913489-What-are-my-options-to-receive-payout-">Patreon&rsquo;s support
article on the
subject</a>.</p>
<p>One question that&rsquo;s been left unanswered is how many times Patreon is going to
charge patrons for each creator they support. Previously, they batched payments
and only accordingly charged the payment processing fees once. However, along
with these changes, they&rsquo;re going to charge payment processing fees for each
creator, but they haven&rsquo;t lowered the payment processing fees. When we take a
look at our bank returns in the coming months, if Patreon is still batching
payments internally&hellip; hmm, where is the extra money going? We&rsquo;ll have to wait
and see.</p>
<h2 id="founding-creators">What are founding creators?</h2>
<p>Creators who used the Patreon platform prior to 2019-05-07 are &ldquo;founding
creators&rdquo;, and have different rates. They have different rates for each plan,
and lower payment processing fees. Founding creators are also not usually lite
creators, but were grandfathered into the pro plan.</p>
<h2 id="charge-up-front">What does charge up front mean?</h2>
<p>Some creators have the option to charge you as soon as you join the platform,
rather than once monthly or per-creation. This results in higher payment
processing fees for founding creators, as Patreon cannot batch the charge
alongside with your other creators.</p>
<h2 id="which-plan">How do I know what plan my creator uses?</h2>
<p>We can guess which plan our creator uses by looking at the features they use on
Patreon. Here are some giveaways:</p>
<ul>
<li>If they have different membership tiers, they use the Pro plan or better.</li>
<li>If they offer merch through Patreon, they use the Premium plan.</li>
</ul>
<p>You can also just reach out to your creator and ask!</p>
<!-- Hack to get footnotes from javascript to work -->
<p><span style="display: none"><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></span></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is supplemented with my Sourcehut income as well, which is covered in the recent <a href="https://lists.sr.ht/~sircmpwn/sr.ht-discuss/%3C20190426160729.GC1351@homura.localdomain%3E">Q1 financial report</a>, as well as some <a href="https://drewdevault.com/consulting">consulting work</a>, which I don&rsquo;t publish numbers for.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This is an assumption based on public PayPal and Stripe payment processing rates. In practice, it&rsquo;s likely that Patreon has a volume discount with their payment processors. Patreon does not publish these rates.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 6 May 2019 00:00:00 +0000</pubDate></item><item><title>Announcing Wio: A clone of Plan 9&apos;s Rio for Wayland</title><link>https://drewdevault.com/2019/05/01/Announcing-wio.html</link><description><![CDATA[<p>For a few hours here and there over the past few months, I&rsquo;ve been working on a
side project: <a href="https://wio-project.org">Wio</a>. I&rsquo;ll just let the (3 minute)
screencast do the talking first:</p>
<p><video src="https://yukari.sr.ht/wio.webm" controls></video></p>
<p><strong>Note</strong>: this video begins with several seconds of grey video. This is normal.</p>
<p>In short, Wio is a Wayland compositor based on wlroots which has a similar look
and feel to Plan 9&rsquo;s Rio desktop. It works by running each application in its
own nested Wayland compositor, based on <a href="https://www.hjdskes.nl/projects/cage/">Cage</a> - yet another wlroots-based
Wayland compositor. I used Cage in <a href="https://drewdevault.com/2019/04/23/Using-cage-for-a-seamless-RDP-Wayland-desktop.html">last week&rsquo;s RDP article</a>, but
here&rsquo;s another cool use-case for it.</p>
<p>The behavior this allows for (each window taking over its parent&rsquo;s window,
rather than spawning a new window) has been something I wanted to demonstrate on
Wayland for a very long time. This is a good demonstration of how Wayland&rsquo;s
fundamentally different and conservative design allows for some interesting
use-cases which aren&rsquo;t possible at all on X11.</p>
<p>I&rsquo;ve also given Wio some nice features which are easy thanks to wlroots, but
difficult on Plan 9 without kernel hacking. Namely, these are multihead support,
HiDPI support, and support for the wlroots layer shell protocol. Several other
wlroots protocols were invited to the party, useful for taking screenshots,
redshift, and so on. Layer shell support is particularly cool, since programs
like swaybg and waybar work on Wio.</p>
<p>In terms of Rio compatability, Wio has a ways to go. I would seriously
appreciate help from users who are interested in improving Wio. Some notably
missing features include:</p>
<ul>
<li>Any kind of filesystem resembling Rio&rsquo;s window management filesystem. In
theory this ought to be do-able with FUSE, at least in part (/dev/text might
be tough).</li>
<li>Running every application in its own namespace, for double the Plan 9</li>
<li>Hiding/showing windows (that menu entry is dead)</li>
<li>Joint improvements with Cage to bring greater support for Wayland features,
like client-side window resize/move, fullscreen windows, etc</li>
<li>Damage tracking to avoid re-rendering everything on every frame, saving
battery life and GPU time</li>
</ul>
<p>If you&rsquo;re interested in helping, please join the IRC channel and say hello:
<a href="http://webchat.freenode.net/?channels=%23wio&amp;uio=MTA9dHJ1ZSYxMT0xNzQmMTM9ZmFsc2U4c">#wio on irc.freenode.net</a>. For Wio&rsquo;s source code and other
information, visit the website at <a href="https://wio-project.org">wio-project.org</a>.</p>]]></description><pubDate>Wed, 1 May 2019 00:00:00 +0000</pubDate></item><item><title>The &quot;shut up and get back to work&quot; coding style guide</title><link>https://drewdevault.com/2019/04/29/Shut-up-and-get-back-to-work-style.html</link><description><![CDATA[<p>So you&rsquo;re starting a new website, and you open the first CSS file. What style do
you use? Well, you hate indenting with spaces passionately. You know tabs are
right because they&rsquo;re literally made for this, and they&rsquo;re only one byte, and
these god damn spaces people with their bloody spacebars&hellip;</p>
<p>Shut up and use spaces. That&rsquo;s how CSS is written<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. And you, mister web
programmer, coming out of your shell and dipping your toes into the world of
Real Programming, writing your first Golang program: use tabs, jerk. There&rsquo;s
only one principle that matters in coding style: don&rsquo;t rock the boat. Just do
whatever the most common thing is in the language you&rsquo;re working in. Write your
commit messages the same way as everyone else, too. Then shut up and get back to
work. This hill isn&rsquo;t worth dying on.</p>
<p>If you&rsquo;re working on someone else&rsquo;s project, this goes double. Don&rsquo;t get snippy
about their coding style. Just follow their style guide, and if there isn&rsquo;t one,
just make your code look like the code around it. It&rsquo;s none of your goddamn
business how they choose to style their code.</p>
<p>Shut up and get back to work.</p>
<p>Ranting aside, seriously - which style guide you use doesn&rsquo;t matter nearly as
much as using one. Just pick the one which is most popular or which is already
in use by your peers and roll with it.</p>
<div style="margin-bottom: 5rem"></div>
<p>&hellip;though since I&rsquo;m talking about style anyway, take a look at this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wlr_surface</span> <span class="o">*</span><span class="nf">wlr_surface_surface_at</span><span class="p">(</span><span class="k">struct</span> <span class="n">wlr_surface</span> <span class="o">*</span><span class="n">surface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                           <span class="kt">double</span> <span class="n">sx</span><span class="p">,</span> <span class="kt">double</span> <span class="n">sy</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                           <span class="kt">double</span> <span class="o">*</span><span class="n">sub_x</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">sub_y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Do stuff
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>There&rsquo;s a lot of stupid crap which ends up in style guides, but this is by far
the worst. Look at all that wasted whitespace! There&rsquo;s no room to write your
parameters on the right, and you end up with 3 lines where you could have two.
And you have to mix spaces and tabs! God dammit! This is how you should do it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wlr_surface</span> <span class="o">*</span><span class="nf">wlr_surface_surface_at</span><span class="p">(</span><span class="k">struct</span> <span class="n">wlr_surface</span> <span class="o">*</span><span class="n">surface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="n">sx</span><span class="p">,</span> <span class="kt">double</span> <span class="n">sy</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">sub_x</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">sub_y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Do stuff
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>Note the extra indent to distinguish the parameters from the body and the
missing garish hellscape of whitespace. If you do this in your codebase, I&rsquo;m not
going to argue with you about it, but I am going to have to talk to my therapist
about it.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For the record, tabs are objectively better. Does that mean I&rsquo;m going to write my JavaScript with tabs? Hell no!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate></item><item><title>Using Cage for a seamless remote Wayland session</title><link>https://drewdevault.com/2019/04/23/Using-cage-for-a-seamless-RDP-Wayland-desktop.html</link><description><![CDATA[<p>Congratulations to Jente Hidskes on <a href="https://www.hjdskes.nl/blog/cage-01/">the first release of
Cage</a>! Cage is a Wayland compositor
designed for kiosks - though, as you&rsquo;ll shortly find out, is useful in many
unexpected ways. It launches a single application, in fullscreen, and exits the
compositor when that application exits. This lets you basically add a
DRM+KMS+libinput session to any Wayland-compatible application (or X application
via XWayland) and run it in a tiny wlroots compositor.</p>
<p>I actually was planning on writing something like this at some point (for a
project which still hasn&rsquo;t really come off the ground yet), so I was excited
when Jente <a href="https://www.hjdskes.nl/blog/cage/">announced it</a> in December. With
the addition of the <a href="https://github.com/swaywm/wlroots/pull/1578">RDP backend</a>
in wlroots, I thought it would be cool to combine these to make a seamless
remote desktop experience. In short, I installed
<a href="http://www.freerdp.com/">FreeRDP</a> and Cage on my laptop, and
<a href="https://swaywm.org">sway</a> on my desktop. On my desktop, I <a href="https://github.com/swaywm/wlroots/blob/master/docs/env_vars.md#rdp-backend">generated TLS
certificates per the wlroots
docs</a>
and ran sway like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">WLR_RDP_TLS_CERT_PATH</span><span class="o">=</span><span class="nv">$HOME</span>/tls.crt <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="nv">WLR_RDP_TLS_KEY_PATH</span><span class="o">=</span><span class="nv">$HOME</span>/tls.key <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="nv">WLR_BACKENDS</span><span class="o">=</span>rdp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sway
</span></span></code></pre></div><p>Then, on my laptop, I can run this script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span> <span class="o">[</span> <span class="nv">$#</span> -eq <span class="m">0</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="k">then</span>
</span></span><span class="line"><span class="cl">	<span class="nb">export</span> <span class="nv">XDG_RUNTIME_DIR</span><span class="o">=</span>/tmp
</span></span><span class="line"><span class="cl">	<span class="nb">exec</span> cage sway-remote launch
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">	sleep <span class="m">3</span>
</span></span><span class="line"><span class="cl">	<span class="nb">exec</span> xfreerdp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		-v homura <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		--bpp <span class="m">32</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		--size 1280x800 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		--rfx
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>The first branch is taken on the first run, and it starts up cage and asks it to
run this script again. The second branch then starts up xfreerdp and connects to
my desktop (its hostname is <code>homura</code>). xfreerdp is then fullscreened and all of
my laptop&rsquo;s input events are directed to it. The result is an experience which
is basically identical to running sway directly on my laptop, except it&rsquo;s
actually running on my desktop and using the remote desktop protocol to send
everything back and forth.</p>
<p>This isn&rsquo;t especially practical, but it is a cool hack. It&rsquo;s definitely not
network transparency like some people want, but I wasn&rsquo;t aiming for that. It&rsquo;s
just a neat thing you can do now that we have an RDP backend for wlroots. And
congrats again to Jente - be sure to give Cage a look and see if you can think
of any other novel use-cases, too!</p>]]></description><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate></item><item><title>Choosing a VPN service is a serious decision</title><link>https://drewdevault.com/2019/04/19/Your-VPN-is-a-serious-choice.html</link><description><![CDATA[<p>There&rsquo;s a disturbing trend in the past year or so of various VPN companies
advertising to the general, non-technical public. It&rsquo;s great that the general
public is starting to become more aware of their privacy online, but I&rsquo;m not a
fan of these companies exploiting public paranoia to peddle their wares. Using
a VPN in the first place has potentially grave consequences for your privacy -
and can often be worse than not using one in the first place.</p>
<p>It&rsquo;s true that, generally speaking, when you use a VPN, the websites you visit
don&rsquo;t have access to your original IP address, which can be used to derive your
approximate location (often not more specific than your city or neighborhood).
But that&rsquo;s not true of the VPN provider themselves - who can identify you much
more precisely because you used your VPN login to access the service.
Additionally, they can promise not to siphon off your data and write it down
somewhere - tracking you, selling it to advertisers, handing it over to law
enforcement - but they <em>could</em> and you&rsquo;d be none the wiser. By routing all of
your traffic through a VPN, <em>you route all of your traffic through a VPN</em>.</p>
<p>Another advantage offered by VPNs is that they can prevent your ISP from knowing
what you&rsquo;re doing online. If you don&rsquo;t trust your ISP but you do trust your VPN,
this makes a lot of sense. It also makes sense if you&rsquo;re on an unfamiliar
network, like airport WiFi. However, it&rsquo;s still quite important that you <em>do</em>
trust the VPN on the other end. You need to do research. What country are they
based in, and what&rsquo;s their diplomatic relationship with your home country? What
kind of power the local authorities have to force them to record &amp; disclose your
traffic? Are they backed by venture capitalists who expect infinite growth, and
will they eventually have to meet those demands by way of selling your
information to advertisers? What happens to you when their business is going
poorly? How much do you trust their security competency - are they likely to be
hacked? If you haven&rsquo;t answered all of these questions yourself, then you should
not use a VPN.</p>
<p>Even more alarming than the large advertising campaigns which have been popular
in the past few months is push-button VPN services which are coming
pre-installed on consumer hardware and software. These bother me because they&rsquo;re
implemented by programmers who should understand this stuff and know better than
to write the code. Opera now has a push-button VPN pre-bundled which is free and
tells you little about the service before happily sending all of your traffic
through it.  Do you trust a Chinese web browser&rsquo;s free VPN to behave in your
best interests?  Purism also recently announced a collaboration with Private
Internet Access to ship a VPN in their upcoming Librem 5. I consider this highly
irresponsible of Purism, and actually discussed the matter at some length with
Todd Weaver (the CEO) over email. We need to stop making it easy for users to
siphon all of their data into the hands of someone they don&rsquo;t know.</p>
<p>For anyone who needs a VPN but isn&rsquo;t comfortable using one of these companies,
there are other choices. First, consider that any website you visit with HTTPs
support (identified by the little green lock in the address bar on your web
browser) is already encrypting all of your traffic so it cannot be read or
tampered with. This discloses your IP address to the operator of that website
and discloses that you visited that website to your ISP, but does not disclose
any data you sent to them, or any content they sent to you, to your ISP or any
eavesdroppers. If you&rsquo;re careful to use HTTPS (and other forms of SSL for
things like email), that can often be enough.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>If that&rsquo;s not enough, the ironclad solution is
<a href="https://www.torproject.org/">Tor</a>. When you connect to a website on Tor, it (1)
hides your IP address from the website and any eavesdroppers, (2) hides who
you&rsquo;re talking to from your ISP, and (3) hides what you&rsquo;re talking about from
the ISP. In some cases (onion services), it even hides the origin of the service
you&rsquo;re talking to from <em>you</em>. Tor comes with its own set of limitations and
pitfalls for privacy &amp; security, which you should <a href="https://2019.www.torproject.org/download/download.html.en#Warning">read about and
understand</a>
before using it. Bad actors on the Tor network can read and tamper with your
traffic if you aren&rsquo;t using SSL or Onion routing.</p>
<p>Finally, if you have some technical know-how, you can set up your own VPN. If
you have a server somewhere (or rent one from a VPS provider), you can install a
VPN on it. I suggest <a href="https://www.wireguard.com/">Wireguard</a> (easiest, Linux
only) or <a href="https://openvpn.net">OpenVPN</a> (more difficult, works on everything).
Once again, this comes with its own limitations. You&rsquo;ll always be using a
consistent IP address that services you visit can remember to track you, and you
get a new ISP (whoever your VPS provider uses). This&rsquo;ll generally route you
through commercial ISPs, though, who are much less likely to do obnoxious crap
like injecting ads in webpages or redirecting your failed DNS queries to &ldquo;search
results&rdquo; (i.e. more ads). You&rsquo;ll need to vet your VPS provider and their ISP
with equal care.</p>
<p>Understand who handles your data - encrypted and unencrypted - before you share
it.  No matter your approach, you should also always install an adblocker (I
strongly recommend <a href="https://github.com/gorhill/uBlock/#installation">uBlock
Origin</a>), stick to
HTTPS-enabled websites, and be suspicious of and diligent about every piece of
software, every browser extension, every app you install, and every website you
visit. Most of them are trying to spy on you.</p>
<p>Related articles:</p>
<ul>
<li><a href="https://schub.io/blog/2019/04/08/very-precarious-narrative.html">VPN - a Very Precarious Narrative - Dennis Schubert</a></li>
<li><a href="https://www.skadligkod.se/vpn/the-trustworthy-of-vpn-review-sites-and-how-affiliate-programs-affects-their-opinion/">The trustworthy of VPN review sites and how affiliate programs affects their opinion</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>A reader points out that HTTPS can also be tampered with. If someone else administrates your computer (such as your employer), they can install custom certificates that allow them to tamper with your traffic. This is also sometimes done by software you install on your system, like antivirus software (which more times than not, is a virus itself). Additionally, anyone who can strongarm a certificate authority (state actors) may be able to issue an illegitimate certificate for the same purpose. The only communication method I know of which has no known flaws is onion routing on Tor.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate></item><item><title>Announcing first-class Mercurial support on Sourcehut</title><link>https://drewdevault.com/2019/04/15/Announcing-first-class-hg-support-on-sourcehut.html</link><description><![CDATA[<p>I&rsquo;m pleased to announce that the final pieces have fallen into place for
<a href="https://www.mercurial-scm.org/">Mercurial</a> support on
<a href="https://sourcehut.org">SourceHut</a>, which is now on-par with our git offering.
Special thanks are owed to SourceHut contributor Ludovic Chabant, who has been
instrumental in adding Mercurial support to SourceHut. You may have heard about
it while this was still experimental - but I&rsquo;m happy to tell you that we have
now completely integrated Mercurial support into SourceHut! Want to try it out?
Check out <a href="https://man.sr.ht/tutorials/set-up-account-and-hg.md">the tutorial</a>.</p>
<p>Mercurial support on SourceHut includes all of the trimmings, including CI
support via <a href="https://builds.sr.ht">builds.sr.ht</a> and email-driven collaboration
on <a href="https://lists.sr.ht">lists.sr.ht</a>. Of course, it&rsquo;s also 100%
free-as-in-freedom, open source software (<a href="https://hg.sr.ht/~sircmpwn/hg.sr.ht">hosted on
itself</a>) that you can <a href="https://man.sr.ht/hg.sr.ht/installation.md">deploy on your own
servers</a>. We&rsquo;ve tested hg.sr.ht
on some of the largest Mercurial repositories out there, including
mozilla-central and NetBSD src. The NetBSD project in particular has been very
helpful, walking us through their CVS to Hg conversion and stress-testing
hg.sr.ht with the resulting giant repositories. I&rsquo;m looking forward to working
more with them in the future!</p>
<p>The Mercurial community is actively innovating their software, and we&rsquo;ll be
right behind them. I&rsquo;m excited to provide a platform for elevating the Mercurial
community. There weren&rsquo;t a lot of good options for Mercurial fans before
SourceHut. Let&rsquo;s fix that together! SourceHut will be taking a more active role
in the Hg community, just like we have for git, and together we&rsquo;ll build a great
platform for software development.</p>
<p>I&rsquo;ll see you in Paris in May, at the <a href="https://www.mercurial-scm.org/pipermail/mercurial/2019-April/051196.html">inaugural Mercurial
conference</a>!</p>
<hr>
<p>Hg support on SourceHut was largely written by members of the Mercurial
community. If there are other version control communities interested in
SourceHut support, please <a href="mailto:~sircmpwn/sr.ht-dev@lists.sr.ht">reach out</a>!</p>]]></description><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate></item><item><title>Status update, April 2019</title><link>https://drewdevault.com/2019/04/15/Status-update-April-2019.html</link><description><![CDATA[<p>Spring is here, and I&rsquo;m already miserable in the heat. Crazy weather here in
Philadelphia - I was woken up at 3 AM by my phone buzzing, telling me to take
immediate shelter from a tornado. But with my A/C cranked up and the tornado
safely passed, I&rsquo;ve been able to get a lot of work done.</p>
<p>The project with the most impressive progress is
<a href="https://git.sr.ht/~sircmpwn/aerc2">aerc2</a>. It can now read emails, including
filtering them through arbitrary commands for highlighting diffs or coloring
quotes, or even rendering HTML email with a TUI browser like w3m.</p>
<script
  id="asciicast-vy5GmO0tBjppr4G2LSQONIFjH"
  src="https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js" async
></script>
<p>Here&rsquo;s another demo focusing on the embedded terminal emulator which makes this
possible:</p>
<script
  id="asciicast-N57RaPJqwQD2h0AejLGDWrSi9"
  src="https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js" async
></script>
<p>Keybindings are also working, which are configured simiarly to vim - each
keybinding simulates a series of keystrokes, which all eventually boil down to
an ex-style command. I&rsquo;ve bought a domain for aerc, and I&rsquo;ll be populating it
with some marketing content and a nice tour of the features soon. I hope to have
time to work on sending emails this month as well. In the immediate future, I
need to fix some crashiness that occurs in some situations.</p>
<p>In other email-related news, <a href="https://git-send-email.io">git-send-email.io</a> is
now live, an interactive tutorial on using email with git. This workflow is the
one sourcehut focuses on, and is also used by a large number of important free
software projects, like Linux, gcc, clang, glibc, musl, ffmpeg, vim, emacs,
coreutils&hellip; and many, many more. Check it out!</p>
<p>I also spent a fair bit of time working on lists.sr.ht this month. Alpine Linux
has provisioned some infrastructure for a likely migration from their current
mailing list solution (mlmmj+hypermail) to one based on lists.sr.ht, which I
deployed a lists.sr.ht instance to for them, and trained them on some
administrative aspects of lists.sr.ht. User-facing improvments that came from
this work include tools for importing and exporting mail spools from lists,
better access controls, moderation tools, and per-list mime whitelisting and
blacklisting. Admin-facing tools include support for a wider variety of MTA
configurations and redirects to continue supporting old incoming mail addresses
when migrating from another mailing list system.</p>
<p>Stepping outside the realm of email, let&rsquo;s talk about Wayland. Since Sway 1.0,
development has continued at a modest pace, fixing a variety of small bugs and
further improving i3 compatibility. We&rsquo;re getting ready to split swaybg into a
standalone project which can be used on other Wayland compositors soon, too. I
also have been working more on Godot, and have switched gears towards adding a
Wayland backend to Godot upstream - so you can play Godot-based video games on
Wayland. I&rsquo;m still working with upstream and some other interested contributors
on the best way to integrate these changes upstream, but I more or less
completed a working port with support for nearly all of Godot&rsquo;s platform
abstractions.</p>
<p><a href="https://sr.ht/fOvB.png"><img src="https://sr.ht/fOvB.png" alt="Godot editor running on Wayland with HiDPI support"></a></p>
<p>In smaller project news, I spent an afternoon putting together a home-grown
video livestreaming platform a few weeks ago. The result:
<a href="https://live.drewdevault.com">live.drewdevault.com</a>. Once upon a time I was
livestreaming programming sessions on Twitch.tv, and in the future I&rsquo;d like to
do this more often on my new platform. This one is open source and built on the
shoulders of free software tools. I announce new streams on
<a href="https://cmpwn.com/@sir">Mastodon</a>, join us for the next one!</p>
<p>I&rsquo;m also starting on another project called cozy, which is yak-shaving for
several other projects I have in mind. It&rsquo;s kind of ambitious&hellip; it&rsquo;s a full
end-to-end C compiler toolchain. One of my goals (which, when completed, can
unblock other tasks before cozy as a whole is done) is to make the parser work
as a standalone library for reading, writing, and maniuplating the C AST. I&rsquo;ve
completed the lexer and basic yacc grammar, and I&rsquo;m working on extracting an AST
from the parser. I only started this weekend, so it&rsquo;s pretty early on.</p>
<p>I&rsquo;ll leave you with a fun weekend project I did shortly after the last update:
<a href="https://qlock.drewdevault.com/">otaqlock</a>. The server this runs on isn&rsquo;t awash
with bandwidth and the site doesn&rsquo;t work great on mobile - so your milage may
vary - but it is a cool artsy restoration project nonetheless. Until next time,
and thank you for your support!</p>
<small class="text-muted">
This work was possible thanks to users who support me financially. Please
consider <a href="https://drewdevault.com/donate">donating to my work</a> or <a
href="https://sourcehut.org">buying a sourcehut.org subscription</a>. Thank you!
</small>]]></description><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate></item><item><title>NewPipe represents the best of FOSS</title><link>https://drewdevault.com/2019/04/02/NewPipe-represents-the-best-of-FOSS.html</link><description><![CDATA[<p><a href="https://newpipe.schabi.org/">NewPipe</a> is a free and open-source Android
application for browsing &amp; watching YouTube. In my opinion, NewPipe is a perfect
case-study in why free &amp; open source software is great and how our values differ
from proprietary software in important ways. There&rsquo;s one simple reason: it&rsquo;s
better than the proprietary YouTube app, in every conceivable way, for free.</p>
<p>NewPipe is better because it&rsquo;s user-centric software. It exists to make its
users lives better, not to enrich its overseers. Because of this, NewPipe has
many features which are deliberately omitted from the proprietary app, such as:</p>
<ul>
<li>No advertisements<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>Playing any video in the background</li>
<li>Downloading videos (or their audio tracks alone) to play offline</li>
<li>Playing videos in a pop-up player</li>
<li>Subscribing to channels without a YouTube account</li>
<li>Importing and exporting subscriptions</li>
<li>Showing subscriptions in chronological order</li>
<li>It supports streaming services other than YouTube!<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
</ul>
<p>YouTube supports some of these&hellip; for $12/month. Isn&rsquo;t that a bit excessive?
Other features it doesn&rsquo;t support at all. On top of that, YouTube is constantly
gathering data about you and making decisions which put their interests ahead of
yours, whereas NewPipe never phones home and consistently adds new features that
put users first. The proprietary app is <em>exploitative</em> of users, and NewPipe is
<em>empowering</em> users.</p>
<p>There are a lot of political and philosophical reasons to use &amp; support free and
open source software. Sometimes it&rsquo;s hard to get people on board with FOSS by
pitching them these first. NewPipe is a great model because it&rsquo;s straight up
<em>better</em>, and better for reasons that make these philosophical points obvious
and poignant. The NewPipe project was started by <a href="https://schabi.org/">Christian
Schabesberger</a>, is co-maintained by a <a href="https://github.com/orgs/TeamNewPipe/people">team of 6</a>, and
has been contributed to by over <a href="https://github.com/TeamNewPipe/NewPipe/graphs/contributors">300 people</a>. You can donate
<a href="https://newpipe.schabi.org/donate/">here</a>.  NewPipe represents the best of our community. Thanks!
<img src="https://drewdevault.com/img/heart.png" style="display: inline; width: 1.2rem; top: 0.2rem; position: relative" /></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Support your content creators with tools like Liberapay and Patreon!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>At least in theory&hellip; basic SoundCloud support is working and more services are coming soon.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 2 Apr 2019 00:00:00 +0000</pubDate></item><item><title>Rust is not a good C replacement</title><link>https://drewdevault.com/2019/03/25/Rust-is-not-a-good-C-replacement.html</link><description><![CDATA[<p>I have a saying that summarizes my opinion of Rust compared to Go: &ldquo;Go is the
result of C programmers designing a new programming language, and Rust is the
result of C++ programmers designing a new programming language&rdquo;. This isn&rsquo;t just
a metaphor - Go was designed by plan9 alumni, an operating system written in C
and the source of inspiration for many of Go&rsquo;s features, and Rust was designed
by the folks at Mozilla - whose flagship product is one of the largest C++
codebases in the world.</p>
<p>The values of good C++ programmers are incompatible with the values of good C
programmers<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Rust is a decent C++ replacement if you have the same goals as
C++, but if you don&rsquo;t, the design has very similar drawbacks. Both Rust and C++
are what I like to call &ldquo;kitchen sink&rdquo; programming languages, with the obvious
implication. These languages solve problems by adding more language features. A
language like C solves problems by writing more C code.</p>
<p>I did some back of the napkin estimates of the rate at which these languages
become more complex, based on the rate at which they add features per year. My
approach wasn&rsquo;t very scientific, but I&rsquo;m sure the point comes across.</p>
<ul>
<li><strong>C: 0.73 new features per year</strong>, measured by the number of bullet points in
the C11 article on Wikipedia which summarizes the changes from C99, adjusted to
account for the fact that C18 introduced no new features.</li>
<li><strong>Go: 2 new features per year</strong>, measured by the number of new features listed
on the Wikipedia summary of new Go versions.</li>
<li><strong>C++: 11.3 new features per year</strong>, measured by the number of bullet points
in the C++17 article which summarizes the changes from C++14.</li>
<li><strong>Rust: 15 new features per year</strong>, measured by the number of headers in the
release notes of major Rust versions over the past year, minus things like
linters.</li>
</ul>
<p>This speaks volumes to the stability of these languages, but more importantly it
speaks to their complexity. Over time it rapidly becomes difficult for one to
keep an up-to-date mental map of Rust and how to solve your problems
idiomatically. A Rust program written last year already looks outdated, whereas
a C program written ten years ago has pretty good odds of being just fine.
Systems programmers don&rsquo;t want shiny things - we just want things that work.
That really cool feature $other_language has? Not interested. It&rsquo;ll be more
trouble than it&rsquo;s worth.</p>
<p>With the philosophical wish-wash out of the way and the tone set, let me go over
some more specific problems when considering Rust as a C replacement.</p>
<p><strong>C is the most portable programming language</strong>. Rust actually has a pretty
admirable selection of supported targets for a new language (thanks mostly to
LLVM), but it pales in comparison to C, which runs on almost <em>everything</em>. A new
CPU architecture or operating system can barely be considered to exist until it
has a C compiler. And once it does, it unlocks access to a vast repository of
software written in C. Many other programming languages, such as Ruby and
Python, are implemented in C and you get those for free too.</p>
<p><strong>C has a spec</strong>. No spec means there&rsquo;s nothing keeping rustc honest. Any
behavior it exhibits could change tomorrow. Some weird thing it does could be a
feature <em>or</em> a bug. There&rsquo;s no way to know until your code breaks. That they
can&rsquo;t slow down to pin down exactly what defines Rust is also indicative of an
immature language.</p>
<iframe
  src="https://cmpwn.com/@sir/100437209244243864/embed"
  class="mastodon-embed"
  style="max-width: 100%; border: 0; margin: 0 auto; display: block;"
  width="400"></iframe>
<script src="https://cmpwn.com/embed.js" async="async"></script>
<p><strong>C has many implementations</strong>. C has many competing compilers. They all work
together stressing out the spec, fishing out the loosely defined corners, and
pinning down exactly what C is. Code that compiles in one and not another is
indicative of a bug in one of them, which gives a nice extra layer of testing to
each. By having many implementations, we force C to be well defined, and this is
good for the language and its long-term stability. Rustc could stand to have
some competition as well, maybe it would get faster!<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p><strong>C has a consistent &amp; stable ABI</strong>. The System-V ABI is supported on a wide
variety of systems and has been mostly agreed upon by now. Rust, on the other
hand, has no stable internal ABI. You have to compile and link everything all in
one go on the same version of the Rust compiler. The only code which can
interact with the rest of the ecosystem is unidiomatic Rust, written at some
kind of checkpoint between Rust and the outside world. The outside world exists,
it speaks System-V, and us systems programmers spend a lot of our time talking
to it.</p>
<p><strong>Cargo is mandatory</strong>. On a similar line of thought, Rust&rsquo;s compiler flags are
not stable. Attempts to integrate it with other build systems have been met with
hostility from the Rust &amp; Cargo teams. The outside world exists, and us systems
programmers spend a lot of our time integrating things. Rust refuses to play
along.</p>
<p><strong>Concurrency is generally a bad thing.</strong> Serial programs have X problems, and
parallel programs have X<sup>Y</sup> problems, where Y is the amount of
parallelism you introduce. Parallelism in C is a pain in the ass for sure, and
this is one reason I find Go much more suitable to those cases. However, nearly
all programs needn&rsquo;t be parallel. A program which uses poll effectively is going
to be simpler, reasonably performant, and have orders of magnitude fewer bugs.
&ldquo;Fearless concurrency&rdquo; allows you to fearlessly employ bad software design 9
times out of 10.</p>
<p><strong>Safety</strong>. Yes, Rust is more safe. I don&rsquo;t really care. In light of all of
these problems, I&rsquo;ll take my segfaults and buffer overflows. I especially refuse
to &ldquo;rewrite it in Rust&rdquo; - because no matter what, rewriting an entire program
from scratch is <em>always</em> going to introduce more bugs than maintaining the C
program ever would. I don&rsquo;t care what language you rewrite it in.</p>
<hr>
<p>C is far from the perfect language - it has many flaws. However, its
replacement will be simpler - not more complex. Consider Go, which has had a lot
of success in supplanting C for many problems. It does this by specializing on
certain classes of programs and addressing them with the simplest solution
possible. It hasn&rsquo;t completely replaced C, but it has made a substantial dent in
its problem space - more than I can really say for Rust (which has made similar
strides for C++, but definitely not for C).</p>
<p>The kitchen sink approach doesn&rsquo;t work. Rust will eventually fail to the &ldquo;jack
of all trades, master of none&rdquo; problem that C++ has. Wise languages designers
start small and stay small. Wise systems programmers extend this philosophy to
designing entire systems, and Rust is probably not going to be invited. I
understand that many people, particularly those already enamored with Rust,
won&rsquo;t agree with much of this article. But now you know why we are still writing
C, and hopefully you&rsquo;ll stop bloody bothering us about it.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Aside: the term &ldquo;C/C++&rdquo; infuriates me. They are completely different languages. Idiomatic C++ looks nothing like idiomatic C.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Rust does have one competing compiler, but without a spec it&rsquo;s hard to define its level of compatibility and correctness, and it&rsquo;s always playing catch-up.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate></item><item><title>Status update, March 2019</title><link>https://drewdevault.com/2019/03/15/Status-update-March-2019.html</link><description><![CDATA[<p>My todo list is getting completed at a pace it&rsquo;s never seen before, and growing
at a new pace, too. This full-time FOSS gig is really killing it! As the good
weather finally starts to roll in, it&rsquo;s time for March&rsquo;s status update. Note: I
posted updates <a href="https://www.patreon.com/sircmpwn/posts">on Patreon</a> before, but will start posting here
instead. This medium doesn&rsquo;t depend on a proprietary service, allows for richer
content, and is useful for my supporters who support my work via other donation
platforms.</p>
<p>Sway 1.0 has been released! <img style="display: inline; height: 1.2rem"
src="https://drewdevault.com/img/party.png" /> I wrote a <a href="https://drewdevault.com/2019/03/11/Sway-1.0-released.html">detailed
write-up</a> on the release and our future
plans separately, which I encourage you to read if you haven&rsquo;t already. However,
I do have some additional progress to share outside of the big sway 1.0 news.
In the last update, I mentioned that I got a Librem 5 devkit from Guido
Günther<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> at FOSDEM. My plans were to get this up and running with sway and
start improving touch support, and I&rsquo;ve accomplished both:</p>
<p><img src="https://sr.ht/fGxf.jpg" alt="A picture of a Librem5 devkit running pmOS and sway"></p>
<p>As you can see, I also got <a href="https://postmarketos.org/">postmarketOS</a> running,
and I love it - I hope to work with them a lot in the future. The <a href="https://github.com/swaywm/sway/pull/3711">first
patch</a> for improving touch support in
sway has landed and I&rsquo;ll be writing more in the future. I also sent some patches
to Purism&rsquo;s <a href="https://source.puri.sm/Librem5/virtboard">virtboard</a> project, an
on-screen keyboard, making it more useful for Sway users. I hope to make an OSK
of my own at some point, with multiple layouts, CJK support, and client-aware
autocompletion, in the future. Until then, an improved virtboard is a nice
stop-gap :) I&rsquo;ve also been working on wlroots a bit, including <a href="https://github.com/swaywm/wlroots/pull/1578">a patch adding
remote desktop support</a>.</p>
<p>In other Wayland news, I&rsquo;ve also taken a part time contract to build a module
integrating wlroots with the <a href="https://godotengine.org/">Godot game engine</a>:
<a href="https://git.sr.ht/~sircmpwn/gdwlroots">gdwlroots</a>. The long-term goal is to
build a VR compositor based on Godot and develop standards for Wayland
applications to have 3D content. 100% of this work is free software (MIT
licensed) and will bring improvements to both the wlroots and Godot ecosystems.
Next week I&rsquo;ll be starting work on adding a Wayland backend to Godot so that
Godot-based games can run on Wayland compositors directly. Here&rsquo;s an example
compositor running on Godot:</p>
<p>&lt;video
src=&ldquo;<a href="https://sr.ht/9bV-.webm%22">https://sr.ht/9bV-.webm&quot;</a>
autoplay muted loop controls
style=&ldquo;max-width: 100%;&rdquo;</p>
<blockquote>
</video></blockquote>
<p>I&rsquo;ve also made some significant progress on
<a href="https://git.sr.ht/~sircmpwn/aerc2">aerc2</a>. I have fleshed out the command
subsystem, rigged up keybindings, and implemented the message list, and along
with it all of the asynchronous communication between the UI thread, network
thread, and mail server. I think at this point most of the unknowns are solved
with aerc2, and the rest just remains to be implemented. I&rsquo;m glad I chose to
rewrite it from C, though my love for C still runs deep. The Go ecosystem is
much better suited to the complex problems and dependency tree of software like
aerc, plus has a nice concurrency model for aerc&rsquo;s async design.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> The next
major problem to address is the embedded terminal emulator, which I hope to
start working on soon.</p>
<script
  id="asciicast-pafXXANiWHY9MOH2yXdVHHJRd"
  src="https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js" async
></script>
<p>aerc2&rsquo;s progress is a great example of my marginalized projects
becoming my side projects, as my side projects become my full-time job, and thus
all of them are developing at a substantially improved pace. The productivity
increase is pretty crazy. I&rsquo;m really thankful to everyone who&rsquo;s supporting my
work, and excited to keep building crazy cool software thanks to you.</p>
<p>I was meaning to work on RISC-V this month, but I&rsquo;ve been a little bit
distracted by everything else. However, there has been some discussion about how
to approach upstreaming and I&rsquo;m planning on tackling this next week. I also
spent some time putting together a custom 1U I can install in my datacenter for
a more permanent RISC-V setup. Some of this is working towards getting RISC-V
ready for builds.sr.ht users to take advantage of - that relay is for cutting
power to the board to force a reboot when it misbehaves - but a lot of this is
also useful for my own purposes in porting musl &amp; Alpine Linux.</p>
<p><img src="https://sr.ht/M7me.jpg" alt="Picture of a 1U chassis with a bunch of custom components within"></p>
<p>One problem I&rsquo;m still trying to solve is the microSD card. I don&rsquo;t want to run
untrusted builds.sr.ht code when that microSD card is plugged in. I&rsquo;ve been
working on some prototyping (breaking out the old soldering iron) to make a
microSD&hellip; thing, which I can plug into this and physically cut VCC to the
microSD card with that relay I have rigged up. This is pretty hard, and my
initial attempts were unsuccessful. If anyone knowledgable about this has ideas,
please get in touch.</p>
<p>Outside of RISC-V, I have been contributing to Alpine Linux a lot more lately in
general. I adopted the sway &amp; wlroots packages, have been working on improved
PyQt support, cleaning up Python packages, clearing out the nonfree MongoDB
packages, and more. I also added a bunch of new packages for miscellaneous
stuff, including alacritty, font-noto-cjk, nethack, and Simon Ser&rsquo;s
<a href="https://github.com/emersion/go-dkim">go-dkim</a> milter. Most importantly,
however, I&rsquo;ve started
<a href="https://wiki.alpinelinux.org/wiki/Python_package_policies">planning</a> and
<a href="https://lists.alpinelinux.org/alpine-devel/6465.html">discussing</a> a Python
overhaul project in aports with the Alpine team, which will including cleaning
up all of the Python patches and starting on Python 2 removal. I depend a lot on
Alpine and its Python support, so I&rsquo;m excited to be working on these
improvements!</p>
<p>I have some Sourcehut news as well. Like usual, there&rsquo;ll be a detailed
Sourcehut-specific update posted to the
<a href="https://lists.sr.ht/~sircmpwn/sr.ht-announce">sr.ht-announce</a> mailing list
later on. With Ludovic Chabant&rsquo;s help, there have been continued improvements to
Mercurial support, notably adding builds.sr.ht integration as of yesterday.
Thanks Ludovic! We&rsquo;ve also been talking to some NetBSD folks who may be
interested in using Sourcehut to host the NetBSD code once they finish their
CVS-&gt;Hg migration, and we&rsquo;ve been improving the performance for large
repositories during their experiments on sr.ht.</p>
<p>There&rsquo;s a bunch more going on with Sourcehut - paste.sr.ht, APIs, a command line
interface for those APIs, webhooks, and more still - check out the email on
sr.ht-announce later. That&rsquo;s all I have for you today. Thank you for your
support, and until next time!</p>
<small class="text-muted">
This work was possible thanks to users who support me financially. Please
consider <a href="https://drewdevault.com/donate">donating to my work</a> or <a
href="https://sourcehut.org">buying a sourcehut.org subscription</a>. Thank you!
</small>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>A Purism employee that works closely with wlroots on the Librem 5&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>&ldquo;aerc&rdquo; stands for &ldquo;asynchronous email reading client&rdquo;, after all.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate></item><item><title>Announcing the release of sway 1.0</title><link>https://drewdevault.com/2019/03/11/Sway-1.0-released.html</link><description><![CDATA[<p>1,315 days after I started the <a href="https://swaywm.org">sway</a> project, it&rsquo;s finally
time for <a href="https://github.com/swaywm/sway/releases/tag/1.0">sway 1.0</a>! I had no
idea at the time how much work I was in for, or how many talented people would
join and support the project with me. In order to complete this project, we have
had to rewrite the entire Linux desktop nearly from scratch. Nearly 300 people
worked together, together writing over 9,000 commits and almost 100,000 lines of
code, to bring you this release.</p>
<p><small class="text-muted">Sway is an i3-compatible Wayland desktop for Linux and FreeBSD</small></p>
<p>1.0 is the first stable release of sway and represents a consistent, flexible,
and powerful desktop environment for Linux and FreeBSD. We hope you&rsquo;ll enjoy it!
If the last sway release you used was 0.15 or earlier, you&rsquo;re in for a shock.
0.15 was a buggy, frustrating desktop to use, but sway 1.0 has been completely
overhauled and represents a much more capable desktop. It&rsquo;s almost impossible to
summarize all of the changes which makes 1.0 great. Sway 1.0 adds a huge variety
of features which were sorely missed on 0.x, improves performance in every
respect, offers a more faithful implementation of Wayland, and exists as a
positive political force in the Wayland ecosystem pushing for standardization
and cooperation among Wayland projects.</p>
<p>When planning the future of sway, we realized that the Wayland ecosystem was
sorely in need of a stable &amp; flexible common base library to encapsulate all of
the difficult and complex facets of building a desktop. To this end, I decided
we would build <a href="https://github.com/swaywm/wlroots">wlroots</a>. It&rsquo;s been a
smashing success. This project has become very important to the Linux desktop
ecosystem, and the benefits we reap from it have been shared with the community
at large. <a href="https://github.com/swaywm/wlroots/wiki/Projects-which-use-wlroots">Dozens of projects</a> are using it today, and soon you&rsquo;ll
find it underneath most Linux desktops, on your phone, in your VR environment,
and more. Its influence extends beyond its borders as well, as we develop and
push for standards throughout Wayland.</p>
<p>Through this work we have also helped to build a broader ecosystem of tools
built on interoperable standards which you may find useful in your new sway 1.0
desktop. Here are a few of my favorites - each of which is compatible with many
Wayland compositors:</p>
<ul>
<li><a href="https://github.com/swaywm/swayidle">swayidle</a>: idle management daemon</li>
<li><a href="https://github.com/swaywm/swaylock">swaylock</a>: lock screen</li>
<li><a href="https://github.com/emersion/mako">mako</a>: notification daemon</li>
<li><a href="https://github.com/emersion/grim">grim</a>: screenshot tool</li>
<li><a href="https://github.com/emersion/slurp">slurp</a>: interactive region selection</li>
<li><a href="https://github.com/ammen99/wf-recorder">wf-recorder</a>: video capture tool</li>
<li><a href="https://github.com/Alexays/Waybar">waybar</a>: alternative panel</li>
<li><a href="https://source.puri.sm/Librem5/virtboard">virtboard</a>: on-screen keyboard</li>
<li><a href="https://github.com/bugaevc/wl-clipboard">wl-clipboard</a>: xclip replacement</li>
<li><a href="https://github.com/xyproto/wallutils">wallutils</a>: fancy wallpaper manager</li>
</ul>
<hr>
<p>None of this would be possible without the support of sway&rsquo;s and wlroots'
talented contributors. Hundreds of people worked together on this. I&rsquo;d like to
give special thanks to our core contributors: Brian Ashworth, Ian Fan, Ryan
Dwyer, Scott Anderson, and Simon Ser. Thanks are also in order for those who
have helped wlroots fit into the broader ecosystem - thanks to Purism for their
help on wlroots, KDE &amp; Canonical for their help on protocol standardization. I
also owe thanks to all of the other projects which use wlroots, particularly
including Way Cooler, Wayfire, and Waymonad, who all have made substantial
contributions to wlroots in their pursit of the best Wayland desktop.</p>
<p>I&rsquo;d also of course like to thank all of the users who have donated to support
my work, which I now do full-time, which has had and I hope will continue to
have a positive impact on the project and those around it. Please consider
<a href="https://drewdevault.com/donate">donating</a> to support the future of sway &amp;
wlroots if you haven&rsquo;t yet.</p>
<p>Though sway today is already stable and powerful, we&rsquo;re not done yet. We plan to
continue improving performance &amp; stability, adding useful desktop features,
taking advantage of better hardware, and bringing sway to more users. Here&rsquo;s
some of what we have planned for future releases:</p>
<ul>
<li>Better Wayland-native tools for internationalized input methods like CJK</li>
<li>Better accessibility tools including improved screen reader support,
high-contrast mode, a magnifying glass tool, and so on</li>
<li>Integration with xdg-portal &amp; pipewire for interoperable screen capture</li>
<li>Improved touch screen support for use on the <a href="https://puri.sm/products/librem-5/">Librem
5</a> and on
<a href="https://postmarketos.org/">postmarketOS</a></li>
<li>Better support for drawing tablets and additional hardware</li>
<li>Sandboxing and security features</li>
</ul>
<p>As with all sway features, we intend to have the best-in-class implementations
of these features and set the bar as high as we can for everyone else. We&rsquo;re
looking forward to your continued support!</p>]]></description><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate></item><item><title>Sourcehut&apos;s spartan approach to web design</title><link>https://drewdevault.com/2019/03/04/sourcehut-design.html</link><description><![CDATA[<p><a href="https://sourcehut.org">Sourcehut</a> is known for its brutalist design, with its
mostly shades-of-gray appearance, conservative color usage, and minimal
distractions throughout. This article aims to share some insights into the
philosophy that guides this design, both for the curious reader and for the
new contributor to the open-source project.</p>
<p>The most important principle is that sr.ht is an engineering tool first and
foremost, and when you&rsquo;re there it&rsquo;s probably because you&rsquo;re in engineering
mode. Therefore, it&rsquo;s important to bring the information you&rsquo;re there for to the
forefront, and minimize distractions. In practice, this means that the first
thing on any page to grab your attention should be the thing that brought you
there. Consider <a href="https://git.sr.ht/~sircmpwn/git.sr.ht/tree/master/gitsrht/service.py">the source file view on git.sr.ht</a>. For
reference, here are similar pages on <a href="https://github.com/torvalds/linux/blob/master/init/main.c">GitHub</a> and
<a href="https://gitlab.freedesktop.org/libinput/libinput/blob/master/src/evdev.c">Gitlab</a>.</p>
<p><a href="https://git.sr.ht/~sircmpwn/git.sr.ht/tree/master/gitsrht/service.py"><img src="https://sr.ht/kkJm.png" alt="Screenshot of git.sr.ht"></a></p>
<style>
img {
  box-shadow: 0 0 2px 2px #888;
  max-width: 90%;
}
</style>
<p>The vast majority of the git.sr.ht page is dedicated to the source code we&rsquo;re
reading here, and it&rsquo;s also where most of the colors are. Your eye is drawn
straight to the content. Any additional information we show on this page is
directly relevant to the content: breadcrumbs to other parts of the tree, file
mode &amp; size, links to other views on this repository. The nav can take you away
from this page, but it&rsquo;s colored a light grey to avoid being distracting and
each link is another engineering tool - no marketing material or fluff. Contrast
with GitHub: a large, dark, attention grabbing navbar with links to direct you
away from the content and towards marketing pages. If you&rsquo;re logged out, you get
a giant sign-up box which pushes the content halfway off the page. Colors here
are also distracting: note the large line of colorful avatars that catches your
eye despite almost certainly being unrelated to your purpose on this page.</p>
<p><img src="https://sr.ht/1qdZ.png" alt="Screenshot of builds.sr.ht"></p>
<p>Colors are used much more conservatively on sourcehut. If you log into
builds.sr.ht and visit the index page, you&rsquo;re greeted with a large blue &ldquo;submit
manifest&rdquo; button, and very little color besides. This is probably why you were
here - so it&rsquo;s made obvious and colorful so your eyes can quickly find it and
get on with your work. Other pages are similar: the todo.sr.ht tracker page has
a large form with a blue &ldquo;submit&rdquo; button for creating a new ticket, email views
on lists.sr.ht have a large blue &ldquo;reply to thread&rdquo; button, and
<a href="https://man.sr.ht">man.sr.ht</a> has a large green button enticing new users
towards the tutorials. Red is also used throughout for dangerous actions, like
deleting things.  Each button also is unambiguous and relies on the text within
itself rather than the text nearby: the git.sr.ht repository deletion page uses
&ldquo;Delete $reponame&rdquo;, rather than &ldquo;Continue&rdquo;.</p>
<p><img src="https://sr.ht/d6Vx.png" alt="Screenshot of repo deletion UI"></p>
<p>The last important point in sourcehut&rsquo;s design is the use of icons, or rather
the lack thereof. Icons are used extremely conservatively on sr.ht. Interactive
icons (things you are expected to click) are never shown without text that
clarifies what happens when you click them. Informational icons usually have a
tooltip which explains their meaning, and are quite rare - only used in cases
where real estate limits the use of text. Assigning an icon to every action or
detail is not necessary and would add more distractions to the screen.</p>
<p>I&rsquo;m not a particularly skilled UI designer, so keeping it simple like this also
helps to make a reasonably nice UI attainable for an engineer-oriented developer
like me. Adding new pages is generally easy and requires little thought by
applying these basic principles throughout, and the simple design doesn&rsquo;t take
long to execute on. It&rsquo;s not perfect, but I like it and I&rsquo;ve received positive
feedback from my users.</p>]]></description><pubDate>Mon, 4 Mar 2019 00:00:00 +0000</pubDate></item><item><title>Tips for a disciplined git workflow</title><link>https://drewdevault.com/2019/02/25/Using-git-with-discipline.html</link><description><![CDATA[<p>Basic git usage involves typing a few stock commands to &ldquo;<a href="https://xkcd.com/1597/">sync everyone
up</a>&rdquo;. Many people who are frustrated with git become so
because they never progress beyond this surface-level understanding of how it
works. However, mastering git is easily worth your time. How much of your day is
spent using git? I would guess that there are many tools in your belt that you
use half as often and have spent twice the time studying.</p>
<p><a href="https://xkcd.com/1205/"><img src="https://imgs.xkcd.com/comics/is_it_worth_the_time.png" alt=""></a></p>
<p>If you&rsquo;d like to learn more about git, I suggest starting with <a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain">Chapter
10</a> of <a href="https://git-scm.com/book/en/v2">Pro Git</a> (it&rsquo;s free!), then reading chapters 2, 3,
and 7. The rest is optional. In this article, we&rsquo;re going to discuss how you can
apply the tools discussed in the book to a disciplined and productive git
workflow.</p>
<h3 id="the-basics-writing-good-commit-messages">The basics: Writing good commit messages</h3>
<p><a href="https://xkcd.com/1296/"><img src="https://imgs.xkcd.com/comics/git_commit.png" alt=""></a></p>
<p>You may have heard this speech before, but bear with me. Generally, you should
not use <code>git commit -m &quot;Your message here&quot;</code>. Start by configuring git to use
your favorite editor: <code>git config --global core.editor vim</code>, then simply run
<code>git commit</code> alone. Your editor will open and you can fill in the file with your
commit message. The first line should be limited to 50 characters in length, and
should complete this sentence: when applied, this commit will&hellip; &ldquo;Fix text
rendering in CJK languages&rdquo;. &ldquo;Add support for protocol v3&rdquo;. &ldquo;Refactor CRTC
handling&rdquo;. Then, add a single empty line, and expand on this in the <em>extended
commit description</em>, which should be hard-wrapped at 72 columns, and include
details like rationale for the change, tradeoffs and limitations of the
approach, etc.</p>
<p>We use 72 characters because that&rsquo;s <a href="https://tools.ietf.org/html/rfc2822#section-2.1.1">the standard width of an email</a>, and
email is an important tool for git. The 50 character limit is used because the
first line becomes the subject line of your email - and lots of text like
&ldquo;<code>[PATCH linux-usb v2 0/13]</code>&rdquo; can get added to beginning. You might find
wrapping your lines like this annoying and burdensome - but consider that when
working with others, they may not be reading the commit log in the same context
as you. I have a vertical monitor that I often read commit logs on, which is not
going to cram as much text into one line as your 4K 16:9 display could.</p>
<h3 id="each-commit-should-be-a-self-contained-change">Each commit should be a self-contained change</h3>
<p>Every commit should only contain one change - avoid sneaking in little unrelated
changes into the same commit<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Additionally, avoid breaking one change into
several commits, unless you can refactor the idea into discrete steps - each of
which represents a complete change in its own right. If you have several changes
in your working tree and only need to commit some of them, try <code>git add -i</code> or
<code>git add -p</code>. Additionally, every commit should compile and run all tests
successfully, and should avoid having any known bugs which will be fixed up in a
future commit.</p>
<p>If this is true of your repository, then you can check out any commit and expect
the code to work correctly. This also becomes useful later, for example when
cherry-picking commits into a release branch. Using this approach also allows
<a href="https://git-scm.com/docs/git-bisect">git-bisect</a> to become more useful<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>,
because if you can expect the code to compile and complete tests successfully
for every commit, you can pass <code>git-bisect</code> a script which programmatically
tests a tree for the presence of a bug and avoid false positives. These
self-contained commits with good commit messages can also make it really easy to
prepare release notes with <a href="https://git-scm.com/docs/git-shortlog">git-shortlog</a>,
<a href="https://lkml.org/lkml/2019/1/6/178">like Linus does with Linux releases</a>.</p>
<h3 id="get-it-right-on-the-first-try">Get it right on the first try</h3>
<p>We now come to one of the most important features of git which distinguishes it
from its predecessors: history editing. All version control systems come with a
time machine of some sort, but before git they were mostly read-only. However,
git&rsquo;s time machine is different: you can change the past. In fact, you&rsquo;re
encouraged to! But a word of warning: only change a future which has yet to be
merged into a stable public branch.</p>
<p>The advice in this article - bug-free, self-contained commits with a good commit
message - is hard to get right on the first try. Editing your history, however,
is easy and part of an effective git workflow. Familiarize yourself with
<a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">git-rebase</a> and use
it liberally. You can use rebase to reorder, combine, delete, edit, and split
commits. One workflow I find myself commonly using is to make some changes to a
file, commit a &ldquo;fixup&rdquo; commit (<code>git commit -m fixup</code>), then use <code>git rebase -i</code>
to squash it into an earlier commit.</p>
<h3 id="other-miscellaneous-tips">Other miscellaneous tips</h3>
<ul>
<li>Read the man pages! Pick a random git man page and read it now. Also, if you
haven&rsquo;t read the top-level git man page (simply <code>man git</code>), do so.</li>
<li>At the bottom of each man page for a high-level git command is usually a list
of low-level git commands that the high-level command relies on. If you want
to learn more about how a high-level git command works, try reading these man
pages, too.</li>
<li>Learn how to specify the commit you want with <a href="https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection">rev selection</a></li>
<li>Branches are useful, but you should learn how to work without them as well to
have a nice set of tools in your belt. Use tools like <code>git pull --rebase</code>,
<code>git send-email -1 HEAD~2</code>, and <code>git push origin HEAD~2:master</code>.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I could stand to take my own advice more often in this respect.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>In a nutshell, git bisect is a tool which does a binary search between two commits in your history, checking out the commits in between one at a time to allow you to test for the presence of a bug. In this manner you can narrow down the commit which introduced a problem.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate></item><item><title>Generics aren&apos;t ready for Go</title><link>https://drewdevault.com/2019/02/18/Generics-arent-ready-for-Go.html</link><description><![CDATA[<p>In the distance, a gradual roar begins to grow in volume. A dust cloud is
visible over the horizon. As it nears, the shouts of the oncoming angry mob can
be heard. Suddenly, it stops, and a brief silence ensues. Then the air is filled
with the clackings of hundreds of keyboards, angrily typing the owner&rsquo;s opinion
about generics and Go. The clans of Java, C#, Rust, C++, TypeScript, Haskell,
and more - usually mortal enemies - have combined forces to fight in what may
become one of the greatest flamewars of our time. And none of them read more
than the title of this article before writing their comment.</p>
<p>Have you ever seen someone write something to the effect of &ldquo;I would use Go, but
I need generics&rdquo;? Perhaps we can infer from this that many of the people who are
pining after generics in Go are not, in fact, Go users. Many of them are users
of another programming language that <em>does</em> have generics, and they feel that
generics are a good fit for this language, and therefore a good fit for any
language. The inertia of &ldquo;what I&rsquo;m used to&rdquo; comes to a violent stop when they
try to use Go. People affected by this frustration interpret it as a problem
with Go, that Go is missing some crucial feature - such as generics. But this
lack of features is itself a feature, not a bug.</p>
<p>Go strikes me as one of the most conservative programming languages available
today. It&rsquo;s small and simple, and every detail is carefully thought out. There
are very few dusty corners of Go - in large part because Go has fewer corners in
general than most programming languages. This is a major factor in Go&rsquo;s success
to date, in my opinion. Nearly all of Go&rsquo;s features are bulletproof, and in my
opinion are among the best implementations of their concepts in our entire
industry. Achieving this feat requires having <em>fewer</em> features in total.
Contrast this to C++, which has too many footguns to count. You <em>could</em> write a
book called &ldquo;C++: the good parts&rdquo;, but consider that such a book about Go would
just be a book about Go. There&rsquo;s little room for the bad parts in such a spartan
language.</p>
<p>So how should we innovate in Go? Consider the case of dependency management. Go
1.11 shipped with the first version of Go modules, which, in my opinion, is a
game changer. I passionately hate <code>$GOPATH</code>, and I thought dep wasn&rsquo;t much
better. dep&rsquo;s problem is that it took the dependency management ideas that other
programming languages have been working with and brought the same ideas to Go.
Instead, Go modules took the idea of dependency management and rethought it from
first principles, then landed on a much more elegant solution that I think other
programming languages will spend the next few years catching up with. I like to
make an analogy to physics: dep is like <a href="https://en.wikipedia.org/wiki/General_relativity">General Relativity</a> or <a href="https://en.wikipedia.org/wiki/Standard_Model">the
Standard Model</a>, whereas Go modules are more like the <a href="https://en.wikipedia.org/wiki/Grand_Unified_Theory">Grand Unified
Theory</a>. Go doesn&rsquo;t settle for anything less when adding features. It&rsquo;s
not a language where liberal experimentation with imperfect ideas is desirable.</p>
<p>I feel that this applies to generics. In my opinion, generics are an imperfect
solution to an unsolved problem in computer science. None of the proposals I&rsquo;ve
seen (notably <a href="https://go.googlesource.com/proposal/+/master/design/go2draft-contracts.md">contracts</a>) feel <em>right</em> yet. Some of this is a gut
feeling, but there are tangible problems as well. For example, the space of
problems they solve intersects with other Go features, which weakens the
strength of both features. &ldquo;Which solution do I use to this problem&rdquo; is a
question which different people will answer differently, and consequently their
code at best won&rsquo;t agree on what &ldquo;idiomatic&rdquo; means and at worst will be simply
incompatible.  Another problem is that the proposal changes the meaning of
idiomatic Go in the first place - suddenly huge swaths of the Go code, including
the standard library, will become unidiomatic. One of Go&rsquo;s greatest strengths is
that code written 5 years ago is still idiomatic. It&rsquo;s almost impossible to
write unidiomatic Go code at all.</p>
<p>I used to sneer at the Go maintainers alongside everyone else whenever they&rsquo;d
punt on generics. With so many people pining after it, why haven&rsquo;t they seen
sense yet? How can they know better than all of these people? My tune changed
once I started to use Go more seriously, and now I admire their restraint.  Part
of this is an evolution of my values as a programmer in general: simplicity and
elegance are now the principles I optimize for, even if it means certain classes
of programs are simply not on the table. And I think Go should be comfortable
not being suitable for writing certain classes of programs. I don&rsquo;t think
programming languages should compete with each other in an attempt to become the
perfect solution to every problem.  This is impossible, and attempts will just
create a messy kitchen sink that solves every problem poorly.</p>
<p><img
src="https://sr.ht/TxC_.jpg"
alt="Nina Tucker from Fullmetal Alchemist"
width="320" /></p>
<p class="text-center">
  <small>fig. 1: the result of C++'s attempt to solve all problems</small>
</p>
<p>The constraints imposed by the lack of generics (and other things Go lacks)
breed creativity.  If you&rsquo;re fighting Go&rsquo;s lack of generics trying to do
something Your Way, you might want to step back and consider a solution to the
problem which embraces the limitations of Go instead. Often when I do this the
new solution is a much better design.</p>
<p>So it&rsquo;s my hope that Go will hold out until the right solution presents itself,
and it hasn&rsquo;t yet. Rushing into it to appease the unwashed masses is a bad idea.
There are other good programming languages - use them! I personally use a wide
variety of programming languages, and though I love Go dearly, it probably only
comes in 3rd or 4th place in terms of how frequently it appears in my projects.
It&rsquo;s <em>excellent</em> in its domain and doesn&rsquo;t need to awkwardly stumble into
others.</p>]]></description><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate></item><item><title>Wayland misconceptions debunked</title><link>https://drewdevault.com/2019/02/10/Wayland-misconceptions-debunked.html</link><description><![CDATA[<p>This article has been on my backburner for a while, but it seems Wayland FUD is
making the news again recently, so I&rsquo;ve bumped up the priority a bit. For those
new to my blog, I am the maintainer of
<a href="https://github.com/swaywm/wlroots">wlroots</a>, a library which implements much of
the functionality required of a Wayland compositor and is arguably the single
most influential project in Wayland right now; and <a href="https://swaywm.org">sway</a>, a
popular Wayland compositor which is nearing version 1.0. Let&rsquo;s go over some of
the common misconceptions I hear about Wayland and why they&rsquo;re wrong. Feel free
to pick and choose the misconceptions you believe to read and disregard the
rest.</p>
<p>The art of hating Wayland has become a cult affair. We don&rsquo;t need to put
ourselves into camps at war. Please try not to read this article through the
lens of anger.</p>
<h3 id="wayland-isnt-more-secure-look-at-this-keylogger">Wayland isn&rsquo;t more secure, look at this keylogger!</h3>
<p>There is an <a href="https://github.com/Aishou/wayland-keylogger">unfortunate GitHub
project</a> called &ldquo;Wayland keylogger&rdquo;
whose mode of operation is using <code>LD_PRELOAD</code> to intercept calls to the
libwayland shared library and record keypresses from it. The problem with this
&ldquo;critique&rdquo; is stated in the <code>README.md</code> file, though most don&rsquo;t read past the
title of the repository. Wayland is only <em>one part</em> of an otherwise secure
system. Using <code>LD_PRELOAD</code> is effectively equivalent to rewriting client
programs to log keys themselves, and any program which is in a position to do
this has already won. If I rephrased this as &ldquo;Wayland can be keylogged, assuming
the attacker can sneak some evil code into your .bashrc&rdquo;, the obviousness of
this truth should become immediately apparent.</p>
<p>Some people have also told me that they can log keys by opening <code>/dev/input/*</code>
files and reading input events. They&rsquo;re right! Try it yourself: <code>sudo libinput debug-events</code>. The catch should also be immediately obvious: ask
yourself why this needs to be run with <code>sudo</code>.</p>
<h3 id="wayland-doesnt-support-screenshotscapture">Wayland doesn&rsquo;t support screenshots/capture!</h3>
<p>The <a href="https://github.com/wayland-project/wayland/blob/master/protocol/wayland.xml">core Wayland protocol</a> does not define a mechanism for taking
screenshots. Here&rsquo;s another thing it doesn&rsquo;t define: how to open application
windows, like gedit and Firefox. The Wayland protocol is very conservative and
general purpose, and is built with use-cases other than desktop systems in mind.
To this end it only implements the lowest common denominator, and leaves the
rest to protocol extensions. There is a process for defining, implementing,
maturing, and standardizing these extensions, though the last part is in need of
improvements - which are under discussion.</p>
<p>There are two protocols for the purpose of screenshots and screen recording,
which are developed by wlroots and supported by a strong majority of Wayland
compositors: <a href="https://github.com/swaywm/wlroots/blob/master/protocol/wlr-screencopy-unstable-v1.xml">screencopy</a> and
<a href="https://github.com/swaywm/wlroots/blob/master/protocol/wlr-export-dmabuf-unstable-v1.xml">dmabuf-export</a>, respectively for copying pixels (best for
screenshots) and exporting DMA buffers (best for real-time video capture).</p>
<p>There are two approaches to this endorsed by different camps in Wayland: these
Wayland protocols, and a dbus protocol based on Pipewire. Progress is being made
on making these approaches talk to each other via <a href="https://github.com/emersion/xdg-desktop-portal-wlr">xdg-desktop-portal</a>,
which will make just about every client and compositor work together.</p>
<h3 id="wayland-doesnt-have-a-secondary-clipboard">Wayland doesn&rsquo;t have a secondary clipboard!</h3>
<p>Secondary clipboard support (aka primary selection) was first implemented as
<a href="https://github.com/swaywm/wlroots/blob/master/protocol/gtk-primary-selection.xml">gtk-primary-selection</a> and was recently standardized as
<a href="https://github.com/wayland-project/wayland-protocols/blob/master/unstable/primary-selection/primary-selection-unstable-v1.xml">wp-primary-selection</a>. It is supported by nearly all Wayland
compositors and clients.</p>
<h3 id="wayland-doesnt-support-clipboard-managers">Wayland doesn&rsquo;t support clipboard managers!</h3>
<p>See <a href="https://github.com/bugaevc/wl-clipboard">wl-clipboard</a></p>
<h3 id="wayland-isnt-suitable-for-embedded-devices">Wayland isn&rsquo;t suitable for embedded devices!</h3>
<p>Some people argue that Wayland isn&rsquo;t supported on embedded devices or require
proprietary blobs to work. This is <em>very</em> untrue. Firstly, Wayland is a
protocol: the <em>implementations</em> are the ones that need support from drivers, and
a Wayland implementation could be written for basically any driver. You could
implement Wayland by writing Wayland protocol messages on pieces of paper,
passing them to your friend in class, and having them draw your window on their
notebook with a pencil.</p>
<p>That being said, this is also untrue of the implementations. wlroots, which
contains the most popular Wayland rendering backend, implements KMS+DRM+GBM,
which is supported by all open source graphics drivers, and uses GLESv2, which
is the most broadly supported graphics implementation, including on embedded
(which is what the &ldquo;E&rdquo; stands for) and most older hardware. For ancient
hardware, writing an fbdev backend is totally possible and I&rsquo;d merge it in
wlroots if someone put in the time. Writing a more modern KMS+DRM+GBM
implementation for that hardware is equally possible.</p>
<h3 id="wayland-doesnt-have-network-transparency">Wayland doesn&rsquo;t have network transparency!</h3>
<p>This is actually true! But it&rsquo;s not as bad as it&rsquo;s made out to be. Here&rsquo;s why:
X11 forwarding works on Wayland.</p>
<p>Wait, what? Yep: all mainstream desktop Wayland compositors have support for
<strong>Xwayland</strong>, which is an implementation of the X11 server which translates X11
to Wayland, for backwards compatibility. X11 forwarding works with it! So if you
use X11 forwarding on Xorg today, your workflow will work on Wayland unchanged.</p>
<p>However, Wayland itself is not network transparent. The reason for this is that
some protocols rely on file descriptors for transferring information quickly or
in bulk. One example is GPU buffers, so that the Wayland compositor can render
clients without copying data on the GPU - which improves performance
dramatically. However, little about Wayland is inherently network <em>opaque</em>.
Things like sending pixel buffers to the compositor are already abstracted on
Wayland and a network-backed implementation could be easily made. The problem is
that no one seems to really care: all of the people who want network
transparency drank the anti-Wayland kool-aid instead of showing up to put the
work in. If you want to implement this, though, we&rsquo;re here and ready to support
you! Drop by the wlroots <a href="https://webchat.freenode.net/?channels=sway-devel">IRC channel</a> and we&rsquo;re prepared to help
you implement this.</p>
<h3 id="wayland-doesnt-support-remote-desktop">Wayland doesn&rsquo;t support remote desktop!</h3>
<p>This one is also true, but work is ongoing. Several of the pieces are in place:
screen capture and keyboard simulation are there. If an interested developer
wants to add pointer device simulation and tie it all together with librdesktop,
that would be a great boon to the Wayland ecosystem. <a href="https://webchat.freenode.net/?channels=sway-devel">We&rsquo;re waiting to
help!</a></p>
<h3 id="wayland-requires-client-side-decorations">Wayland requires client side decorations!</h3>
<p>This was actually true for a long time, but there was deep contention in the
Wayland ecosystem over this matter. We fought long and hard over this and we now
have a protocol for negotiating client- vs server-side decorations, which is now
fairly broadly supported, including among some of its opponents. You&rsquo;re welcome.</p>
<h3 id="wayland-doesnt-support-hotkey-daemons">Wayland doesn&rsquo;t support hotkey daemons!</h3>
<p>This is a feature, not a bug, but you&rsquo;re free to disagree once you hear the
rationale. There are lots of problems with the idea of hotkey daemons as it
exists on X. What if there&rsquo;s a conflict between several clients who want the
same hotkey? What if the user wants to pick a different hotkey? On top of this,
designing a protocol carefully to avoid keylogging concerns makes it more
difficult still.</p>
<p>To this end, I&rsquo;ve been encouraging client developers who want hotkeys to instead
use some kind of IPC mechanism and a control binary. For example, <code>mako</code>, a
notification daemon, allows you to dismiss notifications by running the <code>makoctl dismiss</code> command. Users are then encouraged to use the compositor&rsquo;s own
keybinding facilities to execute this command. This is more flexible even
outside of keybinding - the user might want to execute this behavior through a
script, too.</p>
<p>Still, if you <em>really</em> want hotkeys, you should start the discussion for
standardizing a protocol. It will be an uphill battle but I believe that a
protocol which addresses everyone&rsquo;s concerns is theoretically possible. <em>You</em>
have to step up, though: no one working on Wayland today seems to care. We are
mostly volunteers working for free in our spare time.</p>
<h3 id="wayland-doesnt-support-nvidia">Wayland doesn&rsquo;t support Nvidia!</h3>
<p>Actually, Nvidia doesn&rsquo;t support us. There are three standard APIs which are
implemented by all graphics drivers in the Linux kernel: DRM (display resource
management), KMS (kernel mode setting), and GBM (generic buffer management). All
three are necessary for most Wayland compositors. Only the first two are
implemented by the Nvidia proprietary driver. In order to support Nvidia,
Wayland compositors need to add code resembling this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">nvidia</span> <span class="n">proprietary</span> <span class="n">driver</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* several thousand lines of code */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* several thousand lines of code */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>That&rsquo;s terrible! On top of that, we cannot debug the proprietary driver, we
cannot send fixes upstream, and we cannot read the code to understand its
behavior. The mesa code (where much of the important code for many drivers
lives) is a frequent object of study among Wayland compositor developers. We
cannot do this with the proprietary drivers, and it doesn&rsquo;t even implement the
APIs it needs to. They claim to be working on a replacement for GBM which they
hope will satisfy everyone&rsquo;s concerns, but 52 commits in 3 years with over a
year of inactivity isn&rsquo;t a great sign.</p>
<p>To boot, Nvidia is a bad actor on Linux. Compare the talks at FOSDEM 2018
from the <a href="https://archive.fosdem.org/2018/schedule/event/nouveau/">nouveau developers</a> (the open source Nvidia driver) and the
<a href="https://archive.fosdem.org/2018/schedule/event/amd_graphics/">AMDGPU developers</a> (the <em>only</em><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> AMD driver - also open source). The
Nouveau developers discuss all of the ways that Nvidia makes their lives
difficult, up to and including <em>signed firmwares</em>. AMDGPU instead talks about
the process of upstreaming their driver, discuss their new open source Vulkan
driver, and how the community can contribute - and this was presented by paid
AMD staff. I met Intel employees at XDC who were working on a continuous
integration system wherein Intel offers a massive Intel GPU farm to Mesa
developers free-of-charge for working on the open source driver. Nvidia is
clearly a force for bad on the Linux scene and for open source in general, and
the users who reward this by spending oodles of cash on their graphics cards are
not exactly in my good graces.</p>
<p>So in short, people asking for Nvidia proprietary driver support are asking the
wrong people to spend hundreds of hours working for free to write and maintain
an implementation for <em>one</em> driver which represents a harmful force on the Linux
ecosystem and a headache for developers trying to work with it. With respect, my
answer is no.</p>
<h3 id="wayland-doesnt-support-gaming">Wayland doesn&rsquo;t support gaming!</h3>
<p>First-person shooters, among other kinds of games, require &ldquo;locking&rdquo; the pointer
to their window. This requires <a href="https://github.com/wayland-project/wayland-protocols/blob/master/unstable/pointer-constraints/pointer-constraints-unstable-v1.xml">a protocol</a>, which was
standardized in 2015. Adoption has been slower, but it landed in wlroots several
months ago and support was added to sway a few weeks ago.</p>
<h3 id="in-conclusion">In conclusion</h3>
<p>At some point, some of these things have been true. Some have never been true.
It takes time to replace a 30-year incumbent. To be fair, some of these points
are true on GNOME and KDE, but none are inherently problems with the Wayland
protocol. wlroots is a dominating force in the Wayland ecosystem and the tide is
clearly moving our way.</p>
<p>Another thing I want to note is that Xorg still works. If you find your needs
aren&rsquo;t met by Wayland, just keep using X! We won&rsquo;t be offended. I&rsquo;m not trying
to force you to use it. Why you heff to be mad?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>*actively maintained&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate></item><item><title>My experiences at FOSDEM 2019</title><link>https://drewdevault.com/2019/02/05/FOSDEM-recap.html</link><description><![CDATA[<p>Currently in a plane on my way home from FOSDEM and, as seems to be a recurring
pattern when I fly long distances home after attending a conference, a recap is
readily flowing from my fingertips. This was my first year at FOSDEM, and I&rsquo;m
glad that I came. I&rsquo;m already excited for next year! It was also my first year
volunteering, which was equally great and another thing I expect to repeat.</p>
<p>My biggest feeling during the event was one of incredible business. My
scatterbrained interests throughout the domain of free software came back to
haunt me as I struggled to keep up with all of the people I had to meet &amp; thank,
all of the sessions I wanted to see, and all of the dinners &amp; outings I wanted
to attend. Before all of the fuss, though, I was lucky enough to have a day and
a half to myself (and later with <a href="https://emersion.fr">Simon Ser</a>) to enjoy
Brussels with.</p>
<p>The first FOSDEM-related event I found myself was when the Arch Linux developers
graciously invited me to their dinner on Friday. I have a long friendship with
several Arch developers, but never met any in person. We were speaking in the
weeks before FOSDEM about how to save them from their subversion nightmare, and
we spoke a little bit about some ideas for fixing this, but mostly we just had a
good time and got to know each other better. Later in the week, Jerome finally
convinced me to apply to become an Arch Trusted User, and in the coming months I
hope to work with them on a nice next-generation system for Arch Linux package
maintenance.</p>
<p>The hallway track<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> continued to be the highlight of the event. Later Friday
night, I had volunteered to staff the FOSDEM beer event&rsquo;s late shift, so the
inevitability of time and biology led to missing the first half of day one. I
ended up wiggling my way into the BSD room and saw a cool talk on NetBSD - long
one of my favorites among the BSDs, and learned that the speaker had a cool
project which will save me a lot of time when adding NetBSD support to sr.ht.
Grabbed his email afterwards and met up with my friends from KDE for lunch. We
met up with Daniel Stone as well, and spoke for a while about how we&rsquo;re finally
going to approach unifying and standardizing the Wayland ecosystem. This
discussion took place waiting outside the graphics room for the Pipewire talk.
Simon has been working on a portal to connect sway&rsquo;s Wayland protocols with the
dbus-based ecosystem Pipewire lives in, and along with KDE&rsquo;s Roman Glig they had
some interesting questions for the presenter.</p>
<p>The second day was quite a bit different. My other role as a volunteer was doing
A/V support in the rooms. For this I got a <em>second</em> shirt, with a different
color! I think next year I may try to collect them all. This was interesting and
slow work, and basically entailed walking down to the stage crouched down to
tweak the mic volume until someone on IRC from the war room said it was better.
I did get to observe more exciting crises over IRC from the comfort of my
relatively normal room, though, and got to play a bit with the astonishingly
sophisticated A/V setup FOSDEM uses. After that I grabbed a light lunch and
passed the time by playing Magic: the Gathering with a group we found in the
FOSDEM bar. I grabbed some Club Mates - I love them but they&rsquo;re super difficult
to get in the United States - and waited until the highlight of the event: the
sr.ht and sway meetups.</p>
<p>Big shoutout to the FOSDEM organizers for entertaining our last-minute requests
to have a space to meet users of both groups. The turnout for both rooms was
way more than I expected - almost 50! It seemed like every seat was filled. I
was also surprised at how distinct the groups where, with only a 5-10% overlap.
After making sure everyone got a sticker, there was some really great questions
and feedback from the sr.ht crowd. A particularly interesting tangent had me
defending the email choice to a skeptic and getting a lot of good feedback and
insights from the rest of the room, as well as elaborating on my plans to
improve the workflow for those less comfortable with email. There was naturally
some discussion about the crappy name and my plans to fix it, and I had the
pleasure of demoing the experimental Fedora builds live to someone who was
asking when there would be Fedora support. It was also great to meet many of the
users and contributors who I&rsquo;ve been working with online, and made sure to thank
them in person - particularly Ivan Habunek, a prolific sr.ht contributor who was
part of our roaming sway/sr.ht/Arch Linux/etc clan throughout FOSDEM.</p>
<p>The sway meetup was equally fun, and I thank the attendees for bearing with me
while I answered the post-meetup questions and comments from the sr.ht crowd -
my fault for scheduling two back-to-back sessions. We started off with a bang by
releasing sway 1.0-rc1, then turned to questions and feedback from the crowd.
Simon had a lot to say during the sway meetup as well, explaining his work and
future plans for the project, and together we also explained our somewhat novel
philosophy on project governance that I credit the success of the project to.
It&rsquo;s designed to maximize contributors, and it&rsquo;s entirely to their credit that
the success of sway and wlroots is owed. Speaking of the future of sway and
wlroots, I also met Guido, an engineer at Purism who works with wlroots, again
after our initial meeting at XDC 2018. This time, Guido brought a gift - a
Librem 5 dev board for the wlroots team to use. Thank you! You&rsquo;ll hear more
about our work with this board in the coming months as I use it to improve touch
support for sway and send it out on loan to various wlroots project developers.</p>
<p>I had a flight home Sunday evening so we had a hasty and delicious dinner, a
quick round of beers, and finally parted ways. An overnight in Dublin and here I
am - on the plane home to Philly, with 43% of my battery<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and an estimated 3
hours left in-flight. FOSDEM was great - a huge thanks to the organizers and
volunteers! I&rsquo;m looking forward to next year.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The part of the conference which takes place in the hallway, i.e. socializing with other attendees.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Paranoia about which led me to spend some time optimizing my development environment&rsquo;s power consumption a bit&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 5 Feb 2019 00:00:00 +0000</pubDate></item><item><title>Why I chose Flask to build sr.ht&apos;s mini-services</title><link>https://drewdevault.com/2019/01/30/Why-I-built-sr.ht-with-Flask.html</link><description><![CDATA[<p><a href="https://sr.ht">sr.ht</a> is a large, production-scale suite of web applications (I
call them &ldquo;mini-services&rdquo;, as they strike a balance between microservices and
monolithic applications) which are built in Python with
<a href="http://flask.pocoo.org/">Flask</a>. David Lord, one of the maintainers of Flask,
reached out to me when he heard about sr.ht and saw that it was built with
Flask. At his urging, I&rsquo;d like to share the rationale behind the decision and
how it&rsquo;s turned out in the long run.</p>
<p>I have a long history of writing web applications with Flask, so much so that I
think I&rsquo;ve lost count of them by now - at least 15, if not 20. Flask&rsquo;s
simplicity and flexibility is what keeps bringing me back. Frameworks like
Django or Rails are much different: they are the kitchen sink, and then some. I
generally don&rsquo;t need the whole kitchen sink, and if I were given it, I would
want to change some details. Flask is nice because it gives you the basics and
lets you build what you need on top of it, and you&rsquo;re never working around a
cookie-cutter system which doesn&rsquo;t cut your cookies in quite the way you need.</p>
<p>In sr.ht&rsquo;s case in particular, though, I have chosen to extend Flask with <a href="https://git.sr.ht/~sircmpwn/core.sr.ht">a new
module</a> common to all sr.ht projects. After all, each service of
sr.ht has a lot in common with the rest. Some of the things that live in this
core module are:</p>
<ul>
<li>Shared jinja2 templates and stylesheets</li>
<li>Shared rigging for <a href="https://www.sqlalchemy.org/">SQLAlchemy</a> (ORM)</li>
<li>Shared rigging for <a href="https://alembic.sqlalchemy.org/en/latest/">Alembic</a></li>
<li><a href="https://git.sr.ht/~sircmpwn/core.sr.ht/tree/master/srht/validation.py">A little validation module</a> I&rsquo;m very proud of</li>
<li>API behavior, webhooks, OAuth, etc, which are consistent throughout sr.ht</li>
</ul>
<p>The mini-service-oriented architecture allows sr.ht services to be deployed
ala-carte for users who only need a fraction of what we offer. This design
requires a lot of custom code to integrate all of the services with each other -
for example, all of the services use a single shared config file, which contains
both shared config options and service-specific configuration. sr.ht also uses a
novel approach to authentication, in which both user logins and API
authentication is delegated to an external service, meta.sr.ht, requiring
further custom code still. core.sr.ht additionally provides common SQLAlchemy
mixins for things like user tables, which have many common properties, but for
each service may have service-specific columns as well.</p>
<p>Django provides their own ORM, their own authentication, their own models, and
more. In order to meet the design constraints of sr.ht, I&rsquo;d have spent twice as
long ripping out the rest of Django&rsquo;s bits and fixing anything that broke in the
resulting mess. With Flask, these bits were never written for me in the first
place, which gives me the freedom to implement this design greenfield. Flask is
small and what code it does bring to the table is highly pluggable.</p>
<p>Though it&rsquo;s well suited to many of my needs, I don&rsquo;t think Flask is perfect. A
few things I dislike about it:</p>
<ul>
<li>First-class <a href="http://jinja.pocoo.org/">jinja2</a> support is probably out of
scope.</li>
<li>flask.Flask and flask.Blueprint should be the same thing.</li>
<li>I&rsquo;m not a fan of Flask&rsquo;s approach to configuration. I have a better(?) config
module that I drag around to all of my projects.</li>
</ul>
<p>And to summarize the good:</p>
<ul>
<li>It provides a nice no-nonsense interface for requests, responses, and routing.</li>
<li>It has a lot of nice hooks for adding your own middleware.</li>
<li>It doesn&rsquo;t do much more than that, which means you&rsquo;re free to choose and
compose other tools to make up the difference.</li>
</ul>
<p>I think that on the whole it&rsquo;s quite good. There are frameworks which are
smaller still - but I think Flask hits a sweet spot. If you&rsquo;re making a
monolithic web app and can live within the on-rails Django experience, you might
want to use it. But if you are making smaller apps or need to rig things up in a
unique way - something I find myself doing almost every time - Flask is probably
for you.</p>]]></description><pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate></item><item><title>Why I use old hardware</title><link>https://drewdevault.com/2019/01/23/Why-I-use-old-hardware.html</link><description><![CDATA[<p>Recently I was making sure my main laptop is ready for travel<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, which mostly
just entails syncing up the latest version of my music collection. This laptop
is a Thinkpad X200, which turns 11 years old in July and is my main workstation
away from home (though I bring a second monitor and an external keyboard for
long trips). This laptop is a great piece of hardware. 100% of the hardware is
supported by the upstream Linux kernel, including the usual offenders like WiFi
and Bluetooth. Niche operating systems like 9front and Minix work great, too.
Even coreboot works! It&rsquo;s durable, user-serviceable, light, and still looks
brand new after all of these years. I love all of these things, but there&rsquo;s no
denying that it&rsquo;s 11 years behind on performance innovations.</p>
<p>Last year <a href="https://kde.org">KDE</a> generously <a href="https://drewdevault.com/2018/04/28/KDE-Sprint-retrospective.html">invited me</a> to and
sponsored my travel to their development sprint in Berlin. One of my friends
there teased me - in a friendly way - about my laptop, asking why I used such an
old system. There was a pensive moment when I answered: &ldquo;it forces me to
empathise with users who can&rsquo;t use high-end hardware&rdquo;. I showed him how it could
cold boot to a productive <a href="https://swaywm.org">sway</a> desktop in &lt;30 seconds,
then I installed KDE to compare. It doubled the amount of disk space in use,
took almost 10x as long to reach a usable desktop, and had severe rendering
issues with my old Intel GPU.</p>
<p>To be clear, KDE is a wonderful piece of software and my first recommendation to
most non-technical computer users who ask me for advice on using Linux. But
software often grows to use the hardware you give it. Software developers tend
to be computer enthusiasts, and use enthusiast-grade hardware. In reality, this
high-end hardware isn&rsquo;t really <em>necessary</em> for most applications outside of
video encoding, machine learning, and a few other domains.</p>
<p>I do have a more powerful workstation at home, but it&rsquo;s not really anything
special. I upgrade it very infrequently. I bought a new mid-range GPU which is
able to drive my four displays<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> last year, I&rsquo;ve added the occasional hard
drive as it gets full, and I replaced the case with something lighter weight 3
years ago. Outside of those minor upgrades, I&rsquo;ve been using the same desktop
workstation for 7 years, and intend to use it for much longer. My servers are
similarly running on older hardware which is spec&rsquo;d to their needs (actually, I
left a lot of room to grow and <em>still</em> was able to buy old hardware).</p>
<p>My 11-year-old laptop can compile the Linux kernel from scratch in 20 minutes,
and it can play 1080p video in real-time. That&rsquo;s all I need! Many users cannot
afford high-end computer hardware, and most have better things to spend their
money on. And you know, I work hard for my money, too - if I can get a computer
which can do nearly 5 <em>billion</em> operations per second for $60, that should be
sufficient to solve nearly any problem. No doubt, there are faster laptops out
there, many of them with similarly impressive levels of compatibility with my
ideals. But why bother?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>To <a href="https://fosdem.org/2019/">FOSDEM</a> - see you there!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I have a variety of displays and display configurations for the purpose of continuously testing sway/wlroots in those situations&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate></item><item><title>I&apos;m going to work full-time on free software</title><link>https://drewdevault.com/2019/01/15/Im-doing-FOSS-full-time.html</link><description><![CDATA[<p>Sorry for posting two articles so close to each other - but this is important!
As I&rsquo;m certain many of you know, I maintain a large collection of free software
projects, including <a href="https://github.com/swaywm/sway">sway</a>, <a href="https://github.com/swaywm/wlroots">wlroots</a>, <a href="https://sr.ht">sr.ht</a>,
<a href="https://git.sr.ht/~sircmpwn/scdoc">scdoc</a>, <a href="https://git.sr.ht/~sircmpwn/aerc2">aerc</a>, and <a href="https://git.sr.ht/~sircmpwn">many</a>, <a href="https://github.com/ddevault">many</a>
more. I contribute to more still, working on projects like <a href="https://alpinelinux.org">Alpine
Linux</a>, <a href="https://git.sr.ht/~emersion/mrsh">mrsh</a>, <a href="https://musl-libc.org">musl libc</a>, and anything else I can. Until
now, I&rsquo;ve been working on these in my spare time, but just under a year ago I
wrote &ldquo;<a href="https://drewdevault.com/2018/02/24/The-road-to-sustainable-FOSS.html">The path to sustainably working on FOSS full-time</a>&rdquo; laying out
my future plans.  Today I&rsquo;m proud to tell you that, thanks to everyone&rsquo;s
support, I&rsquo;ll be working on free software full-time starting in February.</p>
<p>I&rsquo;m so excited! I owe many people a great deal of thanks. To everyone who has
donated to my fosspay, Patreon, and LiberaPay accounts: thank you. To all of the
sr.ht users who chose to pay for their account despite it being an alpha: thank
you. I also owe a thanks to all of the amazing contributors who give their spare
time towards making the projects I maintain even better, without whom my
software wouldn&rsquo;t be anywhere near as useful to anyone.</p>
<p>I don&rsquo;t want to make grandiose promises right away, but I&rsquo;m confident that
increasing my commitment to open source to this degree is going to have a major
impact on my projects. For now, my primary focus is sr.ht: its paid users make
up the majority of the funding. Relatedly, I plan to invest more time in Alpine
Linux on RISC-V and making RISC-V builds available to the sr.ht community.  Sway
and wlroots are in good shape as we quickly approach sway 1.0, and for this
reason I want to give a higher priority to my smaller, more neglected projects
like aerc for the time being. As I learn more about my bandwidth under these new
conditions, I&rsquo;ll expand my plans accordingly.</p>
<p>I need to clarify that despite choosing to work full-time on these projects, my
income is going to be negative for a while. I have enough savings and income now
that I feel comfortable making the leap, and I plan on working my ass off before
my runway ends to earn the additional subscriptions to sr.ht and donations to
fosspay et al that will make this decision sustainable in the long term. If that
doesn&rsquo;t happen before I get near the end of my runway, I&rsquo;ll have to start
looking for different work again. I&rsquo;m depending on your continued support. If
you appreciate my work but haven&rsquo;t yet, please consider <a href="https://meta.sr.ht/billing/initial">buying a subscription
to sr.ht</a> or <a href="https://drewdevault.com/donate">donating to my general
projects fund</a>. Thank you!</p>
<p>All said, words cannot describe how excited I am. It&rsquo;s been my dream for years
to work on these projects full-time. Hitting this critical threshold of funding
allows me to tremendously accelerate the progress of these projects. If you were
impressed by what I built in my spare time, just wait until you see what we can
accomplish now!</p>
<p><img src="https://sr.ht/YsHI.png" alt=""></p>
<p>From the bottom of my heart, thank you for your support!</p>
<p>P.S: I&rsquo;ll see you at <a href="https://fosdem.org/2019/">FOSDEM</a>! Ask me for a sticker.</p>]]></description><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate></item><item><title>Backups &amp; redundancy at sr.ht</title><link>https://drewdevault.com/2019/01/13/Backups-and-redundancy-at-sr.ht.html</link><description><![CDATA[<p><a href="https://sr.ht">sr.ht</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> is <a href="https://git.sr.ht/~sircmpwn?search=sr.ht">100% open source</a> and I encourage
people to install it on their own infrastructure, especially if they&rsquo;ll be
sending patches upstream. However, I am equally thrilled to host sr.ht for you
on the &ldquo;official&rdquo; instance, and most users find this useful because the
maintenance burden is non-trivial. Today I&rsquo;ll give you an idea of what your
subscription fee pays for. In this first post on ops at sr.ht, I&rsquo;ll talk about
backups and redundancy. In future posts, I&rsquo;ll talk about security, high
availability, automation, and more.</p>
<p>As sr.ht is still in the alpha phase, high availability has been on the
backburner. However, data integrity has always been of paramount importance to
me. The very earliest versions of sr.ht, from well before it was even trying to
be a software forge, made a point to never lose a single byte of user data.
Outages are okay - so long as when service is restored, everything is still
there. Over time I&rsquo;m working to make outages a thing of the past, too, but let&rsquo;s
start with backups.</p>
<p>There are several ways that sr.ht stores data:</p>
<ul>
<li>Important data on the filesystem (e.g. bare git repositories)</li>
<li>Important persistent data in PostgreSQL</li>
<li>Unimportant ephemeral data in Redis (&amp; caches)</li>
<li>Miscellaneous filesystem storage, like the operating system</li>
</ul>
<p>Some of this data is important and kept redundant (PostgreSQL, git repos), and
others are unimportant and is not redundant. For example, I store a rendered
Markdown cache for git.sr.ht in Redis. If the Redis cluster goes <em>poof</em>, the
source Markdown is still available, so I don&rsquo;t bother backing up Redis. Most
services run in a VM and I generally don&rsquo;t store important data on these - the
hosts usually only have one hard drive with no backups and no redundancy. If the
host dies, I have to reprovision all of those VMs.</p>
<p>Other data is more important. Consider PostgreSQL, which contains some of the
most important data for sr.ht. I have one master PostgreSQL server, a dedicated
server in the space I colocate in my home town of Philadelphia. I run sr.ht on
this server, but I also use it for a variety of other projects - I maintain many
myself, and I volunteer as a sysadmin for more still. This box (named Remilia)
has four hard drives configured in a ZRAID (ZFS). I buy these hard drives from a
variety of vendors, mostly Western Digital and Seagate, and from different
batches - reducing the likelihood that they&rsquo;ll fail around the same time. ZFS is
well-known for it&rsquo;s excellent design, featureset and for simply keeping your
data intact, and I don&rsquo;t trust any other filesystem with important data. I take
ZFS snapshots every 15 minutes and retain them for 30 days. These snapshots are
important for correcting the &ldquo;oh shit, I rm&rsquo;d something important&rdquo; mistakes -
you can mount them later and see what the filesystem looked like at the time
they were taken.</p>
<p>On top of this, the PostgreSQL server is set up with two additional important
features: continuous archiving and streaming replication. Continuous archiving
has PostgreSQL writing each transaction to log files on disk, which represents a
re-playable history of the entire database, and allows you to restore the
database to any point in time. This helps with &ldquo;oh shit, I dropped an important
table&rdquo; mistakes. Streaming replication ships changes to an off-site standby
server, in this case set up in my second colocation in San Francisco (the main
backup box, which we&rsquo;ll talk about more shortly). This takes a near real-time
backup of the database, and has the advantage of being able to quickly failover
to it as the primary database during maintenance and outages (more on this
during the upcoming high availability article). Soon I&rsquo;ll be setting up a second
failover server as well, on-site.</p>
<p>So there are multiple layers to this:</p>
<ul>
<li>ZFS &amp; zraid prevents disk failure from causing data loss</li>
<li>ZFS snapshots allows retrieving filesystem-level data from the past</li>
<li>Continuous archiving allows retrieving database-level data from the past</li>
<li>Streaming replication prevents datacenter existence failure from causing data
loss</li>
</ul>
<p>Having multiple layers of data redundancy here protects sr.ht from a wide
variety of failure modes, and also protects each redundant system from itself -
if any of these systems fails, there&rsquo;s another place to get this data from.</p>
<p>The off-site backup in San Francisco (this box is called Konpaku) has a whopping
52T of storage in two ZFS pools, named &ldquo;small&rdquo; (4T) and &ldquo;large&rdquo; (48T). The
PostgreSQL standby server lives in the small pool, and <a href="https://www.borgbackup.org/">borg
backups</a> live in the large pool. This has the same
ZFS snapshotting and retention policy as Remilia, and also has drives sourced
from a variety of vendors and batches. Borg is how important filesystem-level
data is backed up, for example git repositories on git.sr.ht. Borg is nice
enough to compress, encrypt, and deduplicate its backups for us, which I take
hourly with a cronjob on the machines which own that data. The retention policy
is hourly backups stored for 48 hours, daily backups for 2 weeks, and weekly
backups stored indefinitely.</p>
<p>There are two other crucial steps in maintaining a working backup system:
monitoring and testing. The old wisdom is &ldquo;you don&rsquo;t have backups until you&rsquo;ve
tested them&rdquo;. The simplest monitoring comes from cron - when I provision a new
box, I make sure to set <code>MAILTO</code>, make sure sendmail works, and set up a
deliberately failing cron entry to ensure I hear about it when it breaks. I also
set up zfs-zed to email me whenever ZFS encounters issues, which also has a test
mode you should use. For testing, I periodically provision private replicas of
sr.ht services from backups and make sure that they work as expected. PostgreSQL
replication is fairly new to my setup, but my intention is to switch the primary
and standby servers on every database upgrade for HA<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> purposes, which
conveniently also tests that each standby is up-to-date and still replicating.</p>
<p>To many veteran sysadmins, a lot of this is basic stuff, but it took me a long
time to learn how all of this worked and establish a set of best practices for
myself. With the rise in popularity of managed ops like AWS and GCP, it seems
like ops &amp; sysadmin roles are becoming less common. Some of us still love the
sound of a datacenter and the greater level of control you have over your
services, and as a bonus my users aren&rsquo;t worrying about $bigcorp having access
to their data.</p>
<p>The next ops thing on my todo list is high availability, which is still
in-progress on sr.ht. When it&rsquo;s done, expect another blog post!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>sr.ht is a software project hosting website, with git hosting, ticket tracking, continuous integration, mailing lists, and more. <a href="https://sr.ht">Try it out!</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>High availability&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate></item><item><title>Patches welcome</title><link>https://drewdevault.com/2019/01/01/Patches-welcome.html</link><description><![CDATA[<p>Happy new year! This is always a weird &ldquo;holiday&rdquo; for me, since all of the fun
happened last night. Today is just kind of&hellip; I guess a chance for everyone to
sober up before work tomorrow? It does tend to invite a sense of reflection and
is the ideal time to plan for the year ahead. One of my goals in 2019 is to
change more people&rsquo;s thinking about the open source community and what it means
to count among their number.</p>
<p>I think there&rsquo;s a certain mode of thinking which lends itself to a more
productive free software community and a happier free software contributor. Free
software is not <em>theirs</em> - it&rsquo;s <em>ours</em>. Linux doesn&rsquo;t belong to Linus Torvalds.
Firefox doesn&rsquo;t belong to Mozilla, vim doesn&rsquo;t belong to Bram Moolenaar, and
ffmpeg doesn&rsquo;t belong to Fabrice Bellard. These projects belong to everyone.
That includes you! In this way, we reap the benefits of open source, but we also
shoulder the responsibilities. I&rsquo;m not referring to some abstract sense of
reponsibility, but the tangible ones, like fixing bugs or developing new
features.</p>
<p>One of the great things about this community is how easy it is to release your
software under a FOSS license. You have no obligations to the software once it&rsquo;s
released, except the obligations you hold yourself to (i.e. &ldquo;if this software
makes my computer work, and I want to use my computer, I need to keep this
software in good working order&rdquo;). It&rsquo;s important for users to remember that
they&rsquo;re not entitled to anything other than the rights laid out in the license,
too. You&rsquo;re not entitled to bug fixes or new features - you&rsquo;re <em>empowered</em> by
free software to make those changes yourself.</p>
<p>Sometimes, when working on sway, someone says something like &ldquo;oh, it&rsquo;s a bug in
libwayland&rdquo;. My response is generally along the lines of &ldquo;I guess you&rsquo;re writing
a libwayland patch then!&rdquo; The goal hasn&rsquo;t changed, only the route. It&rsquo;s no
different from being in the weeds and realizing you need to do some refactoring
first. If a problem in some FOSS project, be it a bug or a conspicuously missing
feature, is in the way of your goals, it&rsquo;s <em>your problem</em>.  A friend of mine
recently said of a missing feature in a project they have nothing to do with:
&ldquo;adding FreeBSD 12 support is not yet done, but it&rsquo;s on my todo list.&rdquo; I thought
that perfectly embodied the right way to think about FOSS.</p>
<p>When applying this philosophy, you may occasionally have to deal with an
absentee maintainer or a big old pile of legacy spaghetti code. Fork it! Rewrite
it! These are tough marbles but they&rsquo;re the marbles you&rsquo;ve gotta deal with. It&rsquo;s
not as hard as it looks.</p>
<p>The entire world of free software is your oyster. Nothing is off-limits: if it&rsquo;s
FOSS, you can work on it. Try not to be intimidated by unknown programming
languages, unfamiliar codebases, or a lack of time. You&rsquo;ll pick up the new
language sooner than you think<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, all projects are similar enough when you get
down to it, and small amounts of work done infrequently adds up over a long
enough time period.  FOSS doesn&rsquo;t have to move quickly, it just has to keep
moving. The Dawn spacecraft accelerated at 0.003 cm/s<sup>2</sup> and made it to
<a href="https://upload.wikimedia.org/wikipedia/commons/a/a1/PIA19547-Ceres-DwarfPlanet-Dawn-RC3-AnimationFrame25-20150504.jpg">another world</a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Especially if you have a reason to learn it, like this bug you need to fix&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Actually, it visited 3.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 1 Jan 2019 00:00:00 +0000</pubDate></item><item><title>Anatomy of a shell</title><link>https://drewdevault.com/2018/12/28/Anatomy-of-a-shell.html</link><description><![CDATA[<p>I&rsquo;ve been contributing where I can to Simon Ser&rsquo;s <a href="https://git.sr.ht/~emersion/mrsh">mrsh</a> project, a
work-in-progress strictly POSIX shell implementation. I worked on some small
mrsh features during my holiday travels and it&rsquo;s in the forefront of my mind, so
I&rsquo;d like to share some of its design details with you.</p>
<p>There are two main components to a shell: parsing and execution. mrsh uses a
simple <a href="https://en.wikipedia.org/wiki/Recursive_descent_parser">recursive descent parser</a> to generate an AST (Abstract Syntax
Tree, or an in-memory model of the structure of the parsed source). This design
was chosen to simplify the code and avoid dependencies like flex/bison, and is a
good choice given that performance isn&rsquo;t critical for parsing shell scripts.
Here&rsquo;s an example of the input source and output AST:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>say_hello<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">echo</span> <span class="s2">&#34;hello </span><span class="nv">$1</span><span class="s2">!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">who</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span>
</span></span><span class="line"><span class="cl">say_hello <span class="s2">&#34;</span><span class="nv">$who</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This script is parsed into this AST (this is the output of <code>mrsh -n test.sh</code>):</p>
<pre tabindex="0"><code>program
program
└─command_list ─ pipeline
  └─function_definition say_hello ─ brace_group
    └─command_list ─ pipeline
      └─simple_command
        ├─name ─ word_string [3:2 → 3:6] echo
        └─argument 1 ─ word_list (quoted)
          ├─word_string [3:8 → 3:14] hello
          ├─word_parameter
          │ └─name 1
          └─word_string [3:16 → 3:17] !
program
program
└─command_list ─ pipeline
  └─simple_command
    └─assignment
      ├─name who
      └─value ─ word_command ─ program
        └─command_list ─ pipeline
          └─simple_command
            └─name ─ word_string [6:7 → 6:13] whoami
program
└─command_list ─ pipeline
  └─simple_command
    ├─name ─ word_string [7:1 → 7:10] say_hello
    └─argument 1 ─ word_list (quoted)
      └─word_parameter
        └─name who
</code></pre><p>Most of these names come directly from the <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html">POSIX shell specification</a>.
The parser and AST is made available as a standalone public interface of
libmrsh, which can be used for a variety of use-cases like syntax-aware text
editors, syntax highlighting (see <a href="https://git.sr.ht/~emersion/mrsh/tree/master/highlight.c"><code>highlight.c</code></a>), linters, etc. The most
important use-case is, of course, task planning and execution.</p>
<p>Most of these AST nodes becomes a <em>task</em>. A task defines an implementation of
the following interface:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">task_interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Request a status update from the task. This starts or continues it.
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * `poll` must return without blocking with the current task&#39;s status:
</span></span></span><span class="line"><span class="cl"><span class="cm">	 *
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * - TASK_STATUS_WAIT in case the task is pending
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * - TASK_STATUS_ERROR in case a fatal error occured
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * - A positive (or null) code in case the task finished
</span></span></span><span class="line"><span class="cl"><span class="cm">	 *
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * `poll` will be called over and over until the task goes out of the
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * TASK_STATUS_WAIT state. Once the task is no longer in progress, the
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * returned state is cached and `poll` won&#39;t be called anymore.
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">poll</span><span class="p">)(</span><span class="k">struct</span> <span class="n">task</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="k">struct</span> <span class="n">context</span> <span class="o">*</span><span class="n">ctx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">destroy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">task</span> <span class="o">*</span><span class="n">task</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Most of the time the task will just do its thing. Many tasks will have sub-tasks
as well, such as a command list executing a list of commands, or each branch of
an if statement, which it can defer to with <code>task_poll</code>. Many tasks will wait on
an external process, in which case it can return TASK_STATUS_WAIT to have the
process <code>wait</code>ed on. Feel free to browse the <a href="https://git.sr.ht/~emersion/mrsh/tree/master/shell/task">full list of tasks</a> to get
an idea.</p>
<p>One concern more specific to POSIX shells is built-in commands. Some commands
have to be built-in because they manipulate the shell&rsquo;s state, such as <code>.</code> and
<code>cd</code>. Others, like <code>true</code> &amp; <code>false</code>, are there for performance reasons, since
they&rsquo;re simple and easily implemented internally. POSIX specifies <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_14">a list of
special builtins</a> which are necessary to implement in the shell
itself. There&rsquo;s <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_01_01">a second list</a> that must be present for the shell
environment to be considered POSIX compatible (plus some reserved names like
<code>local</code> and <code>pushd</code> that invoke undefined behavior - mrsh aborts on these).</p>
<p>Here are some links to more interesting parts of the code so you can explore on
your own:</p>
<ul>
<li><a href="https://git.sr.ht/~emersion/mrsh/tree/master/shell/redir.c">Redirection</a> &amp; <a href="https://git.sr.ht/~emersion/mrsh/tree/master/shell/task/pipeline.c">pipelines</a></li>
<li><a href="https://git.sr.ht/~emersion/mrsh/tree/master/shell/task/function_definition.c">Function definition</a> &amp; <a href="https://git.sr.ht/~emersion/mrsh/tree/master/shell/task/command_function.c">execution</a></li>
<li><a href="https://git.sr.ht/~emersion/mrsh/tree/master/builtin/dot.c">The . builtin</a></li>
<li><a href="https://git.sr.ht/~emersion/mrsh/tree/master/main.c">main.c and the REPL</a></li>
</ul>
<p>I might write more articles in the future diving into specific concepts, feel
free to shoot me an email if you have suggestions. Shoutout to Simon for
building such a cool project! I&rsquo;m looking forward to contributing more until we
have a really nice strictly POSIX shell.</p>]]></description><pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate></item><item><title>Porting Alpine Linux to RISC-V</title><link>https://drewdevault.com/2018/12/20/Porting-Alpine-Linux-to-RISC-V.html</link><description><![CDATA[<p>I recently received my <a href="https://www.sifive.com/boards/hifive-unleashed">HiFive Unleashed</a>, after several excruciating
months of waiting, and it&rsquo;s incredibly cool. For those unaware, the HiFive
Unleashed is the first consumer-facing Linux-capable <a href="https://en.wikipedia.org/wiki/RISC-V">RISC-V</a> hardware.
For anyone who&rsquo;s still lost, RISC-V is an <a href="https://github.com/riscv">open</a>,
royalty-free <a href="https://en.wikipedia.org/wiki/Instruction_set_architecture">instruction set
architecture</a>, and
the HiFive is an <a href="https://github.com/sifive">open</a> CPU implementing it. And here
it is on my dining room table:</p>
<p><img src="https://sr.ht/JMao.jpg" alt=""></p>
<p>This board is <em>cool</em>. I&rsquo;m working on making this hardware available to
<a href="https://meta.sr.ht">builds.sr.ht</a> users in the next few months, where I intend to use it to
automate the remainder of the Alpine Linux port and make it available to any
other operating systems (including non-Linux) and userspace software which are
interested in working on a RISC-V port. I&rsquo;m fairly certain that this will be the
first time hardware-backed RISC-V cycles are being made available to the public.</p>
<p>There are two phases to porting an operating system to a new architecture:
bootstrapping and, uh, porting. For lack of a better term. As part of
bootstrapping, you need to obtain a cross-compiler, port libc, and cross-compile
the basics. Bootstrapping ends once the system is <em>self-hosting</em>: able to
compile itself. The &ldquo;porting&rdquo; process involves compiling all of the packages
available for your operating system, which can take a long time and is generally
automated.</p>
<p>The first order of business is the cross-compiler. RISC-V support landed in
binutils 2.28 and gcc 7.1 several releases ago, so no need to worry about adding
a RISC-V target to our compiler. Building both with
<code>--target=riscv64-linux-musl</code> is sufficient to complete this step. The other
major piece is the C standard library, or libc. Unlike the C compiler, this step
required some extra effort on my part - the RISC-V port of musl libc, which
Alpine Linux is based on, is a work-in-progress and has not yet been upstreamed.</p>
<p>There does exist <a href="https://github.com/riscv/riscv-musl">a patch</a> for RISC-V support, though it had never
been tested at a scale like this. Accordingly, I ran into several bugs, for
which I wrote several patches (<a href="https://github.com/riscv/riscv-musl/pull/2">1</a> <a href="https://github.com/riscv/riscv-musl/pull/3">2</a> <a href="https://github.com/riscv/riscv-musl/pull/4">3</a>). Having a working distro
based on the RISC-V port makes a much more compelling argument for the maturity
of the port, and for its inclusion upstream, so I&rsquo;m happy to have caught these
issues. Until then, I added the port and my patches to the Alpine Linux musl
package manually.</p>
<p>A C compiler and libc implementation open the floodgates to porting a huge
volume of software to your platform. The next step is to identify and port the
essential packages for a self-hosting system.  For this, Alpine has a great
<a href="https://git.alpinelinux.org/cgit/aports/tree/scripts/bootstrap.sh">bootstrapping script</a> which handles preparing the cross-compiler
and building the base system. Many (if not most) of these packages required
patching, tweaks, and manual intervention - this isn&rsquo;t a turnkey solution - but
it is an incredibly useful tool. The most important packages at this step are
the native toolchain<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, the package manager itself, and various other useful
things like tar, patch, openssl, and so on.</p>
<p>Once the essential packages are built and the system can compile itself, the
long porting process begins. It&rsquo;s generally wise to drop the cross-compiler here
and start doing native builds, if your hardware is fast enough. This is a
tradeoff, because the RISC-V system is somewhat slower than my x86_64 bootstrap
machine - but many packages require lots of manual tweaks and patching to get
cross-compiling working. The time saved by not worrying about this makes up for
the slower build times<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>There are thousands of packages, so the next step for me (and anyone else
working on a port) is to automate the remainder of the process. For me, an
intermediate step is integrating this with builds.sr.ht to organize my own work
and to make cycles available to other people interested in RISC-V. Not all
packages are going to be ported for free - but many will! Once you unlock the
programming languages - C, Python, Perl, Ruby<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, etc - most open source
software is pretty portable across architectures. One of my core goals with
sr.ht is to encourage portable software to proliferate!</p>
<p>If any readers have their own RISC-V hardware, or want to try it with qemu, I
have a RISC-V Alpine Linux repository here<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. Something like this will install
it to /mnt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">apk add <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -X https://mirror.sr.ht/alpine/main/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --allow-untrusted <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --arch<span class="o">=</span>riscv64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --root<span class="o">=</span>/mnt <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    alpine-base alpine-sdk vim chrony
</span></span></code></pre></div><p>Run <code>/bin/busybox --install</code> and <code>apk fix</code> on first boot. This is still a work
in progress, so configuring the rest is an exercise left to the reader until I
can clean up the process and make a nice install script. Good luck!</p>
<hr>
<p>Closing note: big thanks to the help from the community in #riscv on Freenode,
and to the hard work of the Debian and Fedora teams paving a lot of the way and
getting patches out there for lots of software! I still got to have all the fun
working on musl so I wasn&rsquo;t entirely on the beaten path :)</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Meaning a compiler which both <em>targets</em> RISC-V and <em>runs</em> on RISC-V.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I was actually really impressed with the speed of the HiFive Unleashed. The main bottleneck is the mmcblk driver - once you get files in the kernel cache things are quite pleasant and snappy.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I have all four of these now!&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://mirror.sr.ht/alpine/main/">main</a>, <a href="https://mirror.sr.ht/alpine/community/">community</a>, <a href="https://mirror.sr.ht/alpine/testing/">testing</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate></item><item><title>How to abandon a FLOSS project</title><link>https://drewdevault.com/2018/12/04/How-to-abandon-a-FLOSS-project.html</link><description><![CDATA[<p>It&rsquo;s no secret that maintaining free and open source software is often
a burdensome and thankless job. I empathise with maintainers who lost interest
in a project, became demotivated by the endless demands of users, or are no
longer blessed with enough free time. Whatever the reason, FLOSS work is
volunteer work, and you&rsquo;re free to stop volunteering at any time.</p>
<p>In my opinion, there are two good ways to abandon a project: the <em>fork it</em>
option and the <em>hand-off</em> option. The former is faster and easier, and you can
pick this if you want to wash your hands of the project ASAP, but has a larger
effect on the community. The latter is not always possible, requires more work
on your part, and takes longer, but it has a minimal impact on the community.</p>
<p>Let&rsquo;s talk about the easy way first. Start by adding a notice to your README
that your software is now unmaintained. If you have the patience, give a few
weeks notice before you really stop paying attention to it. Inform interested
parties that they should consider forking the software and maintaining it
themselves under another name. Once a fork gains traction, update the README
again to direct would-be users to the fork. If no one forks it, you could
consider directing users to similar alternatives to your software.</p>
<p>This approach allows you to quickly absolve yourself of responsibility. Your
software is no worse than it was yesterday, which allows users a grace period to
collect themselves and start up a fork. If you revisit your work later, you can
also become a contributor to the fork yourself, which removes the stress of
being a maintainer while still providing value to the project. Or, you can just
wash your hands of it entirely and move on to bigger and better things. This
&ldquo;fork it&rdquo; approach is safer than giving control of your project to passerby,
because it requires your users to acknowledge the transfer of power, instead of
being surprised by a new maintainer in a trusted package.</p>
<p>The &ldquo;fork it&rdquo; approach is well suited when the maintainer wants out ASAP, or for
smaller projects with little activity. But, for active projects with a patient
maintainer, the hand-off approach is less disruptive. Start talking with some of
your major contributors about <a href="https://drewdevault.com/2018/06/01/How-I-maintain-FOSS-projects.html">increasing their involvement</a>
in the administrative side of the projects. Mentor them on doing code reviews,
ticket triage, sysadmin stuff, marketing - all the stuff you have to do - and
gradually share these responsibilities with them.  These people eventually
become productive co-maintainers, and once established you can step away from
the project with little fanfare.</p>
<p>Taking this approach can also help you find healthier ways to be involved in
your own project. This can allow you to focus on the work you enjoy and spend
less time on the work you don&rsquo;t enjoy, which might even restore your enthusiasm
for the project outright! This is also a good idea even if you aren&rsquo;t planning
on stepping down - it encourages your contributors to take personal stake in the
project, which makes them more productive and engaged. This also makes your
community more resilient to <a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/AuthorExistenceFailure">author existence failure</a>, so
that when circumstance forces you to step down the project continues to be
healthy.</p>
<p>It&rsquo;s important to always be happy in your work, and especially in your volunteer
work. If it&rsquo;s not working, then change it. For me, this happens in different
ways. I&rsquo;ve abandoned projects outright and sent users off to make their own fork
before.  I&rsquo;ve also handed projects over to their major contributors. In some
projects I&rsquo;ve appointed new maintainers and scaled back my role to a mere
contributor, and in other projects I&rsquo;ve moved towards roles in marketing,
outreach, management, and stepped away from development. There&rsquo;s no shame in
any of these changes - you still deserve pride in your accomplishments, and
seeking constructive solutions to burnout would do your community a great
service.</p>]]></description><pubDate>Tue, 4 Dec 2018 00:00:00 +0000</pubDate></item><item><title>sr.ht, the hacker&apos;s forge, now open for public alpha</title><link>https://drewdevault.com/2018/11/15/sr.ht-general-availability.html</link><description><![CDATA[<p>I&rsquo;m happy to announce today that I&rsquo;m opening <a href="https://sr.ht">sr.ht</a> (pronounced
&ldquo;sir hat&rdquo;, or any other way you want) to the general public for the remainder of
the alpha period. Though it&rsquo;s missing some of the features which will be
available when it&rsquo;s completed, sr.ht today represents a very capable software
forge which is already serving the needs of many projects in the free &amp; open
source software community. If you&rsquo;re familiar with the project and ready to
register your account, you can head straight to <a href="https://sr.ht">the sign up
page</a>.</p>
<p>For those who are new, let me explain what makes sr.ht special. It provides many
of the trimmings you&rsquo;re used to from sites like GitHub, Gitlab, BitBucket, and
so on, including git repository hosting, bug tracking software, CI, wikis, and
so on. However, the sr.ht model is different from these projects - where many
forges attempt to replicate GitHub&rsquo;s success with a thinly veiled clone of the
GitHub UI and workflow, sr.ht is fundamentally different in its approach.</p>
<blockquote>
<p>The sr.ht platform excites me more than any project in recent memory. It’s a
fresh concept, not a Github wannabe like Gitlab. I always thought that if
something is going to replace Github it would have to be a paradigm change, and
I think that’s what we’re seeing here. Drew’s project blends the wisdom of the
kernel hackers with a tasteful web interface.</p></blockquote>
<div style="margin-top: -1rem; margin-bottom: 1rem"><small>&mdash;<a href="https://lobste.rs/s/h1udkf/git_is_already_federated_decentralized#c_smnkic">begriffs on lobste.rs</a></small></div>
<p>The 500 foot view is that sr.ht is a <a href="https://git.sr.ht/~sircmpwn/?search=sr.ht">100% free and open
source</a> software forge, with a hosted
version of the services running <em>at</em> <a href="https://sr.ht">sr.ht</a> for your
convenience. Unlike GitHub, which is almost entirely closed source, and Gitlab,
which is mostly open source but with a proprietary premium offering, all of
sr.ht is completely open source, with a copyleft license<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. You&rsquo;re welcome
to install it on your own hardware, and <a href="https://man.sr.ht/installation.md">detailed
instructions</a> are available for those who
want to do so. You can also send patches upstream, which are then integrated
into the hosted version.</p>
<p>sr.ht is special because it&rsquo;s extremely modular and flexible, designed with
interoperability with the rest of the ecosystem in mind. On top of that, sr.ht
is one of the most lightweight websites on the internet, with the average page
weighing less than 10 KiB, with <strong>no tracking</strong> and <strong>no JavaScript</strong>. Each
component - git hosting, continuous integration, etc - is a standalone piece of
software that integrates deeply with the rest of sr.ht <em>and</em> with the rest of
the ecosystem outside of sr.ht. For example, you can use builds.sr.ht to compile
your GitHub pull requests, or you can keep your repos on git.sr.ht and host
everything in one place. Unlike GitHub, which favors its own in-house pull
request workflow<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, sr.ht embraces and improves upon the email-based
workflow favored by git itself, along with many of the more hacker-oriented
projects around the net. I&rsquo;ve put a lot of work into making this powerful
workflow more <a href="https://man.sr.ht/git.sr.ht/send-email.md">accessible and
comprehensible</a> to the average
hacker.</p>
<p>The flagship product from sr.ht is its continuous integration platform,
builds.sr.ht, which is easily the most capable continuous integration system
available today. It&rsquo;s so powerful that I&rsquo;ve been working with multiple Linux
distributions on bringing them onboard because it&rsquo;s the only platform which can
scale to the automation needs of an entire Linux distribution. It&rsquo;s so powerful
that I&rsquo;ve been working with maintainers of <em>non-Linux</em> operating systems, from
BSD to even Hurd, because it&rsquo;s the only platform which can even consider
supporting their needs. Smaller users are loving it, too, many of whom are
jumping ship from Travis and Jenkins in favor of the simplicity and power of
builds.sr.ht.</p>
<p>On builds.sr.ht, simple YAML-based <a href="https://man.sr.ht/builds.sr.ht/#build-manifests">build
manifests</a>, similar to those
you see on other platforms, are used to describe your builds. You can submit
these through the web, the API, or various integrations.  Within seconds, a
virtual machine is booted with KVM, your build environment is sent to it, and
your scripts start running. A diverse set of base images are supported on a
variety of architectures, soon to include the first hardware-backed RISC-V
cycles available to the general public. builds.sr.ht is used to automate
everything from the deployment of this Jekyll-based blog, testing GitHub pull
requests for <a href="https://swaywm.org">sway</a>, building and testing packages for
<a href="https://postmarketos.org/">postmarketOS</a>, and deploying complex applications
like builds.sr.ht itself. Our base images <a href="https://builds.sr.ht/~sircmpwn/alpine/edge">build, test, and deploy
themselves</a> every day.</p>
<p>The lists.sr.ht service is another important part of sr.ht, and a large part of
how sr.ht embraces the model used by major projects like Linux, Postgresql, git
itself, and many more. lists.sr.ht finally modernizes mailing lists, with a
powerful and elegant web interface for hacking on and talking about your
projects. Take a look at the <a href="https://lists.sr.ht/~sircmpwn/sr.ht-dev">sr.ht-dev</a> list to see patches
developed for sr.ht itself. Another good read is the <a href="https://lists.sr.ht/~emersion/mrsh-dev">mrsh-dev</a> list,
used for development on the <a href="https://git.sr.ht/~emersion/mrsh">mrsh</a> project, or my own <a href="https://lists.sr.ht/~sircmpwn/public-inbox">public
inbox</a>, where I take comments for this blog and grab-bag
discussions for my smaller projects.</p>
<p>I&rsquo;ve just scratched the surface, and there&rsquo;s much more for you to discover. You
could look at my <a href="https://git.sr.ht/~sircmpwn/scdoc">scdoc</a> project to get an
idea of how the git browser looks and feels. You could <a href="https://todo.sr.ht/~sircmpwn">browse tickets on my
todo.sr.ht profile</a> to get a feel for the bug
tracking software. Or you could check out the <a href="https://man.sr.ht">detailed
manual</a> on sr.ht&rsquo;s git-powered wiki service. You could also
just <a href="https://sr.ht">sign up for an account</a>!</p>
<p>sr.ht isn&rsquo;t complete, but it&rsquo;s maturing fast and I think you&rsquo;ll love it. Give it
a try, and I&rsquo;m only <a href="mailto:sir@cmpwn.com">an email away</a> to receive your
feedback.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Some components use the 3-clause BSD license.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>A model that many have replicated in their own GitHub alternatives.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate></item><item><title>It&apos;s not okay to pretend your software is open source</title><link>https://drewdevault.com/2018/10/30/Its-not-okay-to-pretend-youre-open-source.html</link><description><![CDATA[<p>Unfortunately, I find myself writing about the Commons Clause again. For those
not in the know, the Commons Clause is an addendum designed to be added to free
software licenses. The restrictions it imposes (you cannot sell the software)
makes the resulting franken-license nonfree. I&rsquo;m not going to link to the
project which brought this subject back into the discussion - they don&rsquo;t deserve
the referral - but the continued proliferation of software using the Commons
Clause gives me reason to speak out against it some more.</p>
<p>One of my largest complaints with the Commons Clause is that it hijacks
language used by open source projects to proliferate nonfree software, and
encourages software using it to do the same. Instead of being a new software
license, it tries to stick itself onto other respected licences - often the
Apache 2.0 license. The name, &ldquo;Commons Clause&rdquo;, is also disingenuous, hijacking
language used by respected entities like Creative Commons. In truth, the Commons
Clause serves to remove software from the commons<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Combining these
problems gives you language like &ldquo;Apache+Commons Clause&rdquo;, which is easily
confused with [Apache Commons][apache-commons].</p>
<p>Projects using the Commons Clause have also been known to describe their license
as &ldquo;permissive&rdquo; or &ldquo;open&rdquo;, some even calling their software &ldquo;open source&rdquo;. This
is dishonest. FOSS refers to &ldquo;free and open source software&rdquo;. The former, free
software, is defined by the <a href="https://www.gnu.org/philosophy/free-sw.en.html">free software definition</a>, published by
<a href="https://gnu.org">GNU</a>. The latter, open source software, is defined by the <a href="https://opensource.org/osd">open source
definition</a>, published by the <a href="https://opensource.org">OSI</a>. Their definitions are very
similar, and nearly all FOSS licenses qualify under both definitions. These are
unambiguous, basic criteria which protects developers, contributors, and users
of free and open source software. These definitions are so basic, important and
well-respected that dismissing them is akin to dismissing climate change.</p>
<p>Claiming your software is open source, permissively licensed, free software,
etc, when you use the Commons Clause, is <em>lying</em>. These lies are pervasive among
users of the Commons Clause. The page listing <a href="https://redis.io/modules">Redis
Modules</a>, for example, states that only software under
an OSI-approved license is listed. Six of the modules there are using nonfree
licenses, and antirez seems content to <a href="https://github.com/antirez/redis-doc/pull/984">ignore the problem</a> until <a href="https://github.com/RedisLabsModules/RediSearch/issues/518">we
forget about it</a>. They&rsquo;re in for a long wait - we&rsquo;re not going to
forget about <strong>shady, dishonest, and unethical companies like Redis Labs</strong>.</p>
<p>I don&rsquo;t use nonfree software<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, but I&rsquo;m not going to sit here and tell you
not to make nonfree software. You have every right to license your work in any
way you choose. However, if you choose not to use a FOSS license, you need to
own up to it. Don&rsquo;t pretend that your software is something it&rsquo;s not. There are
many benefits to being a member of the free software community, but you are not
entitled to them if your software isn&rsquo;t. This behavior has to stop.</p>
<p>Finally, I have some praise to offer. <a href="https://dgraph.io/">Dgraph</a> was briefly
licensed under Apache plus the Commons Clause, and had the sort of misleading
and false information this article decries on their marketing website, docs, and
so on. However, they&rsquo;ve rolled it back, and Dgraph is now using the Apache 2.0
license with no modifications.  Thank you!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is why I often refer to it as the &ldquo;Anti-Commons Clause&rdquo;, though I felt that was a bit too Stallman-esque for this article.
[apache-commons]: <a href="http://commons.apache.org/">http://commons.apache.org/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Free as in freedom, not as in free beer.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate></item><item><title>How does virtual memory work?</title><link>https://drewdevault.com/2018/10/29/How-does-virtual-memory-work.html</link><description><![CDATA[<p>Virtual memory is an essential part of your computer, and has been for several
decades. In my <a href="https://drewdevault.com/2016/05/28/Understanding-pointers.html">earlier article on pointers</a>, I compared memory to a
giant array of octets (bytes), and explained some of the abstractions we make
on top of that. In actual fact, memory is more complicated than a flat array of
bytes, and in this article I&rsquo;ll explain how.</p>
<p>An astute reader of my earlier article may have considered that pointers on,
say, an x86_64 system, are 64 bits long<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. With this, we can address up to
18,446,744,073,709,551,616 bytes (16 exbibytes<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>) of memory. I only have 16
GiB of RAM on this computer, so what gives? What&rsquo;s the rest of the address space
for? The answer: all kinds of things! Only a small subset of your address space
is mapped to physical RAM. A system on your computer called the MMU, or Memory
Management Unit, is responsible for managing the abstraction that enables this
and other uses of your address space. This abstraction is called virtual memory.</p>
<p>The kernel interacts directly with the MMU, and provides syscalls like
[mmap(2)][mmap] for userspace programs to do the same. Virtual memory is
typically allocated a page at a time, and given a purpose on allocation, along
with various flags (documented on the mmap page). When you call <code>malloc</code>, libc
uses the mmap syscall to allocate pages of heap, then assigns a subset of that
to the memory you asked for. However, since many programs can run concurrently
on your system and may request pages of RAM at any time, your physical RAM can
get fragmented.  Each time the kernel hits a context switch<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, it swaps out
the page table for the next process.</p>
<p>This is used in this way to give each process its own clean address space and to
provide memory isolation between processes, preventing them from accessing each
other&rsquo;s memory. Sometimes, however, in the case of shared memory, the same
physical memory is deliberately shared with multiple processes.  Many pages can
also be any combination readable, writable, or executable - the latter meaning
that you could jump to it and execute it as native code.  Your compiled program
is a file, after all - mmap some executable pages, load it into memory, jump to
it, and huzzah: you&rsquo;re running your program<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. This is how JITs, dynamic
recompiling emulators, etc, do their job. A common way to reduce risk here,
popular on *BSD, is enforcing W^X (writable XOR executable), so that a page can
be either writable or executable, but never both.</p>
<p>Sometimes all of the memory you think you have isn&rsquo;t actually there, too. If you
blow your RAM budget across your whole system, swap gets involved. This is when
pages of RAM are &ldquo;swapped&rdquo; to disk - as soon as your program tries to access it
again, a page fault occurs, transferring control to the kernel. The kernel
restores from swap, damning some other poor process to the fate, and returns
control to your program.</p>
<p>Another very common use for virtual memory is for memory mapped I/O. This can
be, for example, mapping a file to memory so you can efficiently read and write
to disk. You can map other sorts of hardware, too, such as video memory. On 8086
(which is what your computer probably pretends to be when it initially
boots<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>), a simple 96x64 cell text buffer is available at address <code>0xB8000</code>.
On my TI-Nspire CX calculator, I can read the current time from the real-time
clock at <code>0x90090000</code>.</p>
<p>In summary, MMUs arrived almost immediately on the computing scene, and have
become increasingly sophisticated ever since. Virtual memory is a powerful tool
which grants userspace programmers elegant, convenient, and efficient access to
the underlying hardware.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Fun fact: most x86_64 implementations actually use 48 bit addresses internally, for a maximum theoretical limit of 256 TiB of RAM.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I had to look that SI prefix up. This number is 2<sup>64</sup>, by the way.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>This means to switch between which process/thread is currently running on a single CPU. I&rsquo;ll write an article about this sometime.
[mmap]: <a href="http://man7.org/linux/man-pages/man2/mmap.2.html">http://man7.org/linux/man-pages/man2/mmap.2.html</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>There are actually at least a dozen other steps involved in this process. I&rsquo;ll write an article about loaders at some point, too.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>You can make it stop pretending to do this with <a href="https://wiki.osdev.org/Protected_Mode">an annoying complicated sequence of esoteric machine code instructions</a>. An even more annoying sequence is required to <a href="https://wiki.osdev.org/Setting_Up_Long_Mode">enter 64-bit mode</a>. It gets even better if you want to set up <a href="https://wiki.osdev.org/Symmetric_Multiprocessing">multiple CPU cores</a>!&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate></item><item><title>Sway 1.0-beta.1 release highlights</title><link>https://drewdevault.com/2018/10/20/Sway-1.0-highlights.html</link><description><![CDATA[<p>1,173 days ago, I wrote sway&rsquo;s <a href="https://github.com/swaywm/sway/commit/6a33e1e3cddac31b762e4376e29c03ccf8f92107">initial commit</a>, and 8,269 commits
followed<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, written by hundreds of contributors. What started as a side
project became the most fully featured and stable Wayland desktop available, and
drove the development of what has become the dominant solution for building
Wayland compositors - <a href="https://github.com/swaywm/wlroots">wlroots</a>, now the
basis of 10 Wayland compositors.</p>
<p>Sway 1.0-beta.1 was just released and is 100% compatible with the <a href="https://i3wm.org/">i3 X11 window
manager</a>. It&rsquo;s faster, prettier, sips your battery, and
supports <a href="https://wayland.freedesktop.org/">Wayland</a> clients. When we started, I
honestly didn&rsquo;t think we&rsquo;d get here. When I decided we&rsquo;d rewrite our internals
and build wlroots over a year ago, I didn&rsquo;t think we&rsquo;d get here. It&rsquo;s only
thanks to an amazing team of talented contributors that we did. So what can
users expect from this release? The difference between sway 0.15 and sway 1.0 is
like night and day. The annoying bugs which plauged sway 0.15 are gone, and in
their place is a rock solid Wayland compositor with loads of features you&rsquo;ve
been asking after for years. The <a href="https://github.com/swaywm/sway/releases/tag/1.0-beta.1">official release
notes</a> are a bit thick,
so let me give you a guided tour.</p>
<h2 id="new-output-features">New output features</h2>
<p>Outputs, or displays, grew a lot of cool features in sway 1.0. As a reminder,
you can get the names of your outputs for use in your config file by using
<code>swaymsg -t get_outputs</code>. What can you do with them?</p>
<p>To rotate your display 90 degrees, use:</p>
<pre><code>output DP-1 transform 90
</code></pre>
<p>To enable our improved HiDPI support<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, use:</p>
<pre><code>output DP-1 scale 2
</code></pre>
<p>Or to enable fractional scaling (see man page for warnings about this):</p>
<pre><code>output DP-1 scale 1.5
</code></pre>
<p>You can also now run sway on multiple GPUs. It will pick a primary GPU
automatically, but you can override this by specifying a list of card names at
startup with <code>WLR_DRM_DEVICES=card0:card1:...</code>. The first one will do all of the
rendering and any displays connected to subsequent cards will have their buffers
copied over.</p>
<p>Other cool features include support for daisy-chained DisplayPort configurations
and improved Redshift support. Also, the long annoying single-output limitation
of wlc is behind us: you can now drag windows between outputs with the mouse.</p>
<p>See <code>man 5 sway-output</code> for more details on configuring these features.</p>
<h2 id="new-input-features">New input features</h2>
<p>Input devices have also matured a lot. You can get a list of their identifiers
with <code>swaymsg -t get_inputs</code>. One oft requested feature was a better way of
configuring your keyboard layout, which you can now do in your config file:</p>
<pre tabindex="0"><code>input &#34;9456:320:Metadot_-_Das_Keyboard_Das_Keyboard&#34; {
    xkb_options caps:escape
    xkb_numlock enabled
}
</code></pre><p>We also now support drawing tablets, which you can bind to a specific output:</p>
<pre tabindex="0"><code>input &#34;1386:827:Wacom_Intuos_S_2_Pen&#34; {
    map_to_output DP-3
}
</code></pre><p>You can also now do crazy stuff like having multiple mice with multiple cursors,
and linking keyboards, mice, drawing tablets, and touchscreens to each other
arbitrarily. You can now have your dvorak keyboard for normal use and a second
qwerty keyboard for when your coworker comes over for a pair programming
session. You can even give your coworker the ability to focus and type into
<em>separate</em> windows from what you&rsquo;re working on.</p>
<h2 id="third-party-panels-lockscreens-and-more">Third-party panels, lockscreens, and more</h2>
<p>Our new layer-shell protcol is starting to take hold in the community, and
enables the use of even more third-party software on sway. One of our main
commitments to you for sway 1.0 and wlroots is to break the boundaries between
Wayland compositors and encourange standard interopable protocols - and we&rsquo;ve
done so. Here are some interesting third-party layer-shell clients in the wild:</p>
<ul>
<li><a href="https://github.com/Alexays/Waybar">Waybar</a>, a new panel</li>
<li><a href="https://github.com/emersion/mako">mako</a>, a notification daemon</li>
<li><a href="https://source.puri.sm/Librem5/virtboard">virtboard</a>, an on-screen keyboard</li>
<li><a href="https://github.com/emersion/slurp">slurp</a>, a tool to interactively select a
region of the screen</li>
<li><a href="https://source.puri.sm/Librem5/phosh">Phosh</a>, the <a href="https://puri.sm/">Purism</a>
team&rsquo;s shell for their <a href="https://puri.sm/shop/librem-5/">Librem 5</a> phone</li>
</ul>
<p>We also added two new protocols for capturing your screen: screencopy and
dmabuf-export, respectively these are useful for screenshots and real-time
screen capture, for example to live stream on Twitch. Some third-party software
exists for these, too:</p>
<ul>
<li><a href="https://github.com/emersion/grim">grim</a>, for taking screenshots</li>
<li><a href="https://github.com/atomnuker/wlstream">wlstream</a>, for recording video</li>
</ul>
<h2 id="dpms-auto-locking-and-idle-management">DPMS, auto-locking, and idle management</h2>
<p>Our new <code>swayidle</code> tool adds support for all of these features, and even works
on other Wayland compositors. To configure it, start by running the daemon in
your sway config file:</p>
<pre tabindex="0"><code>exec swayidle \
    timeout 300 &#39;swaylock -c 000000&#39; \
    timeout 600 &#39;swaymsg &#34;output * dpms off&#34;&#39; \
       resume &#39;swaymsg &#34;output * dpms on&#34;&#39; \
    before-sleep &#39;swaylock -c 000000&#39;
</code></pre><p>This example will, after 300 seconds of inactivity, lock your screen. Then after
600 seconds, it will turn off all of your outputs (and turn them back on when
you wiggle the mouse). This configuration also locks your screen before your
system goes to sleep. None of this will happen if you&rsquo;re watching a video on a
supported media player (mpv, for example). For more details check out <code>man swayidle</code>.</p>
<h2 id="miscellaneous-bits">Miscellaneous bits</h2>
<p>There are a few other cool features I think are worth briefly mentioning:</p>
<ul>
<li><code>bindsym --locked</code></li>
<li>swaylock has a config file now</li>
<li>Drag and drop is supported</li>
<li>Rich content (like images) is synced between the Wayland and X11 clipboards</li>
<li>The layout is updated atomically, meaning that you&rsquo;ll never see an in-progress
frame when resizing windows</li>
<li>Primary selection is implemented and synced with X11</li>
<li>Pretty much every long-standing bug has been fixed</li>
</ul>
<p>For the full run-down see the <a href="https://github.com/swaywm/sway/releases/tag/1.0-beta.1">release
notes</a>. Give the beta a
try, and we&rsquo;re all looking forward to sway 1.0!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>5,044 sway commits and 3,225 wlroots commits at the time of writing.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Sway now has the best HiDPI support on Linux, period.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate></item><item><title>Go 1.11 got me to stop ignoring Go</title><link>https://drewdevault.com/2018/10/08/Go-1.11.html</link><description><![CDATA[<p>I took a few looks at Go over the years, starting who knows when. My first
serious attempt to sit down and learn some damn Go was in 2014, when I set a new
personal best at almost 200 lines of code before I got sick of it. I kept
returning to Go because I could see how much potential it had, but every time I
was turned off for the same reason: <code>GOPATH</code>.</p>
<p>You see, <code>GOPATH</code> crossed a line. Go is opinionated, which is fine, but with
<code>GOPATH</code> its opinions extended beyond my Go work and into the rest of my system.
As a naive new Go user, I was prepared to accept their opinions on faith - but
only within their domain. I already have opinions about how to use my computer.
I knew Go was cool, but it could be the second coming of Christ, and so long as
it was annoying to use and didn&rsquo;t integrate with my workflow, I (rightfully)
wouldn&rsquo;t care.</p>
<p>Thankfully Go 1.11 solves this problem, and solves it delightfully well. I can
now keep Go&rsquo;s influence contained to the Go projects I work with, and in that
environment I&rsquo;m much more forgiving of anything it wants to do. And when
considered in the vacuum of Go, what it wants to do is really compelling. Go
modules are <em>great</em>, and probably the single best module system I&rsquo;ve used in any
programming language. Go 1.11 took my biggest complaint and turned it into one
of my biggest compliments. Now that the One Big Problem is gone, I&rsquo;ve really
started to appreciate Go. Let me tell you about it.</p>
<p>The most important feature of Go is its simplicity. The language is small and
it grows a small number of features in each release, which rarely touch the
language itself. Some people see this as stagnation, but I see it as stability
and I know that very little Go code in the wild, no matter how old, is going to
be unidiomatic or fail to compile. Even setting aside stability, the
conservative design of the language makes Go code in the wild remarkably
consistent. Almost all third-party Go libraries are high quality stuff. Gofmt
helps with this as well<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. The limitations of the language and the way the
stdlib gently nudges you into good patterns make it easy to write good Go code.
Most of the &ldquo;bad&rdquo; Go libraries I&rsquo;ve found are trying to work around Go&rsquo;s
limitations instead of embracing them.</p>
<p>There&rsquo;s more. The concurrency model is superb. It should come as no surprise
that a language built by the alumni of Plan 9 would earn high marks in this
regard, and consequently you can scale your Go program up to be as concurrent as
you want without even thinking about it. The standard library is also excellent -
designed consistently and designed well, and I can count on one hand (or even
one finger) the number of stdlib modules I&rsquo;ve encountered that feel crusty. The
type system is great, too. It&rsquo;s the perfect balance of complexity and simplicity
that often effortlessly grants these traits to the abstractions you make with
it.</p>
<p>I&rsquo;m not even slightly bothered by the lack of generics - years as a C programmer
taught me not to need them, and I think most of the cases where they&rsquo;re useful
are to serve designs which are too complicated to use anyway. I do have some
complaints, though. The concurrency model is great, but a bit too magical and
implicit.  Error handling is annoying, especially because finding the origin of
the error is unforgivably difficult, but I don&rsquo;t know how to improve it. The log
module leaves a lot to be desired and can&rsquo;t be changed because of legacy
support.  <code>interface{}</code> is annoying when you have to deal with it, like when
dealing with JSON you can&rsquo;t unmarshall into a struct.</p>
<p>My hope for the future of Go is that it will continue to embrace simplicity in
the face of cries for complexity. I consider Go modules a runaway success
compared to dep, and I hope to see this story repeated<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> before hastily adding
generics, better error handling, etc. Go doesn&rsquo;t need to compete with anyone
like Rust, and trying to will probably ruin what makes Go great. My one request
of the Go team: don&rsquo;t make changes in Go 2.0 which make the APIs of existing
libraries unidiomatic.</p>
<p>Though I am growing very fond of it, by no means am I turning into a Go zealot.
I still use C, Python, and more all the time and have no intention of stopping.
A programming language which tries to fill all niches is a failed programming
language. But, to those who were once like me: Go is good now! In fact, it&rsquo;s
great! Try it!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I have <em>minor</em> gripes with gofmt, but the benefits make up for it beautifully. On the other hand, I have <em>major</em> gripes with PEP-8, and if you ever see me using it I want you to shoot me in the face.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Though hopefully with less drama.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 8 Oct 2018 00:00:00 +0000</pubDate></item><item><title>Don&apos;t sign a CLA</title><link>https://drewdevault.com/2018/10/05/Dont-sign-a-CLA.html</link><description><![CDATA[<p>A large minority of open-source projects come with a CLA, or Contributor License
Agreement, and require you to sign one before they&rsquo;ll merge your patch. These
agreements typically ask you to go above and beyond the rights you afford the
project by contributing under the license the software is distributed with. And
you should never sign one.</p>
<p>Free and open source software licenses grant explicit freedoms to three groups:
the maintainers, the users, <em>and</em> the contributors. An important freedom is the
freedom to make changes to the software and to distribute these changes to the
public. The natural place to do so is by contributing to the upstream project,
something a project should be thankful for. A CLA replaces this gratitude with
an attempt to weaken these freedoms in a manner which may stand up to the letter
of the license, but is far from the spirit.</p>
<p>A CLA is a kick in the groin to a contributor&rsquo;s good-faith contribution to the
project. Many people, myself included, contribute to open source projects under
the assumption that my contributions will help serve a project which continues
to be open source in perpetuity, and a CLA provides a means for the project
maintainers to circumvent that. What the CLA is actually used for is to give the
project maintainers the ability to relicense your work under a more restrictive
software license, up to and including making it entirely closed source.</p>
<p>We&rsquo;ve seen this happen before. Consider the Redis Labs debacle, where they
adopted the nonfree<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Anti-Commons Clause<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and used their CLA to pull along
any external contributions for the ride. As thanks for the generous time
invested by their community into their software, they yank it out from
underneath it and repurpose it to make money with an obscenely nonfree product.
Open source is a commitment to your community. Once you make it, you cannot take
it back. You don&rsquo;t get the benefits associated with being an open source project
if you have an exit hatch. You may argue that it&rsquo;s your right to do what you
want with your project, but making it open source is <em>explicitly waiving that
right</em>.</p>
<p>So to you, the contributor: if you are contributing to open source and you want
it to stay that way, you should not sign a CLA. When you send a patch to a
project, you are affording them the same rights they afforded you. The
relationship is one of equals. This is a healthy balance. When you sign a CLA,
you give them unequal power over you. If you&rsquo;re scratching an itch and just
want to submit the patch in good faith, it&rsquo;s easy enough to fork the project and
put up your changes in a separate place. This is a right afforded to you by
every open source license, and it&rsquo;s easy to do. Anyone who wants to use your
work can apply your patches on top of the upstream software. Don&rsquo;t sign away
your rights!</p>
<hr>
<p>Additional reading: <a href="https://blog.hansenpartnership.com/gpl-as-the-best-licence-governance-and-philosophy/">GPL as the Best Licence – Governance and Philosophy</a></p>
<p>Some responses to the discussion around this article:</p>
<p><em>What about the <a href="https://www.apache.org/licenses/cla-corporate.txt">Apache Foundation
CLA</a>?</em> This CLA is one of the
better ones, because it doesn&rsquo;t transfer copyright over your work to the Apache
Foundation. I have no beef with clauses 1 and 3-8. However, term 2 is too broad
and I would not sign this CLA.</p>
<p><em>What about the Linux kernel <a href="https://elinux.org/Developer_Certificate_Of_Origin">developer certificate of
origin</a>?</em> I applaud the
Linux kernel&rsquo;s approach here. It covers their bases while still strongly
protecting the rights of the patch owner. It&rsquo;s a short statement with little
legalese and little fanfare to agreeing to it (just add &ldquo;Signed-off By&rdquo; to your
commit message). I approve.</p>
<hr>
<p>Update April 2021: I wrote a follow-up article about the Developer Certificate
of Origin in particular: <a href="https://drewdevault.com/2021/04/12/DCO.html">The Developer Certificate of Origin is a great alternative to a CLA</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://drewdevault.com/2018/08/22/Commons-clause-will-destroy-open-source.html">Free as in freedom</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Call me petty, but I can&rsquo;t in good faith call it the &ldquo;Commons Clause&rdquo; when its purpose is to <em>remove</em> software from the commons.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 5 Oct 2018 00:00:00 +0000</pubDate></item><item><title>Sway &amp; wlroots at XDC 2018</title><link>https://drewdevault.com/2018/09/30/Sway-wlroots-at-XDC-2018.html</link><description><![CDATA[<p>Just got my first full night of sleep after the return flight from Spain after
attending <a href="https://xdc2018.x.org/">XDC 2018</a>. It was a lot of fun! I attended
along with four other major wlroots contributors. Joining me were <a href="https://github.com/emersion">Simon Ser
(emersion)</a> (a volunteer) and <a href="https://github.com/ascent12">Scott Anderson
(ascent12)</a> of
<a href="https://www.collabora.com/">Collabora</a>, who work on both
<a href="https://github.com/swaywm/wlroots">wlroots</a> and
<a href="https://github.com/swaywm/sway">sway</a>. <a href="https://github.com/ongy">ongy</a> works on
wlroots, <a href="https://github.com/swaywm/hsroots">hsroots</a>, and
<a href="https://github.com/waymonad/waymonad">waymonad</a>, and joined us on behalf
of <a href="https://www.igel.com/">IGEL</a>. Finally, we were joined by <a href="https://github.com/agx">Guido Günther
(agx)</a> of <a href="https://puri.sm/">Purism</a>, who works with us
on wlroots and on the Librem 5. This was my first time meeting most of them
face-to-face!</p>
<p>wlroots was among the highest-level software represented at XDC. Most of the
attendees are hacking on the kernel or mesa drivers, and we had a lot to learn
from each other. The most directly applicable talk was probably VKMS (virtual
kernel mode setting), a work-in-process kernel subsystem which will be useful
for testing the complex wlroots DRM code. We had many chances to catch up with
the presenters after their talk to learn more and establish a good
relationship. We discovered from these chats that some parts of our DRM code
was buggy, and have even started onboarding some of them as contributors to sway
and wlroots.</p>
<p>We also learned a lot from the other talks, in ways that will pay off over time.
One of my favorites was an introduction to the design of Intel GPUs, which went
into a great amount of detail into how the machine code for these GPUs worked,
why these design decisions make them efficient, and their limitations and
inherent challenges. Combined with other talks, we got a lot of insight into the
design and function of mesa, graphics drivers, and GPUs. These folks were very
available to us for further discussion and clarification after their talks, a
recurring theme at XDC and one of the best parts of the conference.</p>
<p>Another recurring theme at XDC was talks about how mesa is tested, with the most
in-depth coverage being on Intel&rsquo;s new CI platform. They provide access to Mesa
developers to test their code on <em>every</em> generation of Intel GPU in the course
of about 30 minutes, and brought some concrete data to the table to show that it
really works to make their drivers more stable. I took notes that you can expect
to turn into builds.sr.ht features! And since these folks were often available
for chats afterwards, I think they were taking notes, too.</p>
<p>I also met many of the driver developers from AMD, Intel, and Nvidia; all of
whom had interesting insights and were a pleasure to hang out with. In fact,
Nvidia&rsquo;s representatives were the first people I met! On the night of the
kick-off party, I led the wlroots clan to the bar for beers and introduced
myself to the people who were standing there - who already knew me from my
writings critical of Nvidia. Awkward! A productive conversation ensued
regardless, where I was sad to conclude that we still aren&rsquo;t going to see any
meaningful involvement in open source from Nvidia. Many of their engineers are
open to it, but I think that the engineering culture at Nvidia is unhealthy and
that the engineers have very little influence. We made our case and brought up
points they weren&rsquo;t thinking about, and I can only hope they&rsquo;ll take them home
and work on gradually improving the culture.</p>
<p>Unfortunately, Wayland itself was somewhat poorly represented. Daniel Stone (a
Wayland &amp; Weston maintainer) was there, and Roman Glig (of KDE), but some KDE
folks had to cancel and many people I had hoped to meet were not present. Some
of the discussions I wanted to have about protocol standardization and
cooperation throughout Wayland didn&rsquo;t happen. Regardless, the outcome of XDC was
very positive - we learned a lot and taught a lot. We found new contributors to
our projects, and have been made into new contributors for everyone else&rsquo;s
projects.</p>
<p>Big shoutout to the X Foundation for organizing the event, and to the beautiful
city of A Coruña for hosting us, and to University of A Coruña for sharing their
university - which consequently led to meeting some students there that used
Sway and wanted to contribute! Thanks as well to the generous sponsors, both for
sponsoring the event and for sending representatives to give talks and meet the
community.</p>]]></description><pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate></item><item><title>Getting started with qemu</title><link>https://drewdevault.com/2018/09/10/Getting-started-with-qemu.html</link><description><![CDATA[<p>I often get asked questions about using my software, particularly sway, on
hypervisors like VirtualBox and VMWare, as well as for general advice on
which hypervisor to choose. My answer is always the same: qemu. There&rsquo;s no
excuse to use anything other than qemu, in my books. But I can admit that it
might be a bit obtuse to understand at first. qemu&rsquo;s greatest strength is also
its greatest weakness: it has so many options that it&rsquo;s hard to know which ones
you need just to get started.</p>
<p>qemu is the swiss army knife of virtualisation, much like ffmpeg is the swiss
army knife of multimedia (which comes as no surprise, given that both are written
by Fabrice Bellard). I run a dozen permanent VMs with qemu, as well as all of
the ephemeral VMs used on <a href="https://meta.sr.ht">builds.sr.ht</a>. Why is it better
than all of the other options? Well, in short: qemu is fast, portable, better
supported by guests, and has more features than Hollywood. There&rsquo;s nothing other
hypervisors can do that qemu can&rsquo;t, and there&rsquo;s plenty qemu can that they
cannot.</p>
<p>Studying the full breadth of qemu&rsquo;s featureset is something you can do over
time. For now, let&rsquo;s break down a simple Linux guest installation. We&rsquo;ll start
by downloading some install media (how about <a href="https://alpinelinux.org/">Alpine
Linux</a>, I like Alpine Linux) and preparing a virtual
hard drive.</p>
<pre><code>curl -O https://nl.alpinelinux.org/alpine/v3.8/releases/x86_64/alpine-standard-3.8.0-x86_64.iso
qemu-img create -f qcow2 alpine.qcow2 16G
</code></pre>
<p>This makes a 16G virtual hard disk in a file named alpine.qcow2, the qcow2
format being a format which appears to be 16G to the guest (VM), but only
actually writes to the host any sectors which were written to by the guest in
practice. You can also expose this as a block device on your local system (or a
remote system!) with qemu-nbd if you need to. Now let&rsquo;s boot up a VM using our
install media and virtual hard disk:</p>
<pre><code>qemu-system-x86_64 \
    -enable-kvm \
    -m 2048 \
    -nic user,model=virtio \
    -drive file=alpine.qcow2,media=disk,if=virtio \
    -cdrom alpine-standard-3.8.0-x86_64.iso \
    -sdl
</code></pre>
<p>This is a lot to take in. Let&rsquo;s break it down:</p>
<p><strong>-enable-kvm</strong>: This enables use of the KVM (kernel virtual machine) subsystem
to use hardware accelerated virtualisation on Linux hosts.</p>
<p><strong>-m 2048</strong>: This specifies 2048M (2G) of RAM to provide to the guest.</p>
<p><strong>-nic user,model=virtio</strong>: Adds a virtual <strong>n</strong>etwork <strong>i</strong>nterface
<strong>c</strong>ontroller, using a virtual LAN emulated by qemu. This is the most
straightforward way to get internet in a guest, but there are other options (for
example, you will probably want to use <code>-nic tap</code> if you want the guest to do
networking directly on the host NIC). <code>model=virtio</code> specifies a special
<code>virtio</code> NIC model, which is used by the virtio kernel module in the guest to
provide faster networking.</p>
<p><strong>-drive file=alpine.qcow2,media=disk,if=virtio</strong>: This attaches our virtual
disk to the guest. It&rsquo;ll show up as <code>/dev/vda</code>. We specify <code>if=virtio</code> for the
same reason we did for <code>-nic</code>: it&rsquo;s the fastest interface, but requires special
guest support from the Linux virtio kernel module.</p>
<p><strong>-cdrom alpine-standard-3.8.0-x86_64.iso</strong> connects a virtual CD drive to the
guest and loads our install media into it.</p>
<p><strong>-sdl</strong> finally specifies the graphical configuration. We&rsquo;re using the SDL
backend, which is the simplest usable graphical backend. It attaches a display
to the guest and shows it in an <a href="https://www.libsdl.org/">SDL</a> window on the
host.</p>
<p>When you run this command, the SDL window will appear and Alpine will boot! You
can complete the Alpine installation normally, using <code>setup-alpine</code> to install
it to the attached disk. When you shut down Alpine, run qemu again without
<code>-cdrom</code> to start the VM.</p>
<p>That covers enough to get you off of VirtualBox or whatever other bad hypervisor
you&rsquo;re using. What else is possible with qemu? Here&rsquo;s a short list of common
stuff you can look into:</p>
<ul>
<li>Running pretty much any guest operating system</li>
<li>Software emulation of non-native architectures like ARM, PPC, RISC-V</li>
<li>Using <code>-spice</code> instead of <code>-sdl</code> to enable remote access to the
display/keyboard/mouse</li>
<li>Read-only disk images with guest writes stored in RAM (<code>snapshot=on</code>)</li>
<li>Non-graphical boot with <code>-nographic</code> and <code>console=ttyS0</code> configured in your
kernel command line</li>
<li>Giving a genuine graphics card to your guest with KVM passthrough for high
performance gaming, OpenCL, etc</li>
<li>Using <a href="https://virt-manager.org/">virt-manager</a> or
<a href="https://help.gnome.org/users/gnome-boxes/stable/">Boxes</a> if you want a GUI to
hold your hand</li>
<li>And much more&hellip;</li>
</ul>
<p>There&rsquo;s really no excuse to be using any other hypervisor<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. They&rsquo;re all
dogshit compared to qemu.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Especially VirtualBox. If you use VirtualBox after reading this article you make poor life choices and are an embarrassment to us all.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate></item><item><title>Conservative web development</title><link>https://drewdevault.com/2018/09/04/Conservative-web-development.html</link><description><![CDATA[<p>Today I turned off my ad blocker, enabled JavaScript, opened my network monitor,
and clicked the first link on Hacker News - a New York Times article. It started
by downloading a megabyte of data as it rendered the page over the course of
eight full seconds. The page opens with an advertisement 281 pixels tall, placed
before even the title of the article. As I scrolled down, more and more requests
were made, downloading a total of 2.8 MB of data with 748 HTTP requests. An
article was weaved between a grand total of 1419 vertical pixels of ad space,
greater than the vertical resolution of my display. Another 153-pixel ad is
shown at the bottom, after the article. Four of the ads were identical.</p>
<p>I was reminded to subscribe three times, for $1/week (after one year this would
become $3.75/week). One of these reminders attached itself to the bottom of my
screen and followed along as I scrolled. If I scrolled up, it replaced this with
a larger banner, which showed me three other articles and an ad. I was asked for
my email address once, though I would have had to fill out a captcha to submit
it. I took out my phone and repeated the experiment. It took 15 seconds to load,
and I estimate the ads took up a vertical space equal to 4 times my phone&rsquo;s
vertical resolution, each ad alone taking up half of my screen.</p>
<p>The text of the article is a total of 9037 bytes, including the title, author,
and date. I downloaded the images relevant to the article, including the
1477x1082<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> title image. Before I ran them through an optimizer, they weighed
260 KB; after, 236 KB (using only lossless optimizations). 8% of the total
download was dedicated to the content. 5 discrete external companies were
informed of my visit to the page and given the opportunity to run artibrary
JavaScript on it.</p>
<p>If these are the symptoms, what is the cure? My basic principles are these:</p>
<ul>
<li>Use no, or very little, JavaScript</li>
<li>Use raster images sparingly, if at all, and optimize them</li>
<li>Provide interactivity with forms and clever CSS</li>
<li>Identify wasted bandwidth and CPU cycles and optimize them</li>
</ul>
<p>I&rsquo;ve been building <a href="https://meta.sr.ht">sr.ht</a> with these principles in mind,
and I spent a few hours this optimizing it further. What do the results look
like? The heaviest page, <a href="https://meta.sr.ht">the marketing page</a>, today weighs
<strong class="text-info">110 KB</strong> with a cold cache, and <strong
class="text-danger">4.6 KB</strong> warm. <a href="https://github.com/">A similar page</a>
on GitHub.com<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> weighs <strong class="text-info">2900 KB</strong> cold,
<strong class="text-danger">19.4 KB</strong> warm. <a href="https://git.sr.ht/~sircmpwn/linux/tree/master/init/main.c">A more typical
page</a> on sr.ht weighs <strong class="text-info">56.8 KB</strong>
cold and <strong class="text-danger">31.9 KB</strong> warm, after <strong
class="text-warning">2</strong> HTTP requests; on GitHub <a href="https://github.com/torvalds/linux/blob/master/init/main.c">the same
page</a> is <strong class="text-info">781 KB</strong> cold and
<strong class="text-danger">57.4 KB</strong> warm, <strong
class="text-warning">118</strong> requests. This file is 29.1 KB.  The sr.ht
overhead is <strong class="text-info">27.6 KB</strong> cold and <strong
class="text-danger">2.7 KB</strong> warm. The GitHub overhead is respectively
<strong class="text-info">751.9 KB</strong> and <strong class="text-danger">28.2
KB</strong>. There&rsquo;s also a 174-pixel-tall ad on GitHub encouraging me to sign
up for an account, shown before any of the content.</p>
<p>To be fair, the GitHub page has more features. As far as I can tell, most of
these aren&rsquo;t implemented <em>in</em> the page, though, and are rather links to other
pages. Some of the features <em>in</em> the page include a dropdown for filtering
branches and tags, popups that show detail when you hover over avatars, some
basic interactivity in the search, all things that I can&rsquo;t imagine taking up
much space. Does this justify an order of magnitude increase in resource usage?</p>
<p>Honestly, GitHub does a pretty good job overall. Compared to our New York Times
example, they&rsquo;re downright <em>great</em>. But they could be doing better, and so could
we all. You can build beautiful, interactive websites with HTML and CSS alone,
supported by a simple backend. Pushing the complexity of rendering your
single-page app into the frontend might save you miniscule amounts of
server-side performance, but you&rsquo;d just be offloading the costs onto your
visitor&rsquo;s phone and sucking their battery dry.</p>
<p>There are easy changes you can make. Enable caching on your web server, with a
generous expiry. Use a hash of your resources in the URL so that you can bust
the cache when you need to. Enable gzip for text resources, and HTTP/2. Run your
images through an optimizer, odds are they can be losslessly compressed.  There
are harder changes, too. Design your website to be usable without JavaScript,
and use small amounts of it to enhance the experience - rather than to <em>be</em> the
experience. Use CSS cleverly to provide interactivity<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Find ways to offload
work to the server where you can<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. Measure your pages to look for places to
improve. Challenge yourself to find the simplest way of building the features
you want.</p>
<p>And if anyone at Google is reading, you should try recommending these strategies
for speeding up pages instead of pushing self-serving faux standards like AMP.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Greater than the vertical resolution of my desktop display.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>You may have to log out to see this.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>For example, check out how I implemented the collapsable message details on the <a href="https://lists.sr.ht/~sircmpwn/sr.ht-dev/%3C20180830183221.32377-1-hilobakho%40gmail.com%3E">lists.sr.ht archives</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>I did this when I upgraded to Font Awesome 5 recently. They want you to include some JavaScript to make their SVG icons work, but instead I wrote a <a href="https://git.sr.ht/~sircmpwn/core.sr.ht/tree/70e75e96dc664a1b487ef02cb9936cb8f69105c0/srht/flask.py#L49">dozen lines of Python</a> on the backend which gave me a macro to dump the desired SVG directly into the page.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 4 Sep 2018 00:00:00 +0000</pubDate></item><item><title>How to make a self-hosted video livestream</title><link>https://drewdevault.com/2018/08/26/Self-hosted-livestreaming.html</link><description><![CDATA[<p>I have seen some articles in the past which explain how to build the ecosystem
<em>around</em> your video streaming, such as live chat and forums, but which leave the
actual video streaming to Twitch.tv. I made a note the last time I saw one of
these articles to write one of my own explaining the video bit. As is often the
case with video, we&rsquo;ll be using the excellent <a href="http://ffmpeg.org/">ffmpeg</a> tool
for this. If it&rsquo;s A/V-related, ffmpeg can probably do it.</p>
<p><em>Note: a demonstration video was previously shown here, but as traffic on this
article died down I took it offline to reduce unnecessary load.</em></p>
<p>ffmpeg has a built-in <a href="https://dashif.org/">DASH</a> output format, which is the
current industry standard for live streaming video to web browsers. It works by
splitting the output up into discrete files and using an <a href="https://drewdevault.com/dash/live.mpd">XML
file</a> (an MPD playlist) to tell the player where they are. Few
browsers support DASH natively, but
<a href="https://github.com/Dash-Industry-Forum/dash.js/wiki">dash.js</a> can polyfill it
by periodically downloading the latest manifest and driving the video element
itself.</p>
<p>Getting the source video into ffmpeg is a little bit beyond the scope of this
article, but I know some readers won&rsquo;t be familiar with ffmpeg so I&rsquo;ll have
mercy. Let&rsquo;s say you want to play some static video files like I&rsquo;m doing above:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ffmpeg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-re <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-stream_loop -1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-i my-video.mkv <span class="se">\
</span></span></span></code></pre></div><p>This will tell ffmpeg to read the input (-i) in real time (-re), and loop it
indefinitely. If instead you want to, for example, use x11grab instead to
capture your screen and pulse to capture desktop audio, try this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    -f x11grab <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -r <span class="m">30</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -video_size 1920x1080 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -i <span class="nv">$DISPLAY</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -f pulse <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -i alsa_input.usb-Blue_Microphones_Yeti_Stereo_Microphone_REV8-00.analog-stereo
</span></span></code></pre></div><p>This sets the framerate to 30 FPS and the video resolution to 1080p, then reads
from the X11 display <code>$DISPLAY</code> (usually :0). Then we add pulseaudio and use my
microphone source name, which I obtained with <code>pactl list sources</code>.</p>
<p>Let&rsquo;s add some arguments describing the output format. Your typical web browser
is a finicky bitch and has some very specific demands from your output format if
you want maximum compatability:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    -codec:v libx264 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -profile:v baseline <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -level <span class="m">4</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -pix_fmt yuv420p <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -preset veryfast <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -codec:a aac <span class="se">\
</span></span></span></code></pre></div><p>This specifices the libx264 video encoder with the baseline level 4 profile, the
most broadly compatible x264 profile, with the yuv420p pixel format, the most
broadly compatible pixel format, the veryfast preset to make sure we can encode
it in realtime, the aac audio codec. Now that we&rsquo;ve specified the parameters for
the output, let&rsquo;s configure the output format: DASH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">	-f dash <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-window_size <span class="m">5</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-remove_at_exit <span class="m">1</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	/tmp/dash/live.mpd
</span></span></code></pre></div><p>The window_size specifies the maximum number of A/V segments to keep in the
manifest at any time, and remove_at_exit will clean up all of the files when
ffmpeg exits. The output file is the path to the playlist to write to disk, and
the segments will be written next to it. The last step is to serve this with
nginx:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">location</span> <span class="s">/dash</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">types</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kn">application/dash+xml</span> <span class="s">mpd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="kn">video/mp4</span> <span class="s">m4v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="kn">audio/mp4</span> <span class="s">m4a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kn">add_header</span> <span class="s">Access-Control-Allow-Origin</span> <span class="s">*</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">root</span> <span class="s">/tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>You can now point the <a href="http://reference.dashif.org/dash.js/nightly/samples/dash-if-reference-player/index.html">DASH reference
player</a>
at <code>http://your-server.org/dash/live.mpd</code> and see your video streaming there.
Neato! You can add dash.js to your website and you know have a fully self-hosted
video live streaming setup ready to rock.</p>
<p>Perhaps the ffmpeg swiss army knife isn&rsquo;t your cup of tea. If you want to, for
example, use <a href="https://obsproject.com/">OBS Studio</a>, you might want to take a
somewhat different approach. The
<a href="https://github.com/arut/nginx-rtmp-module">nginx-rtmp-module</a> provides an RTMP
(real-time media protocol) server that integrates with nginx. After adding
the DASH output, you&rsquo;ll end up with something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">rtmp <span class="o">{</span>
</span></span><span class="line"><span class="cl">    server <span class="o">{</span>
</span></span><span class="line"><span class="cl">        listen 1935<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        application live <span class="o">{</span>
</span></span><span class="line"><span class="cl">            dash on<span class="p">;</span>
</span></span><span class="line"><span class="cl">            dash_path /tmp/dash<span class="p">;</span>
</span></span><span class="line"><span class="cl">            dash_fragment 15s<span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Then you can stream to <code>rtmp://your-server.org/live</code> and your dash segments
will show up in <code>/tmp/dash</code>. There&rsquo;s no password protection here, so put it in
the stream URL (e.g. <code>application R9AyTRfguLK8</code>) or use an IP whitelist:</p>
<pre tabindex="0"><code>application live {
    allow publish your-ip;
    deny publish all;
}
</code></pre><p>If you want to get creative with it you can use
<a href="https://github.com/arut/nginx-rtmp-module/wiki/Directives#on_publish"><code>on_publish</code></a>
to hit an web service with some details and return a non-2xx code to forbid
streaming. Have fun!</p>
<p>I learned all of this stuff by making a bot which livestreamed Google hangouts
over the LAN to get around the participant limit at work. I&rsquo;ll do a full writeup
about that one later!</p>
<hr>
<p>Here&rsquo;s the full script I&rsquo;m using to generate the live stream on this
page:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>rm -f /tmp/playlist
</span></span><span class="line"><span class="cl">mkdir -p /tmp/dash
</span></span><span class="line"><span class="cl"><span class="k">for</span> file in /var/www/mirror.sr.ht/hacksway-2018/*
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">	<span class="nb">echo</span> <span class="s2">&#34;file &#39;</span><span class="nv">$file</span><span class="s2">&#39;&#34;</span> &gt;&gt; /tmp/playlist
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ffmpeg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-re <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-loglevel error <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-stream_loop -1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-f concat <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-safe <span class="m">0</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-i /tmp/playlist <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-vf <span class="s2">&#34;drawtext=\
</span></span></span><span class="line"><span class="cl"><span class="s2">			fontfile=/usr/share/fonts/truetype/ttf-dejavu/DejaVuSans-Bold.ttf:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			text=&#39;%{gmtime\:%Y-%m-%d %T} UTC&#39;:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			fontcolor=white:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			x=(w-text_w)/2:y=128:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			box=1:boxcolor=black:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			fontsize=72,
</span></span></span><span class="line"><span class="cl"><span class="s2">		drawtext=\
</span></span></span><span class="line"><span class="cl"><span class="s2">			fontfile=/usr/share/fonts/truetype/ttf-dejavu/DejaVuSans-Bold.ttf:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			text=&#39;REBROADCAST&#39;:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			fontcolor=white:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			x=(w-text_w)/2:y=16:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			box=1:boxcolor=black:\
</span></span></span><span class="line"><span class="cl"><span class="s2">			fontsize=48&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-codec:v libx264 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-profile:v baseline <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-pix_fmt yuv420p <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-level <span class="m">4</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-preset veryfast <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-codec:a aac <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-f dash <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-window_size <span class="m">5</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-remove_at_exit <span class="m">1</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	/tmp/dash/live.mpd
</span></span></code></pre></div>]]></description><pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate></item><item><title>The Commons Clause will destroy open source</title><link>https://drewdevault.com/2018/08/22/Commons-clause-will-destroy-open-source.html</link><description><![CDATA[<p>An alarmist title, I know, but it&rsquo;s true. If the <a href="https://commonsclause.com/">Commons
clause</a> were to be adopted by all open source
projects, they would cease to be open source<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, and therefore the Commons
clause is trying to destroy open source. When this first appeared I spoke out
about it in discussion threads around the net, but didn&rsquo;t think anyone would
take it seriously. Well, yesterday, some parts of Redis <a href="https://redislabs.com/community/commons-clause/">became proprietary
software</a>.</p>
<p>The Commons Clause promoted by Kevin Wang presents one of the greatest
existential threats to open source I&rsquo;ve ever seen. It preys on a vulnerability
open source maintainers all suffer from, and one I can strongly relate to. It
<em>sucks</em> to not be able to make money from your open source work. It <em>really</em>
sucks when companies are using your work to make money for themselves. If a
solution presents itself, it&rsquo;s tempting to jump at it. But the Commons Clause
doesn&rsquo;t present a solution for supporting open source software. It presents a
framework for turning open source software into proprietary software.</p>
<p>What should we do about open source maintainers not getting the funding
they need? It&rsquo;s a very real problem, and one Kevin has <a href="https://twitter.com/kevinverse/status/1032074268291424257">explicitly asked
us</a> to talk about
before we criticise his solution to it. I would be happy to share my thoughts.
I&rsquo;ve struggled for many years to find a way to finance myself as the maintainer
of many dozens of projects. For a long time it has been a demotivating struggle
with no clear solutions, a struggle which at one point probably left me
vulnerable to the temptations offered by the Commons Clause. But today, the
situation is clearly improving.</p>
<p>Personally, I have a harder go of it because very little of my open source
software is appealing to the businesses that have the budget to sponsor them.
Instead, I rely on the (much smaller and less stable) recurring donations of my
individual users. When I started accepting these, I did not think that it was
going to work out. But today, I&rsquo;m making far more money from these donations
than I ever thought possible<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and I see an upwards trend which will
eventually lead me to being able to work on open source full time. If I were
able to add only a few business-level sponsorships to this equation, I think I
would easily have already reached my goals.</p>
<p>There are other options for securing financing for open source, some of which
Redis has already been exploring. Selling a hosted and supported version of
your service is often a good call. Offering consulting support for your
software has also worked for many groups in the past. Some projects succeed with
(A)GPL for everyone and BSD for a price. These are all better avenues to
explore - making your software proprietary is a tragic alternative that should
not be considered.</p>
<p>We need to combine these methods with a greater appreciation for open source in
the business community. Businesses need engineers - appeal to your peers so they
can appeal to the money on behalf of the projects they depend on. A $250/mo
recurring donation to would be a drop in the bucket of most businesses, but a
major boon to any open source project, with which the business will almost
certainly see tangible value-add as a result. When I get to work today I&rsquo;m going
to identify open source projects we use that accept donations and make the
plea<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, and keep making the plea week over week until money is spent. You
should, too.</p>
<p>Redis also stands out as a cautionary entry in the history of Contributor
License Agreements. Everyone who has contributed to the now-proprietary Redis
modules has had their hard work stolen and sold by RedisLabs under a proprietary
license. I do not sign CLAs and I think they&rsquo;re a harmful practice for this very
reason. Asking a contributor to sign them is a slap in the face to the good will
which led them to make a contribution in the first place. Don&rsquo;t sign these and
don&rsquo;t ask others to.</p>
<p>I respect antirez<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> very much, but I am sorely disappointed in him. He should
have known better and, if you&rsquo;re reading this, I urge you to roll back your
misguided decision. But the Commons Clause is much more deeply disturbing. What
Kevin is doing will ruin open source software, maybe for good<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>.</p>
<p>I really appreciate some of Kevin&rsquo;s work. <a href="https://fossa.io/">FOSSA</a> is a really
cool tool that can stand to provide some serious value to the open source
community. <a href="https://tldrlegal.com/">TL;DR Legal</a> is a fantastic tool which has
already delivered a tremendous amount of value to open source, and I&rsquo;ve
personally referenced it dozens of times. Thank you, honestly, for your work on
improving the legal landscape of open source. With Commons Clause, however,
Kevin has taken it too far. <a href="https://www.gnu.org/philosophy/free-sw.en.html">The four
freedoms</a> are <em>important</em>. The
only solution is to bury the Commons Clause project. Kill the website and GitHub
repository, and we can try to forget this ever happened.</p>
<p>I understand that turning back is going to be hard, which scares me. I know that
Kevin has already put a lot of effort into it and convinced himself that it&rsquo;s
the Right Thing To Do. It takes work to write the clause, vet it for legal
issues, design a website (a beautiful one, I&rsquo;ll give you that), and to promote
it among your target audience. I know how hard it is to distance yourself from
something you&rsquo;ve staked your personal reputation on. You had only the best
intentions<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>, Kevin, but please step back from the ego and do the right thing -
take this down. You stand to undo all of your hard work for the open source
community in one fell swoop with this initiative. I&rsquo;m begging you, stop while
it&rsquo;s not too late.</p>
<p>Man, two angry articles in a row. I have more technical articles coming up, I
promise.</p>
<hr>
<p><strong>Update 2018-08-23 03:00 UTC:</strong> Richard Stallman of the Free Software
Foundation reached out asking me to clarify the use of &ldquo;open source&rdquo; in this
article. I have refered to the FSF&rsquo;s document on essential freedoms as a
definition of &ldquo;open source&rdquo;. In fact, it is the definition of free software - a
distinct concept. The FSF does not advocate for open source software, but
particularly for free (or &ldquo;libre&rdquo;) software, of which there is some intersection
with open source software. For more information on the difference, refer to
<a href="https://www.gnu.org/philosophy/open-source-misses-the-point.html">Richard&rsquo;s article on the
subject</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Under both the OSI and FSF definitions. The Commons Clause removes freedom 0 of the <a href="https://www.gnu.org/philosophy/free-sw.en.html">four essential freedoms</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://drewdevault.com/donate">Figures here</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I intend to do an audit, but I have always (and I encourage you to always) kept an eye on the stuff we use as I come across it, looking for opportunities to donate.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>The maintainer of Redis&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>As software gets abandoned, making the license more permissive is the last thing on the maintainer&rsquo;s minds. So as the body of Commons Clause software grows, the graveyard will only ever fill.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Honestly, this is a real problem that open source suffers from and I really appreciate the attempt to fix it, misguided as it may have been. But this is not okay, and Kevin needs to recognize the gravity of his mistake and move to correct it.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate></item><item><title>I don&apos;t trust Signal</title><link>https://drewdevault.com/2018/08/08/Signal.html</link><description><![CDATA[<p>Occasionally when Signal is in the press and getting a lot of favorable
discussion, I feel the need to step into various forums, IRC channels, and so
on, and explain why I don&rsquo;t trust Signal. Let&rsquo;s do a blog post instead.</p>
<p>Off the bat, let me explain that I expect a tool which claims to be secure to
actually be secure. I don&rsquo;t view &ldquo;but that makes it harder for the average
person&rdquo; as an acceptable excuse. If Edward Snowden and Bruce Schneier are going
to spout the virtues of the app, I expect it to <em>actually</em> be secure when it
matters - when vulnerable people using it to encrypt sensitive communications
are targeted by smart and powerful adversaries.</p>
<p>Making promises about security without explaining the tradeoffs you made in
order to appeal to the average user is unethical. Tradeoffs are necessary - but
self-serving tradeoffs are not, and it&rsquo;s your responsibility to clearly explain
the drawbacks and advantages of the tradeoffs you make. If you make broad and
inaccurate statements about your communications product being &ldquo;secure&rdquo;, then
when the political prisoners who believed you are being tortured and hanged,
it&rsquo;s on you. The stakes are serious. Let me explain why I don&rsquo;t think Signal
takes them seriously.</p>
<h2 id="google-play">Google Play</h2>
<p>Why do I make a big deal out of Google Play and Google Play Services? Well, some
people might trust Google, the company. But up against nation states, it&rsquo;s no
contest - Google has ties to the NSA, has been served secret subpoenas, and is
literally the world&rsquo;s largest machine designed for harvesting and analyzing
private information about their users. Here&rsquo;s what Google Play Services
<em>actually</em> is: <strong>a rootkit</strong>. Google Play Services lets Google do silent
background updates on apps on your phone and give them any permission they want.
Having Google Play Services on your phone means your phone is not secure.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>For the longest time, Signal wouldn&rsquo;t work without Google Play Services, but
Moxie (the founder of Open Whisper Systems and maintainer of Signal) finally
fixed this in 2017. There was also a long time when Signal was only available on
the Google Play Store. Today, you can <a href="https://signal.org/android/apk/">download the APK directly from
signal.org</a>, but&hellip; well, we&rsquo;ll
get to that in a minute.</p>
<h2 id="f-droid">F-Droid</h2>
<p>There&rsquo;s an alternative to the Play Store for Android.
<a href="https://f-droid.org">F-Droid</a> is an open source app &ldquo;store&rdquo; (repository would
be a better term here) which only includes open source apps (which Signal
thankfully is).  By no means does Signal have to <em>only</em> be distributed through
F-Droid - it&rsquo;s certainly a compelling alternative. This has been proposed, and
Moxie has <a href="https://github.com/signalapp/Signal-Android/issues/127">definitively shut the discussion
down</a>. Admittedly this
is from 2013, but his points and the arguments against them haven&rsquo;t changed. Let
me quote some of his positions and my rebuttals:</p>
<blockquote>
<p>No upgrade channel. Timely and automatic updates are perhaps the most
effective security feature we could ask for, and not having them would be a
real blow for the project.</p></blockquote>
<p>F-Droid supports updates. If you&rsquo;re concerned about moving your updates quickly
through the (minimal) bureaucracy of F-Droid, you can always run your own
repository. Maybe this is a lot of work?<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> I wonder how the workload compares
to <a href="https://signal.org/blog/signal-and-giphy-update/">animated gif search</a>, a very important feature for security
concious users. I bet that <a href="https://signal.org/blog/signal-foundation/">50 million dollar donation</a> could help,
given how many people operate F-Droid repositories on a budget of $0.</p>
<blockquote>
<p>No app scanning. The nice thing about market is the server-side APK scanning
and signature validation they do. If you start distributing APKs around the
internet, it&rsquo;s a reversion back to the PC security model and all of the
malware problems that came with it.</p></blockquote>
<p>Try searching the Google Play Store for &ldquo;flashlight&rdquo; and look at the permissions
of the top 5 apps that come up. All of them are harvesting and selling the
personal information of their users to advertisers. Is this some kind of joke?
F-Droid is a curated repository, like Linux distributions. Google Play is a
malware distributor.  Packages on F-Droid are reviewed by a human being and are
<a href="https://f-droid.org/en/docs/Signing_Process/">cryptographically signed</a>. If you
run your own F-Droid repo this is even less of a concern.</p>
<p>I&rsquo;m not going to address all of Moxie&rsquo;s points here, because there&rsquo;s a deeper
problem to consider. I&rsquo;ll get into more detail shortly. You can read the
6-year-old threads tearing Moxie&rsquo;s arguments apart over and over again until
GitHub added the feature to lock threads, if you want to see a more in-depth
rebuttal.</p>
<h2 id="the-apk-direct-download">The APK direct download</h2>
<p>Last year Moxie added an official APK download to signal.org. He said this was
up for &ldquo;<a href="https://github.com/signalapp/Signal-Android/issues/127#issuecomment-286223680">harm reduction</a>&rdquo;, to avoid people using unofficial
builds they find around the net. The download page is covered in warnings
telling you that it&rsquo;s for advanced users only, it&rsquo;s insecure, would you please
go to the Google Play store you stupid user. I wonder, has Moxie considered
communicating to people the risks of using the Google Play version?<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>The APK direct download doesn&rsquo;t even accomplish the stated goal of &ldquo;harm
reduction&rdquo;. The user has to manually verify the checksum, and figure out how to
do it on a phone, no less. A checksum isn&rsquo;t a signature, by the way - if your
government- or workplace- or abusive-spouse-installed certificate authority gets
in the way they can replace the APK <em>and</em> its checksum with whatever they want.
The app has to update itself, using a similarly insecure mechanism. F-Droid
handles updates and actually signs their packages. This is a no brainer, Moxie,
why haven&rsquo;t you put Signal on F-Droid yet?</p>
<h2 id="why-is-signal-like-this">Why is Signal like this?</h2>
<p>So if you don&rsquo;t like all of this, if you don&rsquo;t like how Moxie approaches these
issues, if you want to use something else, what do you do?</p>
<p>Moxie knows about everything I&rsquo;ve said in this article. He&rsquo;s a very smart guy
and I am under no illusions that he doesn&rsquo;t understand everything I&rsquo;ve put
forth. I don&rsquo;t think that Moxie makes these choices because he thinks they&rsquo;re
the right thing to do. He makes arguments which don&rsquo;t hold up, derails threads,
leans on logical fallacies, and loops back around to long-debunked positions
when he runs out of ideas. I think this is deliberate. An open source software
team reads this article as a list of things they can improve on and gets
started. Moxie reads this and prepares for war. Moxie can&rsquo;t come out and
say it openly, but he&rsquo;s made the decisions he has made because they serve his
own interests.</p>
<p>Lots of organizations which are pretending they don&rsquo;t make self-serving decisions at
their customer&rsquo;s expense rely on argumentative strategies like Moxie does. If
you can put together an argument which on the surface appears reasonable, but
requires in-depth discussion to debunk, passerby will be reassured that your
position is correct, and that the dissenters are just trolls. They won&rsquo;t have
time to read the lengthy discussion which demonstrates that your conclusions
are wrong, especially if you draw the discussion out like Moxie does. It can be
hard to distinguish these from genuine positions held by the person you&rsquo;re
talking to, but when it conveniently allows them to make self-serving plays,
it&rsquo;s a big red flag.</p>
<p>This is a strong accusation, I know. The thing which convinced me of its truth
is Signal&rsquo;s centralized design and hostile attitude towards forks. In open
source, when a project is making decisions and running things in a way you don&rsquo;t
like, you can always fork the project. This is one of the fundamental rights
granted to you by open source. It has a side effect Moxie doesn&rsquo;t want, however.
It reduces his power over the project. Moxie has a clever solution to this:
centralized servers and trademarks.</p>
<h2 id="trust-federation-and-peer-to-peer-chat">Trust, federation, and peer-to-peer chat</h2>
<p>Truly secure systems do not require you to trust the service provider. This is
the point of end-to-end encryption. But we have to trust that Moxie is running
the server software he says he is. We have to trust that he isn&rsquo;t writing down a
list of people we&rsquo;ve talked to, when, and how often. We have to trust not only
that Moxie is trustworthy, but given that Open Whisper Systems is based in San
Francisco we have to trust that he hasn&rsquo;t received a national security letter,
too (by the way, Signal doesn&rsquo;t have a warrant canary). Moxie can <em>tell</em> us he
doesn&rsquo;t store these things, but he could. <strong>Truly secure systems don&rsquo;t require
trust</strong>.</p>
<p>There are a couple of ways to solve this problem, which can be used in tandem.
We can stop Signal from knowing when we&rsquo;re talking to each other by using
peer-to-peer chats. This has some significant drawbacks, namely that both users
have to be online at the same time for their messages to be delivered to each
other. You can still fall back to peer-to-server-to-peer when one peer is
offline, however. But this isn&rsquo;t the most important of the two solutions.</p>
<p>The most important change is federation. Federated services are like email, in
that Alice can send an email from gmail.com to Bob&rsquo;s yahoo.com address. I should
be able to stand up a Signal server, on my own hardware where I am in control of
the logs, and communicate freely with other Signal servers, including Open
Whisper&rsquo;s servers. This distributes the security risks across hundreds of
operators in many countries with various data extradition laws. This turns what
would today be easy for the United States government to break and makes it much,
much more difficult. Federation would also open the possibility for bridging the
gap with several other open source secure chat platforms to all talk on the same
federated network - which would spur competition and be a great move for users
of all chat platforms.</p>
<p>Moxie forbids you from distributing branded builds of the Signal app, and if you
rebrand he forbids you from using the official Open Whisper servers. Because his
servers don&rsquo;t federate, that means that users of Signal forks <em>cannot talk to
Signal users</em>. This is a truly genius move. No fork of Signal<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> to date has
ever gained any traction, and never will, because you can&rsquo;t talk to any Signal
users with them. In fact, there are no third-party applications which can
interact with Signal users in any way. Moxie can write as many blog posts which
appeal to wispy ideals and &ldquo;moving ecosystems&rdquo; as he wants<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, but those are
all <em>really</em> convenient excuses for an argument which allows him to design
systems which serve his own interests.</p>
<p>No doubt these are non-trivial problems to solve. But I have <em>personally</em> been
involved in open source projects which have collectively solved similarly
difficult problems a thousand times over with a combined budget on the order of
tens of thousands of dollars.</p>
<p>What were you going to do with that 50 million dollars again?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>&ldquo;But how is AOSP any better?&rdquo; This is a common strawman counter-argument. Fact: There is empirical evidence which shows that Google Play Services does silent updates and can obtain any permission on your phone: a rootkit. There is no empirical evidence to suggest AOSP has similar functionality.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>No, it&rsquo;s not.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Probably not, because that wouldn&rsquo;t be self-serving. But I&rsquo;m getting ahead of myself.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>See <a href="https://github.com/LibreSignal/LibreSignal">LibreSignal</a> and <a href="https://github.com/SilenceIM/Silence#silence-">Silence</a>, particularly <a href="https://github.com/LibreSignal/LibreSignal/issues/37#issuecomment-217211165">this thread</a>.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>See <a href="https://signal.org/blog/the-ecosystem-is-moving/">Reflections: The ecosystem is moving</a>. Yes, that&rsquo;s the unedited title.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 8 Aug 2018 00:00:00 +0000</pubDate></item><item><title>Setting up a local dev mail server</title><link>https://drewdevault.com/2018/08/05/Local-mail-server.html</link><description><![CDATA[<p>As part of my work on <a href="https://meta.sr.ht">lists.sr.ht</a>, it was necessary for
me to configure a self-contained mail system on localhost that I could test
with. I hope that others will go through a similar process in the future when
they set up <a href="https://git.sr.ht/~sircmpwn/lists.sr.ht">the code</a> for hacking on
locally or when working on other email related software, so here&rsquo;s a guide on
how you can set it up.</p>
<p>There are lots of things you can set up on a mail server, like virtual mail
accounts backed by a relational database, IMAP access, spam filtering, and so
on. We&rsquo;re not going to do any of that in this article - we&rsquo;re just interested in
something we can test our email code with. To start, install your distribution
of <code>postfix</code> and pop open that <code>/etc/postfix/main.cf</code> file.</p>
<p>Let&rsquo;s quickly touch on the less interesting config keys to change. If you want
the details about how these work, consult the postfix manual.</p>
<ul>
<li><em>myhostname</em> should be your local hostname</li>
<li><em>mydomain</em> should also be your local hostname</li>
<li><em>mydestination</em> should be <code>$myhostname, localhost.$mydomain, localhost</code></li>
<li><em>mynetworks</em> should be <code>127.0.0.0/8</code></li>
<li><em>home_mailbox</em> should be <code>Maildir/</code></li>
</ul>
<p>Also ensure your hostname is set up right in <code>/etc/hosts</code>, something like this:</p>
<pre tabindex="0"><code>127.0.0.1 homura.localdomain homura
</code></pre><p>Okay, those are the easy ones. That just makes it so that your mail server
oversees mail delivery for the <code>127.0.0.0/8</code> network (localhost) and delivers
mail to local Unix user mailboxes. It will store incoming email in each user&rsquo;s
home directory at <code>~/Maildir</code>, and will deliver email to other Unix users. Let&rsquo;s
set up an email client for reading these emails with. Here&rsquo;s my development
<a href="http://mutt.org">mutt</a> config:</p>
<pre tabindex="0"><code>set edit_headers=yes
set realname=&#34;Drew DeVault&#34;
set from=&#34;sircmpwn@homura&#34;
set editor=vim
set spoolfile=&#34;~/Maildir/&#34;
set folder=&#34;~/Maildir/&#34;
set timeout=5
color index blue default ~P
</code></pre><p>Make any necessary edits. If you use mutt to read your normal mail, I suggest
also setting up an alias which runs <code>mutt -C path/to/dev/config</code>. Now, you
should be able to send an email to yourself or other Unix accounts with
mutt<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Hooray!</p>
<p>To accept email over SMTP, mozy on over to <code>/etc/postfix/master.cf</code> and
uncomment the submission service. You&rsquo;re looking for something like this:</p>
<pre tabindex="0"><code>127.0.0.1:submission inet n       -       n       -       -       smtpd
#  -o syslog_name=postfix/submission
#  -o smtpd_tls_security_level=encrypt
#  -o smtpd_sasl_auth_enable=yes
#  -o smtpd_tls_auth_only=yes
#  -o smtpd_reject_unlisted_recipient=no
#  -o smtpd_client_restrictions=$mua_client_restrictions
#  -o smtpd_helo_restrictions=$mua_helo_restrictions
#  -o smtpd_sender_restrictions=$mua_sender_restrictions
#  -o smtpd_recipient_restrictions=
#  -o smtpd_relay_restrictions=
#  -o milter_macro_daemon_name=ORIGINATING
</code></pre><p>This will permit delivery via localhost on the submission port (587) to anyone
whose hostname is in <code>$mydestination</code>. A good old <code>postfix reload</code> later and you
should be able to send yourself an email with SMTP:</p>
<pre tabindex="0"><code>$ telnet 127.0.0.1 587
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &#39;^]&#39;.
220 homura ESMTP Postfix
EHLO example.org
250-homura
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-ENHANCEDSTATUSCODES
250-8BITMIME
250-DSN
250 SMTPUTF8
MAIL FROM:&lt;sircmpwn@homura&gt;
250 2.1.0 Ok
RCPT TO:&lt;sircmpwn@homura&gt; 
250 2.1.5 Ok
DATA
354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
From: Drew DeVault &lt;sircmpwn@homura&gt;
To: Drew DeVault &lt;sircmpwn@homura&gt;
Subject: Hello world

Hey there 
.
250 2.0.0 Ok: queued as 8267416366B
QUIT
221 2.0.0 Bye
Connection closed by foreign host.
</code></pre><p>Pull up mutt again to read this. Any software which will be sending out mail and
speaks SMTP (for example, sr.ht) can be configured now. Last step is to set up
LTMP delivery to lists.sr.ht or any other software you want to process incoming
emails. I want most mail to deliver normally - I only want LTMP configured for
my lists.sr.ht test domain. I&rsquo;ll set up some transport maps for this purpose. In
<code>main.cf</code>:</p>
<pre tabindex="0"><code>local_transport = local:$myhostname
transport_maps = lmdb:/etc/postfix/transport
</code></pre><p>Then I&rsquo;ll edit <code>/etc/postfix/transport</code> and add these lines:</p>
<pre tabindex="0"><code>lists.homura lmtp:unix:/tmp/lists.sr.ht-lmtp.sock
homura local:homura
</code></pre><p>This will deliver mail normally to <code>$user@homura</code> (my hostname), but will
forward mail sent to <code>$user@lists.homura</code> to the Unix socket where the
<a href="https://git.sr.ht/~sircmpwn/lists.sr.ht/tree/master/listssrht-lmtp">lists.sr.ht LMTP
server</a> lives.</p>
<p>Add the subdomain to <code>/etc/hosts</code>:</p>
<pre tabindex="0"><code>127.0.0.1 lists.homura.localdomain lists.homura
</code></pre><p>Run <code>postmap /etc/postfix/transport</code> and <code>postfix reload</code> and you&rsquo;re good to go.
If you have the lists.sr.ht daemon working, send some emails to
<code>~someone/example-list@lists.$hostname</code> and you should see them get picked up.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Mutt crash course: run <code>mutt</code>, press <code>m</code> to compose a new email, enter the recipient (<code>$USER@$HOSTNAME</code> to send to yourself) and the subject, then compose your email, exit the editor, and press <code>y</code> to send. A few moments later the email should arrive.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 5 Aug 2018 00:00:00 +0000</pubDate></item><item><title>Writing a Wayland compositor with wlroots: shells</title><link>https://drewdevault.com/2018/07/29/Wayland-shells.html</link><description><![CDATA[<p>I apologise for not writing about wlroots more frequently. I don&rsquo;t really enjoy
working on the McWayface codebase this series of blog posts was originally
about, so we&rsquo;re just going to dismiss that and talk about the various pieces of
a Wayland compositor in a more free-form style. I hope you still find it useful!</p>
<p>Today, we&rsquo;re going to talk about shells. But to make sure we&rsquo;re on the same page
first, a quick refresher on surfaces. A basic primitive of the Wayland protocol
is the concept of a &ldquo;surface&rdquo;. A surface is a rectangular box of pixels sent
from the client to the compositor to display on-screen. A surface can source
its pixels from a number of places, including raw pixel data in memory, or
opaque handles to GPU resources that can be rendered without copying pixels on
the CPU. These surfaces can also evolve over time, using &ldquo;damage&rdquo; to indicate
which parts have changed to reduce the workload of the compositor when
re-rendering them. However, making a surface and filling it with pixels is not
enough to get the compositor to show them.</p>
<p>Shells are how surfaces in Wayland are given meaning. Consider that there are
several kinds of surfaces you&rsquo;ll encounter on your desktop. There are
application windows, sure, but there are also tooltips, right-click menus and
menubars, desktop panels, wallpapers, lock screens, on-screen keyboards, and so
on. Each of these has different semantics - your wallpaper cannot be minimized
or dragged around and resized, but your application windows can be.  Likewise,
your application windows cannot cover the entire screen and soak up all input
like your lock screen can. Each of these use cases is fulfilled with a <em>shell</em>,
which generally takes a surface resource, assigns it a role (e.g.  application
window), and returns a handle with shell-specific interfaces for manipulating
it.</p>
<h2 id="shells-in-wlroots">Shells in wlroots</h2>
<p>I want to first discuss features common to shells as implemented by wlroots.
Each shell has a shell-specific interface that sits on top of the surface. Each
time a client connects and creates one of these, the shell raises a <code>wl_signal</code>,
<code>events.new_surface</code>, and passes to it a pointer to a shell-specific structure
which encapsulates that shell surface&rsquo;s state.</p>
<p>Many shells require some configuration between the creation of the shell surface
and displaying it on screen. For example, during this period application windows
will typically set the window title so that the compositor never has to show an
empty title. All Wayland interfaces aim for atomicity, so that all changes are
applied in a single fell swoop and we never display an invalid frame. This is
why Wayland is known for addressing vsync problems X suffers from, but is
pervasive across the ecosystem. Even things like setting the window title are
done atomically.</p>
<p>So, once the client is done communiciating the new shell surface&rsquo;s desired
traits to the compositor, it will commit the surface to atomically apply the
changes. The first time this happens, the client is ready to be shown, and the
shell-specific wlroots shell surface interface will communicate this to you with
the surface&rsquo;s <code>events.map</code> signal. The reverse is sometimes communicated with
<code>events.unmap</code>, when the shell surface should be hidden.</p>
<h2 id="xdg-shell">xdg-shell</h2>
<p>xdg-shell is currently the only shell whose protocol is considered stable, and
it is the shell which describes application windows. You can read the xdg-shell
protocol specification (XML)
<a href="https://cgit.freedesktop.org/wayland/wayland-protocols/tree/stable/xdg-shell/xdg-shell.xml">here</a>
(you are strongly encouraged to read through the XML for all protocols mentioned
in this article).</p>
<p>The xdg-shell is quite complicated, as it attempts to encapsulate every feature
of a typical graphical desktop session in a single protocol. An xdg-shell
surface is a <code>wl_surface</code> wrapped twice - once in a <code>xdg_surface</code> and then again
in a <code>xdg_toplevel</code> or <code>xdg_popup</code>, depending on what kind of window it is. The
wlroots <code>wlr_xdg_surface</code> type (the one emitted by
<code>xdg_shell.events.new_surface</code>) contains tagged union of <code>wlr_xdg_toplevel</code> and
<code>wlr_xdg_popup</code>, selected from the <code>role</code> field. You can wire up the xdg-shell
with <code>wlr_xdg_shell_create</code>.</p>
<p>Most application windows you see are called toplevels. These windows are the
root node of a tree of surfaces which may include arbitrarily nested popups, for
example, as you navigate through a deep menu. These windows can have titles;
parent surfaces; app IDs (e.g. &ldquo;gnome-calculator&rdquo;); minimum and maximum sizes;
and maximized, minimized, and fullscreen states. They also often<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> draw their
own window decorations and drop shadows, and tell the compositor when you click
and drag on the titlebar to move or resize the window.  Unfortunately, if the
client is not responding or misbehaving, the user cannot use these controls to
move, resize, or minimize the window<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>The compositor can tell the window to adopt a specific size, though the client
can choose to ignore this. The compositor also lets the client know when it&rsquo;s
&ldquo;activated&rdquo;, which is used by GTK+, for example, to start rendering the caret
and render a different set of client-side decorations. It can also toggle the
fullscreen, minimized, maximized, and other states.</p>
<p>Each of the various state transitions involved are expressed through
the <code>wlr_xdg_toplevel.events</code> signals. The most recent atomically agreed-upon
state is stored in <code>wlr_xdg_toplevel.current</code>. When each of the signals in
<code>events</code> are emitted, the state change will have been applied to
<code>client_pending</code>. However, you must consent to these changes by calling a
corresponding function on the xdg_toplevel (e.g.
<code>wlr_xdg_toplevel_set_fullscreen</code>), which will apply the change to
<code>server_pending</code>. You shouldn&rsquo;t consider these changes atomically set until the
<code>wlr_surface.events.commit</code> signal has been raised. At that point, you can start
showing the window in fullscreen or whatever. There&rsquo;s also some
configure/ack-configure stuff going on here which may eventually become relevant
to you<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, but wlroots takes care it for the most part.</p>
<p>The popup interface is used to show a &ldquo;popup&rdquo; window, which can be used for a
variety of purposes. These include context menus (or &ldquo;right click&rdquo; menus),
tooltips, some confirmation modals<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>, etc. The lifecycle of a popup resource
is managed similarly to that of a toplevel resource, of course with different
states that can be atomically updated. Arguably, the most fundamental of these
states is the relative X and Y position of the popup with respect to its parent
toplevel surface.</p>
<p>The position of the popup can be influenced by an extraordinarily complicated
interface called <code>xdg_positioner</code>, also provided by xdg-shell. Since these
articles focus on the compositor side of things, and they focus on using
wlroots, I can thankfully save you from understanding most of the specifics of
this interface. The purpose of this interface is to adjust the position and size
of <code>xdg_popup</code> surfaces with respect to the display they live on - for example,
to prevent them from being partially off-screen. The rub is that if you&rsquo;re using
wlroots, when the popup is created you can just call
<code>wlr_xdg_popup_unconstrain_from_box</code> to deal with everything, passing it a box
which represents the available space surrounding the parent toplevel for the
popup to be placed in.</p>
<p>Popups are also able to take &ldquo;grabs&rdquo;, which indicate that they should keep
focus without respect to any of the other goings-on of the seat. This is used so
that you can, for example, use the keyboard to pick items from a context menu.
Grabs are automatically handled for you with <code>wlr_seat</code> for you. If you want to
deny or cancel grabs, you can do so through the appropriate <code>wlr_seat</code>
interfaces.</p>
<p>One last note: xdg-shell only recently became stable, so client support for the
stable version is hit and miss. The last unstable protocol, xdg-shell v6, is
also supported by wlroots. It mostly behaves in the same way. Eventually it
will be removed from wlroots.</p>
<h2 id="layer-shell">layer-shell</h2>
<p>Under the umbrella of wlroots, 8 Wayland compositors have been collaborating on
the design of a new shell for desktop shell components. The result is <a href="https://github.com/swaywm/wlr-protocols/blob/master/unstable/wlr-layer-shell-unstable-v1.xml">layer
shell
(XML)</a>.
The purpose of this shell is to provide an interface for desktop components like
panels, lock screens, wallpapers, on-screen keyboards, notifications, and so on,
to display on your compositor.</p>
<p>The layer-shell is organized into four discrete layers: background, bottom, top,
and overlay, which are rendered in that order. Between bottom and top,
application windows are displayed. A wallpaper client might choose to go in the
bottom layer, while a notification could show on the top layer, and a panel on
the bottom layer.</p>
<p>The compositor&rsquo;s job is to decide where to place each surface and how large the
surface can be. The client can specify either or both of its dimensions (width
and height) for the compositor to specify, then provide some hints for the
compositor to do so. The client can, for example, choose to be anchored to edges
of the screen. A notification might be anchored to <code>TOP | RIGHT</code>, and a panel
might be anchored to <code>LEFT | BOTTOM | RIGHT</code>. A layer surface anchored to an
edge, like our panel, can also request an exclusive zone, which is a number of
pixels from the edge that should not be occluded by other layer surfaces or
application windows. This is used, for example, when maximizing application
windows to prevent them from occluding the panel (or in sway&rsquo;s case, when
arranging tiled windows).</p>
<p>Layer surfaces also have special keyboard input semantics. Some layer surfaces
want to receive keyboard input, such as an application launcher overlay. Others
might prefer that application windows continue to receive keyboard events, such
as a notification. To this end, a layer surface can toggle a boolean indicating
its &ldquo;keyboard interactivity&rdquo;. For layers beneath application windows, layer
surfaces participate in keyboard focus normally, usually meaning they need to be
clicked to receive keyboard focus. Above application windows, the top-most layer
always has keyboard focus if it requests it.</p>
<p>In wlroots, you can wire up a layer shell to the display with
<code>wlr_layer_shell_create</code>. From there it behaves similarly to xdg-shell with
respect to the creation of new surfaces and the handling of atomic state. The
main concern of yours is that, when the surface is committed, you need to
arrange the surfaces in the affected layer and communicate the final dimensions
of the layer surface to the client with <code>wlr_layer_surface_configure</code>. You can
implement the arrangement however you want, but you may find the <a href="https://github.com/swaywm/sway/blob/master/sway/desktop/layer_shell.c#L18-L215">sway
implementation</a> to be a useful reference. Also check out the
wlroots <a href="https://github.com/swaywm/wlroots/blob/master/examples/layer-shell.c">example client</a> to test out your implementation.</p>
<p>Layer surfaces can also have popups, for example when right-clicking on a
taskbar. This borrows xdg-shell&rsquo;s xdg_popup interface, except the parent is set
to the layer surface (this is explicitly allowed for through the xdg_popup spec,
and you may see future shells doing something similar). Most of your code for
xdg_popups can be reused with layer surfaces.</p>
<h2 id="xwayland">Xwayland</h2>
<p>Some Wayland developers turn up their nose when I refer to Xwayland as a shell,
and perhaps with good reason. However, wlroots treats Xwayland like a shell, so
the API remains consistent. For that reason, we&rsquo;ll treat it as one in this
article as well.</p>
<p>We figured that you might be writing a Wayland compositor so that you <em>don&rsquo;t</em>
have to write an X11 window manager, too. So we wrote one for you, and it&rsquo;s
called <code>wlr_xwayland</code>. This interface provides an abstraction over Xwayland
which makes it behave similarly to our other shells. It still lets you dig your
heels into it in any degree so that you can adjust the behavior of your
compositor to suit X-specific needs as necessary.</p>
<p>The resulting wlr_xwayland API is similar to the other shells we&rsquo;ve described.
We have a series of events for configuring Xwayland surfaces, a map and unmap
event, and we expose a whole bunch of info about Xwayland surfaces so you can
make the judgement call about how much or how little to obey their requests (X11
windows make more unreasonable requests than other shells, since X11 was the
wild wild west and a lot of clients took advantage of that).</p>
<p>This should be enough to get you started, and if you have questions ask on IRC
for the time being. I could go into more detail, but I think Xwayland deserves
its own article, and probably not written by me.</p>
<h2 id="other-shells">Other shells</h2>
<p>There are three other shells of note. Two are not very interesting:</p>
<ul>
<li>wl_shell, the now-deprecated original desktop shell of Wayland</li>
<li>ivi-shell, used for &ldquo;in-vehicle infotainment&rdquo; systems running Wayland</li>
</ul>
<p>wlroots supports neither (though I guess we&rsquo;d accept a patch adding IVI-shell
support, maybe if the vehicle industry was open to improving that protocol&hellip;),
and neither is interesting for desktops, phones, etc. You probably don&rsquo;t need to
worry about them.</p>
<p>The other is the fullscreen-shell, which is used for optimizing the rendering of
fullscreen appliations. I don&rsquo;t know much about how it works, and it&rsquo;s not
supported by wlroots yet; it&rsquo;s not required of a functional Wayland compositor.
Maybe someday!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://cgit.freedesktop.org/wayland/wayland-protocols/tree/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml">But not always</a>. You&rsquo;re welcome.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Which is one of the reasons we made the protocol mentioned in footnote<sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>For example, this is relevant for sway, which needs to reach deeper into our shell implementations to atomically syncronize the resizing of several clients at once when rearranging the layout.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Some popup windows, the GTK+ file chooser for example, prefer to make a new xdg_toplevel and assign its parent to the application window. This is useful if you want your window to show up in taskbars, be able to be minimized and maximized separately, etc.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate></item><item><title>Git is already federated &amp; decentralized</title><link>https://drewdevault.com/2018/07/23/Git-is-already-distributed.html</link><description><![CDATA[<p>There have always been murmurs about &ldquo;replacing GitHub with something
decentralized!&rdquo;, but in the wake of the Microsoft acquisition these murmurs have
become conversations. In particular, this blog post is a direct response to
forge-net (formerly known as <a href="https://github.com/git-federation/gitpub">GitPub</a>). They want to federate and
decentralize git using ActivityPub, the same technology leveraged by Mastodon
and PeerTube. But get this: git is already federated <em>and</em> decentralized!</p>
<p>I already spoke at length about how a large minority of the git community uses
email for collaboration in my <a href="https://drewdevault.com/2018/07/02/Email-driven-git.html">previous article</a> on the subject.
Definitely give it a read if you haven&rsquo;t already. In this article I want to
focus on comparing this model with the possibilities afforded by ActivityPub
and provide direction for new forge<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> projects to work towards embracing and
improving git&rsquo;s email-based collaboration tools.</p>
<p>The main issue with using ActivityPub for decentralized git forges boils down to
email simply being a better choice. The advantages of email are numerous. It&rsquo;s
already standardized and has countless open source implementations, many in the
standard libraries of almost every programming language. It&rsquo;s decentralized and
federated, and it&rsquo;s <em>already</em> integrated with git. Has been since day one!  I
don&rsquo;t think that we should replace web forges with our email clients, not at
all. Instead, web forges should embrace email to communicate with each other.</p>
<p>Let me give an example of how this could play out. On my platform,
<a href="https://meta.sr.ht">sr.ht</a>, users can view their git repositories on the web
(duh). One of my goals is to add some UI features here which let them select a
range of commits and prepare a patchset for submission via <a href="https://www.git-scm.com/docs/git-send-email">git
send-email</a>. They&rsquo;ll enter an email address (or addresses) to
send the patch(es) to, and we&rsquo;ll send it along on their behalf.  This email
address might be a mailing list on another sr.ht instance in the wild! If so,
the email gets recognized as a patch and displayed on the web with a pretty diff
and code review tools. Inline comments automatically get formatted as an email
response. This shows up in the user&rsquo;s inbox and sr.ht gets copied on it, showing
it on the web again.</p>
<p>I think that workflow looks an awful lot like the workflow forge-net hopes to
realize! Here&rsquo;s where it gets good, though. What if the emails the user puts in
are <code>linux-kernel@vger.kernel.org</code> and a handful of kernel maintainers? Now your
git forge can suddenly be used to contribute to the Linux kernel! ActivityPub
would build a <em>second</em>, incompatible federation of projects, while ignoring the
already productive federation which powers many of our most important open
source projects.</p>
<p>git over email is already supported by a tremendous amount of open source
software. There&rsquo;s tools like <a href="https://www.gnu.org/software/mailman/">mailman</a> which provide mailing lists and
public archives, or <a href="https://public-inbox.org/">public-inbox</a>, which archives email in git,
or <a href="http://jk.ozlabs.org/projects/patchwork/">patchworks</a> for facilitating code review over email. Some email
clients have grown features which make them more suitable for git, such as
<a href="http://mutt.org">mutt</a>. These are the nuts and bolts of hundreds of important projects,
including Linux, *BSD, gcc, Clang, postgresql, MariaDb, emacs, vim, ffmpeg,
Linux distributions like Debian, Fedora, Arch, Alpine, and countless other
projects, including git itself! These projects are incredibly important,
foundational projects upon which our open source empire is built, and the tools
they use already provide an open, federated protocol for us to talk to.</p>
<p>Not only is email <em>better</em>, but it&rsquo;s also <em>easier</em> to implement. Programming
tools for email are very mature. I recently started experimenting with building
an ActivityPub service, and it was crazy difficult. I had to write a whole lot
of boilerplate and understand new and still-evolving specifications, not to
mention setting up a public-facing server with a domain and HTTPs to test
federation with other implementations. Email is comparatively easy, it&rsquo;s built
into the standard library. You can shell out to git and feed the patch to the
nearest SMTP library in only a handful of lines of code. I bet every single
person who reads this article already has an email address, so the setup time
approaches zero.</p>
<p>Email also puts the power in the hands of the user right away. On Mastodon there
are occasional problems of instance owners tearing down their instance on short
notice, taking with them all of their user&rsquo;s data. If everything is being
conducted over email instead, all of the data already lives in the user&rsquo;s inbox.
Freely available tools can take their mail spool and publish a new archive if
our services go down. Mail archives can be trivially made redundant across many
services. This stuff is seriously resilient to failure. Email was designed when
networks were measured in bits per second and often connected through a single
unreliable route!</p>
<p>I&rsquo;m not suggesting that the approach these projects use for collaboration is
perfect. I&rsquo;m suggesting that we should embrace it and solve these problems
instead of throwing out the baby with the bathwater. Tools like <code>git send-email</code>
can be confusing at first, which is why we should build tools like web forges
that smooth over the process for novices, and write better docs to introduce
people to the tools (I recently <a href="https://man.sr.ht/git.sr.ht/send-email.md">wrote a guide</a> for sr.ht users).</p>
<p>Additionally, many popular email clients have bastardized email to the point
where the only way to use git+email for many people starts with abandoning the
email client they&rsquo;re used to using. This can also be solved by having forges
send the emails for them, and process the replies. We can also support open
source mail clients by building better tools to integrate our emails with them.
Setting up the mail servers on the other end can be difficult, too, but we
should invest in better mail server software, something which would definitely
be valuable even setting aside the matter of project forges.</p>
<p>We need to figure out something for bugs as well, perhaps based on Debian&rsquo;s work
on <a href="https://www.debian.org/Bugs/">Debbugs</a>. Other areas of development, such as
continuous integration, I find are less difficult problems. Many build services
already support sending the build results by email, we just need to find a way
to get our patches to them (something I&rsquo;m working on with sr.ht). But we should
take these problems one step at a time. Let&rsquo;s focus on improving the patch
workflow git endorses, and as our solutions shake out the best solutions to our
other problems will become more and more apparent.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Forge refers to any software which provides comprehensive tools for project hosting. This originally referred to SourceForge but is now a category of software which includes GitHub, BitBucket, GitLab, Gogs/Gitea, etc.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate></item><item><title>Input handling in wlroots</title><link>https://drewdevault.com/2018/07/17/Input-handling-in-wlroots.html</link><description><![CDATA[<p>I&rsquo;ve said before that wlroots is a &ldquo;batteries not included&rdquo; kind of library, and
one of the places where that is most apparent is with our approach to input
handling. We implemented a very hands-off design for input, in order to support
many use-cases: desktop input, phones with and without USB-OTG HIDs plugged in,
multiple mice bound to a single cursor, multiple keyboards per seat, simulated
input from fake input devices, on-screen keyboards, input which is processed by
the compositor but not sent to clients&hellip; we support all of these use-cases and
even more. However, the drawback of our powerful design is that it&rsquo;s confusing.
Very confusing.</p>
<p>Let&rsquo;s begin by forgetting about the Wayland part entirely. After all, wlroots is
flexible enough that you can use it without writing a Wayland compositor at all!
It can be used in a similar fashion to tools like GLFW and SDL, to abstract
low-level input (via e.g. libinput) and graphical output (via e.g. DRM). Let&rsquo;s
start here, simply getting input events from wlroots in the first place.</p>
<p>One of the fundamental building blocks of wlroots is the <code>wlr_backend</code>,
which is a resource that abstracts the underlying hardware and exposes a
consistent API for outputs and input devices. Outputs have been discussed
elsewhere, so let&rsquo;s focus just on input devices. Each backend provides an
event: <a href="https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/backend.h#L17"><code>wlr_backend.events.new_input</code></a>. The signal is called with a
reference to a <a href="https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_input_device.h"><code>wlr_input_device</code></a> each time a new input
device appears on the backend - for example, when you plug a mouse into your
computer when using the libinput backend.</p>
<p>The input device can be one of five types, appropriately identified by the
<code>type</code> field. The types are:</p>
<ul>
<li><code>WLR_INPUT_DEVICE_KEYBOARD</code></li>
<li><code>WLR_INPUT_DEVICE_POINTER</code></li>
<li><code>WLR_INPUT_DEVICE_TOUCH</code></li>
<li><code>WLR_INPUT_DEVICE_TABLET_TOOL</code></li>
<li><code>WLR_INPUT_DEVICE_TABLET_PAD</code></li>
</ul>
<p>The type indicates which member of the anonymous union is valid. If
<code>wlr_input_device-&gt;type == WLR_INPUT_DEVICE_KEYBOARD</code>, then
<code>wlr_input_device-&gt;keyboard</code> is a valid pointer to a
<a href="https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_keyboard.h"><code>wlr_keyboard</code></a>.</p>
<p>Let&rsquo;s examine the wlr keyboard more closely now. The keyboard struct also
provides its own events, like <code>key</code> and <code>keymap</code>. If you want to process input
from this keyboard, you need to set up an <a href="https://xkbcommon.org/doc/current/">xkbcommon</a> context for
ingesting the raw scancodes emitted by the <code>key</code> event and converting them to
Unicode and keysyms (e.g. &ldquo;Up&rdquo;) with an XKB keymap. Most of the wlroots examples
<a href="https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/examples/simple.c#L114">implement this</a> if you&rsquo;re looking for a simple reference.</p>
<p>When these events are sent, we just let you process them as you please. They do
not automatically get propagated to any Wayland clients. Communicating these
events to the clients is your responsibility, though we provide you tools to
help - we&rsquo;ll get into that shortly. You don&rsquo;t even have to source the input you
give to Wayland clients from a <code>wlr_input_device</code>, you can just as easily make
them up or get them from the network or anywhere else.</p>
<p>Before we get into details on how to send events to clients, let&rsquo;s examine the
other components in your compositor&rsquo;s input code. First, let&rsquo;s talk about the
cursor.</p>
<p>We provide the <a href="https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_pointer.h"><code>wlr_pointer</code></a> abstraction for getting events from
a &ldquo;pointer&rdquo; device, like a mouse. However, because batteries are not included,
you will find that we only tell you what the pointer device is doing - we don&rsquo;t
act on it. If you want to, for example, display a cursor image <img
src="https://sr.ht/hf39.png" style="display: inline; margin: 0; padding: 0;" />
on screen which moves around when the mouse does, you need to wire this up
yourself. We have tools which can help.</p>
<p>First, let&rsquo;s talk about getting the cursor image to show. You can source the
image from anywhere you want, but you will probably want to leverage
<a href="https://github.com/swaywm/wlroots/blob/master/include/wlr/xcursor.h"><code>wlr_xcursor</code></a>. This is a small wlroots module (forked from the
<code>wayland-cursor</code> library used by Wayland clients) which can read Xcursor themes,
the kind your user will already have installed on their system. Loading up a
cursor theme and getting the pixels from it is pretty straightforward. But what
should you do with those pixels?</p>
<p>Well, now we have to introduce hardware cursors. Many backends support
&ldquo;hardware&rdquo; cursors, which is a feature provided by your low-level graphics stack
(e.g. GPU drivers) for rendering a cursor on the screen. Hardware cursors are
composited by the GPU, which means you can move the cursor around without
re-drawing the things underneath it. This is the most energy- and CPU-efficient
way of drawing your cursor, and you can do it with
<a href="https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_output.h#L179-L190"><code>wlr_output_cursor_set_image</code></a>, specifying which <code>wlr_output</code>
you want it to appear on and at what coordinates. Not all configurations support
hardware cursors, but <code>wlr_output</code> automatically falls back to software cursors
if need be.</p>
<p>Now you have all of the pieces to show a cursor on screen that moves with the
mouse. You can store some X and Y coordinates somewhere, grab an image from an
Xcursor theme, and throw it at your <code>wlr_output</code>, then process input events and
move it around. Then&hellip; you need to consider multiple outputs. And you need to
make sure that it can&rsquo;t be moved outside of an output. And you need to let the
user move it around with a drawing tablet or touch screen as well. And&hellip; well,
it&rsquo;s about to get complicated. That&rsquo;s where our next tool comes in!</p>
<p><a href="https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_cursor.h"><code>wlr_cursor</code></a> is how wlroots saves you from some of this work. It
can display a cursor image on-screen, tie it to multiple input devices,
constrain it to your outputs and move it across multiple displays. It can also
map input from certain devices to certain outputs or regions of the output
layout, change the geometry of inputs from a drawing tablet, and more.</p>
<p>To use <code>wlr_cursor</code>, you should create one (<code>wlr_cursor_create</code>) and as the
backend emits <code>new_input</code> events, bind them to the cursor with
<code>wlr_cursor_attach_input_device</code>. <code>wlr_cursor</code> then raises aggregated events
from all of its devices, which you can catch and handle accordingly - usually
calling a function like <code>wlr_cursor_move</code> and propagating the event to Wayland
clients. You also need to attach a <a href="https://github.com/swaywm/wlroots/blob/master/include/wlr/types/wlr_output_layout.h"><code>wlr_output_layout</code></a> to
the cursor, so it knows how to constrain the cursor movement and can handle
hardware cursors for you.</p>
<p>Aside: the <code>wlr_output_layout</code> module allows you to configure an arrangement of
<code>wlr_output</code>s in physical space. Its function is fairly straightforward and
largely unrelated to our topic - I suggest reading through the header and asking
questions if you need help. Once you make one of these and hand it to a
<code>wlr_cursor</code>, you have a cursor on-screen which moves around when you provide
input and correctly moves throughout a multi-display setup.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Okay, now that we have all of those pieces in place, we can finally start talking
about sending input events to Wayland clients! Before we get into how <em>wlroots</em>
does it, let&rsquo;s talk about how <em>Wayland</em> does it in general.</p>
<p>The top-level resource which manages input for a Wayland client is the
<code>wl_seat</code>. One seat, in rough terms, maps to a single set of input devices used
by a user (a user who is presumably sitting at a seat in front of their
computer). A seat can have up to one keyboard, pointer, touch device, or drawing
tablet each. Each of these devices can then <em>enter</em> or <em>leave</em> any of the
client&rsquo;s surfaces at the compositor&rsquo;s orders.</p>
<p>When you bind to a <code>wl_seat</code>&rsquo;s <code>wl_keyboard</code> and <code>wl_keyboard.enter</code> is raised
on a surface, it means your surface has keyboard focus. The compositor will
follow-up with (or will have already sent) a <code>wl_keyboard.keymap</code> signal to let
you know the layout of this keyboard (e.g. <code>us-intl</code>, <code>de</code>, <code>ru</code>, etc) in the
form of an xkbcommon keymap (the same format we were using with <code>wlr_keyboard</code>
earlier - hint hint). Some number of <code>key</code> and <code>modifier</code> events will likely
follow as the user taps away.</p>
<p>When you bind to a <code>wl_seat</code>&rsquo;s <code>wl_pointer</code> and <code>wl_pointer.enter</code> is raised, it
means a pointer has moved over one of your surfaces. Note that this can be an
entirely separate occasion from receiving keyboard focus. The client is then
expected to provide a cursor image to display (at the moment, Wayland <em>requires</em>
client side cursors. They have to do the whole Xcursor dance we did on the
wlroots side earlier, too. We have some plans to correct this&hellip;). Some number
of <code>motion</code> and <code>button</code> events will likely follow as the user wiggles their
mouse and clicks your windows.</p>
<p>So, how does a wlroots-based compositor facilitate these interactions? With
<a href="https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_seat.h"><code>wlr_seat</code></a>, our abstraction on top of <code>wl_seat</code>. This implements the
whole <code>wl_seat</code> state machine, but again leaves it to you to tweak the knobs as
you wish. You need to decide how your compositor is going to deal with focus -
KDE, Sway, the Librem5 phone UI, an in-vehicle infotainment system; all of these
will have a different approach to focus.</p>
<p>wlroots doesn&rsquo;t render client surfaces for you, and doesn&rsquo;t know where you put
them. Once you figure out where they go, you need to notice when the
<code>wlr_cursor</code> is moved over it and call <code>wlr_seat_pointer_notify_enter</code> with the
pointer&rsquo;s coordinates relative to the surface it entered, along with any
appropriate <code>motion</code> or <code>button</code> events through the relevant <code>wlr_seat</code>
functions. The client will also likely send you a cursor image to display - this
is done with the <code>wlr_seat.events.request_set_cursor</code> event.</p>
<p>When you decide that a surface should receive keyboard focus, call
<code>wlr_seat_keyboard_notify_enter</code>. <code>wlr_seat</code> will automatically handle removing
focus from whatever had it last, and will also grab the keymap and send it to
the client for you, assuming you configured it with <code>wlr_keyboard_set_keymap</code>&hellip;
you did, right? <code>wlr_seat</code> also semi-transparently deals with grabs, the sort of
situation where a client wants to keep keyboard focus for longer than it
normally would, to deal with a context menu or something.</p>
<p>Touch events are similar and should be self-explanatory when you read the
header. Drawing tablet events are a bit different - they&rsquo;re not actually
specified by the core Wayland protocol. Instead, we rig these up with the
<a href="https://cgit.freedesktop.org/wayland/wayland-protocols/tree/unstable/tablet/tablet-unstable-v2.xml">tablet</a> protocol extension and <a href="https://github.com/swaywm/wlroots/blob/7f20ab644347b11fd8242beaf7a6fe42c910d014/include/wlr/types/wlr_tablet_v2.h">wlr_tablet</a>. It
works in much the same way, but you have to explicitly configure it for a
<code>wlr_seat</code> by calling <code>wlr_tablet_create</code> yourself.</p>
<p>So, in short, if you wiggle your mouse, here&rsquo;s what happens:</p>
<ol>
<li>Before you wiggled your mouse, the <code>libinput</code> backend noticed it was plugged
in and raised a <code>new_input</code> event.</li>
<li>Your compositor attached the resulting <code>wlr_pointer</code> to its <code>wlr_cursor</code>,
which it had prepared earlier by looking up an appropriate cursor theme and
letting it know about the display layout.</li>
<li>The <code>wlr_pointer</code> bubbled up a <code>motion</code> event, which was caught by
<code>wlr_cursor</code> and bubbled up to your compositor.</li>
<li>Your compositor called <code>wlr_cursor_move</code> to apply the resulting motion,
constrained by the output layout, which in turn caused the cursor image on
your display to move.</li>
<li>Your compositor then looked around to see if the pointer had moved over any
new surfaces. Since wlroots doesn&rsquo;t handle rendering or know where anything
is displayed, this was a rather introspective question.</li>
<li>You <em>did</em> wiggle it over a new surface, so the compositor called
<code>wlr_seat_notify_pointer_enter</code> after translating the pointer coordinates to
surface-local space. It sent a <code>wlr_seat_notify_pointer_motion</code> for good
measure.</li>
<li>The client noticed the pointer entered it and sent back a cursor image to
show. The compositor was informed of this via
<code>wlr_seat.events.request_set_cursor</code>.</li>
<li>The compositor handled the client&rsquo;s cursor image to <code>wlr_cursor</code>, throwing
away all of that hard work loading up a cursor theme just for a client-side
cursor to come in and ruin it.</li>
</ol>
<p>And there you have it, that&rsquo;s how input works in wlroots. It&rsquo;s really fucking
complicated, isn&rsquo;t it? I think this article puts on display both the incredible
advantages and serious drawbacks of wlroots. Because you have to plug all of
these pieces together yourself, you are afforded an <em>enormous</em> amount of
flexibility. However, you have to do a lot of work and understand a whole lot of
different pieces to get there. Libraries like
<a href="https://github.com/Cloudef/wlc">wlc</a> are much easier to use in this respect,
but if you want to change even a small detail of this process with wlc you are
unable to.</p>
<p>If you have any questions about this article, please reach out to the developers
hanging out in <a href="http://webchat.freenode.net/?channels=sway-devel&amp;uio=d4">#sway-devel on irc.freenode.net</a>. We know this is
confusing, and we&rsquo;re happy to help.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>One more quick note: for multi-DPI setups, you need to provide the <code>wlr_cursor</code> with different cursor images, one for each scale present on the output layout. We have another tool for sourcing Xcursor images at multiple scale factors, check out <a href="https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_xcursor_manager.h"><code>wlr_xcursor_manager</code></a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Another thing <code>wlr_output_layout</code> is useful for, if you were wondering, is figuring out where to render windows in a multi-output arrangement, where some windows might span multiple outputs. Read the header!&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate></item><item><title>Simple, correct, fast: in that order</title><link>https://drewdevault.com/2018/07/09/Simple-correct-fast.html</link><description><![CDATA[<p>The single most important quality in a piece of software is simplicity. It&rsquo;s
more important than doing the task you set out to achieve. It&rsquo;s more important
than performance. The reason is straightforward: if your solution is not simple,
it will not be correct or fast.</p>
<p>Given enough time, you&rsquo;ll find that all software which solves sufficiently
complex problems is going to (1) have bugs and (2) have performance problems.
Software with bugs is incorrect. Software with performance problems is not fast.
We will face this fact as surely as we will face death and taxes, and we should
prepare ourselves accordingly. Let&rsquo;s consider correctness first.</p>
<p>Complicated software breaks. Simple software is more easily understood and far
less prone to breaking: there are less moving pieces, less lines of code to keep
in your head, and fewer edge cases. Simple software is more easily tested as
well - after all, fewer code paths to run through. Sure, simple software <em>does</em>
break, and when it does the cause and appropriate solution are often apparent.</p>
<p>Now let&rsquo;s consider performance. You may have some suspicions about your
bottlenecks when you set out, and you should consider them in your approach.
However, when the performance bill comes due, you&rsquo;re more likely to have
overlooked something than not. The only way to find out for sure what&rsquo;s slow is
to measure. Which is easier to profile: a complicated program, or a simple one?
Anyone who&rsquo;s looked at a big enough flame graph knows exactly what I&rsquo;m talking
about.</p>
<p>Perhaps complicated software once solved a problem. That software needs to be
maintained - what is performant and correct today will not be tomorrow. The
workload will increase, or the requirements will change. Software is a living
thing! When you&rsquo;re stressed out at 2 AM on Tuesday morning because the server
shat itself because your 1,831st new customer pushed the billing system over the
edge, do you think you&rsquo;re well equipped to find the problem in a complex piece
of code you last saw a year ago?</p>
<p>When you are faced with these problems, you must seek out the simplest way they
can be solved. This may be difficult to do: perhaps the problem is too large, or
perhaps you were actually considering the solution before considering the
problem. Though difficult it may be, it is your most important job. You need to
take problems apart, identify smaller problems within them and ruthlessly remove
scope until you find the basic problem you can apply a basic solution to. The
complex problem comes later, and it&rsquo;ll be better served by the composition of
simple solutions than with the application of a complex solution.</p>]]></description><pubDate>Mon, 9 Jul 2018 00:00:00 +0000</pubDate></item><item><title>The advantages of an email-driven git workflow</title><link>https://drewdevault.com/2018/07/02/Email-driven-git.html</link><description><![CDATA[<p><a href="https://raw.githubusercontent.com/git/git/master/Documentation/RelNotes/2.18.0.txt">git 2.18.0</a> has been released, and with it my first contribution to
git has shipped! My patch was for a git feature which remains disappointingly
obscure: <a href="https://git-scm.com/docs/git-send-email">git send-email</a>. I want to
introduce my readers to this feature and speak to the benefits of using an
email-driven git workflow - the workflow git was originally designed for.</p>
<p>Email isn&rsquo;t as sexy as GitHub (and its imitators), but it has several
advantages over the latter. Email is standardized, federated, well-understood,
and venerable. A very large body of email-related software exists and is equally
reliable and well-understood. You can interact with email using only open source
software and customize your workflow at every level of the stack - filtering,
organizing, forwarding, replying, and so on; in any manner you choose.</p>
<p>Git has several built-in tools for leveraging email. The first one of note is
<a href="https://git-scm.com/docs/git-format-patch">format-patch</a>. This can take a git
commit (or series of commits) and format them as plaintext emails with embedded
diffs. Here&rsquo;s a small example of its output:</p>
<pre tabindex="0"><code class="language-mail" data-lang="mail">From 8f5045c871c3060ff5f5f99ce1ada09f4b4cd105 Mon Sep 17 00:00:00 2001
From: Drew DeVault &lt;sir@cmpwn.com&gt;
Date: Wed, 2 May 2018 08:59:27 -0400
Subject: [PATCH] Silently ignore touch_{motion,up} for unknown ids

---
 types/wlr_seat.c | 2 --
 1 file changed, 2 deletions(-)

diff --git a/types/wlr_seat.c b/types/wlr_seat.c
index f77a492d..975746db 100644
--- a/types/wlr_seat.c
+++ b/types/wlr_seat.c
@@ -1113,7 +1113,6 @@ void wlr_seat_touch_notify_up(struct wlr_seat *seat, uint32_t time,
 	struct wlr_seat_touch_grab *grab = seat-&gt;touch_state.grab;
 	struct wlr_touch_point *point = wlr_seat_touch_get_point(seat, touch_id);
 	if (!point) {
-		wlr_log(L_ERROR, &#34;got touch up for unknown touch point&#34;);
 		return;
 	}
 
@@ -1128,7 +1127,6 @@ void wlr_seat_touch_notify_motion(struct wlr_seat *seat, uint32_t time,
 	struct wlr_seat_touch_grab *grab = seat-&gt;touch_state.grab;
 	struct wlr_touch_point *point = wlr_seat_touch_get_point(seat, touch_id);
 	if (!point) {
-		wlr_log(L_ERROR, &#34;got touch motion for unknown touch point&#34;);
 		return;
 	}
 
-- 
2.18.0
</code></pre><p>git format-patch is at the bottom of git&rsquo;s stack of outgoing email features. You
can send the emails it generates manually, but usually you&rsquo;ll use git send-email
instead. It logs into the SMTP server of your choice and sends the email for
you, after running git format-patch for you and giving you an opportunity to
make any edits you like. Given that most popular email clients these days are
awful and can&rsquo;t handle basic tasks like &ldquo;sending email&rdquo; properly, I strongly
recommend this tool over attempting to send format-patch&rsquo;s output yourself.</p>
<img style="max-width: 75%" src="https://sr.ht/wmKv.jpg" />
<p style="text-align: center; max-width: 80%; margin: 1rem auto">
    <em>
        I put a notch in my keyboard for each person who ignores my advice,
        struggles through sending emails manually, and eventually comes around
        to letting git send-email do it for them.
    </em>
</p>
<p>I recommend a few settings to apply to git send-email to make your workflow a
bit easier. One is <code>git config --global sendemail.verify off</code>, which turns off
a sometimes-annoying and always-confusing validation step which checks for
features only supported by newer SMTP servers - newer, in this case, meaning
more recent than November of 1995. I started a thread on the git mailing list
this week to discuss changing this option to off by default.</p>
<p>You can also set the default recipient for a given repository by using a local
git config: <code>git config sendemail.to admin@example.org</code>. This lets you skip a
step if you send your patches to a consistent destination for that project, like
a mailing list. I also recommend <code>git config --global sendemail.annotate yes</code>,
which will always open the emails in your editor to allow you to make changes
(you can get this with <code>--annotate</code> if you don&rsquo;t want it every time).</p>
<p>The main edit you&rsquo;ll want to make when annotating is to provide what some call
&ldquo;timely commentary&rdquo; on your patch. Immediately following the <code>---</code> after your
commit message, you can add a summary of your changes which can be seen by the
recipient, but doesn&rsquo;t appear in the final commit log. This is a useful place to
talk about anything useful regarding the testing, review, or integration of your
changes. You may also want to edit the <code>[PATCH]</code> text in the subject line to
something like <code>[PATCH v2]</code> - this can also be done with the <code>-v</code> flag as well.
I also like to add additional To&rsquo;s, Cc&rsquo;s, etc at this time.</p>
<p>Git also provides tools for the recipient of your messages. One such tool is
<a href="https://git-scm.com/docs/git-am">git am</a>, which accepts an email prepared with
format-patch and integrates it into their repository. Several flags are provided
to assist with common integration activities, like signing off on the commit or
attempting a 3-way merge. The difficult part can be getting the email to git am
in the first place. If you simply use the GMail web UI, this can be difficult. I
use <a href="http://www.mutt.org/">mutt</a>, a TUI email client, to manage incoming
patches. This is useful for being able to compose replies with vim rather than
fighting some other mail client to write emails the way I want, but more
importantly it has the <code>|</code> key, which prompts you for a command to pipe the
email into. Other tools like <a href="http://www.offlineimap.org/">OfflineIMAP</a> are also
useful here.</p>
<p>On the subject of composing replies, reviewing patches is quite easy with the
email approach as well. Many bad, yet sadly popular email clients have
popularized the idea that the sender&rsquo;s message is immutable, encouraging you to
<a href="https://en.wikipedia.org/wiki/Posting_style#Top-posting">top post</a> and leave an endlessly growing chain of replies
underneath your message. A secret these email clients have kept from you is that
you are, in fact, permitted by the mail RFCs to edit the sender&rsquo;s message as you
please when replying - a style called <a href="https://en.wikipedia.org/wiki/Posting_style#Bottom-posting">bottom posting</a>. I
strongly encourage you to get comfortable doing this in general, but it&rsquo;s
essential when reviewing patches received over email.</p>
<p>In this manner, you can dissect the patch and respond to specific parts of it
requesting changes or clarifications. It&rsquo;s just email - you can reply, forward
the message, Cc interested parties, start several chains of discussion, and so
on. I recently sent the following feedback on a patch I received:</p>
<pre tabindex="0"><code class="language-mail" data-lang="mail">Date: Mon, 11 Jun 2018 14:19:22 -0400
From: Drew DeVault &lt;sir@cmpwn.com&gt;
To: Gregory Mullen &lt;omitted&gt;
Subject: Re: [PATCH 2/3 todo] Filter private events from events feed

On 2018-06-11  9:14 AM, Gregory Mullen wrote:
&gt; diff --git a/todosrht/alembic/versions/cb9732f3364c_clear_defaults_from_tickets_to_support_.py b/todosrht/alembic/versions/cb9732f3364c_clear_defaults_from_tickets_to_support_.py
&gt; -%&lt;-
&gt; +class FlagType(types.TypeDecorator):

I think you can safely import the srht FlagType here without implicating
the entire sr.ht database support code

&gt; diff --git a/todosrht/blueprints/html.py b/todosrht/blueprints/html.py
&gt; -%&lt;-
&gt; +def collect_events(target, count):
&gt; +    events = []
&gt; +    for e in EventNotification.query.filter(EventNotification.user_id == target.id).order_by(EventNotification.created.desc()):

80 cols

I suspect this &#39;collect_events&#39; function can be done entirely in SQL
without having to process permissions in Python and do several SQL
round-trips

&gt;  @html.route(&#34;/~&lt;username&gt;&#34;)
&gt;  def user_GET(username):
&gt; -    print(username)

Whoops! Nice catch.

&gt;      user = User.query.filter(User.username == username.lower()).first()
&gt;      if not user:
&gt;          abort(404)
&gt;      trackers, _ = get_tracker(username, None)
&gt;      # TODO: only show public events (or events the current user can see)

Can remove the comment
</code></pre><p>Obviously this isn&rsquo;t the whole patch we&rsquo;re seeing - I&rsquo;ve edited it down to just
the parts I want to talk about. I also chose to leave the file names in to aid
in navigating my feedback, with casual <code>-%&lt;-</code> symbols indicating where I had
trimmed out parts of the patch. This approach is common and effective.</p>
<p>The main disadvantage of email driven development is that some people are more
comfortable working with email in clients which are not well-suited to this kind
of work. Popular email clients have caused terrible ideas like HTML email to
proliferate, not only enabling spam, privacy leaks, and security
vulnerabilities, but also making it more difficult for people to write emails
that can be understood by git or tolerated by advanced email users.</p>
<p>I don&rsquo;t think that the solution to these problems is to leave these powerful
tools hanging in the wind and move to less powerful models like GitHub&rsquo;s pull
requests. This is why on my own platform, <a href="https://sr.ht">sr.ht</a>, I chose to
embrace git&rsquo;s email-driven approach, and extend it with new tools that make it
easier to participate without directly using email. For those like me, I still
want the email to be there so you can dig my heels in and do it old-school, but
I appreciate that it&rsquo;s not for everyone.</p>
<p>I started working on the sr.ht mailing list service a couple of weeks ago, which
is where these goals will be realized with new email-driven code review tools.
My friend <a href="https://emersion.fr">Simon</a> has been helping out with a Python module
named <a href="https://git.sr.ht/~emersion/python-emailthreads/">emailthreads</a> which can
be used to parse email discussions - with a surprising degree of accuracy,
considering the flexibility of email. Once I get these tools into a usable
state, we&rsquo;ll likely see sr.ht registrations finally opened to the general public
(interested in trying it earlier? <a href="mailto:sir@cmpwn.com">Email me</a>). Of course,
it&rsquo;s all <a href="https://git.sr.ht/~sircmpwn/?search=sr.ht">open source</a>, so you can
follow along and try it on your own infrastructure if you like.</p>
<p>Using email for git scales extremely well. The canonical project, of course, is
the Linux kernel. A change is made to the Linux kernel an average of 7 times per
hour, constantly. It is maintained by dozens of veritable clans of software
engineers hacking on dozens of modules, and email allows these changes to
efficiently flow code throughout the system. Without email, Linux&rsquo;s maintenance
model would be impossible. It&rsquo;s worth noting that git was designed for
maintaining Linux, of course.</p>
<p>With the right setup, it&rsquo;s well suited to small projects as well. Sending a
patch along for review is a single git command. It lands directly in the
maintainer&rsquo;s inbox and can be integrated with a handful of keystrokes. All of
this works without any centralization or proprietary software involved. We
should embrace this!</p>
<hr>
<p>Related articles sent in by readers:</p>
<p><a href="https://begriffs.com/posts/2018-06-05-mailing-list-vs-github.html">Mailing lists vs Github</a>
by Joe Nelson</p>
<p><a href="https://web.archive.org/web/20180522180815/https://dpc.pw/blog/2017/08/youre-using-git-wrong/">You&rsquo;re using git wrong</a> by
Dawid Ciężarkiewicz</p>]]></description><pubDate>Mon, 2 Jul 2018 00:00:00 +0000</pubDate></item><item><title>A quick review of my Let&apos;s Encrypt setup</title><link>https://drewdevault.com/2018/06/27/My-lets-encrypt-setup.html</link><description><![CDATA[<p>Let&rsquo;s Encrypt makes TLS much easier for pretty much everyone, but can still
be annoying to use. It took me a while to smooth over the cracks in my Let&rsquo;s
Encrypt configuration across my (large) fleet of different TLS-enabled services.
I wanted to take a quick moment to share setup with you.</p>
<p>2020-01-02 update: acme-client is unmaintained and caught the BSD disease
anyway. I use <a href="https://github.com/ndilieto/uacme">uacme</a> and my current
procedure is documented on my <a href="https://drewdevault.com/new-server.html">new server checklist</a>. It might
not be exactly applicable to your circumstances, YMMV.</p>
<p>The main components are:</p>
<ul>
<li><a href="https://kristaps.bsd.lv/acme-client/">acme-client</a></li>
<li>nginx</li>
<li>cron</li>
</ul>
<p>nginx and cron need no introduction, but acme-client deserves a closer look. The
acme client blessed by Let&rsquo;s Encrypt is <a href="https://certbot.eff.org/">certbot</a>, but
BOY is it complicated. It&rsquo;s a big ol&rsquo; pile of Python and I&rsquo;ve found it fragile,
complicated, and annoying. The goal of maintaining your nginx and apache configs
for you is well intentioned but ultimately useless for advanced users. The
complexity of certbot is through the roof, and complicated software breaks.</p>
<p>I bounced between alternatives for a while but when I found acme-client, it
totally clicked. This one is written in C with minimal dependencies (LibreSSL
and libcurl, no brainers IMO). I bring a statically linked acme-client binary
with me to new servers and setup time approaches zero as a result.</p>
<p>I use nginx to answer challenges (and for some services, to use the final
certificates for HTTPS - did you know you can use Let&rsquo;s Encrypt for more
protocols than just HTTPS?). I quickly <code>mkdir -p /var/www/acme/.well-known/acme-challenge</code>, make sure nginx can read it, and add
the following rules to nginx to handle challenges:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">example.org</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">^~</span> <span class="s">/.well-known/acme-challenge</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">alias</span> <span class="s">/var/www/acme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>If I&rsquo;m not using the certificates for HTTPS, this is all I need. But assuming I
have some kind of website going, the full configuration usually looks more like
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">example.org</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">return</span> <span class="mi">302</span> <span class="s">https://</span><span class="nv">$server_name$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">^~</span> <span class="s">/.well-known/acme-challenge</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">alias</span> <span class="s">/var/www/acme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">example.org</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span> <span class="s">/etc/ssl/acme/</span><span class="nv">$server_name/fullchain.pem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span> <span class="s">/etc/ssl/acme/</span><span class="nv">$server_name/privkey.pem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">^~</span> <span class="s">/.well-known/acme-challenge</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">alias</span> <span class="s">/var/www/acme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># ...application specific rules...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>This covers the nginx side of things. To actually do certificate negotiation, I
have a simple script I carry around:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">exec</span> &gt;&gt;/var/log/acme 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">date
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">acme<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">site</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">shift</span>
</span></span><span class="line"><span class="cl">    acme-client -vNn <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -c /etc/ssl/acme/<span class="nv">$site</span>/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -k /etc/ssl/acme/<span class="nv">$site</span>/privkey.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="nv">$site</span> <span class="nv">$*</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">acme example.org subd1.example.org subd2.example.org
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nginx -s reload
</span></span></code></pre></div><p>The first two lines set up a log file in <code>/var/log/acme</code> I can use to debug any
issues that arise. Then I have a little helper function that wires up
acme-client the way I like it, and I can call it for each domain I need certs
for on this server. The last line changes if I&rsquo;m doing something other than
HTTPS with the certs (for example, <code>postfix reload</code>).</p>
<p>One gotcha is that acme-client will bail out if the directories don&rsquo;t exist when
you run it, so a quick <code>mkdir -p /etc/ssl/acme/example.org</code> when adding new
sites is necessary</p>
<p>The final step is a simple cron entry that runs the script daily:</p>
<pre tabindex="0"><code class="language-cron" data-lang="cron">0 0 * * * /usr/local/bin/acme-update-certs
</code></pre><p>It&rsquo;s that easy. It took me a while to get a Let&rsquo;s Encrypt setup that was simple
and satisfactory, but I believe I&rsquo;ve settled on this one. I hope you find it
useful!</p>]]></description><pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate></item><item><title>Should you move from GitHub to sr.ht</title><link>https://drewdevault.com/2018/06/05/Should-you-move-to-sr.ht.html</link><description><![CDATA[<p>I&rsquo;m not terribly concerned about Microsoft&rsquo;s acquisition of GitHub, but I
don&rsquo;t fault those who are worried. I&rsquo;ve been working on my alternative platform,
<a href="https://sr.ht">sr.ht</a>, for quite a while. I&rsquo;m not about to leave GitHub because
of Microsoft alone. I do have some political disagreements with GitHub and
Microsoft, but those are also not the main reason that I&rsquo;m building sr.ht. I
simply think I can do it better. If my approach aligns with your needs, then
sr.ht may be the platform for you.</p>
<p>There are several GitHub alternatives, but for the most part they&rsquo;re basically
GitHub rip-offs. Unlike GitLab, Gogs/Gitea, BitBucket; I don&rsquo;t see the GitHub UX
as the pinnacle of project hosting - there are many design choices (notably pull
requests) which I think have lots of room for improvement. sr.ht instead
embraces git more closely, for example building <em>on top</em> of email rather than
<em>instead of</em> email.</p>
<p>GitHub optimizes for the end-user and the drive-by contributor. sr.ht optimizes
for the maintainers and core contributors instead. We have patch queues and
ticket queues which you can set up automated filters in or manually curate, and
are reusable for projects on external platforms. You have tools which allow
you to customize the views you see separately from the views visitors see, like
bugzilla-style custom ticket searches. Our CI service gives you KVM
virtualization and knobs you can tweak to run sophisticated automation for your
project. Finally, all of it is <a href="https://git.sr.ht/~sircmpwn/?search=sr.ht">open
source</a>.</p>
<p>The business model is also something I think I can do better. GitHub and GitLab
are both VC-funded and trapped into appeasing their shareholders (or now, in
GitHub&rsquo;s case, the needs of Microsoft as a whole). I think this leads to
incentives which don&rsquo;t align with the users, as it&rsquo;s often more important to
support the bottom line than to build what the users want or need. Rather than
trying to raise as much money as possible, the sr.ht aims to be more a
grassroots platform. I&rsquo;m still working on the money details, but each user will
be expected to pay a subscription fee and growth will be artificially slowed if
necessary to make sure the infrastructure can keep up. In my opinion, venture
capital does not lead to healthy businesses or a healthy economy on the whole,
and I think the users suffer for it. My approach is different.</p>
<p>As for my own projects and the plan for moving them, I don&rsquo;t intend to move
anything until it won&rsquo;t be disruptive to the project. I&rsquo;ve been collecting
feedback from co-maintainers and core contributors to each of the projects I
expect to move and using this feedback to drive sr.ht priorities. They will
eventually move, but only when it&rsquo;s ready.</p>
<p>I intend to open sr.ht to the public soon, once I have a billing system in place
and break ground on mailing lists (among some smaller improvements). If anyone
is interested in checking it out prior to the public release, shoot me an email
at <a href="mailto:sir@cmpwn.com">sir@cmpwn.com</a>.</p>]]></description><pubDate>Tue, 5 Jun 2018 00:00:00 +0000</pubDate></item><item><title>How I maintain FOSS projects</title><link>https://drewdevault.com/2018/06/01/How-I-maintain-FOSS-projects.html</link><description><![CDATA[<p>Today&rsquo;s is another blog post which has been on my to-write list for a while. I
have hesitated a bit to write about this, because I&rsquo;m certain that my approach
isn&rsquo;t perfect. I think it&rsquo;s pretty good, though, and people who work with me in
FOSS agreed after a quick survey. So! Let&rsquo;s at least put it out there and
discuss it.</p>
<p>There are a few central principles I use to guide my maintainership work:</p>
<ol>
<li>Everyone is a volunteer and should be treated as such.</li>
<li>One patch is worth a thousand bug reports.</li>
<li>Empower people to do what they enjoy and are good at.</li>
</ol>
<p>The first point is very important. My open source projects are not the work of a
profitable organization which publishes open source software as a means of
giving back. Each of these projects is built and maintained entirely by
volunteers. Acknowledging this is important for keeping people interested in
working on the project - you can never expect someone to volunteer for work they
aren&rsquo;t enjoying<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. I am always grateful for any level of involvement a person
wants to have in the project.</p>
<p>Because everyone is a volunteer, I encourage people to work on their own
agendas, on their own schedule and at their own pace. None of our projects are
in a hurry, so if someone is starting to get burnt out, they should have no
reservations about taking a break for as long as they wish. I&rsquo;d rather have
something done slowly, correctly, and by a contributor who is enjoying their
work than quickly and by a contributor who is burnt out and stressed. No one
should ever be stressed out because of their involvement in the project. Some of
it is unavoidable - especially where politics is involved - but I don&rsquo;t hold
grudges against anyone who steps away and I try to shoulder the brunt of the
bullshit myself.</p>
<p>The second principle is closely related to the first. If a bug does not affect
someone who works on the project and the problem doesn&rsquo;t interest anyone who
works on the project, it&rsquo;s probably not going to get fixed. I would much rather
help someone familiarize themselves with the codebase and tooling necessary for
them to solve their own problems and send a patch, even if it takes ten times
longer than fixing the bug myself. I have never found a user who, even if they
aren&rsquo;t comfortable with programming or the specific technologies in use, has
been unable to solve a problem which they were willing to invest time into and
ask questions about.</p>
<p>This principle often leads to conflict with users whose bugs don&rsquo;t get fixed,
but I stick to it. I would rather lose every user who is unwilling to attempt a
patch than invest the resources of my contributors into work they&rsquo;re
uninterested in. In the long term, the health of the project is far better if I
always have developers engaged in and enjoying their work on it than if I lose
users who are upset by my approach.</p>
<p>These first two principles don&rsquo;t affect my day-to-day open source work so much
as they set the tone for it. The third principle, however, constitutes most of
my job as a maintainer, and it&rsquo;s with it that I add the most value. My main role
is to empower people who contribute to do work they enjoy, which benefits the
project, and which keeps them interested in coming back to do more.</p>
<p>Finding things people enjoy working on is the main task in this role. Once
people have made a few contributions, I can get an idea of how they like to work
and what they&rsquo;re good at, and help them find things to do which play to their
strengths. Supporting a contributors potential is important as well, and if
someone expresses interest in certain kinds of work or I think they show promise
in an area, it&rsquo;s my responsibility to help them find work to nurture these
skills and connect them with good mentors to help.</p>
<p>This starts to play in another major responsibility I have as a maintainer,
which is facilitating effective communication throughout the project. As people
grow in the project they generally become effective at managing communication
themselves, but new contributors appear all the time. A major responsibility as
a maintainer is connecting new contributors to domain experts in a problem, or
to users who can reproduce problems or are willing to test their patches.</p>
<p>I&rsquo;m also responsible for keeping up with each contributor&rsquo;s growth in the
project. For those who are good at and enjoy having responsibility in the
project, I try to help them find it. As contributors gain a better understanding
of the code, they&rsquo;re trusted to handle large features with less handholding and
perform more complex work<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. Often contributors are given opportunities to
become better code reviewers, and usually get merge rights once they&rsquo;re good at
it. Things like commit access are a never a function of rank or status, but of
enabling people to do the things that they&rsquo;re good at.</p>
<p>It&rsquo;s also useful to remember that your projects are not the only game in town. I
frequently encourage people who contribute to contribute to other projects as
well, and I personally try to find ways to contribute back to their own projects
(though not as much as I&rsquo;d often like to). I offer support as a sysadmin to many
projects started by contributors to my projects and I send patches whenever I
can. This pays directly back to the project in the form of contributors with
deeper and more diverse experience. It&rsquo;s also fun to take a break from working
on the same stuff all the time!</p>
<p>There&rsquo;s also some work that someone&rsquo;s just gotta do, and that someone is usually
me. I have to be a sysadmin for the websites, build infrastructure, and so on.
If there are finances, I have to manage them. I provide some kind of vision for
the project and decide what work is in scope. There&rsquo;s also some boring stuff
like preparing changelogs and release notes and shipping new versions, or
liaising with distros on packages. I also end up being responsible for any
marketing.</p>
<hr>
<p>Getting and supporting contributors is the single most important thing you can
do for your project as a maintainer. I often get asked how I&rsquo;m as productive as
I seem to be. While I can&rsquo;t deny that I can write a lot of code, it&rsquo;s peanuts
compared to the impact made by other contributors. I get a lot of credit for
sway, but in reality I&rsquo;ve only written 1-3 sway commits per week in the past few
months. For this reason, the best approach focuses on the contributors, to whom
I owe a great debt of gratitude.</p>
<p>I&rsquo;m still learning, too! I speak to contributors about my approach from time to
time and ask for feedback, and I definitely make mistakes. I hope that I&rsquo;ll
receive more feedback soon after some of them read this blog post, too. My
approach will continue to grow over time (hopefully for the better) and I hope
our work will enjoy success as a result.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Some people do work they don&rsquo;t enjoy out of gratitude to the project, but this is not sustainable and I discourage it.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Though I always encourage people to work on the things they&rsquo;re interested in, I sometimes have to <em>discourage</em> people from biting off more than they can chew. Then I help them gradually ramp up their skills and trust among the team until they can take on those tasks. Usually this goes pretty quick, though, and a couple of bugs caused by inexperience is a small price to pay for the <em>gain</em> in experience the contributor gets by taking on hard or important tasks.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 1 Jun 2018 00:00:00 +0000</pubDate></item><item><title>Embedding files in C programs with koio</title><link>https://drewdevault.com/2018/05/29/Embedding-files-in-C.html</link><description><![CDATA[<p>Quick blog post today to introduce a new tool I wrote:
<a href="https://git.sr.ht/~sircmpwn/koio">koio</a>. This is a small tool which takes a
list of files and embeds them in a C file. A library provides an fopen shim
which checks the list of embedded files before resorting to the real filesystem.</p>
<p>I made this tool for <a href="https://github.com/SirCmpwn/chopsui">chopsui</a>, where I
eventually want to be able to bundle up sui markup, stylesheets, images, and so
on in a statically linked chopsui program. Many projects have small tools which
serve a similar purpose, but it was simple enough and useful enough that I chose
to make something generic so it could be used on several projects.</p>
<p>The usage is pretty simple. I can embed <code>ko_fopen.c</code> in a C file with this
command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ koio -o bundle.c ko_fopen.c://ko_fopen.c
</span></span></code></pre></div><p>I can compile and link with <code>bundle.c</code> and do something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;koio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">koio_load_assets</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">koio_unload_assets</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">koio_load_assets</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FILE</span> <span class="o">*</span><span class="n">src</span> <span class="o">=</span> <span class="nf">ko_fopen</span><span class="p">(</span><span class="s">&#34;//ko_fopen.c&#34;</span><span class="p">,</span> <span class="s">&#34;r&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="nf">fgetc</span><span class="p">(</span><span class="n">src</span><span class="p">))</span> <span class="o">!=</span> <span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">putchar</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fclose</span><span class="p">(</span><span class="n">src</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">koio_unload_assets</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The generated <code>bundle.c</code> looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;koio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">files</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="s">&#34;//ko_fopen.c&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">len</span> <span class="o">=</span> <span class="mi">408</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">data</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;#define _POSIX_C_SOURCE 200809L</span><span class="se">\n</span><span class="s">#include &lt;errno.h&gt;</span><span class="se">\n</span><span class="s">#include &lt;stdlib.h&gt;</span><span class="se">\n</span><span class="s">#inc&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;lude &lt;stdio.h&gt;</span><span class="se">\n</span><span class="s">#include </span><span class="se">\&#34;</span><span class="s">koio_private.h</span><span class="se">\&#34;\n\n</span><span class="s">FILE *ko_fopen(const char *path&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;, const char *mode) {</span><span class="se">\n\t</span><span class="s">struct file_entry *entry = hashtable_get(&amp;koio_vfs, p&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;ath);</span><span class="se">\n\t</span><span class="s">if (entry) {</span><span class="se">\n\t\t</span><span class="s">if (mode[0] != &#39;r&#39; || mode[1] != &#39;</span><span class="se">\\</span><span class="s">0&#39;) {</span><span class="se">\n\t\t\t</span><span class="s">er&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;rno = ENOTSUP;</span><span class="se">\n\t\t\t</span><span class="s">return NULL;</span><span class="se">\n\t\t</span><span class="s">}</span><span class="se">\n\t\t</span><span class="s">return fmemopen(entry-&gt;data, en&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;try-&gt;len, </span><span class="se">\&#34;</span><span class="s">r</span><span class="se">\&#34;</span><span class="s">);</span><span class="se">\n\t</span><span class="s">}</span><span class="se">\n\t</span><span class="s">return fopen(path, mode);</span><span class="se">\n</span><span class="s">}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">koio_load_assets</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ko_add_file</span><span class="p">(</span><span class="n">files</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">path</span><span class="p">,</span> <span class="n">files</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">data</span><span class="p">,</span> <span class="n">files</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">koio_unload_assets</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ko_del_file</span><span class="p">(</span><span class="n">files</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">path</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A very simple tool, but one that I hope people will find useful. It&rsquo;s very
lightweight:</p>
<ul>
<li>312 lines of C</li>
<li>/bin/koio is ~40 KiB statically linked to musl</li>
<li>libkoio.a is ~18 KiB</li>
<li>Only mandatory dependencies are POSIX 2008 and a C99 compiler</li>
<li>Only optional dependency is <a href="https://git.sr.ht/~sircmpwn/scdoc">scdoc</a> for the
manual, which is similarly lightweight</li>
</ul>
<p>Enjoy!</p>]]></description><pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate></item><item><title>Why did we replace wlc?</title><link>https://drewdevault.com/2018/05/27/Why-rewrite-wlc.html</link><description><![CDATA[<p>For a little over a year, I&rsquo;ve been working with a bunch of talented C
developers to build a replacement for the <a href="https://github.com/Cloudef/wlc">wlc</a>
library. The result is <a href="https://github.com/swaywm/wlroots">wlroots</a>, and we&rsquo;re
still working on completing it and updating our software to use it. The
<a href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/">conventional
wisdom</a>
suggests that rewriting your code from scratch is almost never the right idea.
So why did we do it, and how is it working out? I have spoken a little about
this in the past, but we&rsquo;ll answer this question in detail today.</p>
<p>Sway will have been around for 3 years as of this August. When I started the
project, I wanted to skip some of the hard parts and get directly to
implementing i3 features. To this end, I was browsing around for libraries which
provided some of the low-level plumbing for me - stuff like DRM (Display
Resource Management) and KMS (Kernel Mode Setting), EGL and GLES wires, libinput
support, and so on. I was more interested in whatever tool could get me up to
speed and writing sway-specific code quickly. My options at this point came down
to wlc and <a href="https://github.com/michaelforney/swc">swc</a>.</p>
<p>swc&rsquo;s design is a little bit better in retrospect, but I ended up choosing wlc
for the simple reason that it had an X11 backend I could use for easier
debugging. If I had used swc, I would have been forced to work without a display
server and test everything under the DRM backend - which would have been pretty
annoying. So I chose wlc and go to work.</p>
<p>Designwise, wlc is basically a Wayland compositor with a plugin API, except you
get to write <code>main</code> yourself and the plugin API communicates entirely
in-process. wlc has its own renderer (which you cannot control) and its own
desktop with its own view abstraction (which you cannot control). You have some
events that it bubbles up for you and you can make some choices like where to
arrange windows.  However, if you just wire up some basics and run <code>wlc_init</code>,
wlc will do all of the rest of the work and immediately start accepting clients,
rendering windows, and dispatching input.</p>
<p>Over time we were able to make some small improvements to wlc, but sway 0.x
still works with these basic principles today. Though this worked well at first,
over time more and more of sway&rsquo;s bugs and limitations were reflections of
problems with wlc. A lengthy discussion on IRC and <a href="https://github.com/swaywm/sway/issues/1076">on
GitHub</a> ensued and we debated for
several weeks on how we should proceed. I was originally planning on building a
new compositor entirely in-house (similar to GNOME&rsquo;s mutter and KDE&rsquo;s kwin), and
I wanted to abstract the i3-specific functionality of sway into some kind of
plugin. Then, more &ldquo;frontends&rdquo; could be written on top of sway to add
functionality like AwesomeWM, bspwm, Xmonad, etc.</p>
<p>After some discussion among the sway team and with other Wayland compositor
projects <a href="https://github.com/way-cooler/way-cooler/issues/248">facing similar
problems</a> with wlc, I
decided that we would start developing a standalone library to replace wlc
instead, and with it allow a more diverse Wayland ecosystem to flourish.
Contrary to wlc&rsquo;s design - a Wayland compositor with some knobs - wlroots is a
set of modular tools with which you build the Wayland compositor yourself. This
design allows it to be suited to a huge variety of projects, and as a result
it&rsquo;s now being used for many different Wayland compositors, each with their own
needs and their own approach to leveraging wlroots.</p>
<p>When we started working on this, I wasn&rsquo;t sure if it was going to be successful.
Work began slowly and I knew we had a monumental task ahead of us. We spent a
lot of time and a few large refactorings getting a feel for how we wanted the
library to take shape. Different parts matured at different paces, sometimes
with changes in one area causing us to rethink design decisions that affected
the whole project. Eventually, we fell into our stride and found an approach
that we&rsquo;re very happy with today.</p>
<p>I think that the main difference with the approach that wlroots takes comes from
experience. Each of the people working on sway, wlc, way cooler, and so on were
writing Wayland compositors for the first time. I&rsquo;d say the problems that arose
as a result can also be seen throughout other projects, including Weston, KWin,
and so on. The problem is that when we all set out, we didn&rsquo;t fully understand
the opportunities afforded by Wayland&rsquo;s design, nor did we see how best to
approach tying together the rather complicated Linux desktop stack into a
cohesive project.</p>
<p>We could have continued to maintain wlc, fixed bugs, refactored parts of it, and
maybe eventually arrived at a place where sway more or less worked. But we&rsquo;d
simply be carrying on the X11 tradition we&rsquo;ve been trying to escape this whole
time. wlc was a kludge and replacing it was well worth the effort - it simply
could not have scaled to the places where wlroots is going. Today, wlroots is
the driving force behind 6 Wayland compositors and is targeting desktops,
tablets, and phones. Novel features never seen on any desktop - even beyond
Linux - are possible with this work. Now we can think about not only replacing
X11, but innovating in ways it never could have.</p>
<p>Our new approach is the way that Wayland compositors should be made. wlroots is
the realization of Wayland&rsquo;s potential. I am hopeful that our design decisions
will have a lasting positive impact on the Wayland ecosystem.</p>]]></description><pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate></item><item><title>Introducing scdoc, a man page generator</title><link>https://drewdevault.com/2018/05/13/scdoc.html</link><description><![CDATA[<p>A man page generator is one of those tools that I&rsquo;ve said I would write for a
long time, being displeased with most of the other options. For a while I used
asciidoc, but was never fond of it. There are a few things I want to see in a
man page generator:</p>
<ol>
<li>A syntax which is easy to read and write</li>
<li>Small and with minimal dependencies</li>
<li>Designed with man pages as a first-class target</li>
</ol>
<p>All of the existing tools failed some of these criteria.
<a href="http://asciidoc.org/">asciidoc</a> hits #1, but fails #2 and #3 by being written
in XSLT+Python and targetting man pages as a second-class citizen.
<a href="http://mandoc.bsd.lv/">mdocml</a> fails #1 (it&rsquo;s not much better than writing raw
roff), and to a lesser extent also fails criteria #2<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Another option,
<a href="https://github.com/rtomayko/ronn">ronn</a> meets criteria #1 and #3, but it&rsquo;s
written in Ruby and fails #2. All of these are fine for the niches they fill,
but not what I&rsquo;m looking for. And as for GNU info&hellip; ugh.</p>
<p><a href="https://xkcd.com/912/"><img src="https://sr.ht/nemf.png" alt=""></a></p>
<p>So, after tolerating less-than-optimal tools for too long, I eventually wrote
the man page generator I&rsquo;d been promising for years:
<a href="https://git.sr.ht/~sircmpwn/scdoc">scdoc</a>. In a nutshell, scdoc is a man page
generator that:</p>
<ul>
<li>Has an easy to read and write syntax. It&rsquo;s inspired by Markdown, but
importantly it&rsquo;s not <em>actually</em> Markdown, because Markdown is designed for
HTML and not man pages.</li>
<li>Is less than 1,000 lines of POSIX.1 C99 code with no dependencies and weighs
78 KiB statically linked against musl libc.</li>
<li>Only supports generating man pages. You can post-process the roff output if
you want it converted to something else (e.g. html).</li>
</ul>
<p>I recently migrated <a href="https://github.com/swaywm/sway/pull/1958">sway&rsquo;s manual</a> to
scdoc after adding support for generating tables to it (a feature from asciidoc
that the sway manual took advantage of). This change also removes a blocker to
localizing man pages - something that would have been needlessly difficult to do
with asciidoc. Of course, scdoc has full support for UTF-8.</p>
<p>My goal was to make a man page generator that had no more dependencies than man
itself and would be a no-brainer for projects to use to make their manual more
maintainable. Please give it a try!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>mdocml is small and has minimal dependencies, but it has <em>runtime</em> dependencies - you need it installed to read the man pages it generates. This is Bad.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate></item><item><title>Redirecting stderr of a running process</title><link>https://drewdevault.com/2018/05/04/Redirecitng-stderr-of-running-process.html</link><description><![CDATA[<p>During the KDE sprint in Berlin, <a href="http://www.subdiff.de/">Roman Gilg</a> leaned
over to me and asked if I knew how to redirect the stderr of an already-running
process to a file. I Googled it and found underwhelming answers using strace and
trying to decipher the output by reading the write syscalls. Instead, I thought
a gdb based approach would work better, and after putting the pieces together
Roman insisted I wrote a blog post on the topic.</p>
<p>gdb, the GNU debugger, has two important features that make this possible:</p>
<ul>
<li>Attaching to running processes via <code>gdb -p</code></li>
<li>Executing arbitrary code in the target process space</li>
</ul>
<p>With this it&rsquo;s actually quite straightforward. The process is the following:</p>
<ol>
<li>Attach gdb to the running process</li>
<li>Run <code>compile code -- dup2(open(&quot;/tmp/log&quot;, 65), 2)</code></li>
</ol>
<p>The magic 65 here is the value of <code>O_CREAT | O_WRONLY</code> on Linux, which is easily
found with a little program like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/stat.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_WRONLY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>2 is always the file descriptor assigned to stderr. What happens here is:</p>
<ol>
<li>Via <a href="https://linux.die.net/man/3/open"><code>open</code></a>, the file you want to redirect
to is created.</li>
<li>Via <a href="https://linux.die.net/man/3/dup2"><code>dup2</code></a>, stderr is overwritten with
this new file.</li>
</ol>
<p>The <code>compile code</code> gdb command will compile some arbitrary C code and run the
result in the target process, presumably by mapping some executable RAM and
loading it in, then jumping to the blob. Closing gdb (control+d) will continue
the process, and it should start writing out to the file you created.</p>
<p>There are lots of other cool (and hacky) things you can do with gdb. I once
disconnected someone from an internet radio by attaching gdb to nginx and
closing their file descriptor, for example. Thanks to Roman for giving me the
chance to write an interesting blog post on the subject!</p>]]></description><pubDate>Fri, 4 May 2018 00:00:00 +0000</pubDate></item><item><title>Google embraces, extends, and extinguishes</title><link>https://drewdevault.com/2018/05/03/Google-embraces-extends-extinguishes.html</link><description><![CDATA[<p>Microsoft infamously coined the euphemism &ldquo;<a href="https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish">embrace, extend,
extinguish</a>&rdquo; to
describe their strategy for disrupting markets dominated by open standards.
These days, Microsoft seems to have turned the other leaf, contributing to a
huge amount of open source and supporting open standards, and is becoming a good
citizen of the technology community. It&rsquo;s time to turn our concerns to Google.</p>
<p>Google famously &ldquo;embraced&rdquo; email on April Fool&rsquo;s day, 2004, which is of course
based on an open standard and federates with the rest of the world. If you&rsquo;ve
read the news lately, you might have seen that Google is shipping a big update
to GMail soon, which adds &ldquo;self-destructing&rdquo; emails that vanish from the
recipient&rsquo;s inbox after a time. Leaving aside that this promise is impossible to
deliver, look at the implementation - Google emails a link to a webpage with the
actual email content, and does magic in their client to make it look seamless.
Thus, they &ldquo;extend&rdquo; email. The &ldquo;extinguish&rdquo; with GMail is also well underway -
it&rsquo;s infamous for having an extremely strict spam filter for incoming emails
from people who run personal or niche mail servers.</p>
<p>Then there&rsquo;s AMP. It&rsquo;s an understatement to say Google embraced the web - but
AMP is how they enter the &ldquo;extend&rdquo; phase. AMP is a &ldquo;standard&rdquo;, but they don&rsquo;t
listen to any external feedback on it and it serves as a vehicle for keeping
users on their platform even when reading content from other websites. This is
thought to be the main intention of the service, as there are plenty of other
(and more effective) ways of rewarding lightweight pages in their search
results. The &ldquo;extinguish&rdquo; phase comes as sites that don&rsquo;t play ball get pushed
out of Google search results and into obscurity. AMP is perhaps the most blatant
of Google&rsquo;s strategies, serving only to further Google&rsquo;s agenda at the expense
of everyone else.</p>
<p>The list of grievances continues. Consider Google&rsquo;s dizzying collection of chat
applications. In its initial form, gtalk supported XMPP, an open and federated
standard for chat applications. Google dropped support for XMPP in 2014 and
continued the development of their proprietary platform up thru today&rsquo;s Hangouts
and Google Chat platforms - neither of which support any open standards. Slack
is also evidently taking cues from Google here, recently shutting down their own
IRC and XMPP bridges.</p>
<p>Google Reader&rsquo;s discontinuation fits too. RSS&rsquo;s decline was evident before
Google axed it, but killing Reader dealt a huge blow to any of RSS&rsquo;s remaining
momentum. Google said themselves they wanted to consolidate users onto the rest
of their services - none of which, I should add, support any open syndication
standards.</p>
<p>What of Google&rsquo;s role as a participant in open source? Sure, they make a lot of
software open source, but they don&rsquo;t collaborate with anyone.  They forked from
WebKit to get Apple out of the picture, and contributing to Chromium as a
non-Googler is notoriously difficult. Android is the same story - open source in
principle, but non-Googler AOSP contributors bemoan their awful approach to
external patches. It took Google over a decade to start making headway on
upstreaming their Linux patches for Android, too. Google writes papers about AI,
presumably to incentivize their academics with recognition for their work. This
is great until you notice that the crucial piece, the trained models, is always
absent.</p>
<p>For many people, the alluring convenience of Google&rsquo;s services is overwhelming.
It&rsquo;s hard to hear these things. But we must face facts: embrace, extend,
extinguish is a core part of Google&rsquo;s playbook today. It&rsquo;s important that we
work to diversify the internet and fight the monoculture they&rsquo;re fostering.</p>
<hr>
<p><strong>2018-05-04 18:12 UTC</strong>: I retract my criticism of Google&rsquo;s open source portfolio
as a whole, and acknowledge their positive impact on many projects. However, of
the projects explicitly mentioned I maintain that my criticism is valid.</p>
<p><strong>2018-05-05 11:17 UTC</strong>: Apparently the previous retraction caused some
confusion. I am <em>only</em> retracting the insinuation that Google isn&rsquo;t a good actor
in open source, namely the first sentence of paragraph 6. The rest of the
article has not been retracted.</p>]]></description><pubDate>Thu, 3 May 2018 00:00:00 +0000</pubDate></item><item><title>Sway reporting in from KDE&apos;s Berlin development sprint</title><link>https://drewdevault.com/2018/04/28/KDE-Sprint-retrospective.html</link><description><![CDATA[<p>I&rsquo;m writing to you from an airplane on my way back to Philadelphia, after
spending a week in Berlin working with the KDE team. It was great to meet those
folks and work with them for a while. It&rsquo;ll take me some time to get the taste
of C++ out of my mouth, though! In all seriousness, it was a very productive
week and I feel like we have learned a lot about each other&rsquo;s projects and have
a strengthened interest in collaborating more in the future.</p>
<p>The main purpose of my trip was to find opportunities for
<a href="http://swaywm.org">sway</a> and <a href="http://kde.org">KDE</a> to work together on
improving the Linux desktop. Naturally, the main topic of discussion was
interopability of software written for each of our projects. I brought the
wlroots layer-shell protocol to the table seeking their feedback on it, as well
as reviewing how their desktop shell works today. From our discussions we found
a lot of common ground in our designs and needs, as well as room for improvement
in both of our approaches.</p>
<p>The KDE approach to their desktop shell is similar to the original sway
approach. Today, their Plasma shell uses a number of proprietary protocols which
are hacks on top of the xdg-shell protocol (for those not in the know, the
xdg-shell protocol is used to render normal desktop windows and is not designed
for use with e.g. panels) that incorporate several of the concepts they were
comfortable using on X11 in an almost 1:1 fashion. Sway never had any X11
concepts to get comfortable with, but some may not know that sway&rsquo;s panel,
wallpaper, and lock screen programs on the 0.x releases are also hacks on top of
xdg-shell that are not portable between compositors.</p>
<p>In the wlroots project (which is overseen by sway), we&rsquo;ve been developing a
new protocol designed for desktop shell components like these. In theory, it is
a more generally applicable approach to building desktop shells on Wayland than
the approach we were using before. I sat down with the KDE folks and went over
this protocol in great detail, and learned about how Plasma shell works today,
and we were happy to discover that the wlroots approach (with some minor tweaks)
should be excellently suited to Plasma shell. In addition to the layer-shell, we
reviewed several other protocols Plasma uses to build its desktop experience,
and identified more places where it makes sense for us to unify our approach.
Other subjects discussed included virtual desktops, external window management,
screen capture and pipewire, and more.</p>
<p>The upshot of this is that we believe it&rsquo;s possible to integrate the Plasma
shell with sway. Users of KDE on X11 were able to replace kwin with i3 and still
utilize the Plasma shell - a feature which was lost in the transition to
Wayland. As we continue to work together, this use-case may well be captured
again. Even KDE users who are uninterested in sway stand to benefit from this.
The hacks Plasma uses today are temporary and unmaintainable, and the
improvements to Plasma&rsquo;s codebase will make it easier to work with. Should kwin
grow stable layer-shell support, clients designed for sway will work on KDE as
well. Replacing sway&rsquo;s own similar hacks will have similar benefits for our
codebase and open the door to 3rd-party panels, lockscreens, rofi, etc.</p>
<p>I spent my time in their care working on actual code to this end. I wrote up a
C++ library that extends Qt with layer-shell support called
<a href="https://github.com/SirCmpwn/qtlayershell">qtlayershell</a>, and extended the
popular <a href="#">Latte Dock</a> KDE extension to support it. Though this work is not
complete, it works - as I write this blog post, Latte is running on my sway
session! This is good progress, but I must return my focus to wlroots soon. If
you are interested in this work, please help me complete it!</p>
<p><img src="https://drewdevault.com/img/latte-dock.png" alt=""></p>
<p>A big thanks goes to KDE for putting on this event and covering my travel costs
to attend. I hope they found it as productive as I did, and I&rsquo;m very excited
about working more with them in the future. The future of Wayland is bright!</p>]]></description><pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate></item><item><title>Achtung! Decentralize, decentralize, decentralize!</title><link>https://drewdevault.com/2018/03/24/Decentralize-decentralize-decentralize.html</link><description><![CDATA[<p>I can hardly believe it, but the media is finally putting Facebook&rsquo;s feet to the
fire! No longer is it just the weird paranoid kids shouting at everyone to stop
giving all of their information to these companies. We need to take this bull by
the horns and drive it in a productive direction, and for that reason, it&rsquo;s time
to talk about decentralization, federation, and open source.</p>
<p><em>This article has been <a href="http://getcolorings.com/ru-decentralize">translated into
Russian</a> by <a href="http://getcolorings.com">Get
Colorings</a>.</em></p>
<p>It&rsquo;s important to remember that Facebook is not the only villain on this stage.
Did you know that Google keeps <a href="https://www.google.com/maps/timeline?pb">a map of everywhere you&rsquo;ve
been</a>? That Twitter is analyzing your
tweets just like Facebook does, and sells it to advertisers just like Facebook
does? Virtually all internet companies - Snapchat, Tinder, Uber &amp; Lift, and
even more - are spying on you and selling it to advertisers. It&rsquo;s so lucrative
and easy to do this that it&rsquo;s become an <em>industry standard practice</em>.</p>
<p>The solution to the Facebook problem is not jumping ship to another centralized
commercial platform. They will be exactly the same. The commercial model for
internet services is inherently flawed. Companies like Facebook, publicly
traded, have a legal obligation to maximize profits for their shareholders.
Private companies with investors are similarly obligated. Nowhere in the
equation does it say that they&rsquo;re obligated to do <em>anything</em> for you - the only
role you serve is to be a vehicle for exploitation.</p>
<p>You need to find services whose incentives are aligned with yours. What asks do
you have from your social media platforms? It probably starts with basic things:</p>
<ul>
<li>I want to keep up with my family and friends</li>
<li>I want my family and friends to be able to keep up with me</li>
</ul>
<p>But if you&rsquo;re smart, you might have some deeper asks:</p>
<ul>
<li>I don&rsquo;t want my personal information sold to others</li>
<li>I don&rsquo;t want to be manipulated into spending my money</li>
</ul>
<p>We might even have some asks as a <em>society</em>, too:</p>
<ul>
<li>We don&rsquo;t want to be manipulated into hating our countrymen</li>
<li>We don&rsquo;t want to have our people&rsquo;s opinions radicalized</li>
</ul>
<p>Each company I&rsquo;ve mentioned, and many more, may offer you some subset of these
promises. But <em>in every case</em>, they will have conditions:</p>
<ul>
<li><strong>We&rsquo;ll help you keep up with family and friends</strong>, or at least the subset
of them that we think makes you more profitable.</li>
<li><strong>We&rsquo;ll help your family and friends keep up with you</strong>, so long as your posts
are engaging enough to keep them looking at our ads.</li>
<li><strong>Your personal information won&rsquo;t be sold to others</strong>, unless we can get away
with it.</li>
<li><strong>You won&rsquo;t be manipulated into spending your money</strong>, unless we can
manipulate you into spending it on us.</li>
<li><strong>We won&rsquo;t manipulate you into hating your countrymen</strong>, unless it makes you
spend more time using our platform to express your hatred.</li>
<li><strong>We won&rsquo;t radicalize your opinions</strong>, at least not the ones that don&rsquo;t get
you angry enough to spend more time looking at our ads.</li>
</ul>
<p>I&rsquo;m not just being cynical here. There is no promise that a company can make to
its users that outweighs the <a href="https://legal-dictionary.thefreedictionary.com/fiduciary+duty">fiduciary
duty</a> that
<em>obligates</em> them to maximize profits by any means. The only defense of this is
legislation and consumer choice. We must pass laws that defend users and we must
choose not to engage with companies that behave like this.</p>
<p>We must do both of these things, but for now I&rsquo;m going to focus on the consumer
choice. We must throw our lot in with the alternative to these corporations -
decentralized, federated, open source platforms.</p>
<p>What do each of these terms mean?</p>
<p><em>Decentralized</em> means that the platform is, well, not <em>centralized</em>. Rather
than the control being in the hands of one company (or a single interested
party, to generalize it a bit), control is in the hands of many independent
operators.</p>
<p><em>Federated</em> refers to a means by which several service operators can
communicate with each other in standard ways. This approach prevents
platform lock-in. Email is a federated system - you can send an email from
your gmail account to your mother&rsquo;s old AOL account. Contrast this to Facebook,
where you can&rsquo;t follow your friend&rsquo;s Twitter account.</p>
<p>Finally, <em>open source</em><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> is a term used by the technology community to refer
to the free distribution of the secret sauce that makes our services tick. The
technology engineering community collectively works on these projects and freely
shares this work with everyone else.</p>
<p>The combination of all of these ideas in one piece of software is the golden
ticket to internet freedom. This is the approach to social networking taken most
famously by <a href="http://joinmastodon.org/">Mastodon</a>. Mastodon is a decentralized,
federated, and open source platform. The computing infrastructure the platform
runs on is operated by thousands of independent volunteers (decentralized),
which all communicate with each other and other software using standard
protocols (federated), and the <a href="https://github.com/tootsuite/mastodon">source
code</a> is freely available for anyone to
use and improve (open source)<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>The incentives of the operators are aligned with the incentives of the users on
Mastodon. The operator of each instance is a human being who can be easily
reached to give feedback and thanks, rather than a billionaire egomaniac who buys
an entire neighborhood so no one can bother him. Because the costs of
maintaining this social network are distributed across thousands of operators,
each one has a very low cost of operation, which is usually easily covered by
donations from the users who they support. There are no investors to please.
Just the users.</p>
<p>Mastodon fills a Twitter-like niche. There are other platforms attempting to
fill other niches - <a href="https://diasporafoundation.org/">diaspora*</a> is easily
compared to Facebook, for example.
<a href="https://github.com/Chocobozzz/PeerTube">PeerTube</a> is under development to
fulfill a YouTube-like niche, too. These platforms need our support.</p>
<p>Commercial platforms don&rsquo;t respect you. You may have grown used to skimming over
ads and content you don&rsquo;t want to see on Facebook and other platforms. It&rsquo;s an
annoyance that you&rsquo;ve internalized because, well, what else can you do? There
are no ads on Mastodon. It doesn&rsquo;t need them, and you deserve better than them.</p>
<p style="text-align: center">---</p>
<p>Remember, Facebook is not the only evil. It&rsquo;s time to discard proprietary
platforms like the manipulative trash they are.  Take the anger you&rsquo;ve felt at
Facebook these past couple of weeks and use it to embrace decentralization,
federation, and open source.</p>
<p>I know it seems a monumental task to untangle your life from these companies,
but you don&rsquo;t have to do it all at once. If this article moved you, make a todo
list right now. List each way in which you&rsquo;re tied to some platform - you use
Facebook to talk to your friends, or use gmail for your email address, your
contacts are stored on Google, you use Facebook&rsquo;s calendar for social events,
you have a Twitter account you haven&rsquo;t moved&hellip; then take on each task one at a
time. Take as much time as you need. As you research these options, if you find
the open options lacking, let the people involved know what your needs are. If
there&rsquo;s no open option at all, please <a href="mailto:sir@cmpwn.com">email me</a> about it.</p>
<p>We can do this. We can be free.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>There is some debate about the use of the term &ldquo;open source&rdquo; as opposed to another term, &ldquo;free software&rdquo;. There is a time and a place for this discussion, but it&rsquo;s not here, and our message weakens if we expose the general public to our bickering.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>There are actually several competing and compatible softwares that federate with the same social network Mastodon uses. This is very similar to how several different email providers are compatible with each other and compete to innovate together.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate></item><item><title>Hack everything without fear</title><link>https://drewdevault.com/2018/03/17/Hack-everything-without-fear.html</link><description><![CDATA[<p>We live in a golden age of open source, and it can sometimes be easy to forget
the privileges that this affords us. I&rsquo;m writing this article with vim, in a
terminal emulator called urxvt, listening to music with mpv, in a Sway desktop
session, on the Linux kernel. Supporting this are libraries like glibc or musl,
harfbuzz, and mesa. I also have the support of the AMDGPU video driver, libinput
and udev, alsa and pulseaudio.</p>
<p>All of this is open source. I can be reading the code for any of these tools
within 30 seconds, and for many of these tools I already have their code checked
out somewhere on my filesystem. It gets even better, though: these projects
don&rsquo;t just make their code available - they accept patches, too! Why wouldn&rsquo;t we
take advantage of this tremendous opportunity?</p>
<p>I often meet people who are willing to contribute to one project, but not
another. Some people will shut down when they&rsquo;re faced with a problem that
requires them to dig into territory that they&rsquo;re unfamiliar with. In Sway, for
example, it&rsquo;s often places like libinput or mesa. These tools might seem foreign
and scary - but to these people, at some point, so did Sway. In reality these
codebases are quite accessible.</p>
<p>Getting around in an unfamiliar repository can be a little intimidating, but do
it enough times and it&rsquo;ll become second nature. The same tools like gdb work
just as well on them. If you have a stacktrace for a segfault originating in
libinput, compile libinput with symbols and gdb will show you the file name and
line number of the problem. Go there and read the code! Learn how to use tools
like <code>git grep</code> to find stuff. Run <code>git blame</code> to see who wrote a confusing line
of code, and send them an email! When you find the problem, don&rsquo;t be afraid to
send a patch over instead of working around it in your own code. This is
something every programmer should be comfortable doing often.</p>
<p>Even when the leads you&rsquo;re chasing down are written in unfamiliar programming
languages or utilize even more unfamiliar libraries, don&rsquo;t despair. All
programming languages have a lot in common and huge numbers of resources are
available online. Learning just enough to understand (and fix!) a particular
problem is very possible, and something I find myself doing it all the time. You
don&rsquo;t have to be an expert in a particular programming language to invoke trial
&amp; error.</p>
<p>If you&rsquo;re similarly worried about the time investment, don&rsquo;t be. You already set
aside time to work your problem, and this is just part of that process. Yes,
you&rsquo;ll probably be spending your time differently from your expectations - more
reading code than writing code.  But how is that any less productive? The
biggest time sink in this process is all the time you spend worrying about how
much time it&rsquo;s going to take, or telling me in IRC you can&rsquo;t solve your problem
because you&rsquo;re not good enough to understand mesa or the kernel or whatever.</p>
<p>An important pastime of the effective programmer is reading and understanding
the tools you use. You should at least have a basic idea of how everything on
your system works, and in the places your knowledge is lacking you should make
it your business to study up. The more you do this, the less scary foreign code
will become, and the more productive you will be. No longer will you be stuck in
your tracks because your problem leads you away from the beaten path!</p>]]></description><pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate></item><item><title>How to write an IRC bot</title><link>https://drewdevault.com/2018/03/10/How-to-write-an-IRC-bot.html</link><description><![CDATA[<p>My disdain for Slack and many other Silicon Valley chat clients is <a href="https://drewdevault.com/2015/11/01/Please-stop-using-slack.html">well
known</a>, as is my undying love for IRC.
With Slack making the news lately after their recent decision to disable the IRC
and XMPP gateways in a classic <a href="https://en.wikipedia.org/wiki/Embrace%2C_extend%2C_and_extinguish">Embrace Extend
Extinguish</a>
move, they&rsquo;ve been on my mind and I feel like writing about them more. Let&rsquo;s
compare writing a bot for Slack with writing an IRC bot.</p>
<p>First of all, let&rsquo;s summarize the process for making a Slack bot. Full details
are available in <a href="https://api.slack.com/slack-apps">their documentation</a>. The
basic steps are:</p>
<ol>
<li>Create a Slack account and &ldquo;workspace&rdquo; to host the bot (you may have already
done this step). On the free plan you can have up to 10 &ldquo;integrations&rdquo; (aka
bots). This includes all of the plug-n-play bots Slack can set up for you, so
make sure you factor that into your count. Otherwise you&rsquo;ll be heading to the
pricing page and making a case to whoever runs your budget.</li>
<li>Create a &ldquo;Slack app&rdquo; through their web portal. The app will be tied to the
company you work with now, and if you get fired you will lose the app. Make
sure you make a separate organization if this is a concern!</li>
<li>The recommended approach from here is to set up subscriptions to the &ldquo;Event
API&rdquo;, which involves standing up a web server (with working SSL) on a
consistent IP address (and don&rsquo;t forget to open up the firewall) to receive
incoming notifications from Slack. You&rsquo;ll need to handle a proprietary
challenge to verify your messages via some HTTP requests coming from Slack
which gives you info to put into HTTP headers of your outgoing requests. The
Slack docs refer to this completion of this process as &ldquo;triumphant success&rdquo;.</li>
<li>Receive some JSON in a proprietary format via your HTTP server and use some
more proprietary HTTP APIs to respond to it.</li>
</ol>
<p>Alternatively, instead of steps 3 and 4 you can use the &ldquo;Real Time Messaging&rdquo;
API, which is a websocket-based protocol that starts with an HTTP request to
Slack&rsquo;s authentication endpoint, then a follow-up HTTP request to open the
WebSocket connection. Then you set up events in a similar fashion. Refer to the
complicated table in the documentation breaking down which events work through
which API.</p>
<p>Alright, so that&rsquo;s the Slack way. How does the IRC way compare? IRC is an open
standard, so to learn about it I can just read RFC 1459, which on my system is
conveniently waiting to be read at <code>/usr/share/doc/rfc/txt/rfc1459.txt</code>. This
means I can just read it locally, offline, in the text editor of my choice,
rather than on some annoying website that calls authentication a &ldquo;triumphant
success&rdquo; and complains about JavaScript being disabled.</p>
<p><strong>Note</strong>: This blog post pre-dates the commercial take-over of and subsequent
obsolescence of Freenode. The network this connects to, and channel it mentions,
no longer exist. Running these commands will not work, though the principles
remain correct.</p>
<p>You don&rsquo;t have to read it right now, though. I can give you a summary here, like
I gave for Slack. Let&rsquo;s start by not writing a bot at all - let&rsquo;s just manually
throw some bits in the general direction of Freenode. Install netcat and run
<code>nc irc.freenode.net 6667</code>, then type this into your terminal:</p>
<pre tabindex="0"><code>NICK joebloe
USER joebloe 0.0.0.0 joe :Joe Bloe
</code></pre><p>Hey, presto, you&rsquo;re connected to IRC! Type this in to join a channel:</p>
<pre tabindex="0"><code>JOIN #cmpwn
</code></pre><p>Then type this to say hello:</p>
<pre tabindex="0"><code>PRIVMSG #cmpwn :Hi SirCmpwn, I&#39;m here from your blog!
</code></pre><p>IRC is one of the simplest protocols out there, and it&rsquo;s dead easy to write a
bot for it. If your programming language can open a TCP socket (it can), then
you can use it to write an IRC bot in 2 minutes, flat. That&rsquo;s not even to
mention that there are IRC client libraries available for every programming
language on every platform ever - I even <a href="https://github.com/SirCmpwn/ChatSharp">wrote one
myself!</a> In fact, that guy is probably
the fifth or sixth IRC library I&rsquo;ve written. They&rsquo;re so easy to write that I&rsquo;ve
lost count.</p>
<p>Slack is a walled garden. Their proprietary API is defined by them and only
implemented by them. They can and will shut off parts you depend on (like the
IRC+XMPP gateways that were just shut down). IRC is over 20 years old and
software written for it then still works now. It&rsquo;s implemented by hundreds of
clients, servers, and bots. Your CI supports it and GitHub can send commit
notifications to it. It&rsquo;s ubiquitous and free. Use it!</p>]]></description><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate></item><item><title>Writing a Wayland Compositor, Part 3: Rendering a window</title><link>https://drewdevault.com/2018/02/28/Writing-a-wayland-compositor-part-3.html</link><description><![CDATA[<p>This is the third in a series of articles on the subject of writing a Wayland
compositor from scratch using <a href="https://github.com/swaywm/wlroots">wlroots</a>.
Check out <a href="https://drewdevault.com/2018/02/17/Writing-a-Wayland-compositor-1.html">the first article</a>
if you haven&rsquo;t already. We left off with a Wayland server which accepts client
connections and exposes a handful of globals, but does not do anything
particularly interesting yet. Our goal today is to do something interesting -
render a window!</p>
<p>The commit that this article dissects is
<a href="https://github.com/SirCmpwn/mcwayland/commit/342b7b6">342b7b6</a>.</p>
<p>The first thing we have to do in order to render windows is establish the
<strong>compositor</strong>. The wl_compositor global is used by clients to allocate
<code>wl_surface</code>s, to which they attach <code>wl_buffer</code>s. These surfaces are just a
generic mechanism for sharing buffers of pixels with compositors, and don&rsquo;t
carry an implicit <strong>role</strong>, such as &ldquo;application window&rdquo; or &ldquo;panel&rdquo;.</p>
<p>wlroots provides an implementation of <code>wl_compositor</code>. Let&rsquo;s set aside a
reference for it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">struct mcw_server {
</span></span><span class="line"><span class="cl">        struct wl_display *wl_display;
</span></span><span class="line"><span class="cl">        struct wl_event_loop *wl_event_loop;
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">        struct wlr_backend *backend;
</span></span><span class="line"><span class="cl"><span class="gi">+       struct wlr_compositor *compositor;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> 
</span></span><span class="line"><span class="cl">        struct wl_listener new_output;
</span></span></code></pre></div><p>Then rig it up:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        wlr_primary_selection_device_manager_create(server.wl_display);
</span></span><span class="line"><span class="cl">        wlr_idle_create(server.wl_display);
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="gi">+       server.compositor = wlr_compositor_create(server.wl_display,
</span></span></span><span class="line"><span class="cl"><span class="gi">+                       wlr_backend_get_renderer(server.backend));
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        wl_display_run(server.wl_display);
</span></span><span class="line"><span class="cl">        wl_display_destroy(server.wl_display);
</span></span></code></pre></div><p>If we run mcwayface now and check out the globals with <code>weston-info</code>, we&rsquo;ll see
a wl_compositor and wl_subcompositor have appeared:</p>
<pre tabindex="0"><code>interface: &#39;wl_compositor&#39;, version: 4, name: 8
interface: &#39;wl_subcompositor&#39;, version: 1, name: 9
</code></pre><p>You get a wl_subcompositor for free with the wlroots wl_compositor
implementation. We&rsquo;ll discuss subcompositors in a later article. Speaking of
things we&rsquo;ll discuss in another article, add this too:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        wlr_primary_selection_device_manager_create(server.wl_display);
</span></span><span class="line"><span class="cl">        wlr_idle_create(server.wl_display);
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">        server.compositor = wlr_compositor_create(server.wl_display,
</span></span><span class="line"><span class="cl">                        wlr_backend_get_renderer(server.backend));
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="gi">+       wlr_xdg_shell_v6_create(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        wl_display_run(server.wl_display);
</span></span><span class="line"><span class="cl">        wl_display_destroy(server.wl_display);
</span></span><span class="line"><span class="cl">        return 0;
</span></span></code></pre></div><p>Remember that I said earlier that surfaces are just globs of pixels with no
role? xdg_shell is something that can give surfaces a role. We&rsquo;ll talk about it
more in the next article. After adding this, many clients will be able to
connect to your compositor and spawn a window. However, without adding anything
else, these windows will never be shown on-screen. You have to render them!</p>
<p>Something that distinguishes wlroots from libraries like wlc and libweston is
that wlroots does not do any rendering for you. This gives you a lot of
flexibility to render surfaces any way you like. The clients just gave you a
pile of pixels, what you do with them is up to you - maybe you&rsquo;re making a
desktop compositor, or maybe you want to draw them on an Android-style app
switcher, or perhaps your compositor arranges windows in VR - all of this is
possible with wlroots.</p>
<p>Things are about to get complicated, so let&rsquo;s start with the easy part: in
the output_frame handler, we have to get a reference to every wlr_surface we
want to render. So let&rsquo;s iterate over every surface our <code>wlr_compositor</code> is
keeping track of:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        wlr_renderer_begin(renderer, wlr_output);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gi">+       struct wl_resource *_surface;
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wl_resource_for_each(_surface, &amp;server-&gt;compositor-&gt;surfaces) {
</span></span></span><span class="line"><span class="cl"><span class="gi">+               struct wlr_surface *surface = wlr_surface_from_resource(_surface);
</span></span></span><span class="line"><span class="cl"><span class="gi">+               if (!wlr_surface_has_buffer(surface)) {
</span></span></span><span class="line"><span class="cl"><span class="gi">+                       continue;
</span></span></span><span class="line"><span class="cl"><span class="gi">+               }
</span></span></span><span class="line"><span class="cl"><span class="gi">+               // TODO: Render this surface
</span></span></span><span class="line"><span class="cl"><span class="gi">+       }
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl">        wlr_output_swap_buffers(wlr_output, NULL, NULL);
</span></span></code></pre></div><p>The <code>wlr_compositor</code> struct has a member named <code>surfaces</code>, which is a list of
<code>wl_resource</code>s. A helper method is provided to produce a <code>wlr_surface</code> from its
corresponding <code>wl_resource</code>. The <code>wlr_surface_has_buffer</code> call is just to make
sure that the client has actually given us pixels to display on this surface.</p>
<p>wlroots might make you do the rendering yourself, but some tools <em>are</em> provided
to help you write compositors with simple rendering requirements:
<strong>wlr_renderer</strong>. We&rsquo;ve already touched on this a little bit, but now we&rsquo;re
going to use it for real. A little bit of OpenGL knowledge is required here. If
you&rsquo;re a complete novice with OpenGL<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, I can recommend <a href="https://learnopengl.com/">this
tutorial</a> to help you out. Since you&rsquo;re in a hurry,
we&rsquo;ll do a quick crash course on the concepts necessary to utilize wlr_renderer.
If you get lost, just skip to the next diff and treat it as magic incantations
that make your windows appear.</p>
<p>We have a pile of pixels, and we want to put it on the screen. We can do this
with a <strong>shader</strong>. If you&rsquo;re using wlr_renderer (and mcwayface will be), shaders
are provided for you. To use our shaders, we feed them a <strong>texture</strong> (the pile
of pixels) and a <strong>matrix</strong>. If we treat every pixel coordinate on our surface
as a vector from (0, 0); top left, to (1, 1); bottom right, our goal is to
produce a matrix that we can multiply a vector by to find the final coordinates
on-screen for the pixel to be drawn to. We must project pixel coordinates from
this 0-1 system to the coordinates of our desired rectangle on screen.</p>
<p>There&rsquo;s gotcha here, however: the coordinates on-screen <em>also</em> go from 0 to 1,
instead of, for example, 0-1920 and 0-1080. To project coordinates like
&ldquo;put my 640x480 window at coordinates 100,100&rdquo; to screen coordinates, we use an
<strong>orthographic projection matrix</strong>. I know that sounds scary, but don&rsquo;t worry -
wlroots does all of the work for you. Your <code>wlr_output</code> already has a suitable
matrix called <code>transform_matrix</code>, which incorporates into it the current
resolution, scale factor, and rotation of your screen.</p>
<p>Okay, hopefully you&rsquo;re still with me. This sounds a bit complicated, but the
manifestation of all of this nonsense is fairly straightforward. wlroots
provides some tools to make it easy for you. First, we have to prepare a
<code>wlr_box</code> that represents (in output coordinates) where we want the surface to
show up.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        struct wl_resource *_surface;
</span></span><span class="line"><span class="cl">        wl_resource_for_each(_surface, &amp;server-&gt;compositor-&gt;surfaces) {
</span></span><span class="line"><span class="cl">                struct wlr_surface *surface = wlr_surface_from_resource(_surface);
</span></span><span class="line"><span class="cl">                if (!wlr_surface_has_buffer(surface)) {
</span></span><span class="line"><span class="cl">                        continue;
</span></span><span class="line"><span class="cl">                }
</span></span><span class="line"><span class="cl"><span class="gd">-               // TODO: Render this surface
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+               struct wlr_box render_box = {
</span></span></span><span class="line"><span class="cl"><span class="gi">+                       .x = 20, .y = 20,
</span></span></span><span class="line"><span class="cl"><span class="gi">+                       .width = surface-&gt;current-&gt;width,
</span></span></span><span class="line"><span class="cl"><span class="gi">+                       .height = surface-&gt;current-&gt;height
</span></span></span><span class="line"><span class="cl"><span class="gi">+               };
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        }
</span></span></code></pre></div><p>Now, here&rsquo;s the great part: all of that fancy math I was just talking about can
be done with a single helper function provided by wlroots: <code>wlr_matrix_project_box</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        struct wl_resource *_surface;
</span></span><span class="line"><span class="cl">        wl_resource_for_each(_surface, &amp;server-&gt;compositor-&gt;surfaces) {
</span></span><span class="line"><span class="cl">                struct wlr_surface *surface = wlr_surface_from_resource(_surface);
</span></span><span class="line"><span class="cl">                if (!wlr_surface_has_buffer(surface)) {
</span></span><span class="line"><span class="cl">                        continue;
</span></span><span class="line"><span class="cl">                }
</span></span><span class="line"><span class="cl">                struct wlr_box render_box = {
</span></span><span class="line"><span class="cl">                        .x = 20, .y = 20,
</span></span><span class="line"><span class="cl">                        .width = surface-&gt;current-&gt;width,
</span></span><span class="line"><span class="cl">                        .height = surface-&gt;current-&gt;height
</span></span><span class="line"><span class="cl">                };
</span></span><span class="line"><span class="cl"><span class="gi">+               float matrix[16];
</span></span></span><span class="line"><span class="cl"><span class="gi">+               wlr_matrix_project_box(&amp;matrix, &amp;render_box,
</span></span></span><span class="line"><span class="cl"><span class="gi">+                               surface-&gt;current-&gt;transform,
</span></span></span><span class="line"><span class="cl"><span class="gi">+                               0, &amp;wlr_output-&gt;transform_matrix);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        }
</span></span></code></pre></div><p>This takes a reference to a <code>float[16]</code> to store the output matrix in, a box you
want to project, some other stuff that isn&rsquo;t important right now, and the
projection you want to use - in this case, we just use the one provided by
<code>wlr_output</code>.</p>
<p>The reason we make you understand and perform these steps is because it&rsquo;s
entirely possible that you&rsquo;ll want to do them differently in the future. This
is only the simplest case, but remember that wlroots is designed for <em>every</em>
case. Now that we&rsquo;ve obtained this matrix, we can finally render the surface:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        struct wl_resource *_surface;
</span></span><span class="line"><span class="cl">        wl_resource_for_each(_surface, &amp;server-&gt;compositor-&gt;surfaces) {
</span></span><span class="line"><span class="cl">                struct wlr_surface *surface = wlr_surface_from_resource(_surface);
</span></span><span class="line"><span class="cl">                if (!wlr_surface_has_buffer(surface)) {
</span></span><span class="line"><span class="cl">                        continue;
</span></span><span class="line"><span class="cl">                }
</span></span><span class="line"><span class="cl">                struct wlr_box render_box = {
</span></span><span class="line"><span class="cl">                        .x = 20, .y = 20,
</span></span><span class="line"><span class="cl">                        .width = surface-&gt;current-&gt;width,
</span></span><span class="line"><span class="cl">                        .height = surface-&gt;current-&gt;height
</span></span><span class="line"><span class="cl">                };
</span></span><span class="line"><span class="cl">                float matrix[16];
</span></span><span class="line"><span class="cl">                wlr_matrix_project_box(&amp;matrix, &amp;render_box,
</span></span><span class="line"><span class="cl">                                surface-&gt;current-&gt;transform,
</span></span><span class="line"><span class="cl">                                0, &amp;wlr_output-&gt;transform_matrix);
</span></span><span class="line"><span class="cl"><span class="gi">+               wlr_render_with_matrix(renderer, surface-&gt;texture, &amp;matrix, 1.0f);
</span></span></span><span class="line"><span class="cl"><span class="gi">+               wlr_surface_send_frame_done(surface, &amp;now);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        }
</span></span></code></pre></div><p>We also throw in a <code>wlr_surface_send_frame_done</code> for good measure, which lets
the client know that we&rsquo;re done with it so they can send another frame. We&rsquo;re
done! Run mcwayface now, then the following commands:</p>
<pre tabindex="0"><code>$ WAYLAND_DISPLAY=wayland-1 weston-simple-shm &amp;
$ WAYLAND_DISPLAY=wayland-1 gnome-terminal -- htop
</code></pre><p>To see the following beautiful image:</p>
<p><img src="https://sr.ht/y_qN.png" alt=""></p>
<p>Run any other clients you like - many of them will work!</p>
<p>We used a bit of a hack today by simply rendering all of the surfaces the
<code>wl_compositor</code> knew of. In practice, we&rsquo;re going to need to extend our
xdg_shell support (and add some other shells, too) to do this properly. We&rsquo;ll
cover this in the next article.</p>
<p>Before you go, a quick note: after this commit, I reorganized things a bit -
we&rsquo;re going to outgrow this single-file approach pretty quickly soon. Check out
That commit <a href="https://github.com/SirCmpwn/mcwayface/commit/e800facb371c42d844b858af5ced456ffd6e9d08">here</a>.</p>
<p>See you next time!</p>
<p>
    Previous &mdash;
    <a href="https://drewdevault.com/2018/02/22/Writing-a-wayland-compositor-part-2.html">
        Part 2: Rigging up the server
    </a>
</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If you&rsquo;re not a novice, we&rsquo;ll cover more complex rendering scenarios in the future. But the short of it is that you can implement your own <code>wlr_renderer</code> that wlr_compositor can use to bind textures to the GPU and then you can do whatever you want.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate></item><item><title>The path to sustainably working on FOSS full-time</title><link>https://drewdevault.com/2018/02/24/The-road-to-sustainable-FOSS.html</link><description><![CDATA[<p>This is an article I didn&rsquo;t think I&rsquo;d be writing any time soon. I&rsquo;ve aspired to
work full-time on my free and open source software projects for a long time now,
but I have never expected that it could work. However, as of this week, I
finally have enough recurring donation revenue to break even on FOSS, and I&rsquo;ve
started to put the extra cash away. I needed to set the next donation goal and
ran the numbers to figure out what it takes to work on FOSS full-time.</p>
<p>Let me start with some context. I like to say &ldquo;one-time donations buy pizza,
but recurring donations buy sustainable FOSS development&rdquo;. One-time donations
provide no financial security, so to date, (almost) all of my FOSS work has been
done in my spare time, and I&rsquo;ve had to spend most of my time working on
proprietary software to make a living. This is the case for many other free
software advocates as well. Short of large grants on the scale of several
tens of thousands of dollars, if you want to get your rent paid and put food on
the table you need to be able to rely on something consistent.</p>
<p>Some projects (e.g. Docker, Gitlab) have a compelling product in the market and
can build a company around their open source product. Some projects fulfill a
tangible need for some other business (such as writing software they depend on),
and for these projects large corporate sponsorships are often possible. However,
other kinds of projects (including most of my own) often have to rely on their
users for donations, and this has traditionally been a pretty dubious prospect.
In August of 2017, I was making $0 per month in recurring donations to
<a href="https://drewdevault.com/donate">fosspay</a>, down from an all-time peak of $20 per
month. When I was researching the possibility of starting a Patreon campaign,
the norm was less than $50/month even for the most successful open source
campaigns. As you can imagine, I was somewhat pessimistic.</p>
<p>To my happy surprise, recurring donations to open source projects have taken
off, both for me and many others. It&rsquo;s amazing. After years of failing to earn a
substantial income from open source, as of today I&rsquo;m receiving $547.74 per month
from three donation platforms (<a href="https://drewdevault.com/donate">fosspay</a>,
<a href="https://liberapay.com/SirCmpwn">LiberaPay</a>, and
<a href="https://patreon.com/SirCmpwn">Patreon</a>). What&rsquo;s amazing is that because the
income comes from from several platforms and is distributed across over 80
donators, I can feel confident in the security of this model. There are no
whales whose donations I have to live in fear of losing. There is no single
platform that I have to worry about going under or dramatically <a href="https://blog.patreon.com/not-rolling-out-fees-change/">changing their
fee structure</a>. This is
unprecedented - we&rsquo;re truly seeing the age of user-supported FOSS begin.</p>
<p>I want to provide some transparency on how I set my goals and where the money
goes. You might be surprised to have heard me say that I&rsquo;m only &ldquo;breaking even&rdquo;
on open source at $500/month! Many projects can run on a leaner budget, but
because I maintain so many different projects, I have different infrastructure
requirements. This mainly includes domains and servers for CI, project hosting,
releases, etc. At my scale, it&rsquo;s most cost-effective for me to self-host my own
dedicated servers in a local datacenter here in Philadelphia. This costs me
$380/month at the moment for 5U including power and network. I&rsquo;m not done moving
my legacy infrastructure into the new datacenter, though, so I&rsquo;m still paying
for some virtual private servers. As I migrate these, I will be reinvesting the
money saved into upgrading the new infrastructure.</p>
<p>The next question is where to go from here. I have set my full-time goal at
$6,000 per month, which works out to $72,000 per year pre-tax,
pre-infrastructure expenses. This number is a lofty goal, and one that I expect
won&rsquo;t be met for a long time, if at all. This number is based on several
factors: cost of living, financial security, and taxes. The number is a
significant decrease from what I earn today, but it is enough to meet each of
these criteria. Let&rsquo;s break it down.</p>
<p>Right now, I live in a pretty nice apartment in center city Philadelphia, which
costs me about $1700 per month. There are cheaper areas, but I make a
comfortable salary at my current job, which allows me to buy a nicer place. If
working on FOSS full-time appears viable, I will move to a cheaper location when
my lease is up and adjust the goal accordingly (I will probably move to a
cheaper location when my lease is up regardless, actually). Because I&rsquo;m locked
into my lease (among other reasons), I did not factor major lifestyle changes
like moving to a cheaper location into the goal. Other costs of living, such as
food and necessities, work out to about $1000 per month.</p>
<p>The other concern is financial security. I am lucky to live a comfortable life
today, but that is a result of hard lessons learned and has not always been the
case. I cannot focus on FOSS if I&rsquo;m only earning just enough to cover my
expenses. Any major change in my life circumstances, such as a medical
emergency, natural disaster, or even something as benign as my computer breaking
down, would be a serious problem. Therefore, for me to consider working
full-time on anything, the earnings have to allow me to save money. To this end,
my earnings floor is at least 1.5x my expenditures. Some people think a more
liberal ratio is fine, but I&rsquo;m a bit more conservative - I used to really
struggle to make ends meet. This raises the total to around $4000 per month.</p>
<p>Add to this infrastructure costs we already talked about, and the total becomes
$4500 per month. Now we have to consider tax. If we look up the current <a href="https://en.wikipedia.org/wiki/Tax_bracket#2018_tax_brackets_under_current_law">tax
brackets in the United
States</a>
and do some guesswork, we can estimate that I&rsquo;ll land in the 22% bracket under
this model. If I need my take-home to be $4500, we can divide that by 78% and
arrive at the total: $5769 per month<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Round it up to $6000 and this is our
goal.</p>
<p>These numbers are pretty high. I understand many people, including some of those
who donate to me, are much less fortunate than I. My lifestyle is a reflection
of my assumption that the open source donation model does not provide a
sustainable source of income. Based on this, I&rsquo;ve focused my career on paid
proprietary software development, which pays very competitively in the United
States. The privileges afforded by this have shaped my costs of living. Rather
than make up a number smaller than my actual expenditures, I prefer to be honest
with you about this.</p>
<p>This doesn&rsquo;t necessarily have to remain the case forever. As my income from
donations increase, utilizing them as a primary source of income becomes more
feasible, and I am prepared to reorient my life with this in mind. You can
expect my donation goal to <em>decrease</em> as the number of donations <em>increases</em>.
This will probably take a long time, on the scale of years. My housing situation
and costs of living in Philadelphia will change during this time - I might not
stay in Philadelphia, I might have to change jobs, etc. It&rsquo;s difficult to set
a more optimistic goal today that will prove correct when its met. For that
reason, my goal is adjusted with respect to my current conditions, not the
ideal.</p>
<p>So that&rsquo;s how it shakes out! I&rsquo;m glad we can finally have this conversation, and
I&rsquo;m incredibly thankful for your support. Thank you for everything, and I&rsquo;m
looking forward to making even more cool stuff for you in the future.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Correction: that&rsquo;s not how taxes work, but the simplified version gives us a more conservative number - which is a good thing when your livelihood is at stake.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate></item><item><title>Writing a Wayland Compositor, Part 2: Rigging up the server</title><link>https://drewdevault.com/2018/02/22/Writing-a-wayland-compositor-part-2.html</link><description><![CDATA[<p>This is the second in a series of articles on the subject of writing a Wayland
compositor from scratch using <a href="https://github.com/swaywm/wlroots">wlroots</a>.
Check out <a href="https://drewdevault.com/2018/02/17/Writing-a-Wayland-compositor-1.html">the first article</a>
if you haven&rsquo;t already. Last time, we ended up with an application which fired
up a wlroots backend, enumerated output devices, and drew some pretty colors on
the screen. Today, we&rsquo;re going to start accepting Wayland client connections,
though we aren&rsquo;t going to be doing much with them yet.</p>
<p>The commit that this article dissects is
<a href="https://github.com/SirCmpwn/mcwayland/commit/b45c651">b45c651</a>.</p>
<p>A quick aside on the nature of these blog posts: it&rsquo;s going to take <em>a lot</em> of
these articles to flesh out our compositor. I&rsquo;m going to be publishing these
more frequently than usual, probably 1-2 per week, and continue posting my usual
articles at the typical rate. Okay? Cool.</p>
<p>So we&rsquo;ve started up the backend and we&rsquo;re rendering something interesting, but
we still aren&rsquo;t running a Wayland server &ndash; Wayland clients aren&rsquo;t connecting to
our application. Adding this is actually quite easy:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gu">@@ -113,12 +113,18 @@ int main(int argc, char **argv) {
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>        server.new_output.notify = new_output_notify;
</span></span><span class="line"><span class="cl">        wl_signal_add(&amp;server.backend-&gt;events.new_output, &amp;server.new_output);
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="gi">+       const char *socket = wl_display_add_socket_auto(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       assert(socket);
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        if (!wlr_backend_start(server.backend)) {
</span></span><span class="line"><span class="cl">                fprintf(stderr, &#34;Failed to start backend\n&#34;);
</span></span><span class="line"><span class="cl">                wl_display_destroy(server.wl_display);
</span></span><span class="line"><span class="cl">                return 1;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="gi">+       printf(&#34;Running compositor on wayland display &#39;%s&#39;\n&#34;, socket);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       setenv(&#34;WAYLAND_DISPLAY&#34;, socket, true);
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        wl_display_run(server.wl_display);
</span></span><span class="line"><span class="cl">        wl_display_destroy(server.wl_display);
</span></span><span class="line"><span class="cl">        return 0;
</span></span></code></pre></div><p>That&rsquo;s it! If you run McWayface again, it&rsquo;ll print something like this:</p>
<pre tabindex="0"><code>Running compositor on wayland display &#39;wayland-1&#39;
</code></pre><p><a href="https://cgit.freedesktop.org/wayland/weston/">Weston</a>, the Wayland reference
compositor, includes a number of simple reference clients. We can use
<code>weston-info</code> to connect to our server and list the <strong>globals</strong>:</p>
<pre tabindex="0"><code>$ WAYLAND_DISPLAY=wayland-1 weston-info
interface: &#39;wl_drm&#39;, version: 2, name: 1
</code></pre><p>If you recall from my <a href="https://drewdevault.com/2017/06/10/Introduction-to-Wayland.html">Introduction to
Wayland</a>, the Wayland server exports a
list of <strong>globals</strong> to clients via the Wayland registry. These globals provide
interfaces the client can utilize to interact with the server. We get <code>wl_drm</code>
for free with wlroots, but we have not actually wired up anything useful yet.
Wlroots provides many &ldquo;types&rdquo;, of which the majority are implementations of
Wayland global interfaces like this.</p>
<p>Some of the wlroots implementations require some rigging from you, but several
of them just take care of themselves. Rigging these up is easy:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        printf(&#34;Running compositor on wayland display &#39;%s&#39;\n&#34;, socket);
</span></span><span class="line"><span class="cl">        setenv(&#34;WAYLAND_DISPLAY&#34;, socket, true);
</span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wl_display_init_shm(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_gamma_control_manager_create(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_screenshooter_create(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_primary_selection_device_manager_create(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_idle_create(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> 
</span></span><span class="line"><span class="cl">        wl_display_run(server.wl_display);
</span></span><span class="line"><span class="cl">        wl_display_destroy(server.wl_display);
</span></span></code></pre></div><p>Note that some of these interfaces are not necessarily ones that you typically
would want to expose to all Wayland clients - screenshooter, for example, is
something that should be secured. We&rsquo;ll get to security in a later article. For
now, if we run <code>weston-info</code> again, we&rsquo;ll see a few more globals have appeared:</p>
<pre tabindex="0"><code>$ WAYLAND_DISPLAY=wayland-1 weston-info
interface: &#39;wl_shm&#39;, version: 1, name: 3
	formats: XRGB8888 ARGB8888
interface: &#39;wl_drm&#39;, version: 2, name: 1
interface: &#39;gamma_control_manager&#39;, version: 1, name: 2
interface: &#39;orbital_screenshooter&#39;, version: 1, name: 3
interface: &#39;gtk_primary_selection_device_manager&#39;, version: 1, name: 4
interface: &#39;org_kde_kwin_idle&#39;, version: 1, name: 5
</code></pre><p>You&rsquo;ll find that wlroots implements a variety of protocols from a variety of
sources - here we see protocols from Orbital, GTK, and KDE represented. Wlroots
includes an example client for the orbital screenshooter - we can use it now to
take a screenshot of our compositor:</p>
<pre tabindex="0"><code>$ WAYLAND_DISPLAY=wayland-1 ./examples/screenshot
cannot set buffer size
</code></pre><p>Ah, this is a problem - you may have noticed that we don&rsquo;t have any wl_output
globals, which the screenshooter client relies on to figure out the resolution
of the screenshot buffer. We can add these, too:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gu">@@ -95,6 +99,8 @@ static void new_output_notify(struct wl_listener *listener, void *data) {
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>        wl_signal_add(&amp;wlr_output-&gt;events.destroy, &amp;output-&gt;destroy);
</span></span><span class="line"><span class="cl">        output-&gt;frame.notify = output_frame_notify;
</span></span><span class="line"><span class="cl">        wl_signal_add(&amp;wlr_output-&gt;events.frame, &amp;output-&gt;frame);
</span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_output_create_global(wlr_output);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> }
</span></span></code></pre></div><p>Running <code>weston-info</code> again will give us some info about our outputs now:</p>
<pre tabindex="0"><code>$ WAYLAND_DISPLAY=wayland-1 weston-info
interface: &#39;wl_drm&#39;, version: 2, name: 1
interface: &#39;wl_output&#39;, version: 3, name: 2
	x: 0, y: 0, scale: 1,
	physical_width: 0 mm, physical_height: 0 mm,
	make: &#39;wayland&#39;, model: &#39;wayland&#39;,
	subpixel_orientation: unknown, output_transform: normal,
	mode:
		width: 952 px, height: 521 px, refresh: 0.000 Hz,
		flags: current
interface: &#39;wl_shm&#39;, version: 1, name: 3
	formats: XRGB8888 ARGB8888
interface: &#39;gamma_control_manager&#39;, version: 1, name: 4
interface: &#39;orbital_screenshooter&#39;, version: 1, name: 5
interface: &#39;gtk_primary_selection_device_manager&#39;, version: 1, name: 6
interface: &#39;org_kde_kwin_idle&#39;, version: 1, name: 7
</code></pre><p>Now we can take that screenshot! Give it a shot (heh)!</p>
<p>We&rsquo;re getting close to the good stuff now. The next article is going to
introduce the concept of <strong>surfaces</strong>, and we will use them to render our first
window. If you had any trouble with this article, please reach out to me at
<a href="mailto:sir@cmpwn.com">sir@cmpwn.com</a> or to the wlroots team at
<a href="http://webchat.freenode.net/?channels=sway-devel&amp;uio=d4">#sway-devel</a>.</p>
<p style="float: right">
    Next &mdash;
    <a href="https://drewdevault.com/2018/02/28/Writing-a-wayland-compositor-part-3.html">
        Part 3: Rendering a window
    </a>
</p>
<p>
    Previous &mdash;
    <a href="https://drewdevault.com/2018/02/17/Writing-a-Wayland-compositor-1.html">
        Part 1: Hello wlroots
    </a>
</p>]]></description><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate></item><item><title>Writing a Wayland Compositor, Part 1: Hello wlroots</title><link>https://drewdevault.com/2018/02/17/Writing-a-Wayland-compositor-1.html</link><description><![CDATA[<p>This is the first in a series of <em>many</em> articles I&rsquo;m writing on the subject of
building a functional Wayland compositor from scratch. As you may know, I am the
lead maintainer of <a href="https://github.com/swaywm/sway">sway</a>, a reasonably popular
Wayland compositor. Along with many other talented developers, we&rsquo;ve been
working on <a href="https://github.com/swaywm/wlroots">wlroots</a> over the past few
months. This is a powerful tool for creating new Wayland compositors, but it is
very dense and difficult to understand. Do not despair! The intention of these
articles is to make you understand and feel comfortable using it.</p>
<p>Before we dive in, a quick note: the wlroots team is starting a crowdfunding
campaign today to fund travel for each of our core contributors to meet in
person and work for two weeks on a hackathon. Please consider contributing to
<a href="https://www.indiegogo.com/projects/sway-hackathon-software/x/1059863">the campaign</a>!</p>
<p>You <strong>must</strong> read and comprehend my earlier article, <a href="https://drewdevault.com/2017/06/10/Introduction-to-Wayland.html">An introduction to
Wayland</a>, before attempting to
understand this series of blog posts, as I will be relying on concepts and
terminology introduced there to speed things up. Some background in OpenGL is
helpful, but not required. A good understanding of C is mandatory. If you have
any questions about any of the articles in this series, please reach out to me
directly via <a href="mailto:sir@cmpwn.com">sir@cmpwn.com</a> or to the wlroots team at
<a href="http://webchat.freenode.net/?channels=sway-devel&amp;uio=d4">#sway-devel on irc.freenode.net</a>.</p>
<p>During this series of articles, the compositor we&rsquo;re building will live on
GitHub: <a href="https://github.com/SirCmpwn/mcwayface">Wayland McWayface</a>. Each article
in this series will be presented as a breakdown of a single commit between zero
and a fully functional Wayland compositor. The commit for this article is
<a href="https://github.com/SirCmpwn/mcwayland/commit/f89092e">f89092e</a>.
I&rsquo;m only going to explain the important parts - I suggest you review
the entire commit separately.</p>
<p>Let&rsquo;s get started. First, I&rsquo;m going to define a struct for holding our
compositor&rsquo;s state:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gi">+struct mcw_server {
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct wl_display *wl_display;
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct wl_event_loop *wl_event_loop;
</span></span></span><span class="line"><span class="cl"><span class="gi">+};
</span></span></span></code></pre></div><p>Note: mcw is short for McWayface. We&rsquo;ll be using this acronym throughout the
article series. We&rsquo;ll set one of these aside and initialize the Wayland display
for it<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"> int main(int argc, char **argv) {
</span></span><span class="line"><span class="cl"><span class="gi">+       struct mcw_server server;
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       server.wl_display = wl_display_create();
</span></span></span><span class="line"><span class="cl"><span class="gi">+       assert(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       server.wl_event_loop = wl_display_get_event_loop(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       assert(server.wl_event_loop);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        return 0;
</span></span><span class="line"><span class="cl"> }
</span></span></code></pre></div><p>The Wayland display gives us a number of things, but for now all we care about
is the event loop. This event loop is deeply integrated into wlroots, and is
used for things like dispatching signals across the application, being notified
when data is available on various file descriptors, and so on.</p>
<p>Next, we need to create the backend:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"> struct mcw_server {
</span></span><span class="line"><span class="cl">        struct wl_display *wl_display;
</span></span><span class="line"><span class="cl">        struct wl_event_loop *wl_event_loop;
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="gi">+       struct wlr_backend *backend;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> };
</span></span></code></pre></div><p>The <strong>backend</strong> is our first wlroots concept. The backend is responsible for
abstracting the low level <em>input</em> and <em>output</em> implementations from you. Each
backend can generate zero or more input devices (such as mice, keyboards, etc)
and zero or more output devices (such as monitors on your desk). Backends have
nothing to do with Wayland - their purpose is to help you with the <em>other</em> APIs
you need to use as a Wayland compositor. There are various backends with various
purposes:</p>
<ul>
<li>The <strong>drm</strong> backend utilizes the Linux DRM subsystem to render directly to
your physical displays.</li>
<li>The <strong>libinput</strong> backend utilizes libinput to enumerate and control physical
input devices.</li>
<li>The <strong>wayland</strong> backend creates &ldquo;outputs&rdquo; as windows on another running
Wayland compositors, allowing you to nest compositors. Useful for debugging.</li>
<li>The <strong>x11</strong> backend is similar to the Wayland backend, but opens an x11 window
on an x11 server rather than a Wayland window on a Wayland server.</li>
</ul>
<p>Another important backend is the <strong>multi</strong> backend, which allows you to
initialize several backends at once and aggregate their input and output
devices. This is necessary, for example, to utilize both drm and libinput
simultaneously.</p>
<p>wlroots provides a helper function for automatically choosing the most
appropriate backend based on the user&rsquo;s environment:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        server.wl_event_loop = wl_display_get_event_loop(server.wl_display);
</span></span><span class="line"><span class="cl">        assert(server.wl_event_loop);
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="gi">+       server.backend = wlr_backend_autocreate(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       assert(server.backend);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        return 0;
</span></span><span class="line"><span class="cl"> }
</span></span></code></pre></div><p>I would generally suggest using either the Wayland or X11 backends during
development, especially before we have a way of exiting the compositor. If you
call <code>wlr_backend_autocreate</code> from a running Wayland or X11 session, the
respective backends will be automatically chosen.</p>
<p>We can now start the backend and enter the Wayland event loop:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gi">+       if (!wlr_backend_start(server.backend)) {
</span></span></span><span class="line"><span class="cl"><span class="gi">+               fprintf(stderr, &#34;Failed to start backend\n&#34;);
</span></span></span><span class="line"><span class="cl"><span class="gi">+               wl_display_destroy(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+               return 1;
</span></span></span><span class="line"><span class="cl"><span class="gi">+       }
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wl_display_run(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wl_display_destroy(server.wl_display);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>        return 0;
</span></span></code></pre></div><p>If you run your compositor at this point, you should see the backend start up
and&hellip; do nothing. It&rsquo;ll open a window if you run from a running Wayland or X11
server. If you run it on DRM, it&rsquo;ll probably do very little and you won&rsquo;t even
be able to switch to another TTY to kill it.</p>
<p>In order to render something, we need to know about the outputs we can render
on. The backend provides a <strong>wl_signal</strong> that notifies us when it gets a new
output. This will happen on startup and as any outputs are hotplugged at
runtime.</p>
<p>Let&rsquo;s add this to our server struct:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"> struct mcw_server {
</span></span><span class="line"><span class="cl">        struct wl_display *wl_display;
</span></span><span class="line"><span class="cl">        struct wl_event_loop *wl_event_loop;
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">        struct wlr_backend *backend;
</span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct wl_listener new_output;
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct wl_list outputs; // mcw_output::link
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> };
</span></span></code></pre></div><p>This adds a <code>wl_listeners</code> which is signalled when new outputs are added. We
also add a <code>wl_list</code> (which is just a linked list provided by libwayland-server)
which we&rsquo;ll later store some state in. To be notified, we must use
<code>wl_signal_add</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        assert(server.backend);
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="gi">+       wl_list_init(&amp;server.outputs);
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       server.new_output.notify = new_output_notify;
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wl_signal_add(&amp;server.backend-&gt;events.new_output, &amp;server.new_output);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> 
</span></span><span class="line"><span class="cl">        if (!wlr_backend_start(server.backend)) {
</span></span></code></pre></div><p>We specify here the function to be notified, <code>new_output_notify</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gi">+static void new_output_notify(struct wl_listener *listener, void *data) {
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct mcw_server *server = wl_container_of(
</span></span></span><span class="line"><span class="cl"><span class="gi">+                       listener, server, new_output);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct wlr_output *wlr_output = data;
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       if (!wl_list_empty(&amp;wlr_output-&gt;modes)) {
</span></span></span><span class="line"><span class="cl"><span class="gi">+               struct wlr_output_mode *mode =
</span></span></span><span class="line"><span class="cl"><span class="gi">+                       wl_container_of(wlr_output-&gt;modes.prev, mode, link);
</span></span></span><span class="line"><span class="cl"><span class="gi">+               wlr_output_set_mode(wlr_output, mode);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       }
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct mcw_output *output = calloc(1, sizeof(struct mcw_output));
</span></span></span><span class="line"><span class="cl"><span class="gi">+       clock_gettime(CLOCK_MONOTONIC, &amp;output-&gt;last_frame);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       output-&gt;server = server;
</span></span></span><span class="line"><span class="cl"><span class="gi">+       output-&gt;wlr_output = wlr_output;
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wl_list_insert(&amp;server-&gt;outputs, &amp;output-&gt;link);
</span></span></span><span class="line"><span class="cl"><span class="gi">+}
</span></span></span></code></pre></div><p>This is a little bit complicated! This function has several roles when dealing
with the incoming <code>wlr_output</code>. When the signal is raised, a pointer to the
listener that was signaled is passed in, as well as the <code>wlr_output</code> which was
created. <code>wl_container_of</code> uses some <code>offsetof</code>-based magic to get the
<code>mcw_server</code> reference from the listener pointer, and we cast <code>data</code> to the
actual type, <code>wlr_output</code>.</p>
<p>The next thing we have to do is set the <strong>output mode</strong>. Some backends (notably
x11 and Wayland) do not support modes, but they are necessary for DRM. Output
modes specify a size and refresh rate supported by the output, such as
<code>1920x1080@60Hz</code>. The body of this if statement just chooses the last one (which
is usually the highest resolution and refresh rate) and applies it to the output
with <code>wlr_output_set_mode</code>. We <em>must</em> set the output mode in order to render to
it.</p>
<p>Then, we set up some state for us to keep track of this output with in our
compositor. I added this struct definition at the top of the file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gi">+struct mcw_output {
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct wlr_output *wlr_output;
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct mcw_server *server;
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct timespec last_frame;
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct wl_list link;
</span></span></span><span class="line"><span class="cl"><span class="gi">+};
</span></span></span></code></pre></div><p>This will be the structure we use to store any state we have for this output
that is specific to our compositor&rsquo;s needs. We include a reference to the
<code>wlr_output</code>, a reference to the <code>mcw_server</code> that owns this output, and the
time of the last frame, which will be useful later. We also set aside a
<code>wl_list</code>, which is used by libwayland for linked lists.</p>
<p>Finally, we add this output to the server&rsquo;s list of outputs.</p>
<p>We could use this now, but it would leak memory. We also need to handle output
<em>removal</em>, with a signal provided by wlr_output. We add the listener to the
mcw_output struct:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"> struct mcw_output {
</span></span><span class="line"><span class="cl">        struct wlr_output *wlr_output;
</span></span><span class="line"><span class="cl">        struct mcw_server *server;
</span></span><span class="line"><span class="cl">        struct timespec last_frame;
</span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct wl_listener destroy;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> 
</span></span><span class="line"><span class="cl">        struct wl_list link;
</span></span><span class="line"><span class="cl"> };
</span></span></code></pre></div><p>Then we hook it up when the output is added:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">         wl_list_insert(&amp;server-&gt;outputs, &amp;output-&gt;link);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gi">+        output-&gt;destroy.notify = output_destroy_notify;
</span></span></span><span class="line"><span class="cl"><span class="gi">+        wl_signal_add(&amp;wlr_output-&gt;events.destroy, &amp;output-&gt;destroy);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> }
</span></span></code></pre></div><p>This will call our output_destroy_notify function to handle cleanup when the
output is unplugged or otherwise removed from wlroots. Our handler looks like
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gi">+static void output_destroy_notify(struct wl_listener *listener, void *data) {
</span></span></span><span class="line"><span class="cl"><span class="gi">+        struct mcw_output *output = wl_container_of(listener, output, destroy);
</span></span></span><span class="line"><span class="cl"><span class="gi">+        wl_list_remove(&amp;output-&gt;link);
</span></span></span><span class="line"><span class="cl"><span class="gi">+        wl_list_remove(&amp;output-&gt;destroy.link);
</span></span></span><span class="line"><span class="cl"><span class="gi">+        wl_list_remove(&amp;output-&gt;frame.link);
</span></span></span><span class="line"><span class="cl"><span class="gi">+        free(output);
</span></span></span><span class="line"><span class="cl"><span class="gi">+}
</span></span></span></code></pre></div><p>This one should be pretty self-explanatory.</p>
<p>So, we now have a reference to the output. However, we are still not rendering
anything - if you run the compositor again you&rsquo;ll notice the same behavior. In
order to render things, we have to listen for the <strong>frame signal</strong>. Depending on
the selected mode, the output can only receive new frames at a certain rate. We
keep track of this for you in wlroots, and emit the frame signal when it&rsquo;s time
to draw a new frame.</p>
<p>Let&rsquo;s add a listener to the <code>mcw_output</code> struct for this purpose:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"> struct mcw_output {
</span></span><span class="line"><span class="cl">        struct wlr_output *wlr_output;
</span></span><span class="line"><span class="cl">        struct mcw_server *server;
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">        struct wl_listener destroy;
</span></span><span class="line"><span class="cl"><span class="gi">+       struct wl_listener frame;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> 
</span></span><span class="line"><span class="cl">        struct wl_list link;
</span></span><span class="line"><span class="cl"> };
</span></span></code></pre></div><p>We can then extend <code>new_output_notify</code> to register the listener to the frame
signal:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">        output-&gt;destroy.notify = output_destroy_notify;
</span></span><span class="line"><span class="cl">        wl_signal_add(&amp;wlr_output-&gt;events.destroy, &amp;output-&gt;destroy);
</span></span><span class="line"><span class="cl"><span class="gi">+       output-&gt;frame.notify = output_frame_notify;
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wl_signal_add(&amp;wlr_output-&gt;events.frame, &amp;output-&gt;frame);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> }
</span></span></code></pre></div><p>Now, whenever an output is ready for a new frame, <code>output_frame_notify</code> will be
called. We still need to write this function, though. Let&rsquo;s start with the
basics:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gi">+static void output_frame_notify(struct wl_listener *listener, void *data) {
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct mcw_output *output = wl_container_of(listener, output, frame);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       struct wlr_output *wlr_output = data;
</span></span></span><span class="line"><span class="cl"><span class="gi">+}
</span></span></span></code></pre></div><p>In order to render anything here, we need to first obtain a wlr_renderer<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.
We can obtain one from the backend:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"> static void output_frame_notify(struct wl_listener *listener, void *data) {
</span></span><span class="line"><span class="cl">        struct mcw_output *output = wl_container_of(listener, output, frame);
</span></span><span class="line"><span class="cl">        struct wlr_output *wlr_output = data;
</span></span><span class="line"><span class="cl"><span class="gi">+       struct wlr_renderer *renderer = wlr_backend_get_renderer(
</span></span></span><span class="line"><span class="cl"><span class="gi">+                       wlr_output-&gt;backend);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>}
</span></span></code></pre></div><p>We can now take advantage of this renderer to draw something on the output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"> static void output_frame_notify(struct wl_listener *listener, void *data) {
</span></span><span class="line"><span class="cl">        struct mcw_output *output = wl_container_of(listener, output, frame);
</span></span><span class="line"><span class="cl">        struct wlr_output *wlr_output = data;
</span></span><span class="line"><span class="cl">        struct wlr_renderer *renderer = wlr_backend_get_renderer(
</span></span><span class="line"><span class="cl">                        wlr_output-&gt;backend);
</span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_output_make_current(wlr_output, NULL);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_renderer_begin(renderer, wlr_output);
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       float color[4] = {1.0, 0, 0, 1.0};
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_renderer_clear(renderer, color);
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_output_swap_buffers(wlr_output, NULL, NULL);
</span></span></span><span class="line"><span class="cl"><span class="gi">+       wlr_renderer_end(renderer);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> }
</span></span></code></pre></div><p>Calling <code>wlr_output_make_current</code> makes the output&rsquo;s OpenGL context &ldquo;current&rdquo;,
and from here you can use OpenGL calls to render to the output&rsquo;s buffer. We call
<code>wlr_renderer_begin</code> to configure some sane OpenGL defaults for us<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>At this point we can start rendering. We&rsquo;ll expand more on what you can
do with <code>wlr_renderer</code> later, but for now we&rsquo;ll be satisified with clearing the
output to a solid red color.</p>
<p>When we&rsquo;re done rendering, we call <code>wlr_output_swap_buffers</code> to swap the
output&rsquo;s front and back buffers, committing what we&rsquo;ve rendered to the actual
screen. We call <code>wlr_renderer_end</code> to clean up the OpenGL context and we&rsquo;re
done. Running our compositor now should show you a solid red screen!</p>
<hr>
<p>This concludes today&rsquo;s article. If you take a look at <a href="https://github.com/SirCmpwn/mcwayland/commit/f89092e">the
commit</a> that this article
describes, you&rsquo;ll see that I took it a little further with some code that clears
the display to a different color every frame. Feel free to experiment with
similar changes!</p>
<p>Over the next two articles, we&rsquo;ll finish wiring up the Wayland server and render
a Wayland client on screen. Please look forward to it!</p>
<p style="text-align: right">
    Next &mdash;
    <a href="https://drewdevault.com/2018/02/22/Writing-a-wayland-compositor-part-2.html">
        Part 2: Rigging up the server
    </a>
</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>It&rsquo;s entirely possible to utilize a wlroots backend to make applications which are not Wayland compositors. However, we require a wayland display anyway because the event loop is necessary for a lot of wlroots internals.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>wlr_renderer is optional. When you call wlr_output_make_current, the OpenGL context is made current and from here you can use any approach you prefer. wlr_renderer is provided to help compositors with simple rendering requirements.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Namely: the viewport and blend mode.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sat, 17 Feb 2018 00:00:00 +0000</pubDate></item><item><title>The last years</title><link>https://drewdevault.com/2018/02/13/The-last-years.html</link><description><![CDATA[<p><strong>August 14th, 2019</strong> PYONGYANG IN CHAOS AS PANDEMIC DECIMATES LEADERSHIP.
Sources within the country have reported that a fast-acting and deadly
infectious disease has suddenly infected the population of Pyongyang, the
capital city of North Korea, where most of the country&rsquo;s political elite live.
Unconfirmed reports suggest that a significant fraction of the leadership has
been affected.</p>
<p>The reclusive country has appealed for immediate aid from the international
community and it is reported that a group of medical experts from Seoul have
been permitted to enter via the Joint Security Area. Representatives from the
United States Center for Disease Control and the Chinese Center for Disease
Control and Prevention have also agreed to send representatives into the country
to help control the outbreak.</p>
<p>North Korea is known for it&rsquo;s unwillingness to cooperate with the international
community, particularly with respect to&hellip;</p>
<hr>
<p><strong>October 7th, 2019</strong> NEW APPROACH SHOWS PROMISING RESULTS FOR CYSTIC FIBROSIS.
Researchers announced yesterday that they were able to design a disease which
corrects the genome of patients suffering from the early stages of cystic
fibrosis. The study was shown to stop the progression of the genetic disease in
all subjects, and several subjects even showed signs of reversal. The FDA has
begun the process of evaluating the treatment for the general public.</p>
<p>Scientists involved explained the process involved using a modified version of
the common cold. They were able to reduce the negative effects of the virus, and
utilized it as a means of delivering a CRISPR-based payload that directly edited
the genome of members of the study. Scientists on the study suggest that in the
future, a similarly benign virus could be introduced to the general public to
eliminate the disease across the entire human population.</p>
<p>Some scientists are skeptical of the risks of this approach, but others spoke
favorably&hellip;</p>
<hr>
<p><strong>September 30th, 2019</strong> UNITED STATES CLAIMS RESPONSIBILITY FOR PYONGYANG
EPIDEMIC. In response to increasing alarm in the international community
regarding the origins of the artificial virus that took the life of Kim Jong-un
in August, the United States government has stepped forward to claim
responsibility. President Trump justified the move in a public statement,
claiming that the development of North Korean nuclear weapons capable of
striking American targets required such a response, and points to the ongoing
reunification efforts as evidence of a job well done.</p>
<p>Many leaders of the international community have issued statements condemning
the United State&rsquo;s attack, though some leaders have expressed relief that the
speculation regarding a rogue group of biologists was dispelled. Korean
officials have also issued statements condemning the attack, noting that several
presumably innocent family members of Pyongyang officials were killed, but
reaffirmed their commitment to supporting the population of the North and
continuing to peacefully unify the peninsula.</p>
<p>The relative ease of the reunification effort, long thought to be impossible, is
the result of the incredibly swift and precise nature of the American attack&hellip;</p>
<hr>
<p><strong>November 18th, 2020</strong> BRITAIN TARGET OF BIOLOGICAL ATTACK? Members of the
British public have come down with a highly contagious but largely benign form
of the measles, igniting panic among the population. The royal family and
members of the parliament have been quarantined and the country&rsquo;s biologists are
examining specimens of the disease for signs of human tampering. This is the
next in a series of scares, following the flu outbreak in Mexico this June.</p>
<p>We spoke with an expert in the field (who wished to remain anonymous) to
understand exactly how biologically engineered diseases are possible. Our expert
pointed to recent advances in genetic engineering, particularly CRISPR, which
have allowed research in this field to advance at an unprecedented pace for a
fraction of the costs previously associated with such research. For a layman&rsquo;s
explanation of what CRISPR is and how it works, see page 3.</p>
<p>Officials in Britain have issued a statement encouraging the public not to
worry, and stated that they had no reason to believe&hellip;</p>
<hr>
<p><strong>February 2nd, 2021</strong> LARGE GENETIC DATABASE LEAKED IN HACK. Personal genomics
company 23andMe released a statement today admitting that their database of
personal genetic records was leaked in a hack in May of last year. The company,
founded in 2006, collects genetic records from customers curious in their
ancestry and sends them a report of interesting information. The database is
said to contain names, email addresses, and samples of each customer&rsquo;s genome
dating back to the company&rsquo;s inception.</p>
<p>Estimates show that up to 3 million customers are affected, mostly from the
United States. The company has not revealed how much of each customer&rsquo;s genome
was disclosed, but experts agree that it would not have been practical for the
company to have stored their customer&rsquo;s full genomes, and caution affected
customers against panic. At this time, the identity of the hacker is unknown.</p>
<p>The company&rsquo;s president attributes the security breach to their reduced ability
to maintain a secure database due to their falling profits in recent years as
the general public grows more concious of&hellip;</p>
<hr>
<p><strong>June 28th, 2021</strong> OUTBREAK OF DEATHS AMONG &ldquo;JOHN ROBERTS&rdquo;. The United States
supreme court chief justice John Roberts was found dead in his home this
morning, the seventh &ldquo;John Roberts&rdquo; to die within the past 3 days. He was found
to have the disease which scientists have described as &ldquo;a new level of
sophistication&rdquo; in biological engineering. A substantial fraction of the entire
population is expected to have contracted this disease, but do not show any
symptoms. It was specifically designed to target a number of individuals named
John Roberts, and all other infected persons were unaffected.</p>
<p>It is believed that the genetic information used in this attack was sourced from
the recent leaks of genetic databases from major genetic testing companies, the
largest of which were the 23andMe and Ancestry.com leaks in February and April
respectively. Experts suggest that the data in the leak was not enough to
conclusively identify the justice, and the attackers simply targeted all genomes
matching that name.</p>
<p>The senate is expected to vote nearly unanimously on legislation this week which
outlaws the collection of genetic information by private companies, a move
largely considered&hellip;</p>
<hr>
<p><strong>August 28th, 2022</strong> STUDY SHOWS IMPOTENCE GROWING AT ALARMING RATE. A study
conducted by a Japanese team shows the birth rate around the world is decreasing
at a dramatically increased pace. According to the study, 42 of the 60 countries
included in the study showed a decrease in new pregnancies of 30% or more
compared to a similar time frame in 2012. They said the trend is expected to
continue, and possibly accelerate.</p>
<p>Japan is known for its research into fertility, as it has shown a steep decline
in births over the past&hellip;</p>
<hr>
<p><strong>October 1st, 2022</strong> HUMAN BIRTHS EXPECTED TO CEASE WITHIN ONE YEAR. We are sad
to report that biologists have confirmed claims issued last week by a radical
environmentalist group: a highly contagious disease engineered to bring about
impotence has infected most of the Earth&rsquo;s population. The group is a member of
the so-called &ldquo;Voluntary Extinction&rdquo; movement, which aims to drive the human
race extinct by ceasing human reproduction. Scientists suggest that this move is
highly unlikely to completely drive humanity extinct, but confirm that it&rsquo;s
likely that massive population losses are in our future.</p>
<p>Work is underway to determine which members of the population have escaped
exposure, and plan for the continuity of the species. Members of isolated
communities are asked to avoid contact with the outside world, and governments
are cracking down on travel to and from the more remote regions of their
countries. The CDC has reported no estimate on when a vaccine will be available
for the disease, but has confirmed that one must be developed before contact
with these communities is advisable.</p>
<p>The government of New Zealand announced this morning their intention to send
sterilized supply shipments to research teams in Antarctica, and Canada
announced that all travel&hellip;</p>
<hr>
<p>Inspired by this excellent (and scary) talk at DEFCON 25:
<a href="https://www.youtube.com/watch?v=HKQDSgBHPfY">John Sotos - Genetic Diseases to Guide Digital Hacks of the Human Genome</a></p>]]></description><pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate></item><item><title>Introduction to POSIX shell</title><link>https://drewdevault.com/2018/02/05/Introduction-to-POSIX-shell.html</link><description><![CDATA[<p>What the heck is the POSIX shell anyway? Well, the POSIX (the Portable Operating
System Interface) shell is the standard Unix shell - standard meaning it was
formally defined and shipped in a published standard. This makes shell scripts
written for it portable, something no other shell can lay claim to. The POSIX
shell is basically a formalized version of the venerable Bourne shell, and on
your system it lives at <code>/bin/sh</code>, unless you&rsquo;re one of the unlucky masses for
whom this is a symlink to bash.</p>
<h2 id="why-use-posix-shell">Why use POSIX shell?</h2>
<p>The &ldquo;Bourne Again shell&rdquo;, aka bash, is not standardized. Its grammar,
features, and behavior aren&rsquo;t formally written up anywhere, and only one
implementation of bash exists. Without a standard, bash is defined <em>by</em> its
implementation. POSIX shell, on the other hand, has many competing
implementations on many different operating systems - all of which are
compatible with each other because they conform to the standard.</p>
<p>Any shell that utilizes features specific to Bash are not portable, which means
you cannot take them with you to any other system. Many Linux-based systems do
not use Bash or GNU coreutils. Outside of Linux, pretty much everyone but Hurd
does <em>not</em> ship GNU tools, including bash<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. On any of these systems, scripts
using &ldquo;bashisms&rdquo; will not work.</p>
<p>This is bad if your users wish to utilize your software anywhere other than
GNU/Linux. If your build tooling utilizes bashisms, your software will not build
on anything but GNU/Linux. If you ship runtime scripts that use bashisms, your
software will not <em>run</em> on anything but GNU/Linux. The case for sticking to
POSIX shell in shipping software is compelling, but I argue that you should
stick to POSIX shell for your personal scripts, too. You might not care now, but
when you feel like flirting with other Unicies you&rsquo;ll thank me when all of your
scripts work.</p>
<p>One place where POSIX shell does <em>not</em> shine is for interactive use - a place
where I think bash sucks, too. Any shell you want to use for your day-to-day
command line work is okay in my book. I use fish. Use whatever you like
interactively, but stick to POSIX sh for your scripts.</p>
<h2 id="how-do-i-use-posix-shell">How do I use POSIX shell?</h2>
<p>At the top of your scripts, put <code>#!/bin/sh</code>. You don&rsquo;t have to worry about using
<code>env</code> here like you might have been trained to do with bash: <code>/bin/sh</code> is the
standardized location for the POSIX shell, and any standards-conforming system
will either put it there or make your script work anyway.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>The next step is to avoid bashisms. There are many, but here are a few that
might trip you up:</p>
<ul>
<li><code>[[ condition ]]</code> does not work; use <code>[ condition ]</code></li>
<li>Arrays do not work; <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05">use IFS</a></li>
<li>Local variables do not work; use a subshell</li>
</ul>
<p>The easiest way to learn about POSIX shell is to <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html">read the
standard</a> -
it&rsquo;s not too dry and shorter than you think.</p>
<h2 id="using-standard-coreutils">Using standard coreutils</h2>
<p>The last step to writing portable scripts is to use portable tools. Your system
may have GNU coreutils installed, which provides tools like <code>grep</code> and <code>cut</code>.
Unfortunately, GNU has extended these tools with its own non-portable flags and
tools. It&rsquo;s important that you avoid these.</p>
<p>One dead giveaway of a non-portable flag is long flags, e.g. <code>grep --file=FILE</code>
as opposed to <code>grep -f</code>. The POSIX standard only defines the <code>getopt</code> function -
not the proprietary GNU <code>getopt_long</code> function that&rsquo;s used to interpret long
options. As a result, no long flags are standardized. You might worry that this
will make your scripts difficult to understand, but I think that on the whole it
will not. Shell scripts are already pretty alien and require some knowledge to
understand. Is knowledge of what the magic word <code>grep</code> means much different
from knowledge of what <code>grep -E</code> means?</p>
<p>I also like that short flags allow you to make more concise command lines. Which
is better: <code>ps --all --format=user --without-tty</code>, or <code>ps -aux</code>? If you are
inclined to think the former, do you also prefer <code>function(a, b, c) { return a + b + c; }</code> over <code>(a, b, c) =&gt; a + b + c</code>?  Conciseness matters, and POSIX shell
supports comments if necessary!</p>
<p>Some tips for using short flags:</p>
<ul>
<li>They can be collapsed: <code>cmd -a -b -c</code> is equivalent to <code>cmd -abc</code></li>
<li>If they take additional arguments, either a space or no separation is
acceptable: <code>cmd -f&quot;hello world&quot;</code> or <code>cmd -f &quot;hello world&quot;</code></li>
</ul>
<p>A good reference for learning about standardized commands is, once again, <a href="http://pubs.opengroup.org/onlinepubs/9699919799/">the
standard</a>. From this page,
search for the command you want, or navigate through &ldquo;Shell &amp; Utilities&rdquo; -&gt;
&ldquo;Utilities&rdquo; for a list. If you have <code>man-pages</code> installed, you will also find
POSIX man pages installed on your system with the <code>p</code> postfix, such as <code>man 1p grep</code>. Note: at the time of writing, the POSIX man pages do not use dashes if
your locale is UTF-8, which makes searching for flags with <code>/</code> difficult. Use
<code>env LC_ALL=POSIX man 1p grep</code> if you need to search for flags, and I&rsquo;ll speak
to the maintainer of man-pages about this.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>A reader points out that macOS ships an ancient version of bash.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><em>2018-05-15 correction</em>: <code>#!/bin/sh</code> is unfortunately not standardized by POSIX. However, I still recommend its use, as most operating systems will place it there. The portable way to invoke shell scripts is <code>sh path/to/script</code>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Mon, 5 Feb 2018 00:00:00 +0000</pubDate></item><item><title>Sway and client side decorations</title><link>https://drewdevault.com/2018/01/27/Sway-and-client-side-decorations.html</link><description><![CDATA[<p>You may have recently seen an article from GNOME on the subject of client side
decorations (CSD) titled <a href="https://blogs.gnome.org/tbernard/2018/01/26/csd-initiative/">Introducing the CSD
Initiative</a>. It
states some invalid assumptions which I want to clarify, and I want to tell you
<a href="https://github.com/swaywm/sway">Sway</a>&rsquo;s
stance on the subject. I also speak for the rest of the projects involved in
<a href="https://github.com/swaywm/wlroots">wlroots</a> on this matter, including <a href="https://github.com/way-cooler/way-cooler">Way
Cooler</a>,
<a href="https://github.com/Ongy/waymonad">waymonad</a>, and
<a href="https://github.com/Bl4ckb0ne/bspwc">bspwc</a>.</p>
<p>The subject of which party is responsible for window decorations on Wayland (the
client or the server) has been a subject of much debate. I want to clarify that
though GNOME may imply that a consensus has been reached, this is not the case.
CSD have real problems that have long been waved away by its supporters:</p>
<ul>
<li>No consistent look and feel between clients and GUI toolkits</li>
<li>Misbehaving clients cannot be moved, closed, minimized, etc</li>
<li>No opportunity for compositors to customize behavior (e.g. tabbed windows on
Sway)</li>
</ul>
<p>We are willing to cooperate on a compromise, but GNOME does not want to
entertain the discussion and would rather push disingenuous propaganda for their
cause. The topic of the #wayland channel on Freenode includes the statement
&ldquo;Please do not argue about server-side vs. client-side decorations. It&rsquo;s settled
and won&rsquo;t change.&rdquo; I have been banned from this channel for over a year because
I persistently called for compromise.</p>
<p>GNOME&rsquo;s statement that &ldquo;[server-side decorations] do not (and will never) work
on Wayland&rdquo; is false. KDE and Sway have long agreed on the importance of these
problems and have worked together on a solution. We have developed and
implemented a Wayland protocol extension which allows the compositor and client
to negotiate what kind of decorations each wishes to use. KDE, Sway, Way Cooler,
waymonad, and bspwc are all committed to supporting server-side decorations on
our compositors.</p>
<hr>
<p>See also: <a href="https://blog.martin-graesslin.com/blog/2018/01/server-side-decorations-and-wayland/">Martin Flöser of KDE responds to GNOME&rsquo;s
article</a></p>]]></description><pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate></item><item><title>Fee breakdown for various donation platforms</title><link>https://drewdevault.com/2018/01/16/Fees-on-donation-platforms.html</link><description><![CDATA[<p>Understanding fees are a really confusing part of supporting creators of things
you like. I provide a few ways for people to support my work, and my supporters
can struggle to understand the differences between them. It comes down to fees,
of which there are several kinds (note: I just made these terms up):</p>
<ul>
<li><strong>Transaction fees</strong> are charged by the payment processor (the company that
takes down your card number and runs the transaction with your bank). These
are typically in the form of a percentage of the transaction plus a few cents.</li>
<li><strong>Platform fees</strong> are charged by the platform (e.g. Patreon) to run their
operation, typically in the form of a fixed percentage of the transaction.</li>
<li><strong>Withdrawal fees</strong> are charged to move money from the platform to the
creator&rsquo;s bank account. These vary depending on the withdrawal processor.</li>
<li><strong>Taxes</strong> are also implicated, depending on how much the creator makes.</li>
</ul>
<p>All of this adds up to a very confusing picture. I&rsquo;ve made a calculator to help
you sort it out.</p>
<p><strong>Note</strong>: For an up-to-date calculation of Patreon&rsquo;s fees, see <a href="https://drewdevault.com/2019/05/06/Calculate-your-doation-fees-for-Patreon.html">the follow-up
post</a>.</p>
<p><noscript>Sorry, the calculator requires JavaScript.</noscript></p>
<div id="react-root"></div>
<script src="https://drewdevault.com/js/donation-calc-v1.js"></script>
<h3 id="sources">Sources</h3>
<p><strong>fosspay</strong></p>
<p>Only the typical <a href="https://stripe.com/us/pricing">Stripe fee</a> is applied.</p>
<p>Note: I am the author of fosspay, if you didn&rsquo;t already know.</p>
<p><strong>Patreon</strong></p>
<p><a href="https://patreon.zendesk.com/hc/en-us/articles/204606125-How-do-you-calculate-fees-">How do you calculate fees?</a></p>
<p><a href="https://patreon.zendesk.com/hc/en-us/articles/203913489-What-are-my-options-to-receive-payout-">What are my options to receive payout?</a></p>
<p><strong>Liberapay</strong></p>
<p><a href="https://liberapay.com/about/faq">FAQ</a></p>]]></description><pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate></item><item><title>Learn about your package manager</title><link>https://drewdevault.com/2018/01/10/Learn-your-package-manager.html</link><description><![CDATA[<p>Tools like virtualenv, rbenv, and to a lesser extent npm and pip, are
occasionally useful in development but encourage bad practices in production.
Many people forget that their distro already has a package manager! And there&rsquo;s
more&ndash; you, the user, can write packages for it!</p>
<p>Your distro&rsquo;s package repositories probably already have a lot of your
dependencies, and can conveniently update your software alongside the rest of
your system. On the whole you can expect your distro packages to be much better
citizens on your system than a language-specific package manager will be.
Additionally, pretty much all distros provide a means for you to host your own
package repositories, from which you can install and update any packages you
choose to make.</p>
<p>If you find some packages to be outdated, find out who the package maintainer is
and shoot them an email. Or better yet - find out how the package is built and
send them a patch instead. Linux distributions are run by volunteers, and it&rsquo;s
easy to volunteer yourself! Even if you find <em>missing</em> packages, it&rsquo;s a simple
matter to whip up a package yourself and submit it for inclusion in your
distro&rsquo;s package repository, installing it from your private repo in the
meanwhile.</p>
<p>&ldquo;But what if dependencies update and break my stuff?&rdquo;, you ask. First of all,
why aren&rsquo;t you keeping your dependencies up-to-date? That aside, some distros,
like Alpine, let you pin packages to a specific version. Also, using the
distro&rsquo;s package manager doesn&rsquo;t necessarily mean you have to use the distro&rsquo;s
package repositories - you can stand up your own repos and prioritize it over
the distro repos, then release on any schedule you want.</p>
<p>In my opinion, the perfect deployment strategy for some software is pushing a
new package to your package repository, then SSHing into your fleet and running
system updates (probably automatically). This is how I manage deployments for
most of my software. As a bonus, these packages offer a good place to configure
things that your language&rsquo;s package manager may be ill suited to, such as
service files or setting up new users/groups on the system. Consider it!</p>]]></description><pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate></item><item><title>fork is not my favorite syscall</title><link>https://drewdevault.com/2018/01/02/The-case-against-fork.html</link><description><![CDATA[<p>This article has been on my to-write list for a while now. In my opinion, fork
is one of the most questionable design choices of Unix. I don&rsquo;t understand the
circumstances that led to its creation, and I grieve over the legacy rationale
that keeps it alive to this day.</p>
<p>Let&rsquo;s set the scene. It&rsquo;s 1971 and you&rsquo;re a fly on the wall in Bell Labs,
watching the first edition of Unix being designed for the PDP-11/20. This
machine has a 16-bit address space with no more than 248 kilobytes of memory.
They&rsquo;re discussing how they&rsquo;re going to support programs that spawn new
programs, and someone has a brilliant idea. &ldquo;What if we copied the entire
address space of the program into a new process running from the same spot, then
let them overwrite themselves with the new program?&rdquo; This got a rousing laugh
out of everyone present, then they moved on to a better design which would
become immortalized in the most popular and influential operating system of all
time.</p>
<p>At least, that&rsquo;s the story I&rsquo;d like to have been told. In actual fact, the
laughter becomes consensus. There&rsquo;s an obvious problem with this approach: every
time you want to execute a new program, the entire process space is copied and
promptly discarded when the new program begins.  Usually when I complain about
fork, this the point when its supporters play the virtual memory card, pointing
out that modern operating systems don&rsquo;t actually have to copy the whole address
space. We&rsquo;ll get to that, but first — First Edition Unix <em>does</em> copy the
whole process space, so this excuse wouldn&rsquo;t have held up at the time. By Fourth
Edition Unix (the next one for which kernel sources survived), they had wisened
up a bit, and started only copying segments when they faulted.</p>
<p>This model leads to a number of problems. One is that the new process inherits
<em>all</em> of the parent&rsquo;s process descriptors, so you have to close them all before
you exec another process. However, unless you&rsquo;re manually keeping tabs on your
open file descriptors, there is no way to know what file handles you must close!
The hack that solves this is <code>CLOEXEC</code>, the first of many hacks that deal with
fork&rsquo;s poor design choices. This file descriptors problem balloons a bit -
consider for example if you want to set up a pipe. You have to establish a piped
pair of file descriptors in the parent, then close every fd <em>but</em> the pipe in
the child, then <code>dup2</code> the pipe file descriptor over the (now recently closed)
file descriptor 1. By this point you&rsquo;ve probably had to do several non-trivial
operations and utilize a handful of variables from the parent process space,
which <em>hopefully</em> were on the stack so that we don&rsquo;t end up copying segments
into the new process space anyway.</p>
<p>These problems, however, pale in comparison to my number one complaint with the
fork model. Fork is the direct cause of the <em>stupidest</em> component I&rsquo;ve <em>ever</em>
heard of in an operating system: the out-of-memory (aka OOM) killer. Say you
have a process which is using half of the physical memory on your system, and
wants to spawn a tiny program. Since fork &ldquo;copies&rdquo; the entire process, you might
be inclined to think that this would make fork fail. But, on Linux and many
other operating systems since, it does not fail! They agree that it&rsquo;s stupid to
copy the entire process just to exec something else, but because fork is
Important for Backwards Compatibility, they just fake it and reuse the same
memory map (except read-only), then trap the faults and actually copy later.
The hope is that the child will get on with it and exec before this happens.</p>
<p>However, nothing prevents the child from doing something other than exec -
it&rsquo;s free to use the memory space however it desires! This approach now leads to
<em>memory overcommittment</em> - Linux has promised memory it does not have. As a
result, when it really does run out of physical memory, Linux will just kill off
processes until it has some memory back. Linux makes an awfully big fuss about
&ldquo;never breaking userspace&rdquo; for a kernel that will lie about memory it doesn&rsquo;t
have, then kill programs that try to use the back-alley memory they were given.
That this nearly 50 year old crappy design choice has come to this astonishes
me.</p>
<p>Alas, I cannot rant forever without discussing the alternatives. There <strong>are</strong>
better process models that have been developed since Unix!</p>
<p>The first attempt I know of is BSD&rsquo;s <code>vfork</code> syscall, which is, in a nutshell,
the same as fork but with severe limitations on what you do in the child process
(i.e. nothing other than calling exec straight away). There are <em>loads</em> of
problems with <code>vfork</code>. It only handles the most basic of use cases: you cannot
set up a pipe, cannot set up a pty, and can&rsquo;t even close open file descriptors
you inherited from the parent. Also, you couldn&rsquo;t really be sure of what
variables you were and weren&rsquo;t editing or allowed to edit, considering the
limitations of the C specification. Overall this syscall ended up being pretty
useless.</p>
<p>Another model is <code>posix_spawn</code>, which is a hell of an interface. It&rsquo;s far too
complicated for me to detail here, and in my opinion far too complicated to ever
consider using in practice. Even if it could be understood by mortals, it&rsquo;s a
really bad implementation of the spawn paradigm — it basically operates
like fork backwards, and inherits many of the same flaws. You still have to deal
with children inheriting your file descriptors, for example, only now you do it
in the parent process. It&rsquo;s also straight-up impossible to make a genuine pipe
with <code>posix_spawn</code>. (<em>Note: a reader corrected me - this is indeed possible via
posix_spawn_file_actions_adddup2</em>.)</p>
<p>Let&rsquo;s talk about the good models - <code>rfork</code> and spawn (at least, if spawn is done
right). <code>rfork</code> originated from plan9 and is a beautiful little coconut of a
syscall, much like the rest of plan9. They also implement fork, but it&rsquo;s a
special case of <code>rfork</code>. plan9 does not distinguish between processes and
threads - all threads are processes and vice versa. However, new processes in
plan9 are not the everything-must-go fuckfest of your typical fork call.
Instead, you specify exactly what the child should get from you. You can choose
to include (or not include) your memory space, file descriptors, environment, or
a number of other things specific to plan9. There&rsquo;s a cool flag that makes it so
you don&rsquo;t have to reap the process, too, which is nice because reaping children
is another really stupid idea. It still has some problems, mainly around
creating pipes without tremendous file descriptor fuckery, but it&rsquo;s basically as
good as the fork model gets. Note: Linux offers this via the <code>clone</code> syscall
now, but everyone just fork+execs anyway.</p>
<p>The other model is the spawn model, which I prefer. This is the approach I took
in my own kernel for KnightOS, and I think it&rsquo;s also used in NT (Microsoft&rsquo;s
kernel). I don&rsquo;t really know much about NT, but I can tell you how it works in
KnightOS. Basically, when you create a new process, it is kept in limbo until
the parent consents to begin. You are given a handle with which you can
configure the process - you can change its environment, load it up with file
descriptors to your liking, and so on. When you&rsquo;re ready for it to begin, you
give the go-ahead and it&rsquo;s off to the races. The spawn model has none of the
flaws of fork.</p>
<p>Both fork and exec can be useful at times, but spawning is much better for 90%
of their use-cases. If I were to write a new kernel today, I&rsquo;d probably take a
leaf from plan9&rsquo;s book and find a happy medium between <code>rfork</code> and spawn, so you
could use spawn to start new threads in your process space as well. To the
brave OS designers of the future, ready to shrug off the weight of legacy:
please reconsider fork.</p>]]></description><pubDate>Tue, 2 Jan 2018 00:00:00 +0000</pubDate></item><item><title>wlroots whitepaper available</title><link>https://drewdevault.com/2017/12/28/wlroots-whitepaper-available.html</link><description><![CDATA[<p><a href="https://sr.ht/jAFC.pdf">View PDF</a></p>]]></description><pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate></item><item><title>Firefox is on a slippery slope</title><link>https://drewdevault.com/2017/12/16/Firefox-is-on-a-slippery-slope.html</link><description><![CDATA[<p>For a long time, it was just setting the default search provider to Google in
exchange for a beefy stipend. Later, paid links in your new tab page were added.
Then, a proprietary service, Pocket, was bundled into the browser - not as an
addon, but a hardcoded feature. In the past few days, we&rsquo;ve discovered an
advertisement in the form of browser extension was sideloaded into user
browsers. Whoever is leading these decisions at Mozilla needs to be stopped.</p>
<p>Here&rsquo;s a breakdown of what happened a few days ago. Mozilla and NBC
Universal did a &ldquo;collaboration&rdquo; (read: promotion) for the TV show Mr. Robot.
It involved sideloading a sketchy browser extension which will <strong
style="display: inline-block; transform: scaleY(-1)">invert</strong> text that
matches a list of Mr. Robot-related keywords like &ldquo;fsociety&rdquo;, &ldquo;robot&rdquo;, &ldquo;undo&rdquo;,
and &ldquo;fuck&rdquo;, and does a number of other things like adding an HTTP header to
certain sites you visit.</p>
<p>This extension was sideloaded into browsers via the &ldquo;experiments&rdquo; feature.
Not only are these experiments enabled by default, but updates <a href="https://redd.it/7i4puf">have been
known</a> to re-enable it if you turn it off. The
advertisement addon shows up <a href="http://www.bolcer.org/looking-glass2.png">like
this</a> on your addon page, and was
added to Firefox stable. If I saw this before I knew what was going on, I would
think my browser was compromised!  Apparently it was a mistake that this showed
up on the addon page, though - it was supposed to be <em>silently</em> sideloaded into
your browser!</p>
<p>There&rsquo;s <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1423003">a ticket</a> on
Bugzilla (Firefox&rsquo;s bug tracker) for discussing this experiment, but it&rsquo;s locked
down and no one outside of Mozilla can see it. There&rsquo;s <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1424977">another
ticket</a>, filed by
concerned users, which has since been disabled and had many comments removed,
particularly the angry (but respectful) ones.</p>
<p>Mozilla, this is <strong>not okay</strong>. This is wrong on so many levels. Frankly, whoever
was in charge should be fired over this - which is not something I call for
lightly.</p>
<p>First of all, web browsers are a <em>tool</em>. I don&rsquo;t want my browser to fool around,
I just want it to display websites faithfully. This is the prime directive of
web browsers, and you broke that. When I compile vim with gcc, I don&rsquo;t want
gcc to make vim sporadically add &ldquo;fsociety&rdquo; into every document I write. I want
it to compile vim and go away.</p>
<p>More importantly, these advertising anti-features gravely - perhaps terminally -
violate user trust. This event tells us that &ldquo;Firefox studies&rdquo; into a backdoor
for advertisements, and I will <em>never</em> trust it again. But it doesn&rsquo;t matter -
you&rsquo;re going to re-enable it on the next update. You know what that means? I
will never trust <em>Firefox</em> again. I switched to
<a href="http://qutebrowser.org/">qutebrowser</a> as my daily driver because this crap was
starting to add up, but I still used Firefox from time to time and never
resigned from it entirely or stopped recommending it to friends. Well, whatever
goodwill was left is gone now, and I will only recommend other browsers
henceforth.</p>
<p>Mozilla, you fucked up <em>bad</em>, and you still haven&rsquo;t apologised. The study is
still active and ongoing. There is no amount of money that you should have
accepted for this. This is the last straw - and I took a lot of straws from you.
Goodbye forever, Mozilla.</p>
<p><strong>Update 2017-12-16 @ 22:33</strong></p>
<p>It has been clarified that an about:config flag must be set for this addon&rsquo;s
behavior to be visible. This improves the situation considerably, but I do not
think it exenorates Mozilla and I stand firm behind most of my points. The study
has also been rolled back by Mozilla, and Mozilla has issued
<a href="https://gizmodo.com/mozilla-slipped-a-mr-robot-promo-plugin-into-firefox-1821332254">statements</a>
to the
<a href="https://gizmodo.com/after-blowback-firefox-will-move-mr-robot-extension-t-1821354314">media</a>
justifying the study (no apology has been issued).</p>
<p><strong>Update 2017-12-18</strong></p>
<p>Mozilla has issued an apology:</p>
<p><a href="https://blog.mozilla.org/firefox/update-looking-glass-add/">https://blog.mozilla.org/firefox/update-looking-glass-add/</a></p>
<p><strong>Responses</strong>:</p>
<p><a href="https://blog.jeaye.com/2017/12/16/firefox/">Mozilla, Firefox, Looking Glass, and you</a>
via jeaye.com</p>]]></description><pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate></item><item><title>A history of emergent intelligence</title><link>https://drewdevault.com/2017/12/02/History-of-intelligent-observation.html</link><description><![CDATA[<p>As you all know, the simulation of universe 2813/9301 is now coming to a close.
This simulation is notable for being the first simulated universe suitable for
hosting intelligent life, but yesterday the simulation reached a state where we
believe no additional intelligences will emerge. It seems the final state of
this set of physical laws is a dark and empty universe of slowly evaporating
black holes. Though, given the historical significance of this simulation, it&rsquo;s
unlikely we we&rsquo;ll be turning it off any time soon!</p>
<div class="alert alert-warning">
<strong>Note</strong>: This document was translated to a language and format
suitable for human understanding. Locations within your observable universe are
referred to by your name for them, times are given in terms of your planetary
orbital period and relative to your reference frame, and terminology is
translated when your vocabulary is sufficient.
</div>
<p>The remaining simulation that constitutes the vast majority of computer time
allocated to this project, though it will no doubt be very boring. Given that
the fun is behind us, over in the archives we&rsquo;ve been putting together something
special to celebrate the work so far.</p>
<p>Watching these intelligent civilizations struggle to understand our simulation
from the inside out is a hoot when you and I can just read the manual! For them,
however, it must have been much more difficult. A history of this observation by
emergent intelligence from within our simulation from within follows. Without
further ado, let&rsquo;s revisit the most notable intelligences we discovered.</p>
<h3>9.93&times;10<sup>8</sup> years: 36-29-93-55-55</h3>
<p><em>Note: 36-29-93-55-55 is an approximation of our identifier for arbitrary
locations within the simulation. It does not correspond to a location in your
observable universe. Years are given from the epoch in terms of your planet&rsquo;s
present orbital period.</em></p>
<p>Though it did not develop self-awareness, the first observation of life - the
precursor to most forms of the simulation&rsquo;s emergent intelligence - was found at
this location. It was initially discarded as a relatively uninteresting anomaly
during our surveys, but was later revisited as we began to understand the
mechanics of intelligence within the simulation.</p>
<h3>1.28&times;10<sup>9</sup> years: 39-10-53-10-84</h3>
<p>&ldquo;Significant anomaly detected at 39-10-53-10-84. Apparent emergent intelligence
detected in active simulation. All personnel must return to the lab
immediately.&rdquo; Where were you when you read the memo? The intelligent creatures
we discovered had developed over a million years before we found them in our
surveys.</p>
<p>These where the first to enjoy a privilege few civilizations could lay claim
to: witnessing the galactic age of the simulation. They also were uniquely able
to see our simulation when it was small enough to observe a substantial portion
of it. Their investigations were unfortunately among the more primitive that
we&rsquo;ve observed - notably they never discovered general relativity. It was
shortly after their discovery of electromagnetism that they were destroyed by
their aging star&rsquo;s expansion. That was a difficult meeting for everyone when the
project leadership chose not to intervene.</p>
<h3>1.33&times;10<sup>9</sup> years: Messier 81</h3>
<p>The intelligences that developed here are notable for being the second group we
observed, though later surveys discovered additional earlier civilizations. They
also included one civilization which became the first to leave the planet on
which it developed - unfortunately never leaving their star, which ultimately
caused their demise. It&rsquo;s from them we also devised some of the most effective
means of automatic detection of intelligence, which led to the retroactive
discovery of many more intelligences.</p>
<h3>4.54&times;10<sup>9</sup> years: Humans</h3>
<style>
.redacted {
    background: #333;
    color: #333;
}
</style>
<p>Humanity is remarkable for being the first emergent intelligence to create <em>new</em>
intelligence within the simulation. All subsequent appearances of such
intelligences are referred to with the name humans gave to their creation:
artificial intelligence. Subsequently, humans also became the first to
<span class="redacted">look at you, you figured out how to read the redacted
text. I bet you feel real clever now.</span> <em>Note: you&rsquo;ll find out soon
enough.</em></p>
<h3>8.39&times;10<sup>9</sup> years: 59-54-77-33-19</h3>
<p>These guys were notable for being the longest-lived intelligent life. They were
located near a binary system with a star and a black hole. Remarkably, this
system was not unstable, unlike most civilizations near a black hole. Instead,
the relativistic effects of the black hole permitted them to observe a great
deal of the universe&rsquo;s history.</p>
<p>This also distinguishes them from the majority of other long-lived intelligent
civilizations, most of which were galactic civilizations. -19, along with a
handful of other long-lived black hole civilizations, they were among the only
civilizations to exist across long periods of the simulation without leaving
their host stars. They were unable to escape before the black hole began to feed
on the star, destroying the civilization at 4.56×10<sup>12</sup> years.
During this period, intelligence emerged 6 discrete times on their planet.</p>
<h3>8.43&times;10<sup>9</sup> years: UDF 423</h3>
<p>Interestingly, the record for the shortest lived intelligent civilization was
set only a short time after the longest lived one. Based on our criteria for
intelligence, this civilization only lasted 200 years before being destroyed by
the supernova of their host star.</p>
<h3>1.92&times;10<sup>10</sup> years: 60-17-07-08-49 &amp; 79-88-02-97-94</h3>
<p>These two civilizations share a solemn distinction: -49 was the last to observe
a galaxy outside of their local group, and -94 were the first to never observe
one (though early non-intelligent life at -94 might have seen if they had the
appropriate equipment). The light-speed software can be cruel at times. However,
-94 was still able to see the cosmic microwave background radiation, and from
this deduced that additional unseen galaxies might exist.</p>
<h3><span class="redacted">x.xx&times;10<sup>xx</sup> xxxxx: xx-xx-xx-xx-xx</span></h3>
<span class="redacted">
There's nothing interesting to see here, either. Stop looking. Lorem ipsum dolor
sit amet, consectetur adipiscing elit. Curabitur porta libero ut lectus finibus
lobortis. Cras dignissim dignissim ornare. Sed lobortis nulla vel mauris
lobortis, vel pretium tortor efficitur. Aenean sit amet nibh eros. That's your
reward for looking. You got to read lorem ipsum.
</span>
<h3>4.14&times;10<sup>10</sup> years: NGC 5055</h3>
<p>NGC 5055 was the first of only 32,083 intelligences to discover the simulated
nature of their universe after their discovery of <span class="redacted">you
really are terribly clever, aren&rsquo;t you</span>. They do not,
however, hold the distinction of being the first of the 489 intelligences that
made intentional contact with the proctors - that honor goes to 39-47-28-23-99,
as I&rsquo;m sure you&rsquo;re well aware.</p>
<h3>7.03&times;10<sup>11</sup> years: Peak intelligence</h3>
<p>This was the year that the largest number of discrete intelligent civilizations
existed in the simulation: 6,368,787,234,012. This period began with the birth
of 64-83-61-51-57 and ended with the death of 82-60-95-64-31 approximately 86
seconds later.</p>
<h3>1.70&times;10<sup>13</sup> years: Star formation stops</h3>
<p>The variety in emergent intelligence demonstrated in our simulation is
astonishing, but there&rsquo;s one thing every one of them has in common - a need for
energy. This energy has been provided in all but a few notable cases (see
publication 102.32 for a summary) by a star. At the conclusion of star
formation in our simulation, the rate at which emergent intelligent
civilizations were produced dramatically dropped. This also marked the beginning
of the decline of the 231 galactic civilizations that existed at the time, which
were unable to grow further without new stars being formed.</p>
<h3>9.85&times;10<sup>15</sup> years: 72-68-37-80-61</h3>
<p>The last intelligence to emerge was 72-68-37-80-61. They were not, however, the
last ones in the simulation. They were also among the emergent intelligences
that discovered the nature of the simulation, and the last that the proctors
elected to respond to attempted contact with.</p>
<h3>9.85&times;10<sup>15</sup> years: 76-54-95-81-66</h3>
<p>66 is notable for hosting the last intelligence to leave its host star when a
close encounter with the remnants of 76-54-95-81-18 collided with their galaxy.
Like 84% of the civilizations to undergo this ordeal in this time period, they
were prepared for it and were able to survive another 2,000 years after the
event (this post-stellar lifespan was slightly above average).</p>
<h3>4.65&times;10<sup>33</sup> years: 37-19-87-04-98</h3>
<p>The last emergent intelligence in the simulation. These were the last of the
group of 13 intelligent civilizations that devised a means for coping with the
energy-starved universe at this stage of the simulation. At the time of their
quiet death, they had utilized 77% of the remaining resources that could be
found outside of black holes.</p>
<hr>
<p>It&rsquo;s been an exciting time for our laboratory. Everyone has done great work on
this simulation. Though 2813/9301&rsquo;s incredible simulation is coming to an end,
we still have more work to do. We are proud to announce that in addition to
simulation 2813/9302 starting soon, we have elected to run simulation 2813/9301
once again. We have decided to nurture the emergent intelligences as if they
were our brothers, and communicate more openly with them. We have established a
new team to learn about each intelligence and make first contact with them using
means familiar to them, like maybe publishing our research documents as &ldquo;blog
posts&rdquo; within the simulation.</p>
<p>Great work, everyone. Here&rsquo;s to the next step.</p>]]></description><pubDate>Sat, 2 Dec 2017 00:00:00 +0000</pubDate></item><item><title>On taking good care of your phone</title><link>https://drewdevault.com/2017/11/24/Phone-maintenance.html</link><description><![CDATA[<p>I just finished <a href="https://www.ifixit.com/Guide/s5/27077">replacing the micro-USB
daughterboard</a> on my Samsung Galaxy S5,
which involved taking the phone most of the way apart, doing the replacement,
and putting it back together. This inspired me to write about my approach to
maintaining my cell phone. I&rsquo;ve had this phone for a while and I have no plans
to upgrade - I backed the upcoming Purism phone, but I expect to spend
months/years on the software before I&rsquo;ll be using that as my daily driver.</p>
<p>I don&rsquo;t want to be buying a new phone every year. That&rsquo;s a lot of money! Though
the technophile in me finds the latest and greatest technology appealing, the
thought of doing my own repairs and upkeep on a battle-tested phone is equally
interesting. Here are the four things I&rsquo;ve found most important in phone upkeep.</p>
<h3 id="install-lineageos-or-replicant">Install LineageOS or Replicant</h3>
<p>Before I installed CyanogenMod when I bought this phone, I did some prying into
the stock ROM to see just how bad it was. It was even worse than I expected!
There were literally hundreds of apps and services with scary permissions
running in the background that could not be removed. These spy on you, wear down
your battery, and slow down your phone over time - another form of planned
obsolescence.</p>
<p>My phone is still as fast as the day I got it. It does a great job with
everything I ask it to do. The first thing you should do with every new phone is
install a third-party ROM - ideally, without Google apps. Stock ROMs suck, get
rid of it.</p>
<h3 id="insist-on-a-user-replacable-battery">Insist on a user-replacable battery</h3>
<p>Non-user-replacable batteries are an obvious form of planned obsolescence.
Batteries don&rsquo;t last forever and you should <em>never</em> buy a phone that you
cannot replace the battery of. A new battery for my S5 costs 10 bucks. 4 years
in, I&rsquo;ve replaced mine once and I can hold a charge fine for a couple of days.</p>
<h3 id="get-a-case">Get a case</h3>
<p>This one is pretty obvious, but I didn&rsquo;t follow this advice at first. I&rsquo;ve never
broken a screen, so I didn&rsquo;t bother with a case. When I decided I was going to
keep this phone for a long time, I went ahead and bought one. It doubles the
thickness of my phone but at least I can be sure I&rsquo;m not going to bust it up
when I drop it. It still fits in my pocket comfortably so it&rsquo;s no big deal.</p>
<h3 id="attempt-repairs-before-you-buy-a-new-phone">Attempt repairs before you buy a new phone</h3>
<p>The past couple of months, my phone&rsquo;s micro-USB3 port started to act up a bit. I
would have to wiggle the cable a bit to get it to take, and it could stop
charging if I rustled my desk the wrong way. I got a replacement USB
daughterboard on Amazon for 6 bucks. Replacing it took an hour, but when
removing the screen I broke the connection between my home button and my
motherboard - which was only 10 bucks for the replacement, including same day
shipping. The whole process was a lot easier than I thought it would be.</p>
<hr>
<p>Be a smart consumer when you&rsquo;re buying a phone. Insist on the replacable battery
and maybe read the iFixit teardown. Take good care of it and it&rsquo;ll last a long
time. Don&rsquo;t let consumerism get the better of you!</p>]]></description><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate></item><item><title>Portability matters</title><link>https://drewdevault.com/2017/11/13/Portability-matters.html</link><description><![CDATA[<p>There are many kinds of &ldquo;portability&rdquo; in software. Portability refers to the
relative ease of &ldquo;porting&rdquo; a piece of software to another system. That
platform might be another operating system, another CPU architecture, another
web browser, another filesystem&hellip; and so on. More portable software uses the
limited subset of interfaces that are common between systems, and less portable
software leverages interfaces specific to a particular system.</p>
<p>Some people think that portability isn&rsquo;t very important, or don&rsquo;t understand the
degree to which it&rsquo;s important. Some people might call their software portable
if it works on Windows and macOS - they&rsquo;re wrong. They might call their software
portable if it works on Windows, macOS, and Linux - but they&rsquo;re wrong, too.
Supporting multiple systems does not necessarily make your software portable.
What makes your software portable is <em>standards</em>.</p>
<p>The most important standard for software portability is POSIX, or the <strong>Portable
Operating System Interface</strong>. Significant subsets of this standard are supported
by many, many operating systems, including:</p>
<ul>
<li>Linux</li>
<li>*BSD</li>
<li>macOS</li>
<li>Minix</li>
<li>Solaris</li>
<li>BeOS</li>
<li>Haiku</li>
<li>AIX</li>
</ul>
<p>I <a href="https://en.wikipedia.org/wiki/POSIX#POSIX-oriented_operating_systems">could go
on</a>.
Through these operating systems, you&rsquo;re able to run POSIX compatible code on a
large number of CPU architectures as well, such as:</p>
<ul>
<li>i386</li>
<li>amd64</li>
<li>ARM</li>
<li>MIPS</li>
<li>PowerPC</li>
<li>sparc</li>
<li>ia64</li>
<li>VAX</li>
</ul>
<p>Again, I could go on. Here&rsquo;s the point: by supporting POSIX, your software runs
on basically every system. <em>That&rsquo;s</em> what it means to be portable - standards.
So why is it important to support POSIX?</p>
<p>First of all, if you use POSIX then your software runs on just about anything,
so lots of users will be available to you and it will work in a variety of
situations. You get lots of platforms for free (or at least cheap). But more
importantly, <em>new platforms</em> get your software for free, too.</p>
<p>The current market leaders are not the end-all-be-all of operating system
design - far from it. What they have in their advantage is working well enough
and being incubent. Windows, Linux, and macOS are still popular for the same
reason that legislator you don&rsquo;t like keeps getting elected! However, new
operating systems have a fighting chance thanks to POSIX. All you have to do to
make your OS viable is implement POSIX and you will immediately open up
hundreds, if not thousands, of potential applications. Portability is important
for innovation.</p>
<p>The same applies to other kinds of portability. Limiting yourself to standard
browser features gives new browsers a chance. Implementing standard networking
protocols allows you to interop with other platforms. I&rsquo;d argue that failing to
do this is <em>unethical</em> - it&rsquo;s just another form of vendor lock-in. This is why
Windows does not support POSIX.</p>
<p>This is also why I question niche programming languages like Rust when they
claim to be suited to systems programming or even kernel development. That&rsquo;s
simply not true when they only run on a small handful of operating systems and
CPU architectures. C runs on <em>literally</em> everything.</p>
<p>In conclusion: use standard interfaces for your software. That guy who wants to
bring new life to that old VAX will thank you. The authors of
<a href="https://servo.org/">servo</a> thank you. <em>You</em> will thank you when your
circumstances change in 5 years.</p>]]></description><pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate></item><item><title>Nvidia sucks and I&apos;m sick of it</title><link>https://drewdevault.com/2017/10/26/Fuck-you-nvidia.html</link><description><![CDATA[<p>There&rsquo;s something I need to make clear about Nvidia. Sway 1.0, which is the
release after next, is <em>not</em> going to support the Nvidia proprietary driver,
EGLStreams, or any other proprietary graphics APIs. The only supported driver
for Nvidia cards will be the open source nouveau driver. I will explain why.</p>
<p>Today, Sway is able to run on the Nvidia proprietary driver. This is not and has
never been an officially supported feature - we&rsquo;ve added a few things to try and
make it easier but my stance has <em>always</em> been that Nvidia users are on their
own for support. In fact, Nvidia support was added to Sway without my approval.
It comes from a library we depend on called wlc - had I&rsquo;d made the decision on
whether or not to support EGLStreams in wlc, I would have said no.</p>
<p>Right now, we&rsquo;re working very hard on replacing wlc, for reasons unrelated to
Nvidia. Our new library, wlroots, is better in every conceivable way for Sway&rsquo;s
needs. The Nvidia proprietary driver support is not coming along for the ride,
and here&rsquo;s why.</p>
<p>So far, I&rsquo;ve been speaking in terms of <em>Sway</em> supporting Nvidia, but this is
an ass-backwards way of thinking. <em>Nvidia</em> needs to support Sway. There are
Linux kernel APIs that we (and other Wayland compositors) use to get the job
done. Among these are KMS, DRM, and GBM - respectively Kernel Mode Setting,
Direct Rendering Manager, and Generic Buffer Management. Every GPU vendor
but Nvidia supports these APIs. Intel and AMD support them with mainlined<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
open source drivers. For AMD this was notably done by replacing their
proprietary driver with a new, open source one, which has been developed in
cooperation with the Linux community. As for Intel, they&rsquo;ve always been friendly
to Linux.</p>
<p>Nvidia, on the other hand, have been fucking assholes and have treated Linux
like utter shit for our entire relationship. About a year ago they announced
&ldquo;Wayland support&rdquo; for their proprietary driver. This included KMS and DRM
support (years late, I might add), but <em>not</em> GBM support. They shipped something
called EGLStreams instead, a concept that had been discussed and shot down by
the Linux graphics development community before. They did this because it makes
it easier for them to keep their driver proprietary without having work with
Linux developers on it. Without GBM, Nvidia <em>does not</em> support Wayland, and they
were real pricks for making some announcement like they actually did.</p>
<p>When people complain to me about the lack of Nvidia support in Sway, I get
really pissed off. It is <em>not my fucking problem</em> to support Nvidia, it&rsquo;s
Nvidia&rsquo;s fucking problem to support me. Even Broadcom, <em>fucking Broadcom</em>,
supports the appropriate kernel APIs. And proprietary driver users have the gall
to <em>reward</em> Nvidia for their behavior by giving them <em>hundreds of dollars</em> for
their GPUs, then come to <em>me</em> and ask me to deal with their bullshit <em>for free</em>.
Well, fuck you, too. Nvidia users are shitty consumers and I don&rsquo;t even want
them in my userbase. Choose hardware that supports your software, not the other
way around.</p>
<p>Buy AMD. Nvidia&ndash; fuck you!</p>
<p><strong>Edit</strong>: It&rsquo;s worth noting that Nvidia is evidently attempting to find a better
path with <a href="https://github.com/cubanismo/allocator">this new GitHub project</a>. I
hope it works out, but they aren&rsquo;t really cooperating much with anyone to build
it - particularly nouveau. It&rsquo;s more throwing code/blobs over the wall and
expecting everyone to change for them.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Mainlined means that they are included in the upstream Linux kernel source code.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate></item><item><title>The future of Wayland, and sway&apos;s role in it</title><link>https://drewdevault.com/2017/10/09/Future-of-sway.html</link><description><![CDATA[<p>Today I&rsquo;ve released sway
<a href="https://github.com/swaywm/sway/releases/tag/0.15-rc1">0.15-rc1</a>, the first
release candidate for the final 0.x release of sway. That&rsquo;s right - after sway
0.15 will be sway 1.0. After today, no new features are being added to sway
until we complete the migration to our new plumbing library,
<a href="https://github.com/swaywm/wlroots">wlroots</a>. This has been a long time
coming, and I would love to introduce you to wlroots and tell you what to expect
from sway 1.0.</p>
<p><small class="text-muted"><a href="https://github.com/swaywm/sway">Sway</a> is
a tiling Wayland compositor, if you didn&rsquo;t know.</small></p>
<p>Before you can understand what wlroots is, you have to understand its
predecessor: <a href="https://github.com/Cloudef/wlc">wlc</a>. The role of wlc is to manage
a number of low-level plumbing components of a Wayland compositor. It
essentially abstracts most of the hard work of Wayland compositing away from the
compositor itself. It manages:</p>
<ul>
<li>The EGL (OpenGL) context</li>
<li>DRM (display) resources</li>
<li>libinput resources</li>
<li>Rendering windows to the display</li>
<li>Communicating with Wayland clients</li>
<li>Xwayland (X11) support</li>
</ul>
<p>It does a few other things, but these are the most important. When sway wants to
render a window, it will be told about its existence through a hook from wlc.
We&rsquo;ll tell wlc where to put it and it will be rendered there. Most of the heavy
lifting has been handled by wlc, and this has allowed us to develop sway into a
powerful Wayland compositor very quickly.</p>
<p>However, wlc has some limitations, ones that sway has been hitting more and more
often in the past several months. To address these limitations, we&rsquo;ve been
working very hard on a replacement for wlc called wlroots. The relationship
between wlc and wlroots is similar to the relationship between Pango and
Harfbuzz - wlroots is much more powerful, but at the cost of putting a lot more
work on the shoulders of sway. By replacing wlc, we can customize the behavior
of the low level components of our system.</p>
<p>I&rsquo;m happy to announce that development on wlroots has been spectacular. Like
libweston has Weston itself, wlroots has a reference compositor called Rootston -
a simple floating compositor that lets us test and demonstrate the features of
wlroots. It is from this compositor that I write this blog post today. The most
difficult of our goals are behind us with wlroots, and we&rsquo;re now beginning to
plan the integration of wlroots and sway.</p>
<p>All of this work has been possible thanks to a contingent of highly motivated
contributors who have done huge amounts of work for wlroots, writing and
maintaining entire subsystems far faster than I could have done it alone. I
really cannot overstate the importance of these contributors. Thanks to their
contributions, most of my work is in organizing development and merging pull
requests. From the bottom of my heart, <a href="https://github.com/swaywm/wlroots/graphs/contributors">thank
you</a>.</p>
<p>And for all of this hard work, what are we going to get? Well, for some time
now, there have been many features requests in sway that we could not address,
and many long-standing bugs we could not fix. Thanks to wlroots, we can see many
of these addressed within the next few months. Here are some of the things you
can expect from the union of wlroots and sway:</p>
<ul>
<li>Rotated displays</li>
<li>Touchscreen bindings</li>
<li>Drawing tablet support</li>
<li>Mouse capture for games</li>
<li>Fractional display scaling</li>
<li>Display port daisy chaining</li>
<li>Multi-GPU support</li>
</ul>
<p>Some of these features are unique to sway even among Wayland <em>and</em> Xorg
desktops combined! Others, like output rotation, have been requested by our
users for a long time. I&rsquo;m looking forward to the several dozen long-open GitHub
issues that will be closed in the next couple of months. This is just the
beginning, too - wlroots is such a radical change that I can&rsquo;t even begin to
imagine all of the features we&rsquo;re going to be able to build.</p>
<p>We&rsquo;re sharing these improvements with the greater Wayland community, too.
wlroots is a platform upon which we intend to develop and promote open standards
that will unify the extensibility of all Wayland desktops. We&rsquo;ve also been
working with other Wayland compositors, notably
<a href="https://github.com/way-cooler/way-cooler">way-cooler</a>, which are preparing to
move their own codebases to a wlroots-based solution.</p>
<p>My goal is to ship sway 1.0 before the end of the year. These are exciting times
for Wayland, and I hope you&rsquo;re looking forward to it.</p>]]></description><pubDate>Mon, 9 Oct 2017 00:00:00 +0000</pubDate></item><item><title>Analyzing HN moderation &amp; censorship</title><link>https://drewdevault.com/2017/09/13/Analyzing-HN.html</link><description><![CDATA[<p><a href="https://news.ycombinator.com">Hacker News</a> is a popular
&ldquo;<a href="http://www.catb.org/jargon/html/H/hacker.html">hacker</a>&rdquo; news board. One thing
I love about HN is that the moderation generally does an excellent job. The site
is free of spam and the conversations are usually respectful and meaningful (if
pessimistic at times). However, there is always room for improvement, and
moderation on Hacker News is no exception.</p>
<p><strong>Notice</strong>: on 2017-10-19 this article was updated to incorporate feedback the
Hacker News moderators sent to me to clarify some of the points herein. You may
view a diff of these changes
<a href="https://github.com/SirCmpwn/sircmpwn.github.io/commit/553d051c84a4631c3bd3264a437dfbc6c9807d13">here</a>.</p>
<p>For some time now, I&rsquo;ve been scraping the HN API and website to learn how the
moderators work, and to gather some interesting statistics about posts there
in general. Every 5 minutes, I take a sample of the front page, and every 30
minutes, I sample the top 500 posts (note that HN may return fewer than this
number). During each sample, I record the ID, author, title, URL, status
(dead/flagged/dupe/alive), score, number of comments, rank, and compute the rank
based on <a href="https://news.ycombinator.com/item?id=231209">HN&rsquo;s published algorithm</a>.
A note is made when the title, URL, or status changes.</p>
<p><a href="https://hn.0x2237.club/post/15217697"><img src="https://sr.ht/IFCA.png" alt=""></a></p>
<p>The information gathered is publicly available at
<a href="https://hn.0x2237.club">hn.0x2237.club</a> (sorry about the stupid domain, I just
picked one at random). You can search for most posts here going back to
2017-04-14, as well as view recent
<a href="https://hn.0x2237.club/title-changes">title</a> and
<a href="https://hn.0x2237.club/url-changes">url</a> changes or <a href="https://hn.0x2237.club/deleted">deleted
posts</a>
(<a href="https://hn.0x2237.club/deleted-10">score&gt;10</a>). Raw data is available as JSON
for any post at <code>https://hn.0x2237.club/post/:id/json</code>. Feel free to explore the
site later, or <a href="https://git.sr.ht/~sircmpwn/hnstats">its shitty code</a>. For now,
let&rsquo;s dive into what I&rsquo;ve learned from this data.</p>
<h3 id="tools-hn-mods-use">Tools HN mods use</h3>
<p>The main tools I&rsquo;m aware of that HN moderators can use to perform their duties
are:</p>
<ul>
<li>Editing link titles or URLs</li>
<li>Influencing story rank via &ldquo;downweighting&rdquo; or &ldquo;burying&rdquo;</li>
<li>Deleting or &ldquo;killing&rdquo; posts</li>
<li>Detaching off-topic or rulebreaking comment threads from their parents</li>
<li><abbr title="Banning them without making it known to them">Shadowbanning</abbr>
misbehaving users</li>
<li>Banning misbehaving users (and telling them)</li>
</ul>
<p>The moderators emphasize a difference between deleting a post and killing a
post. The former, deleting a post, will remove it from all public view like it
had never existed, and is a tool used infrequently. Killing a post will mark it
as [dead] so it doesn&rsquo;t show up on the post listing.</p>
<p>Influencing a post&rsquo;s rank can also be done through several means of varying
severity. &ldquo;Burying&rdquo; a post will leave a post alive, but plunge it in rank.
&ldquo;Downweighting&rdquo; is similar, but does not push its rank as far.</p>
<p>There are also automated tools for detecting spam and <abbr title="Posts
influenced by a group of early voters hoping to get it on the front page">voting
rings</abbr>, as well as automated de-emphasizing of posts based on certain
<abbr title="'Bitcoin' was known to at some point be one of these">secret
keywords</abbr> and controls to prevent flamewars. Automated tools on Hacker
News are used to downweight or kill posts, but never to bury or delete them.
Dan spoke about these tools and their usage for me:</p>
<blockquote>
<p>Of these four interventions (deleting, killing, burying, and downweighting),
the only one that moderators do frequently is downweighting. We downweight
posts in response to things that go against the site guidelines, such as when a
submission is unsubstantive, baity or sensational. Typically such posts remain
on the front page, just at a lower rank. We bury posts when they&rsquo;re dupes,
but rarely otherwise. We kill posts when they&rsquo;re spam, but rarely
otherwise. [&hellip;] We never delete a post unless the author asks us to.</p></blockquote>
<p>Dan also further clarified the difference between dead and deleted for me:</p>
<blockquote>
<p>The distinction between &lsquo;dead&rsquo; and &lsquo;deleted&rsquo; is important. Dead posts
are different from deleted ones in that people can still see them if
they set &lsquo;showdead&rsquo; to &lsquo;yes&rsquo; in their profile. That way, users who
want a less moderated view can still see everything that has been
killed by moderators or software or user flags. Deleted posts, on the
other hand, are erased from the record and never seen again. On HN,
authors can delete their own posts for a couple hours (unless they are
comments that have replies). After that, if they want a post deleted
they can ask us and we usually are happy to oblige.</p></blockquote>
<p>Moderators can also artificially influence rank upwards - one way is by inviting
the user to re-submit a post that they want to give another shot at the front
page. This gives the post a healthy upvote to begin with and prevents it from
being flagged. The moderators invited me to re-submit this very article using
this mechanism on 2017-10-19.</p>
<p>Banning users is another mechanism that they can use. There are two ways bans
are typically applied around the net - telling users they&rsquo;ve been banned, and
keeping it quiet. The latter - shadowbanning - is a useful tool against spammers
and serial ban evaders who might otherwise try to circumvent their ban. However,
it&rsquo;s important that this does <em>not</em> become the first line of defense against
rulebreaking users, who should instead be informed of the reason for their ban
so they have a chance to reform and appeal it. Here&rsquo;s what Dan has to say about
it:</p>
<blockquote>
<p>Shadowbanning has proven to still be useful for spammers and trolls
(i.e. when a new account shows up and is clearly breaking the site
guidelines off the bat). Most such abuse is by a relatively small
number of users who create accounts over and over again to do the same
things. When there&rsquo;s evidence that we&rsquo;ve repeatedly banned someone
before, I don&rsquo;t feel obliged to tell them we&rsquo;re banning them again.
[&hellip;] When we&rsquo;re banning an established account, though, we post a comment
saying so, and nearly always only after warning that user beforehand. Many such
users had no idea they were breaking the site guidelines and are
quite happy to improve their posts, which is a win for everyone.</p></blockquote>
<p>Dan also shared a link to search for comments where moderators have explained
to users why they&rsquo;ve been banned. Of course, this doesn&rsquo;t include users who were
banned without explanation, or that use slightly different language:</p>
<p><a href="https://hn.algolia.com/?query=by:dang%20we%20banned&amp;sort=byDate&amp;dateRange=all&amp;type=comment&amp;storyText=false&amp;prefix&amp;page=0">dang&rsquo;s bans</a></p>
<p><a href="https://hn.algolia.com/?query=by:sctb%20we%20banned&amp;sort=byDate&amp;dateRange=all&amp;type=comment&amp;storyText=false&amp;prefix=false&amp;page=0">sctb&rsquo;s bans</a></p>
<h2 id="data-based-insights">Data-based insights</h2>
<p>Here&rsquo;s an example of a fairly common moderator action:</p>
<p><img src="https://sr.ht/PhJM.png" alt=""></p>
<p><a href="https://hn.0x2237.club/post/15217697">This post</a> had its title changed at
around 09-11-17 12:10 UTC, and had the rank artificially adjusted to push it
further down the front page. We can tell that the drop was artificial just by
correlating it with the known moderator action, but we can also compare it
against the computed base rank:</p>
<p><img src="https://sr.ht/IJQI.png" alt=""></p>
<p>Note however that the base rank is often wildly different from the rank observed
in practice; the factors that go into adjusting it are rather complex. We can
also see that despite the action, the post&rsquo;s score continued to increase, even
at an accelerated pace:</p>
<p><img src="https://sr.ht/FmNU.png" alt=""></p>
<p>This &ldquo;title change and derank&rdquo; is a fairly common action - here are some more
examples from the past few days:</p>
<p><a href="https://hn.0x2237.club/post/15219154">Betting on the Web - Why I Build PWAs</a></p>
<p><a href="https://hn.0x2237.club/post/15210767">Silicon Valley is erasing individuality</a></p>
<p><a href="https://hn.0x2237.club/post/15208565">Chinese government is working on a timetable to end sales of fossil-fuel cars</a></p>
<p>Users can change their own post titles, which I&rsquo;m unable to distinguish from
moderator changes. However, correlating them with a strange change in rank is
generally a good bet. Submitters also generally will edit their titles earlier
rather than later, so a later change may indicate that it was seen by a
moderator after it rose some distance up the page.</p>
<p>I also occasionally find what seems to be the opposite - artificially bumping a
post further up the page. Here&rsquo;s two examples:
<a href="https://hn.0x2237.club/post/15213371">15213371</a> and
<a href="https://hn.0x2237.club/post/15209377">15209377</a>. Rank influencing in either
direction also happens without an associated title or URL change, but
automatically pinning such events down is a bit more subtle than my tools can
currently handle.</p>
<p>Moderators can also delete a post or indicate it as a dupe. The latter can be
(and is) detected by my tools, but the former is indistinguishable from the user
opting to delete posts themselves. In theory, posts that are deleted <em>after</em> the
author is no longer allowed to could be detected, but this happens rarely and my
tools don&rsquo;t track posts once they get old enough.</p>
<h3 id="flagging">Flagging</h3>
<p>The users have some moderation tools at their disposal, too - downvotes,
flagging, and vouching. When a comment is downvoted, it is moved towards the
bottom of the thread and is gradually colored grayer to become less visible, and
can be reversed with upvotes. When a comment gets enough flags, it is removed
entirely unless you have showdead enabled in your profile. Flagged posts are
downweighted or killed when enough flags accumulate. These posts are moved to
the bottom of the ranked posts even if you have showdead enabled, and can also
be seen in /new. Flagging can be reversed with the vouch feature, but flagged
stories are almost never vouched back into existence.</p>
<p><strong>Note</strong>: detection of post flagged status is very buggy with my tools. The API
exposes a boolean for dead posts, so I have to fall back on scraping to
distinguish between different kinds of dead-ness. But this is pretty buggy, so I
encourage you to examine the post yourself when browsing my site if in doubt.</p>
<h3 id="are-these-tools-abused-for-censorship">Are these tools abused for censorship?</h3>
<p>Well, with all of this data, was I able to find evidence of censorship? There
are two answers: yes and maybe. The &ldquo;yes&rdquo; is because users are <em>definitely</em>
abusing the flagging feature. The &ldquo;maybe&rdquo; is because moderator action leaves
room for interpretation. I&rsquo;ll get to that later, but let&rsquo;s start with flagging
abuse.</p>
<h4 id="censorship-by-users">Censorship by users</h4>
<p>The threshold for removing a story due to flags is rather low, though I don&rsquo;t
know the exact number. Here are some posts whose flags I consider questionable:</p>
<p><a href="https://hn.0x2237.club/post/15129859">Harvey, the Storm That Humans Helped Cause</a> (23 points)</p>
<p><a href="https://hn.0x2237.club/post/15116132">ES6 imports syntax considered harmful</a> (12 points)</p>
<p><a href="https://hn.0x2237.club/post/14415411">White-Owned Restaurants Shamed for Serving Ethnic Food</a> (33 points)</p>
<p><a href="https://hn.0x2237.club/post/14152602">The evidence is piling up – Silicon Valley is being destroyed</a> (27 points)</p>
<p>A good place to discover these sorts of events is to browse hnstats for posts
deleted with a score <a href="https://hn.0x2237.club/deleted-10">&gt;10 points</a>. There are
also occasions where the flags seem to be due to a poor title, which is a
fixable problem for which flagging is a harsh solution:</p>
<p><a href="https://hn.0x2237.club/post/14679207">Poettering downvoted 5 (at time of this writing) times</a></p>
<p><a href="https://hn.0x2237.club/post/14676296">Germany passes law restricting free speech on the internet</a></p>
<p>The main issue with flags is that they&rsquo;re often used as an alternative to the
HN&rsquo;s (by design) lack of a downvoting feature. HN also gives users no guidelines
on <em>why</em> they should flag posts, which mixes poorly with automated removal of a
post given enough flags.</p>
<h4 id="censorship-by-moderators">Censorship by moderators</h4>
<p>Moderator actions are a bit more difficult to judge. Moderation on HN is a black
box - most of the time, moderators don&rsquo;t make the reasoning behind their actions
clear. Many of their actions (such as rank influence) are also subtle and easy
to miss. Thankfully they are often receptive to being asked why some moderation
occurred, but only as often as not.</p>
<p>Anecdotally, I also find that moderators occasionally moderate selectively, and
keep quiet in the face of users asking them why. Notably this is a problem for
<abbr title="links for which you have to pay money to read the
content">paywalled</abbr> articles, which are <a href="https://news.ycombinator.com/newsfaq.html">against the
rules</a> but are often allowed to
remain.</p>
<p>Dan sent me a response to this section:</p>
<blockquote>
<p>[It&rsquo;s true that we don&rsquo;t explain our actions], but mostly because it would be
hopeless to try. We could do that all day and still not make everything clear,
because the quantity is overwhelming and the cost of a high-quality explanation
is steep. Moreover the experiment would be impossible to run because one
would die of boredom long before reaching 100%. Our solution to this
conundrum is not to try to explain everything but to answer specific
questions as best we can. We don&rsquo;t answer every question, but that&rsquo;s
mostly because we don&rsquo;t see every question. If people ask us things on
HN itself, odds are we won&rsquo;t see it (also, the site guidelines ask
users not to do this, per (<a href="https://news.ycombinator.com/newsguidelines.html">our
guidelines</a>). If they
<a href="mailto:hn@ycombinator.com">email us</a>, the probability of a
response approaches 1.</p></blockquote>
<p>I can attest personally to success reaching out to <a href="mailto:hn@ycombinator.com">hn@ycombinator.com</a> for
clarification and even reversal of some moderator decisions, though at a
response ratio further from 1 than this implies. That being said, I don&rsquo;t think
that private discourse between the submitter and the moderators is the only
solution. Other people may be invested in the topic, too - users who upvoted the
story might not notice its disappearance, but would like more attention drawn to
the topic and enjoy more discussion. Commenters are even more invested in the
posts. The submitter is not the only one whoses interests are at stake. This is
even more of a problem for posts which are moderated via user flags - the HN
mods are pretty discretionate but users are much less so.</p>
<p>Explaining every action is not necessary - I don&rsquo;t think anyone needs you to
explain why someone was banned when they were submitting links to earn money at
home in your spare time. However, I think a public audit log of moderator
actions would go a long way, and could be done by software - avoiding the need
to explain everything. I envision a change to your UI for banning users or
moderating posts with that adds a dropdown of common reasons and a textbox for
further elaboration when appropriate - then makes this information appear on
/moderation.</p>
<h3 id="conclusions">Conclusions</h3>
<p>I should again emphasize that most moderator actions are benign and agreeable.
They do a great job on the whole, but striving to do even better would be
admirable. I suggest a few changes:</p>
<ul>
<li>Make a public audit log of moderation activity, or at least reach out to me to
see what small changes could be done to help improve my statistics gathering.</li>
<li>Minimize use of more subtle actions like rank influence, and when used,</li>
<li>More frequently leave comments on posts where moderation has occurred
explaining the rationale and opening an avenue for public discussion and/or
appeal.</li>
<li>Put flagged posts into a queue for moderator review and don&rsquo;t remove posts
simply because they&rsquo;re flagged.</li>
<li>Consider appointing one or two moderators from the community, ideally people
with less bias towards SV or startup culture.</li>
</ul>
<p>Hacker News is a great place for just that - hacker news. It has been for a long
time and I hope it continues to be. Let&rsquo;s work together on running it
transparently to the benefit of all.</p>]]></description><pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate></item><item><title>Killing ants with nuclear weapons</title><link>https://drewdevault.com/2017/09/08/Complicated.html</link><description><![CDATA[<p>Complexity is quickly becoming an epidemic. In this developer&rsquo;s opinion,
complexity is the ultimate enemy - the final boss - of good software design.
Complicated software generally has complicated bugs. Simple software generally
has simple bugs. It&rsquo;s as easy as that.</p>
<p>It&rsquo;s for this reason that I strongly dislike many of the tools and architectures
that have been proliferating over the past few years, particularly in web
development. When I look at a tool like Gulp, I wonder if its success is largely
attributable to people not bothering to learn how Makefiles work. Tools like
Docker make me wonder if they&rsquo;re an excuse to avoid learning how to do ops or
how to use your distribution&rsquo;s package manager. Chef makes me wonder if its
users forgot that shell scripts can use SSH, too.</p>
<p>These tools offer a value add. But how does it compare to the cost of the
additional complexity? In my opinion, in <em>every case</em><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> the value add is far
outweighed by the massive complexity cost. This complexity cost shows itself
when the system breaks (and it will - all systems break) and you have to dive
into these overengineered tools. Don&rsquo;t forget that dependencies are fallible,
and never add a dependency you wouldn&rsquo;t feel comfortable debugging. The time
spent learning these complicated systems to fix the inevitable bugs is surely
much less than the time spent learning the venerable tools that fill the same
niche (or, in many cases, accepting that you don&rsquo;t even need this particular
shiny thing).</p>
<p>Reinventing the wheel is a favorite pastime of mine. There are many such wheels
that I have reinvented or am currently reinventing. The problem isn&rsquo;t in
reinventing the wheel - it&rsquo;s in doing so before you actually understand the
wheel<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. I wonder if many of these complicated tools are written by people who
set out before they fully understood what they were replacing, and I&rsquo;m <em>certain</em>
that they&rsquo;re mostly used by such people. I understand it may seem intimidating
to learn venerable tools like make(1) or chroot(1), but they&rsquo;re just a short man
page away<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>It&rsquo;s not just tools, though. I couldn&rsquo;t explain the features of C++ in fewer than
several thousand words (same goes for Rust). GNU continues to add proprietary
extensions and unnecessary features to everything they work on. Every update
shipped to your phone is making it slower to ensure you&rsquo;ll buy the new one.
Desktop applications are shipping entire web browsers into your disk and your
RAM; server applications ship entire operating systems in glorified chroots; and
hundreds of megabytes of JavaScript, ads, and spyware are shoved down the pipe
on every web page you visit.</p>
<p>This is an epidemic. It&rsquo;s time we cut this shit out. Please, design your systems
with simplicity in mind. Moore&rsquo;s law is running out<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>, the free lunch is
coming to an end. We have heaps and heaps of complicated, fragile abstractions
to dismantle.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>That I&rsquo;ve seen (or heard of)&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>&ldquo;Those who don&rsquo;t understand UNIX are doomed to reinvent it, poorly.&rdquo;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Of course, <a href="https://xkcd.com/912/"><em>&quot;&hellip;full documentation for make is maintained as a GNU info page&hellip;&quot;</em></a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Transistors are approaching a scale where quantum problems come into play, and we are limited by the speed of light without getting any smaller. The RAM bottleneck is another serious issue, for which innovation has been stagnant for some time now.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 8 Sep 2017 00:00:00 +0000</pubDate></item><item><title>When not to use a regex</title><link>https://drewdevault.com/2017/08/13/When-not-to-use-a-regex.html</link><description><![CDATA[<p>The other day, I saw <a href="https://github.com/zeeshanu/learn-regex">Learn regex the easy
way</a>. This is a great resource, but I
felt the need to pen a post explaining that regexes are usually not the right
approach.</p>
<p>Let&rsquo;s do a little exercise. I googled &ldquo;URL regex&rdquo; and here&rsquo;s the first Stack
Overflow result:</p>
<pre tabindex="0"><code>https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&amp;//=]*)
</code></pre><p style="text-align: right">
<small><a href="https://stackoverflow.com/a/3809435/1191610">source</a></small>
</p>
<p>This is a bad regex. Here are some valid URLs that this regex fails to match:</p>
<ul>
<li><a href="http://x.org">http://x.org</a></li>
<li><a href="http://nic.science">http://nic.science</a></li>
<li>http://名がドメイン.com (warning: this is a parked domain)</li>
<li><a href="http://example.org/url,with,commas">http://example.org/url,with,commas</a></li>
<li><a href="https://en.wikipedia.org/wiki/Harry_Potter_(film_series)">https://en.wikipedia.org/wiki/Harry_Potter_(film_series)</a></li>
<li>http://127.0.0.1</li>
<li>http://[::1] (ipv6 loopback)</li>
</ul>
<p>Here are some invalid URLs the regex is fine with:</p>
<ul>
<li><a href="http://exam..ple.org">http://exam..ple.org</a></li>
<li><a href="http://--example.org">http://--example.org</a></li>
</ul>
<p>This answer has been revised 9 times on Stack Overflow, and this is the best
they could come up with. Go back and read the regex. Can you tell where each of
these bugs are? How long did it take you? If you received a bug report in your
application because one of these URLs was handled incorrectly, do you understand
this regex well enough to fix it? If your application has a URL regex, go find
it and see how it fares with these tests.</p>
<p>Complicated regexes are opaque, unmaintainable, and often wrong. The correct
approach to validating a URL is as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">urlparse</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">is_url_valid</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">urlparse</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">False</span>
</span></span></code></pre></div><p>A regex is useful for validating <em>simple</em> patterns and for <em>finding</em> patterns in
text. For anything beyond that it&rsquo;s almost certainly a terrible choice. Say you
want to&hellip;</p>
<p><strong>validate an email address</strong>: try to send an email to it!</p>
<p><strong>validate password strength requirements</strong>: estimate the complexity with
<a href="https://github.com/dropbox/zxcvbn">zxcvbn</a>!</p>
<p><strong>validate a date</strong>: use your standard library!
<a href="https://docs.python.org/3.6/library/datetime.html#datetime.datetime.strptime">datetime.datetime.strptime</a></p>
<p><strong>validate a credit card number</strong>: run the <a href="https://en.wikipedia.org/wiki/Luhn_algorithm">Luhn
algorithm</a> on it!</p>
<p><strong>validate a social security number</strong>: alright, use a regex. But don&rsquo;t expect
the number to be assigned to someone until you ask the Social Security
Administration about it!</p>
<p>Get the picture?</p>]]></description><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate></item><item><title>State of Sway August 2017</title><link>https://drewdevault.com/2017/08/09/State-of-Sway-August-2017.html</link><description><![CDATA[<p>Is it already time to write another one of these? Phew, time flies. Sway marches
ever forward. Sway 0.14.0 was recently released, adding much asked-after support
for tray icons and fixing some long-standing bugs. As usual, we already have
some exciting features slated for 0.15.0 as well, notably some cool improvements
to clipboard support. Look forward to it!</p>
<p>Today Sway has 24,123 lines of C (and 4,489 lines of header files) written by 94
authors across 2,345 commits. These were written through 689 pull requests and
624 issues. Sway packages are available today in the repos of almost every Linux
distribution.</p>
<p><a href="https://sr.ht/ICd5.png"><img src="https://sr.ht/ICd5.png" alt=""></a></p>
<p>For those who are new to the project, <a href="http://swaywm.org">Sway</a> is an
i3-compatible Wayland compositor. That is, your existing <a href="http://i3wm.org/">i3</a>
configuration file will work as-is on Sway, and your keybindings and colors and
fonts and for_window rules and so on will all be the same. It&rsquo;s i3, but for
Wayland, plus it&rsquo;s got some bonus features. Here&rsquo;s a quick rundown of what&rsquo;s
new since the <a href="https://drewdevault.com/2017/04/29/State-of-sway-April-2017.html">previous state of Sway</a>:</p>
<ul>
<li>Initial support for tray icons</li>
<li>X11/Wayland clipboard synchronization</li>
<li>nvidia proprietary driver support*</li>
<li>i3&rsquo;s marks</li>
<li>i3&rsquo;s mouse button bindings</li>
<li>Lots of i3 compatibility improvements</li>
<li>Lots of documentation improvements</li>
<li>Lots of bugfixes</li>
</ul>
<p>If this seems like a shorter list than usual, it&rsquo;s because we&rsquo;ve also been
making great progress on wlroots too - no doubt thanks to the help of the many
contributors doing amazing work in there. For those unaware, wlroots is our
project to replace wlc with a new set of libraries for Wayland compositor
underpinnings (it fills a similar niche as libweston). We now have a working DRM
backend (including output rotation and hardware cursors) and libinput backend
(including touchscreen and drawing tablet support), and we&rsquo;re making headway now
on drawing Wayland clients on screen.  I&rsquo;m very excited about our pace and
direction - keep an eye on it
<a href="https://github.com/SirCmpwn/wlroots/issues/9">here</a>. I have also taken over for
Cloudef as the maintainer of <a href="https://github.com/Cloudef/wlc">wlc</a> during the
transition.</p>
<p>In other news, our bounty program continues to go strong. Our <a href="https://github.com/SirCmpwn/sway/issues/986">current
pot</a> is $1200 and we&rsquo;ve paid out
$80 so far (and a $280 payout is on the horizon for tray icons). I&rsquo;ve also
started a <a href="https://www.patreon.com/sircmpwn">Patreon page</a>, where 26 patrons are
generously supporting my work as maintainer of Sway and other projects. Many
thanks to everyone who has contributed financially to Sway&rsquo;s success!</p>
<p>That wraps up today&rsquo;s post. Thanks for using Sway!</p>
<p><small class="text-muted">* I hate this crappy driver. It works, but don&rsquo;t
expect to receive much support for it. <a
href="https://www.youtube.com/watch?v=iYWzMvlj2RQ">Linus said it
best</a>.</small></p>]]></description><pubDate>Wed, 9 Aug 2017 00:00:00 +0000</pubDate></item><item><title>Archive it or you will miss it</title><link>https://drewdevault.com/2017/06/19/Archive-it-or-miss-it.html</link><description><![CDATA[<p>Let&rsquo;s open with some quotes from the <a href="https://en.wikipedia.org/wiki/Link_rot">Wikipedia article on link
rot</a>:</p>
<blockquote>
<p>In 2014, bookmarking site Pinboard&rsquo;s owner Maciej Cegłowski reported a “pretty
steady rate” of 5% link rot per year&hellip; approximately 50% of the URLs in
U.S. Supreme Court opinions no longer link to the original information&hellip;
(analysis of) more than 180,000 links from references in&hellip; three major open
access publishers&hellip; found that overall 24.5% of links cited were no longer
available.</p></blockquote>
<p>I hate link rot. It&rsquo;s been common when servers disappeared or domains expired,
in the past and still today. Today, link rot is on the rise under the influence
of more sinister factors. Abuse of DMCA. Region locking. Paywalls.  Maybe it
just no longer serves the interests of a walled garden to host the content.
Maybe the walled garden went out of business. Users rely on platforms to host
content and links rot by the millions when the platforms die. Movies disappear
from Netflix.  Music vanishes from Spotify. Accounts are banned from SoundCloud.
YouTube channels are banned over false DMCA requests issued by robots.</p>
<p>At this point, link rot is an axiom of the internet. In the face of this, I
store a personal offline archive of <em>anything</em> I want to see twice. When I see a
cool YouTube video I like, I archive the entire channel right away. Rather than
subscribe to it, I update my archive on a cronjob. I scrape content out of RSS
feeds and into offline storage and I have dozens of websites archived with wget.
I mirror most git repositories I&rsquo;m interested in. I have DRM free offline copies
of all of my music, TV shows, and movies, ill-begotten or not.</p>
<p>I suggest you do the same. It&rsquo;s sad that it&rsquo;s come to this. Let&rsquo;s all do
ourselves a favor. Don&rsquo;t build unsustainable platforms and ask users to trust
you with their data. Pay for your domain. Give people DRM free downloads. Don&rsquo;t
cripple your software when it can&rsquo;t call home. If you run a website, let
archive.org scrape it.</p>
<p>And archive anything you want to see again.</p>
<pre tabindex="0"><code>0 0 * * 0 cd ~/archives &amp;&amp; wget -m https://drewdevault.com
</code></pre>]]></description><pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate></item><item><title>An introduction to Wayland</title><link>https://drewdevault.com/2017/06/10/Introduction-to-Wayland.html</link><description><![CDATA[<p>Wayland is the new hotness on the Linux graphics stack. There are plenty of
introductions to Wayland that give you the high level details on how the stack
is laid out how applications talk directly to the kernel with EGL and so on, but
that doesn&rsquo;t give you much practical knowledge. I&rsquo;d like to instead share with
you details about how the protocol actually works and how you can use it.</p>
<p>Let&rsquo;s set aside the idea that Wayland has anything to do with graphics. Instead
we&rsquo;ll treat it like a generic protocol for two parties to share and talk about
resources. These resources are at the heart of the Wayland protocol - resources
like a keyboard or a surface to draw on. Each of these resources exposes an API
for engaging with it, including functions you can call and <em>events</em> you can
listen to.</p>
<p>Some of these resources are <em>globals</em>, which are exactly what they sound like.
These resources include things like <strong>wl_outputs</strong>, which are the displays
connected to your graphics card. Other resources, like <strong>wl_surface</strong>, require
the client to ask the server to allocate new resources when needed. Negotiating
for new resources is generally possible through the API of some global resource.</p>
<p>Your Wayland client gets started by obtaining a reference to the <strong>wl_display</strong>
like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wl_display</span> <span class="o">*</span><span class="n">display</span> <span class="o">=</span> <span class="nf">wl_display_connect</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span></span></code></pre></div><p>This establishes a connection to the Wayland server. The most important role of
the display, from the client perspective, is to provide the <strong>wl_registry</strong>.
The registry enumerates the globals available on the server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wl_registry</span> <span class="o">*</span><span class="n">registry</span> <span class="o">=</span> <span class="nf">wl_display_get_registry</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
</span></span></code></pre></div><p>The registry emits an <em>event</em> every time the server adds or removes a global.
<em>Listening</em> to these events is done by providing an implementation of a
<strong>wl_registry_listener</strong>, like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">global_add</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">our_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="n">wl_registry</span> <span class="o">*</span><span class="n">registry</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint32_t</span> <span class="n">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint32_t</span> <span class="n">version</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// TODO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">global_remove</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">our_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="n">wl_registry</span> <span class="o">*</span><span class="n">registry</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint32_t</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// TODO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wl_registry_listener</span> <span class="n">registry_listener</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">global</span> <span class="o">=</span> <span class="n">global_add</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">global_remove</span> <span class="o">=</span> <span class="n">global_remove</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Interfaces like this are used to listen to events from all kinds of resources.
Attaching the listener to the registry is done like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">our_data</span> <span class="o">=</span> <span class="cm">/* arbitrary state you want to keep around */</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">wl_registry_add_listener</span><span class="p">(</span><span class="n">registry</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">registry_listener</span><span class="p">,</span> <span class="n">our_data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">wl_display_dispatch</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
</span></span></code></pre></div><p>During the <code>wl_display_dispatch</code>, the <code>global_add</code> function is called for each
global on the server. Subsequent calls to <code>wl_display_dispatch</code> may call
<code>global_remove</code> when the server destroys globals. The <code>name</code> passed into
<code>global_add</code> is more like an ID, and identifies this resource. The <code>interface</code>
tells you what API the resource implements, and distinguishes things like a
<strong>wl_output</strong> from a <strong>wl_seat</strong>. The API these resources implement are
described with XML files like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- For copyright information, see https://git.io/vHyIB --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;protocol</span> <span class="na">name=</span><span class="s">&#34;gamma_control&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;interface</span> <span class="na">name=</span><span class="s">&#34;gamma_control_manager&#34;</span> <span class="na">version=</span><span class="s">&#34;1&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;request</span> <span class="na">name=</span><span class="s">&#34;destroy&#34;</span> <span class="na">type=</span><span class="s">&#34;destructor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;request</span> <span class="na">name=</span><span class="s">&#34;get_gamma_control&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&#34;id&#34;</span> <span class="na">type=</span><span class="s">&#34;new_id&#34;</span> <span class="na">interface=</span><span class="s">&#34;gamma_control&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&#34;output&#34;</span> <span class="na">type=</span><span class="s">&#34;object&#34;</span> <span class="na">interface=</span><span class="s">&#34;wl_output&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/request&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/interface&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;interface</span> <span class="na">name=</span><span class="s">&#34;gamma_control&#34;</span> <span class="na">version=</span><span class="s">&#34;1&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&#34;error&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">name=</span><span class="s">&#34;invalid_gamma&#34;</span> <span class="na">value=</span><span class="s">&#34;0&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/enum&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;request</span> <span class="na">name=</span><span class="s">&#34;destroy&#34;</span> <span class="na">type=</span><span class="s">&#34;destructor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;request</span> <span class="na">name=</span><span class="s">&#34;set_gamma&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&#34;red&#34;</span> <span class="na">type=</span><span class="s">&#34;array&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&#34;green&#34;</span> <span class="na">type=</span><span class="s">&#34;array&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&#34;blue&#34;</span> <span class="na">type=</span><span class="s">&#34;array&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/request&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;request</span> <span class="na">name=</span><span class="s">&#34;reset_gamma&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;event</span> <span class="na">name=</span><span class="s">&#34;gamma_size&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&#34;size&#34;</span> <span class="na">type=</span><span class="s">&#34;uint&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/event&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/interface&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/protocol&gt;</span>
</span></span></code></pre></div><p>A typical Wayland server implementing this protocol would create a
<code>gamma_control_manager</code> global and add it to the registry. The client then binds
to this interface in our <code>global_add</code> function like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;wayland-gamma-control-client-protocol.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="n">wl_output</span> <span class="o">*</span><span class="n">example</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// gamma_control_manager.name is a constant: &#34;gamma_control_manager&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nf">strcmp</span><span class="p">(</span><span class="n">interface</span><span class="p">,</span> <span class="n">gamma_control_manager</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">gamma_control_manager</span> <span class="o">*</span><span class="n">mgr</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">        <span class="nf">wl_registry_bind</span><span class="p">(</span><span class="n">registry</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="o">&amp;</span><span class="n">gamma_control_manager_interface</span><span class="p">,</span> <span class="n">version</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">gamma_control</span> <span class="o">*</span><span class="n">control</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">        <span class="nf">gamma_control_manager_get_gamma_control</span><span class="p">(</span><span class="n">mgr</span><span class="p">,</span> <span class="n">example</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">gamma_control_set_gamma</span><span class="p">(</span><span class="n">control</span><span class="p">,</span> <span class="p">...);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>These functions are generated by running the XML file through <code>wayland-scanner</code>,
which outputs a header and C glue code. These XML files are called &ldquo;protocol
extensions&rdquo; and let you add arbitrary extensions to the protocol. The core
Wayland protocols themselves are described with similar XML files.</p>
<p>Using the Wayland protocol to create a surface to display pixels with consists
of these steps:</p>
<ol>
<li>Obtain a <strong>wl_display</strong> and use it to obtain a <strong>wl_registry</strong>.</li>
<li>Scan the registry for globals and grab a <strong>wl_compositor</strong> and
a <strong>wl_shm_pool</strong>.</li>
<li>Use the <strong>wl_compositor</strong> interface to create a <strong>wl_surface</strong>.</li>
<li>Use the <strong>wl_shell</strong> interface to describe your surface&rsquo;s role.</li>
<li>Use the <strong>wl_shm</strong> interface to allocate shared memory to store pixels in.</li>
<li>Draw something into your shared memory buffers.</li>
<li>Attach your shared memory buffers to the <strong>wl_surface</strong>.</li>
</ol>
<p>Let&rsquo;s break this down.</p>
<p>The <strong>wl_compositor</strong> provides an interface for interacting with the
<em>compositor</em>, that is the part of the Wayland server that <em>composites</em> surfaces
onto the screen. It&rsquo;s responsible for creating surface resources for clients to
use via <code>wl_compositor_create_surface</code>. This creates a <strong>wl_surface</strong> resource,
which you can attach pixels to for the compositor to render.</p>
<p>The role of a surface is undefined by default - it&rsquo;s just a place to put pixels.
In order to get the compositor to do anything with them, you must give the
surface a <em>role</em>. Roles could be anything - desktop background, system tray, etc -
but the most common role is a <em>shell surface</em>. To create these, you take your
wl_surface and hand it to the <strong>wl_shell</strong> interface. You&rsquo;ll get back a
<strong>wl_shell_surface</strong> resource, which defines your surface&rsquo;s purpose and gives
you an interface to do things like set the window title.</p>
<p>Attaching pixel buffers to a wl_surface is pretty straightforward. There are two
primary ways of creating a buffer that both you and the compositor can use: EGL
and shared memory. EGL lets you use an OpenGL context that renders directly on
the GPU with minimal compositor involvement (fast) and shared memory (via
<strong>wl_shm</strong>) allows you to simply dump pixels in memory and hand them to the
compositor (flexible). There are many other Wayland interfaces I haven&rsquo;t
covered, giving you everything from input devices (via <strong>wl_seat</strong>) to clipboard
access (via <strong>wl_data_source</strong>), plus many protocol extensions. Learning more
about these is an exercise left to the reader.</p>
<p>Before we wrap this article up, let&rsquo;s take a brief moment to discuss the server.
Most of the concepts here are already familiar to you by now. The Wayland server
also utilizes a <strong>wl_display</strong>, but differently from the client. The display on
the server has ownership over the <em>event loop</em>, via <strong>wl_event_loop</strong>. The event
loop of a Wayland server might look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wl_display</span> <span class="o">*</span><span class="n">display</span> <span class="o">=</span> <span class="nf">wl_display_create</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="n">wl_event_loop</span> <span class="o">*</span><span class="n">event_loop</span> <span class="o">=</span> <span class="nf">wl_display_get_event_loop</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">wl_event_loop_dispatch</span><span class="p">(</span><span class="n">event_loop</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The event loop has a lot of helpful utilities for the Wayland server to take
advantage of, including internal event sources, timers, and file descriptor
monitoring. Before starting the event loop the server is going to start
obtaining its own resources and creating Wayland globals for them with
<code>wl_global_create</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wl_global</span> <span class="o">*</span><span class="n">global</span> <span class="o">=</span> <span class="nf">wl_global_create</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">display</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">&amp;</span><span class="n">wl_output_interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span> <span class="cm">/* version */</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">our_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">wl_output_bind</span><span class="p">);</span>
</span></span></code></pre></div><p>The <code>wl_output_bind</code> function here is going to be called when a client attempts
to bind to this resource via <code>wl_registry_bind</code>, and will look something like
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">wl_output_bind</span><span class="p">(</span><span class="k">struct</span> <span class="n">wl_client</span> <span class="o">*</span><span class="n">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">void</span> <span class="o">*</span><span class="n">our_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint32_t</span> <span class="n">their_version</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint32_t</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">wl_resource</span> <span class="o">*</span><span class="n">resource</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">        <span class="nf">wl_resource_create_checked</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">wl_output_interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">their_version</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">our_version</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...send output modes or whatever else you need to do
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>Some of the resources a server is going to be managing might include:</p>
<ul>
<li>DRM state for direct access to outputs</li>
<li>GLES context (or another GL implementation) for rendering</li>
<li>libinput for input devices</li>
<li>udev for hotplugging</li>
</ul>
<p>Through the Wayland protocol, the server provides an abstraction on top of these
resources and offers them to clients. Some servers go further, with novel ways
of compositing clients or handling input. Some provide additional interactivity,
such as desktop shells that are actually running in the compositor rather than
external clients. Other servers are designed for mobile use and provide a user
experience that more closely matches the mobile experience than the traditional
desktop experience. Wayland is designed to be flexible!</p>]]></description><pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate></item><item><title>Limited &quot;generics&quot; in C without macros or UB</title><link>https://drewdevault.com/2017/06/05/Limited-generics-in-C.html</link><description><![CDATA[<p>I should start this post off by clarifying that what I have to show you today is
not, in fact, generics. However, it&rsquo;s useful in some situations to solve the
same problems that generics might. This is a pattern I&rsquo;ve started using to
reduce the number of <code>void*</code> pointers floating around in my code: multiple
definitions of a struct.</p>
<p><strong>Errata</strong>: we rolled this approach back in wlroots because it causes problems
with LTO. I no longer recommend it.</p>
<p>Let&rsquo;s take a look at a specific example. In
<a href="https://github.com/SirCmpwn/wlroots">wlroots</a>, <code>wlr_output</code> is a generic type
that can be implemented by any number of backends, like DRM (direct rendering
manager), wayland windows, X11 windows, RDP outputs, etc. The <code>wlr/types.h</code>
header includes this structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wlr_output_impl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wlr_output_state</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wlr_output</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="k">struct</span> <span class="n">wlr_output_impl</span> <span class="o">*</span><span class="n">impl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">wlr_output_state</span> <span class="o">*</span><span class="n">state</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// [...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">wlr_output_enable</span><span class="p">(</span><span class="k">struct</span> <span class="n">wlr_output</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">enable</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">wlr_output_set_mode</span><span class="p">(</span><span class="k">struct</span> <span class="n">wlr_output</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">wlr_output_mode</span> <span class="o">*</span><span class="n">mode</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">wlr_output_destroy</span><span class="p">(</span><span class="k">struct</span> <span class="n">wlr_output</span> <span class="o">*</span><span class="n">output</span><span class="p">);</span>
</span></span></code></pre></div><p><code>wlr_output_impl</code> is defined elsewhere:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wlr_output_impl</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">enable</span><span class="p">)(</span><span class="k">struct</span> <span class="n">wlr_output_state</span> <span class="o">*</span><span class="n">state</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">enable</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="p">(</span><span class="o">*</span><span class="n">set_mode</span><span class="p">)(</span><span class="k">struct</span> <span class="n">wlr_output_state</span> <span class="o">*</span><span class="n">state</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="n">wlr_output_mode</span> <span class="o">*</span><span class="n">mode</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">destroy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">wlr_output_state</span> <span class="o">*</span><span class="n">state</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wlr_output</span> <span class="o">*</span><span class="nf">wlr_output_create</span><span class="p">(</span><span class="k">struct</span> <span class="n">wlr_output_impl</span> <span class="o">*</span><span class="n">impl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="n">wlr_output_state</span> <span class="o">*</span><span class="n">state</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">wlr_output_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">wlr_output</span> <span class="o">*</span><span class="n">output</span><span class="p">);</span>
</span></span></code></pre></div><p>Nowhere, however, is <code>wlr_output_state</code> defined. It&rsquo;s left an incomplete type
throughout all of the common <code>wlr_output</code> code. The &ldquo;generic&rdquo; part is that each
output implementation, in its own private headers, defines the
<code>wlr_output_state</code> struct for itself, like the DRM backend:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">wlr_output_state</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uint32_t</span> <span class="n">connector</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uint32_t</span> <span class="n">crtc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">drmModeCrtc</span> <span class="o">*</span><span class="n">old_crtc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">wlr_drm_renderer</span> <span class="o">*</span><span class="n">renderer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">gbm_surface</span> <span class="o">*</span><span class="n">gbm</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">EGLSurface</span> <span class="o">*</span><span class="n">egl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">pageflip_pending</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">enum</span> <span class="n">wlr_drm_output_state</span> <span class="n">state</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// [...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span></code></pre></div><p>This allows implementations of the <code>enable</code>, <code>set_mode</code>, and <code>destroy</code> functions
to avoid casting a <code>void*</code> to the appropriate type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="k">struct</span> <span class="n">wlr_output_impl</span> <span class="n">output_impl</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">enable</span> <span class="o">=</span> <span class="n">wlr_drm_output_enable</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// [...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">wlr_drm_output_enable</span><span class="p">(</span><span class="k">struct</span> <span class="n">wlr_output_state</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">bool</span> <span class="n">enable</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">wlr_backend_state</span> <span class="o">*</span><span class="n">state</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">        <span class="nf">wl_container_of</span><span class="p">(</span><span class="n">output</span><span class="o">-&gt;</span><span class="n">renderer</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">renderer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">output</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">!=</span> <span class="n">DRM_OUTPUT_CONNECTED</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">enable</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">drmModeConnectorSetProperty</span><span class="p">(</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">output</span><span class="o">-&gt;</span><span class="n">connector</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">output</span><span class="o">-&gt;</span><span class="n">props</span><span class="p">.</span><span class="n">dpms</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">DRM_MODE_DPMS_ON</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// [...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">drmModeConnectorSetProperty</span><span class="p">(</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">output</span><span class="o">-&gt;</span><span class="n">connector</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">output</span><span class="o">-&gt;</span><span class="n">props</span><span class="p">.</span><span class="n">dpms</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">DRM_MODE_DPMS_STANDBY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// [...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="n">wlr_output</span> <span class="n">output</span> <span class="o">=</span> <span class="nf">wlr_output_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">output_impl</span><span class="p">,</span> <span class="n">output</span><span class="p">);</span>
</span></span></code></pre></div><p>The limitations of this approach are apparent: you cannot work with multiple
definitions of <code>wlr_output_state</code> in the same file. However, you get improved
type safety, have to write less code, and improve readability.</p>]]></description><pubDate>Mon, 5 Jun 2017 00:00:00 +0000</pubDate></item><item><title>Rotating passwords in bulk in the wake of security events</title><link>https://drewdevault.com/2017/05/11/Rotating-passwords.html</link><description><![CDATA[<p>I&rsquo;ve been putting this post off for a while. Do you remember the <a href="https://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/">CloudFlare
security
problem</a>
that happened a few months ago? This is the one that disclosed huge amounts of
sensitive information for huge numbers websites. When this happened, your
accounts on <a href="https://github.com/pirate/sites-using-cloudflare">thousands of
websites</a> were potentially
compromised.</p>
<p>Updating passwords for all of these services at once was a major source of
frustration for users. Updating a single password can take 5 minutes, and
changing dozens of them might take hours. I decided that I wanted to make this
process easier.</p>
<pre tabindex="0"><code>$ ./pass-rotate github.com linode.com news.ycombinator.com twitter.com
Rotating github.com... 
  Enter your two factor (TOTP) code:
OK
Rotating linode.com... 
  Enter your two-factor (TOTP) code:
OK
Rotating news.ycombinator.com... OK
Rotating twitter.com... 
  Enter your SMS authorization code:
OK                                                                       
</code></pre><p>I just changed 4 passwords in about 20 seconds. This is
<a href="https://github.com/SirCmpwn/pass-rotate">pass-rotate</a>, which is basically
youtube-dl for rotating passwords. It integrates with your password manager to
make it easy to change your password. pass-rotate is also provided in the form
of a library that password managers can directly integrate with to provide
first-class support for password rotation with a shared implementation of
various websites. Not only can it help you rotate passwords after security
events, but it can be used for periodic password rotation to keep your accounts
safer in general.</p>
<p>How this was basically done is by reverse engineering the password change flow of
each of the websites it supports. Each provider&rsquo;s backend submits HTTP requests
that simulates logging into the website and interacting with the password reset
form. This is often quite simple, like
<a href="https://github.com/SirCmpwn/pass-rotate/blob/master/passrotate/providers/github.py">github.py</a>,
but can sometimes be quite complex, like
<a href="https://github.com/SirCmpwn/pass-rotate/blob/master/passrotate/providers/namecheap.py">namecheap.py</a>.</p>
<p>The current list of supported services is available
<a href="https://github.com/SirCmpwn/pass-rotate/wiki/Currently-supported-services">here</a>.
There&rsquo;s also an issue to discuss making a standardized mechanism for automated
password rotation <a href="https://github.com/SirCmpwn/pass-rotate/issues/1">here</a>. At
the time of writing, the list of supported services is:</p>
<ul>
<li>Cloudflare <sub>✗ TOTP</sub></li>
<li>Digital Ocean <sub>✗ TOTP</sub></li>
<li>Discord <sub>✓ TOTP</sub></li>
<li>GitHub <sub>✓ TOTP ✗ U2F</sub></li>
<li>Linode <sub>✓ TOTP</sub></li>
<li>NameCheap <sub>✓ SMS</sub></li>
<li>Pixiv</li>
<li>Twitter <sub>✓ SMS ✓ TOTP</sub></li>
<li>YCombinator</li>
</ul>
<p>Adding new services is easy - check out <a href="https://github.com/SirCmpwn/pass-rotate/blob/master/CONTRIBUTING.md">the
guide</a>. I
would be happy to merge your pull requests. Please add websites you use and
websites you maintain!</p>
<p>I also set up a Patreon campaign today. If you&rsquo;d like to contribute to my work,
please visit <a href="https://patreon.com/sircmpwn">the Patreon page</a>. This supports all
of my open source projects, but if you want to support pass-rotate in
particular feel free to let me know when you make your contribution. This kind
of project needs long term maintenance to support countless providers and
keep up with changes to them. Feel free to let me know what service providers
you want me to add support for when you make your pledge!</p>]]></description><pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate></item><item><title>Building a &quot;real&quot; Linux distro</title><link>https://drewdevault.com/2017/05/05/Building-a-real-Linux-distro.html</link><description><![CDATA[<p>I recently saw a post on Hacker News: &ldquo;<a href="https://github.com/MichielDerhaeg/build-linux">Build yourself a
Linux</a>&rdquo;, a cool project
that guides you through building a simple Linux system. It&rsquo;s similar to Linux
from Scratch in that it helps you build a simple Linux system for personal use.
I&rsquo;d like to supplement this with some insight into my experience with a more
difficult task: building a full blown Linux distribution. The result is
<a href="http://agunix.org">agunix</a>, the &ldquo;silver unix&rdquo; system.</p>
<p>For many years I&rsquo;ve been frustrated with every distribution I&rsquo;ve tried. Many of
them have compelling features and design, but there&rsquo;s always a catch. The
popular distros are stable and portable, but cons include bloat, frequent use of
GNU, systemd, and often apt. Some more niche distros generally have good points
but often have some combination of GNU, an init system I don&rsquo;t like, poor docs,
dynamic linking, or an overall amateurish or incomplete design. Many of them are
tolerable, but none have completely aligned with my desires.</p>
<p>I&rsquo;ve also looked at not-Linux - I have plenty of beefs with the Linux kernel. I
like the BSD kernels, but I dislike the userspaces (though NetBSD is pretty good)
I like the microkernel design of Minix, but it&rsquo;s too unstable and has shit
hardware support. plan9/9front has the most elegant kernel and userspace design
ever made, but it&rsquo;s not POSIX and has shit hardware support. Though none of
these userspaces are for me, I intend to attempt a port of the agunix userspace
to all of their kernels at some point (a KFreeBSD port is underway).</p>
<p>After trying a great number of distros and coming away with a kind of
dissatisfaction unique to each one, I resolved to make a distro that embodied my
own principles about userspace design. It turns out this is a ton of work -
here&rsquo;s how it&rsquo;s done.</p>
<p>Let&rsquo;s distinguish a Linux &ldquo;system&rdquo; from a Linux &ldquo;distribution&rdquo;. A Linux system
is anything that boots up from the Linux kernel. A Linux <em>distribution</em>, on the
other hand, is a Linux system that can be <em>distributed</em> to end users.  It&rsquo;s this
sort of system that I wanted to build. In my opinion, there are two core
requirements for a Linux system to become a Linux distribution:</p>
<ol>
<li>It has a package manager (or some other way of staying up to date)</li>
<li>It is self-hosting (it can compile itself and all of the infrastructure runs
on it)</li>
</ol>
<p>The first order of business in creating a Linux distro is to fulfill these two
requirements. Getting to this stage is called <em>bootstrapping</em> your distribution -
everything else can come later. To do this, you&rsquo;ll need to port your package
manager to your current system, and start building the base packages with it.
If your new distro doesn&rsquo;t use the same architecture or libc as your current
system, you also need to build a cross compiler and use it for building your
new packages.</p>
<p>My initial approach was different - I used my cross compiler to fill up a chroot
with software without using my package manager, hoping to later bootstrap from
it. I used this approach on my first 3 attempts before deciding to make
base packages on the host system instead. With this approach, I started by
building packages that weren&rsquo;t necessarily self hosting - they used the
host-specific cross compiler builds and such - but produced working packages for
the new environment. I built packages for:</p>
<ul>
<li>my package manager</li>
<li>musl libc</li>
<li>bash</li>
<li>busybox</li>
<li>autotools</li>
<li>make</li>
<li>gcc (clang can&rsquo;t compile the Linux kernel)</li>
<li>vim</li>
</ul>
<p>I also had to package all of the dependencies for these. Once I had a system
that was reasonably capable of compiling arbitrary software, I transferred my
PKGBUILDs (scripts used to build packages) to my chroot and started tweaking
them to re-build packages from the new distro itself. This process took months to
get completely right - there are <em>tons</em> of edge cases and corner cases. Simply
getting this software to run in a new Linux system is only moderately difficult -
getting a system that can build itself is <em>much harder</em>. I was successful on
my 4th attempt, but threw it out and redid it to get a cleaner distribution with
the benefit of hindsight. This became agunix.</p>
<p>Once you reach this stage you can go ham on making packages for your system. The
next step for me was graduating from a chroot to dedicated hardware. I built out
an init system with runit and <a href="http://git.agunix.org/init/">agunix-init</a> and
various other packages that are useful on a proper install. I also compiled a
kernel without support for loadable modules (on par with the static linking theme
of agunix). If you make your own Linux distribution you will probably have to
figure out modules yourself, likely implicating something like eudev.
Eventually, I was able to get agunix <a href="https://sr.ht/OzCq.jpg">running on my
laptop</a>, which has now become my primary agunix dev
machine (often via SSH from my dev desktop).</p>
<p>The next stage for me was getting agunix.org up and running on agunix. I
deliberately chose not to have a website until it could be hosted on agunix
itself. I deployed agunix to a VPS, then ported nginx and put the website up.
The rest of the infrastructure was a bit more difficult: cgit took me about 10
packages of work, and bugzilla was about 100 packages of work. Haven&rsquo;t started
working on mailman yet.</p>
<p>Then begins the eternal packaging phase. At this point you&rsquo;ve successfully made
a Linux distribution, and now you just need to fill it with packages. This takes
<em>forever</em>. I have made 407 packages to date and I still don&rsquo;t have a desktop to
show for it (I&rsquo;m <em>almost</em> there, just have to make a few dozen more packages
before <a href="https://github.com/SirCmpwn/sway">sway</a> will run). At this point to have
success you need others to buy into your ideas and start contributing - it&rsquo;s
impossible to package everything yourself. Speaking of which, check out
<a href="http://agunix.org">agunix.org</a> and see if you like it! I haven&rsquo;t been doing
much marketing for this distro yet, but I do have a little bit of help. If
you&rsquo;re interested in contributing in a new distro, we have lots of work for you
to do!</p>]]></description><pubDate>Fri, 5 May 2017 00:00:00 +0000</pubDate></item><item><title>State of Sway April 2017</title><link>https://drewdevault.com/2017/04/29/State-of-sway-April-2017.html</link><description><![CDATA[<p>Development on Sway continues. I thought we would have slowed down a lot more by
now, but every release still comes with new features - Sway 0.12 added
redshift support and binary space partitioning layouts. Sway 0.13.0 is
coming soon and includes, among other things, nvidia proprietary driver support.
We already have some interesting features slated for Sway 0.14.0, too!</p>
<p>Today Sway has 21,446 lines of C (and 4,261 lines of header files) written by 81
authors across 2,263 commits. These were written through 653 pull requests and
529 issues. Sway packages are available today in the official repos of pretty
much every distribution except for Debian derivatives, and a PPA is available
for those guys.</p>
<p><a href="https://sr.ht/ICd5.png"><img src="https://sr.ht/ICd5.png" alt=""></a></p>
<p>For those who are new to the project, <a href="http://swaywm.org">Sway</a> is an
i3-compatible Wayland compositor. That is, your existing <a href="http://i3wm.org/">i3</a>
configuration file will work as-is on Sway, and your keybindings and colors and
fonts and for_window rules and so on will all be the same. It&rsquo;s i3, but for
Wayland, plus it&rsquo;s got some bonus features. Here&rsquo;s a quick rundown of what&rsquo;s
new since the <a href="https://drewdevault.com/2016/12/27/State-of-sway.html">previous state of Sway</a>:</p>
<ul>
<li>Redshift support</li>
<li>Improved security configuration</li>
<li>Automatic binary space partitioning layouts ala AwesomeWM</li>
<li>Support for more i3 window criterion</li>
<li>Support for i3 marks</li>
<li>xdg_shell v6 support (Wayland thing, makes more native Wayland programs work)</li>
<li>We&rsquo;ve switched from X.Y to X.Y.Z releases, Z releases shipping bugfixes while
the next Y release is under development</li>
<li>Lots of i3 compatibility improvements</li>
<li>Lots of documentation improvements</li>
<li>Lots of bugfixes</li>
</ul>
<p>The new <a href="https://github.com/SirCmpwn/sway/issues/986">bounty program</a> has also
raised $1,200 to support Sway development! Several bounties have been awarded,
including redshift support and i3 marks, but every awardee chose to redonate
their reward to the bounty pool. Thanks to everyone who&rsquo;s donated and everyone
who&rsquo;s worked on new features! Bounties have also been awarded for features in
the Wayland ecosystem beyond Sway - a fact I&rsquo;m especially proud of. If you want
a piece of that $1,200 pot, <a href="http://webchat.freenode.net/?channels=sway&amp;uio=d4">join us on
IRC</a> and we&rsquo;ll help you get started.</p>
<p>Many new developments are in the pipeline for you. 0.13.0 is expected to
ship within the next few weeks - <a href="https://github.com/SirCmpwn/sway/issues/1162#issuecomment-295012255">here&rsquo;s a sneak peek at the
changelog</a>.
In the future releases, development is ongoing for tray icons (encouraged by the
sweet $270 bounty sitting on that feature), and several other features for
0.14.0 have been completed. We&rsquo;ve also started work on a long term project to
replace our compositor plumbling library, wlc, with a new one:
<a href="https://github.com/SirCmpwn/wlroots">wlroots</a>. This should allow us to fix many
of the more difficult bugs in Sway, and opens the doors for <em>many</em> features that
weren&rsquo;t previously possible. It should also give us a platform on which we can
build standard protocols that other compositors can implement, unifying the
Wayland platform a bit more.</p>
<p>Many thanks to <a href="https://github.com/SirCmpwn/sway/graphs/contributors">everyone that&rsquo;s contributed to
sway</a>! There&rsquo;s no way Sway
would have enjoyed its success without your help. That wraps things up for
today, thanks for using Sway and look forward to Sway 1.0!</p>
<hr>
<p>Note: future posts like this will omit some of the stats that were included in
the previous posts. You can use the following commands to find them for
yourself:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Lines of code per author:</span>
</span></span><span class="line"><span class="cl">git ls-tree -r -z --name-only HEAD -- */*.c <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="p">|</span> xargs -0 -n1 git blame --line-porcelain HEAD <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="p">|</span> grep  <span class="s2">&#34;^author &#34;</span> <span class="p">|</span> sort <span class="p">|</span> uniq -c <span class="p">|</span> sort -nr
</span></span><span class="line"><span class="cl"><span class="c1"># Commits per author:</span>
</span></span><span class="line"><span class="cl">git shortlog
</span></span></code></pre></div>]]></description><pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate></item><item><title>MSG_PEEK is pretty common, CVE-2016-10229 is worse than you think</title><link>https://drewdevault.com/2017/04/13/MSG_PEEK-is-more-common-than-you-think-CVE-2016-10229.html</link><description><![CDATA[<p>I heard about <a href="https://nvd.nist.gov/vuln/detail/CVE-2016-10229">CVE-2016-10229</a>
earlier today. In a nutshell, it allows for arbitrary code execution via UDP
traffic if userspace programs are using <code>MSG_PEEK</code> in their <code>recv</code> calls. I
quickly updated my kernels and rebooted any boxes where necessary, but when I
read the discussions on this matter I saw people downplaying this issue by
claiming <code>MSG_PEEK</code> is an obscure feature.</p>
<p>I don&rsquo;t want to be a fear monger and I&rsquo;m by no means a security expert but I
suspect that this is a deeply incorrect conclusion. If I understand this
vulnerability right you need to drop everything and update any servers running
a kernel &lt;4.5 <em>immediately</em>. <code>MSG_PEEK</code> allows a programmer using UDP to
read from the kernel&rsquo;s UDP buffer without consuming the data (so subsequent
reads will continue to read the same data). This immediately sounds to me like
a pretty useful feature that a lot of software might use, not an obscure one.</p>
<p>I did quick search for software where <code>MSG_PEEK</code> appears in the source code
somewhere. This does not necessarily mean that it&rsquo;s exploitable, but should
certainly raise red flags. Here&rsquo;s a list of some notable software I found:</p>
<ul>
<li>nginx</li>
<li>haproxy</li>
<li>curl</li>
<li>gnutls</li>
<li>jack2</li>
<li>lynx</li>
<li>plex (and kodi/xbmc)</li>
<li>busybox</li>
</ul>
<p>I also found a few things like programming languages and networking libraries
that you might expect to have MSG_PEEK if only to provide that functionality to
programmers leveraging them. I didn&rsquo;t investigate too deeply into whether or not
that was the case or if this software is using the feature in a less apparent
way, but in this category I found Python, Ruby, Node.js, smalltalk, octave,
libnl, and socat. I used searchcode.com to find these - <a href="https://searchcode.com/?q=MSG_PEEK">here&rsquo;s the full search
results</a>.</p>
<p>Again, I&rsquo;m not a security expert, but I&rsquo;m <em>definitely</em> spooked enough to update
my shit and I suggest you do so as well. Red Hat, Debian, and Ubuntu are all
unaffected because of the kernel they ship. Note, however, that many cloud
providers do not let you choose your own kernel. This could mean that you are
affected even if you&rsquo;re running a distribution like Debian. Double check it -
use <code>uname -r</code> and update+reboot if necessary.</p>]]></description><pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate></item><item><title>Principles for C programming</title><link>https://drewdevault.com/2017/03/15/How-I-learned-to-stop-worrying-and-love-C.html</link><description><![CDATA[<p>In the words of Doug Gwyn, &ldquo;Unix was not designed to stop you from doing stupid
things, because that would also stop you from doing clever things&rdquo;. C is a very
powerful tool, but it is to be used with care and discipline. Learning this
discipline is well worth the effort, because C is one of the best programming
languages ever made. A disciplined C programmer will&hellip;</p>
<p><strong>Prefer maintainability</strong>. Do not be clever where cleverness is not required.
Instead, seek out the simplest and most understandable solution that meets the
requirements. Most concerns, including performance, are secondary to
maintainability. You should have a performance budget for your code, and you
should be comfortable spending it.</p>
<p>As you become more proficient with the language and learn about more features
you can take advantage of, you should also be learning when not to use them.
It&rsquo;s more important that a novice could understand your code than it is to use
some interesting way of solving the problem. Ideally, a novice will understand
your code <em>and</em> learn something from it. Write code as if the person maintaining
it was you, circa last year.</p>
<p><strong>Avoid magic</strong>. Do not use macros<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Do not use a typedef to hide a pointer or
avoid writing &ldquo;struct&rdquo;. Avoid writing complex abstractions. Keep your build
system simple and transparent. Don&rsquo;t use stupid hacky crap just because it&rsquo;s a
cool way of solving the problem. The underlying behavior of your code should be
apparent even without context.</p>
<p>One of C&rsquo;s greatest advantages is its transparency and simplicity. This should
be embraced, not subverted. But in the fine C tradition of giving yourself
enough rope to hang yourself with, you can use it for magical purposes. You
must not do this. Be a muggle.</p>
<p><strong>Recognize and avoid dangerous patterns</strong>. Do not use fixed size buffers with
variable sized data - always calculate how much space you&rsquo;ll need and allocate
it. Read the man pages for functions you use and handle their failure modes.
Immediately convert unsafe user input into sanitized C structures. If you later
have to present this data to the user, keep it in C structures until the last
possible moment. Learn of and use extra care around sensitive functions like
strcat.</p>
<p>Writing C is sometimes like handling a gun. Guns are important tools, but
accidents with them can be very bad. You treat guns with care: you don&rsquo;t point
them at anything you love, you exercise good trigger discipline, and you treat
it like it&rsquo;s always loaded. And like guns are useful for making holes in things,
C is useful for writing kernels with.</p>
<p><strong>Take care organizing the code</strong>. Never put code into a header. Never use the
<code>inline</code> keyword. Put separate concerns in separate files. Use static functions
liberally to organize your logic. Use a coding style that gives everything
enough breathing room to be easy on the eyes. Use single letter variable names
when their purpose is self-evident and descriptive names when it&rsquo;s not, and
avoid neither.</p>
<p>I like to organize my code into directories that implement some group of
functions, and give each function its own file. This file will often contain
lots of static functions, but they all serve to organize the behavior this file
is responsible for implementing. Write up a header to give others access to
this module. And use the Linux kernel coding style, god dammit.</p>
<p><strong>Use only standard features</strong>. Do not assume the platform is Linux. Do not
assume the compiler is gcc. Do not assume the libc is glibc. Do not assume the
architecture is x86. Do not assume the coreutils are GNU. Do not define
_GNU_SOURCE.</p>
<p>If you must use platform-specific features, describe an interface for it,
then write platform-specific support code separately. Under no circumstances
should you ever use gcc extensions or glibc extensions. GNU is a blight on this
Earth, do not let it infect your code.</p>
<p><strong>Use a disciplined workflow</strong>. Have a disciplined approach to version control,
too. Write thoughtful commit messages - briefly explain the change in the first
line, and add justification for it in the extended commit message. Work in
feature branches with clearly defined goals, and do not include changes that
don&rsquo;t serve that goal. Do not be afraid to rebase and edit your branch&rsquo;s history
so that it presents your changes clearly.</p>
<p>When you have to return to your code later, you will be thankful for the
detailed commit message you wrote. Others who interact with your code will be
thankful for this as well. When you see some stupid code, it&rsquo;s nice to know what
the bastard was thinking at the time, especially when the bastard in question
was you.</p>
<p><strong>Do strict testing and reviews</strong>. Identify the different possible code paths
that your changes may take. Test each of them for the correct behavior. Give it
incorrect input. Give it inputs that could &ldquo;never happen&rdquo;. Pay special attention
to error-prone patterns. Look for places to simplify the code and make the
processes clearer.</p>
<p>Next, give your changes to another human to review. This human should apply the
same process and sign off on your changes. Review with discipline as well,
taking all of the same steps. Review like it&rsquo;ll be your ass on the line if
there&rsquo;s a problem with this code.</p>
<p><strong>Learn from mistakes</strong>. First, fix the bug. Then, fix the real bug: your
process allowed this mistake to happen. Bring your code reviewer into the
discussion - this is their fault, too. Critically examine the process of
writing, reviewing, and deploying this code, and seek out the root cause.</p>
<p>The solution might be simple, like adding strcat to the list of functions that
should trigger your &ldquo;review this code carefully&rdquo; reflex. It might be employing
static analysis so a computer can detect this problem for you. Perhaps the code
needs to be refactored so it&rsquo;s simpler and easier to spot errors in. Failing to
reflect on how to avoid future fuck-ups would be the real fuck-up here.</p>
<hr>
<p>It&rsquo;s important to remember that rules are made to be broken. There may be cases
where things that are discouraged should be used, and things that are encouraged
disregarded. You should strive to make such cases the exception, not the norm,
and carefully justify them when they happen.</p>
<p>C is the shit. I love it, and I hope more people can learn to see it the way I
do. Good luck!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Defining constants with them is fine, though&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate></item><item><title>Compiler devnotes: Machine specs</title><link>https://drewdevault.com/2017/02/22/cozy-devnotes-machine-specs.html</link><description><![CDATA[<p>I have a number of long-term projects that I plan for on long timelines, on the
order of decades or more. One of these projects is cozy, a C toolchain. I
haven&rsquo;t talked about this project in public before, so I&rsquo;ll start by introducing
you to the project. The main C toolchains in the &ldquo;actually usable&rdquo; category are
GNU and LLVM, but I&rsquo;m satisfied with neither and I want to build my own
toolchain. I see no reason why compilers should be deep magic. Here are my goals
for cozy:</p>
<ul>
<li>Self hosting and written in C</li>
<li>An easy to grok codebase and internal design</li>
<li>Focused on C. No built-in support for other languages</li>
<li>Adding new targets architectures and ports should be straightforward</li>
<li>Modular build pipeline with lots of opportunities for external integrations</li>
<li>Trivially cross-compiles without building another version of the toolchain</li>
<li>Includes a decent optimizer</li>
</ul>
<p>Some other plans include opinionated warnings about code and minimal support for
language extensions. Ambitious goals, right? That&rsquo;s why this project is on my
long-term schedule. I&rsquo;ve found that large projects are entirely feasible, so
long as you (1) start them and (2) keep working on them for a long time. I don&rsquo;t
need to rush this - gcc and clang may not be ideal, but they work today. In
support of these goals, I&rsquo;ll be writing these dev notes to explain my design
choices and gather feedback — please <a href="mailto:sir@cmpwn.com">email me</a> if
you have some!</p>
<p>Since I want to place an emphasis on portability and retargetability, I&rsquo;m
starting by designing the machine spec and its support code, which is used to
add support for new architectures. I don&rsquo;t like gcc&rsquo;s lisp specs, and I <em>really</em>
don&rsquo;t like LLVM&rsquo;s &ldquo;huge pile of C++&rdquo; approach. I think a really good machine
spec meets these goals:</p>
<ul>
<li>Easy to write and human friendly</li>
<li>More about data than code, but</li>
<li>Easily extended with C to support architecture-specific nuances</li>
<li>Provides loads of useful metadata about the target architecture</li>
<li>Exposes information about the speed and side-effects of each instruction</li>
<li>Can also be used to generate an assembler and disassembler</li>
<li>Easily reused to create derivative architectures</li>
</ul>
<p>Adding a new architecture should be a weekend project, and when you&rsquo;re done the
entire toolchain should both support and run on your new architecture. I set out
to come up with a new syntax that could potentially meet these goals. I started
with the Z80 architecture in mind because it&rsquo;s simple, I&rsquo;m intimately familiar
with it, and I want cozy to be able to target 8-bit machines just as easily as
32 or 64 bit.</p>
<p>For reference, here are the gcc and LLVM guides on adding new targets:</p>
<ul>
<li><a href="https://gcc.gnu.org/onlinedocs/gccint/Back-End.html">gcc - Anatomy of a Target Back End</a></li>
<li><a href="http://llvm.org/docs/WritingAnLLVMBackend.html">Writing an LLVM Backend</a></li>
</ul>
<p>The cozy machine spec is a cross between ini files, yaml, and a custom syntax.
The format is somewhat complex, but once understood is intuitive and flexible.
At the top level, it looks like an ini file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="p">[</span><span class="l">metadata]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="l">registers]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="l">macros]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="l">instructions]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span></code></pre></div><h3 id="metadata">Metadata</h3>
<p>The <strong>metadata</strong> section contains some high-level information about the
architecture design, and is the simplest section to understand. It currently
looks like this for z80:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="p">[</span><span class="l">metadata]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">z80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">bits</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">endianness</span><span class="p">:</span><span class="w"> </span><span class="l">little</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">signedness</span><span class="p">:</span><span class="w"> </span><span class="l">twos-complement</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">cache</span><span class="p">:</span><span class="w"> </span><span class="l">none</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">pipeline</span><span class="p">:</span><span class="w"> </span><span class="l">none</span><span class="w">
</span></span></span></code></pre></div><p>This isn&rsquo;t comprehensive, and I&rsquo;ll be adding more metadata as it becomes
necessary. On LLVM, this sort of information is encoded into a string that looks
something like this: <code>&quot;e-p:16:8:8-i8:8:8-i16:8:8-n8:16&quot;</code>. This string is passed
into the <code>LLVMTargetMachine</code> base constructor in C++. I think we can do a hell
of a lot better than that!</p>
<h3 id="registers">Registers</h3>
<p>The <strong>registers</strong> section describes the registers on this architecture.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="p">[</span><span class="l">registers]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">BC</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">B</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">C</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="l">; offset=8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">DE</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">D</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">E</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="l">; offset=8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">HL</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">H</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">L</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="l">; offset=8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">SP</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="l">; stack</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">PC</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="l">; program</span><span class="w">
</span></span></span></code></pre></div><p>Here we can start to see some interesting syntax and get an idea of the design
of cozy machine specs. The contents of each section are keys, which have values,
attributes, and children. The format looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">value; attributes, ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="l">children...</span><span class="w">
</span></span></span></code></pre></div><p>In this example, we&rsquo;ve defined the BC, DE, HL, SP, and PC registers. HL, DE, and
BC are general purpose 16-bit registers, and each can also be used as two
separate 8-bit registers. The attributes for these sub-registers indicates their
offsets in the parent register. We also define the stack and program registers,
SP and PC, which use the stack and program attributes to indicate their special
purposes.</p>
<p>We can also describe CPU flags in this section:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="p">[</span><span class="l">registers]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">AF</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="l">; special</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">A</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="l">; accumulator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">F</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="l">; flags, offset 8;; flag</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">_C</span><span class="p">:</span><span class="w">  </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">_N</span><span class="p">:</span><span class="w">  </span><span class="m">1</span><span class="l">; offset 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">_PV</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="l">; offset 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">_3</span><span class="p">:</span><span class="w">  </span><span class="m">1</span><span class="l">; offset 3, undocumented</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">_H</span><span class="p">:</span><span class="w">  </span><span class="m">1</span><span class="l">; offset 4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">_5</span><span class="p">:</span><span class="w">  </span><span class="m">1</span><span class="l">; offset 5, undocumented</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">_Z</span><span class="p">:</span><span class="w">  </span><span class="m">1</span><span class="l">; offset 6</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">_S</span><span class="p">:</span><span class="w">  </span><span class="m">1</span><span class="l">; offset 7</span><span class="w">
</span></span></span></code></pre></div><p>Here we introduce another feature of cozy specs with <code>F: 8; flags, offset 8;; flag</code>. Using <code>;;</code> adds those attributes to all children of this key, so each of
_C, _N, etc have the <code>flag</code> attribute.</p>
<p>Take note of the &ldquo;undocumented&rdquo; attribute here. Some of the metadata included
in a spec can be applied to cozy tools. Some of it, however, is there for other
tools to utilize. We have a good opportunity to make a machine-readable
description of the architecture, so I&rsquo;ve opted to include a lot of extra details
in machine specs that third parties could utilize (though there might be a
-fno-undocumented compiler flag some day, I guess).</p>
<h3 id="macros">Macros</h3>
<p>The <strong>macros</strong> section is heavily tied to the instructions section. Most instruction
sets are quite large, and I don&rsquo;t want to burden spec authors with writing out
the entire thing. We can speed up their work by providing macros.</p>
<p>z80 instructions have a few sets of common patterns in their encodings. Register
groups are often represented by the same set of bits, and we can make our
instruction set specification more concise by taking advantage of this. For
example, here&rsquo;s a macro that we can use for instructions that can use either the
BC, DE, HL, or SP registers:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="p">[</span><span class="l">macros]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">reg_BCDEHLSP</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">BC</span><span class="p">:</span><span class="w"> </span><span class="m">00</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">DE</span><span class="p">:</span><span class="w"> </span><span class="m">01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">HL</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">SP</span><span class="p">:</span><span class="w"> </span><span class="m">11</span><span class="w">
</span></span></span></code></pre></div><p>We have the name of the macro as the top-level key, in this case <code>reg_BCDEHLSP</code>.
We can later refer to this macro with <code>@reg_BCDEHLSP</code>. Then, we have each of the
cases it can match on, and the binary values these correspond to when encoded in
an instruction.</p>
<h3 id="instructions">Instructions</h3>
<p>The instructions section brings everything together and defines the actual
instructions available on this architecture. Instructions can be organized into
groups at the spec author&rsquo;s pleasure, which can be referenced by derivative
architectures. Here we can take a look at the &ldquo;load&rdquo; group:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="p">[</span><span class="l">instructions]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">.load</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ld</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">@reg_BCDEHLSP, @imm[16]</span><span class="p">:</span><span class="w"> </span><span class="m">00</span><span class="w"> </span><span class="l">$1 0001 $2</span><span class="w">
</span></span></span></code></pre></div><p>On z80, the <code>ld</code> instruction is similar to the <code>mov</code> instruction on Intel
architectures. It assigns the second argument to the first. This could be used
to assign registers to each other (e.g. <code>ld a, b</code> to set A = B), to set
registers to constants, and so on. Our example here uses our macro from earlier
to match instructions like this:</p>
<pre><code>ld hl, 0x1234
</code></pre>
<p>The value for this key may reference the arguments with variables. $1 here
equals <code>10</code>, from the macro. The <code>imm</code> built-in is implemented in C to match
constants and provides $2. An assembler could use this information to assemble
our example instruction into this machine code:</p>
<pre><code>00100001 00110100 00010010
</code></pre>
<p>Which will load HL with the value 0x1234 when executed.</p>
<h3 id="lots-more-metadata">Lots more metadata</h3>
<p>Now that we have the basics down, let&rsquo;s dive into some deeper details. Cozy
specs are designed to provide most of the information the <em>entire toolchain</em>
needs to support an architecture. The information we have so far could be used
to generate assemblers and disassemblers, but I want this file to be able to
generate things like optimizers as well. You can add the necessary metadata to
each instruction by utilizing attributes.</p>
<p>Consider the z80 instruction LDIR, which stands for
&ldquo;load/decrement/increment/repeat&rdquo;. This instruction is used for memcpy
operations. To use it, you set the HL register to a source address, the DE
register to a destination address, and BC to a length. This instruction looks
like this in the spec:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">ldir</span><span class="p">:</span><span class="w"> </span><span class="m">11101101</span><span class="w"> </span><span class="m">10110000</span><span class="l">; uses[HL, DE, BC], \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="l">affects[HL[+BC], DE[+BC], BC[0]], \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="l">flags[_H:0,_N:0,_PV:0], cycles[16 + BC * 5]</span><span class="w">
</span></span></span></code></pre></div><p>That&rsquo;s a lot of attributes! The purpose of these attributes are to give the
toolchain insights into the registers this instruction uses, its side effects,
and how fast it is. These attributes can help us compare the efficiency of
different approaches and understand the how the state of registers evolves
during a function, which leads to all sorts of useful optimizations.</p>
<p>The <code>affects</code> attribute, for example, tells us how each register is affected by
this instruction. We can see that after this instruction, HL and DE will have
had BC added to them, and BC will have been set to 0. We can make all sorts of
optimizations based on this knowledge. Here are some examples:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="o">*</span><span class="n">src</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">memcpy</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">src</span> <span class="o">+=</span> <span class="n">len</span><span class="p">;</span>
</span></span></code></pre></div><p>The compiler can assign <code>src</code> to HL, <code>dest</code> to DE, and <code>len</code> to BC. We can then
optimize out the final statement entirely because we know that the LDIR
instruction will have already added BC to HL for us.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="o">*</span><span class="n">src</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">memcpy</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">foobar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span></code></pre></div><p>In this case, the register allocator can just assign BC to <code>foobar</code> and avoid
initializing it because we know it&rsquo;s already going to be zero. Many other
optimizations are made possible when we are keeping track of the side effects of
each instruction.</p>
<h2 id="next-steps">Next steps</h2>
<p>I&rsquo;ve iterated over this spec design for a while now, and I&rsquo;m pretty happy with
it. I would love to hear your feedback. Assuming that this looks good, my next
step is writing more specs, and a tool that parses and compiles them to C. These
C files are going to be linked into <code>libcozyspec</code>, which will provide an API to
access all of this metadata from C. It will also include an instruction matcher,
which will be utilized by the next step - writing the assembler.</p>
<p>The assembler is going to take a while, because I don&rsquo;t want to go the gas route
of making a half-baked assembler that&rsquo;s more useful for compiling the C
compiler&rsquo;s output than for anything else. I want to make an assembler that
assembly programmers would <em>want</em> to use.</p>
<p>I have not yet designed an intermediate bytecode for the compiler to use, but
one will have to be made. The machine spec will likely change somewhat to
accommodate this. Some of the conversion from internal bytecode to target
assembly can likely be inferred from metadata, but some will have to be done
manually for each architecture.</p>
<p><a href="https://sr.ht/7_Pe.txt">Here&rsquo;s the entire z80 spec</a> I&rsquo;ve been working on, for
your reading pleasure.</p>]]></description><pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate></item><item><title>Lessons to learn from C</title><link>https://drewdevault.com/2017/01/30/Lessons-to-learn-from-C.html</link><description><![CDATA[<p>C is my favorite language, though I acknowledge that it has its warts. I&rsquo;ve
tried looking at languages people hope will replace C (Rust, Go, etc), and
though they&rsquo;ve improved on some things they won&rsquo;t be supplanting C in my life
any time soon. I&rsquo;ll share with you what makes C a great language to me. Take
some of these things as inspiration for the next C replacement you write.</p>
<p>First of all, it&rsquo;s important to note that I&rsquo;m talking about the language, not
its standard library. The C standard library isn&rsquo;t <em>awful</em>, but it certainly
leaves a lot to be desired. I also want to place a few limitations on the kind
of C we&rsquo;re talking about - you can write bad code in any language, and C is no
different. For the purpose of argument, let&rsquo;s assume the following:</p>
<ul>
<li>C99 minimum</li>
<li>Absolutely no code in headers - just type definitions and function prototypes</li>
<li>Minimal use of typedefs</li>
<li>No macros</li>
<li>No compiler extensions</li>
</ul>
<p>I hold myself to these guidelines when writing C, and it is from this basis that
I compare other languages with C. It&rsquo;s not useful to compare bad C to another
language, because I wouldn&rsquo;t want to write bad C either.</p>
<p>Much of what I like about C boils down to this: <strong>C is simple</strong>. The ultimate
goal of any system should be to attain the simplest solution for the problems it
faces. C prefers to be conservative with new features. The lifetime of a feature
in Rust, for example, from proposal to shipping is generally 0 to 6 months. The
same process in C can take up to 10 years. C is a venerable language, and has
already long since finished adding core features. It is stable, simple, and
reliable.</p>
<p>To this end, language features map closely to behaviors common to most CPUs. C
strikes a nearly perfect balance of usability versus simplicity, which
results in a small set of features that are easy to reason about. A C expert
could roughly predict the assembly code produced by their compiler (assuming
<code>-O0</code>) for any given C function. It follows that C compilers are easy to write
and reason about.</p>
<p>The same person would also be able to give you a rough idea of the
performance characteristics of that function, pointing out things like cache
misses and memory accesses that are draining on speed, or giving you a precise
understanding of how the function handles memory. If I look at a function in
other languages, it&rsquo;s much more difficult to discern these things with any
degree of precision without actually compiling the code and looking at the
output.</p>
<p>The compiler also integrates very comfortably with the other tools near it, like
the assembler and linker. Symbols in C map 1:1 to symbols in the object files,
which means linking objects together is simple and easily reasoned about. It
also makes interop with other languages and tools straightforward - there&rsquo;s a
reason every language has a means of writing C bindings, but not generally C++
bindings. The use of headers to declare external symbols and types is also nicer
than some would have you believe, since it gives you an opportunity to organize
and document your API.</p>
<p>C is also the most portable programming language in the world. Every operating
system on every architecture has a C compiler, and they weren&rsquo;t really
considered a viable platform until it did. Once you have a C compiler you
generally have everything else, because everything else was either written in C
or was written in a language that was implemented in C. I can write C programs
on/for Linux, Windows, BSD, Minix, plan9, and a dozen other niche operating
systems, or even no operating system, on pretty much any CPU architecture I
want. No other language supports nearly as many platforms as C does.</p>
<p>With these benefits acknowledged, there are some things C could do better. The
standard library is one of them, but we can talk about that some other time.
Another is generics; using void* all the time isn&rsquo;t good. Some features from
other languages would be nice - I would take something similar to Rust&rsquo;s match
keyword. Of course, the fragility of memory management in C is a concern that
other languages are wise to address. Undefined behavior is awful.</p>
<p>Even for all of these warts, however, the basic simplicity and elegance of C
keeps me there. I would love to see a language that fixes these problems without
trying to be the kitchen sink, too.</p>
<p>In short, I like C because <strong>C is simple</strong>.</p>]]></description><pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate></item><item><title>The only problem with Python 3&apos;s str is that you don&apos;t grok it</title><link>https://drewdevault.com/2017/01/13/The-problem-with-Python-3.html</link><description><![CDATA[<p>I&rsquo;ve found myself explaining Python 3&rsquo;s str to people online more and more often
lately. There&rsquo;s this ridiculous claim about that Python 3&rsquo;s string handling is
broken or somehow worse than Python 2, and today I intend to put that myth to
rest.  Python 2 strings are broken, and Python 3 strings are sane. The only
problem is that you don&rsquo;t grok strings.</p>
<p>The basic problem many people seem to have with Python 3&rsquo;s strings arises when
they write code that treats bytes like a string, because that&rsquo;s how it was in
Python 2. Let me make this as clear as possible:</p>
<div class="loud">a bytes is not a string</div>
<style>
.loud {
    font-size: 14pt;
    font-weight: bold;
    text-align: center;
    margin-bottom: 1rem;
}
</style>
<p>I want you to read that, over and over again, until it sinks in. A string is
basically an array of characters (characters being Unicode codepoints), whereas
bytes is an array of bytes, aka octets, aka unsigned 8 bit integers. That&rsquo;s
right - bytes is an array of unsigned 8 bit integers, or as the name would
imply, bytes.  If you <em>ever</em> do string operations against bytes, you are Doing
It Wrong because bytes are not strings.</p>
<div class="loud">a bytes is not a string</div>
<p>It&rsquo;s entirely possible that your bytes contains an <em>encoded representation</em> of a
string. That encoding could be ASCII, UTF-8, UTF-32, etc. These encodings are
means of representing strings as bytes, aka unsigned 8 bit integers. In order to
treat it like a string, you first must <em>decode</em> it. Luckily Python 3 makes this
painless: <code>bytes.decode()</code>. This defaults to UTF-8, but you can specify any
encoding you want: <code>bytes.decode('latin-1')</code>. If you want bytes again, use
<code>str.encode()</code>, which again defaults to UTF-8 but accepts any encoding. If you
have a bytes that contains an encoded string, your first order of business is
decoding it.</p>
<div class="loud">a bytes is not a string</div>
<p>Let&rsquo;s look at some examples of why this matters in practice:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">Python</span> <span class="mf">3.6.0</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Dec</span> <span class="mi">24</span> <span class="mi">2016</span><span class="p">,</span> <span class="mi">08</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">08</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">GCC</span> <span class="mf">6.2.1</span> <span class="mi">20160830</span><span class="p">]</span> <span class="n">on</span> <span class="n">linux</span>
</span></span><span class="line"><span class="cl"><span class="n">Type</span> <span class="s2">&#34;help&#34;</span><span class="p">,</span> <span class="s2">&#34;copyright&#34;</span><span class="p">,</span> <span class="s2">&#34;credits&#34;</span> <span class="ow">or</span> <span class="s2">&#34;license&#34;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;おはようございます&#39;</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;おはようございます&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;おはようございます&#39;</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;すまいざごうよはお&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;おはようございます&#39;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;お&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;おはようございます&#39;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;は&#39;</span>
</span></span></code></pre></div><p>Or in Python 2:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">Python</span> <span class="mf">2.7.13</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Dec</span> <span class="mi">21</span> <span class="mi">2016</span><span class="p">,</span> <span class="mi">07</span><span class="p">:</span><span class="mi">16</span><span class="p">:</span><span class="mi">46</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">GCC</span> <span class="mf">6.2.1</span> <span class="mi">20160830</span><span class="p">]</span> <span class="n">on</span> <span class="n">linux2</span>
</span></span><span class="line"><span class="cl"><span class="n">Type</span> <span class="s2">&#34;help&#34;</span><span class="p">,</span> <span class="s2">&#34;copyright&#34;</span><span class="p">,</span> <span class="s2">&#34;credits&#34;</span> <span class="ow">or</span> <span class="s2">&#34;license&#34;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;おはようございます&#39;</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="se">\xe3\x81\x8a\xe3\x81\xaf\xe3\x82\x88\xe3\x81\x86\xe3\x81\x94\xe3\x81\x96\xe3\x81\x84\xe3\x81\xbe\xe3\x81\x99</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;おはようございます&#39;</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="se">\x99\x81\xe3\xbe\x81\xe3\x84\x81\xe3\x96\x81\xe3\x94\x81\xe3\x86\x81\xe3\x88\x82\xe3\xaf\x81\xe3\x8a\x81\xe3</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;おはようございます&#39;</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">㾁</span><span class="err">㄁</span><span class="n">㖁㔁ㆁ</span><span class="err">㈂</span><span class="n">㯁㊁ã</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;おはようございます&#39;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="se">\xe3</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;おはようございます&#39;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="se">\x81</span><span class="s1">&#39;</span>
</span></span></code></pre></div><p>For anything other than ASCII, Python 2 &ldquo;strings&rdquo; are broken. Python 3&rsquo;s string
handling is superb. The problem with it has only ever been that you don&rsquo;t
actually know how strings work. Instead of starting ignorant flamewars about it,
learn how it works.</p>
<h2 id="actual-examples-people-have-given-me">Actual examples people have given me</h2>
<p><strong>&ldquo;Python 3 can&rsquo;t handle bytes as file names&rdquo;</strong></p>
<p>Yes it can. Just stop treating them like strings:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span><span class="nb">open</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;test-</span><span class="se">\xd8\x01</span><span class="s1">.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>Note the use of bytes as the file name, not str. \xd8\x01 is unrepresentable as
UTF-8.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;.&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="kc">None</span><span class="p">]</span>
</span></span></code></pre></div><p>Note the use of bytes as the path to os.listdir (the documentation says that if
you want bytes back as file names, pass bytes as the path. The docs are helpful
like that). Also note the lack of crashes or broken behavior.</p>
<p><strong>&ldquo;Python 3&rsquo;s csv module writes b&rsquo;Hello&rsquo;,b&rsquo;World&rsquo; into CSV files&rdquo;</strong></p>
<p>CSV files are &ldquo;comma seperated values&rdquo;. Is each value an array of unsigned 8 bit
integers? No, of course not. They&rsquo;re strings. So why would you pass an array of
unsigned 8 bit integers to it?</p>
<p><strong>&ldquo;Python 3 doesn&rsquo;t support writing files as latin-1&rdquo;</strong></p>
<p>Sure it does.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;some latin-1 file&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">text</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;latin-1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;some utf8 file&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>
</span></span></code></pre></div><div class="loud">a bytes is not a string</div>
<div class="loud">a bytes is not a string</div>
<div class="loud">a bytes is not a string</div>
<p>Python 2&rsquo;s shitty design has broken your mindset. Unlearn it.</p>
<h2 id="python-2-is-dead-long-live-python-3">Python 2 is dead, long live Python 3</h2>
<p>Listen. It&rsquo;s time you moved to Python 3. You&rsquo;re missing out on a lot of really
great improvements to the language and are stuck with a lot of problems. Python
2 is really being EoL&rsquo;d, and closing your eyes and covering your ears singing
&ldquo;la la la&rdquo; doesn&rsquo;t change that. The transition is really not that difficult or
time consuming, and well worth it. Some people say only new projects should be
written in Python 3. I say that&rsquo;s bollocks - all projects should be written in
Python 3 and you need to migrate, <em>now</em>.</p>
<p>Python 3 is better. Much, much better. For every legitimate criticism of Python
3 I&rsquo;ve seen, I&rsquo;ve seen 10 that are bullshit. Come join us in the wonderful world
of sane string handling, type decorations, async/await, and more awesome
features. Every library supports it now. Let go of your biases and evaluate the
language honestly.</p>]]></description><pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate></item><item><title>Actually, you CAN do it</title><link>https://drewdevault.com/2017/01/06/Actually-you-CAN-do-it.html</link><description><![CDATA[<p>I maintain a <em>lot</em> of open source projects. In order to do so, I have to
effectively manage my time. Most of my projects follow this philosophy: if you
want something changed, send a patch. If you are running into an annoying bug,
fix it and send a patch. If you want a new feature, implement it and send a
patch. It&rsquo;s definitely a good idea to talk about it beforehand on the issue
tracker or IRC, but don&rsquo;t make the mistake of thinking this processes ends with
someone else doing it for you.</p>
<p>Every developer who contributes to a project I maintain is self-directed. They
work on what they&rsquo;d like. They scratch their own itches. Sometimes what they&rsquo;d
like to work on is non-specific, and in that case I&rsquo;ll help them find something
to do based on what users are asking for lately or based on my own goals for the
project. I often maintain a list of &ldquo;low hanging fruit&rdquo; issues on Github, and
I am generally willing to offer some suggestions if someone asks for such a
task. However, for more complex, non-&ldquo;low hanging fruit&rdquo; tasks, they generally
only get worked on when someone with the know-how wants it done and does it.</p>
<p>So what does this mean for you, user whose problem no developer is interested
in? Well, it&rsquo;s time for you to step up and work on it yourself. I don&rsquo;t really
care if your problem is &ldquo;a showstopper&rdquo; or &ldquo;the only thing preventing you from
switching to my software&rdquo;, or any of a number of other excuses you may have
lined up for getting someone else to do it for you. None of the other regular
contributors really care about your interpretation of what their priorities
should be, either. We aren&rsquo;t a business. We aren&rsquo;t making a sale. We&rsquo;re just
making cool software that works for us and publishing it in the hopes that
you&rsquo;ll find it useful, too.</p>
<p>Generally by this point in the conversation with Joe User, they tell me they
<em>can&rsquo;t</em> do it. Well, Joe User, I beg to differ. It doesn&rsquo;t matter that you don&rsquo;t
know <em>[insert programming language]</em>, or haven&rsquo;t used <em>[insert relevant
library]</em> before. You don&rsquo;t learn new things by hanging out in your comfort
zone. Many of the regulars you&rsquo;re bugging to do your work for you were once in
your shoes.</p>
<p>Everything is setting you up for success. You literally have hundreds of
resources at your disposal. The internet is was made by developers, you know,
and we built tons of resources to support ourselves with it. You have
documentation, Q&amp;A sites, chat rooms, and more waiting to help you when you get
stuck. We&rsquo;re here to answer your questions with the codebase, too. I pride
myself on making the code accessible and easy to get into, and I&rsquo;ll help you
learn to do the same when you integrate your with our project.</p>
<p>We would much rather give you advice on how to fix the problem yourself than to
fix the problem for you. Even if it takes more of our attention to do so, we get
the added benefit of a new person who is qualified to help out the next guy. A
person who is now fixing their own bugs and improving the software for everyone.
That&rsquo;s a much better outcome than having to waste our own time on a task we
aren&rsquo;t interested in.</p>
<p>It might be hard, but hey, it&rsquo;d be hard for us too. You&rsquo;ll learn and be better
for it. Wouldn&rsquo;t it be nice to add <em>[language you don&rsquo;t know]</em> or <em>[library you
don&rsquo;t know]</em> to your resume, anyway? If you&rsquo;re concerned about the scope of your
problem, how about asking about the low hanging fruit so you have easier tasks
to learn with?</p>
<p>The cards are stacked in your favor. The only problem is your defeatist
attitude. Just do it!</p>]]></description><pubDate>Fri, 6 Jan 2017 00:00:00 +0000</pubDate></item><item><title>State of Sway December 2016 - secure your Wayland desktop, get paid to work on Sway</title><link>https://drewdevault.com/2016/12/27/State-of-sway.html</link><description><![CDATA[<p>Earlier today I released <a href="https://github.com/SirCmpwn/sway/releases/tag/0.11">sway
0.11</a>, which (along with
lots of the usual new features and bug fixes) introduces support for security
policies that can help realize the promise of a secure Wayland desktop. We also
just started a bounty program that lets you sponsor the things you want done and
rewards contributors for working on them.</p>
<p>Today sway has 19,371 lines of C (and 3,761 lines of header files) written by 70
authors across 2,067 commits. These were written through 589 pull requests and
425 issues. Sway packages are available today in the official repos of Arch,
Gentoo, Fedora, NixOS, openSUSE, Void Linux, and more. Sway looks like this:</p>
<p><a href="https://sr.ht/ICd5.png"><img src="https://sr.ht/ICd5.png" alt=""></a></p>
<p>Side note: please add pretty screenshots of sway to <a href="https://github.com/SirCmpwn/sway/wiki/Screenshots-of-Sway">this wiki
page</a>. Thanks!</p>
<p>For those who are new to the project, <a href="http://swaywm.org">Sway</a> is an
i3-compatible Wayland compositor. That is, your existing <a href="http://i3wm.org/">i3</a>
configuration file will work as-is on Sway, and your keybindings and colors and
fonts and for_window rules and so on will all be the same. It&rsquo;s i3, but for
Wayland, plus it&rsquo;s got some bonus features. Here&rsquo;s a quick rundown of what&rsquo;s
new since the <a href="https://drewdevault.com/2016/08/02/Sway-0.9-in-retro.html">previous state of Sway</a>:</p>
<ul>
<li>Security policy configuration (man sway-security)</li>
<li>FreeBSD support</li>
<li>Initial support for HiDPI among sway clients (swaybar et al)</li>
<li>Support for new i3 features</li>
<li>Clicky title bars</li>
<li>Lots of i3 compatability improvements</li>
<li>Lots of documentation improvements</li>
<li>Lots of bugfixes</li>
</ul>
<p>Today it seems that most of the features sway needs are implemented. Work hasn&rsquo;t
slowed down - there&rsquo;s been lots of work fixing small bugs, improving
documentation, fixing subtle incompatabilities with i3, and so on. However, to
encourage the development of new features, I&rsquo;ve officially put into action the
new bounty program today. Here&rsquo;s how it works - you can donate to the features
you want to see, and you can claim the donations by implementing the features
and sending a pull request. To date I&rsquo;ve received about $200 in donations
towards sway, and I&rsquo;ve matched that with a donation of my own to bring it up to
$400. I&rsquo;ve distributed these donations into various buckets of features. Not
every feature is for sway - anything that improves the sway experience is
eligible for a bounty, and in fact over half of the initial bounties are for
features in other parts of the ecosystem. For details on the program, check out
<a href="https://github.com/SirCmpwn/sway/issues/986">this link</a>.</p>
<p>Here&rsquo;s the updated stats. First, <strong>lines of code per author</strong>:</p>
<table class="table">
    <tbody>
        <tr><td>3799 (+775)</td><td>Drew DeVault</td></tr>
        <tr><td>3489 (-1170)</td><td>Mikkel Oscar Lyderik</td></tr>
        <tr><td>1705 (-527)</td><td>taiyu</td></tr>
        <tr><td>1236 (-550)</td><td>S. Christoffer Eliesen</td></tr>
        <tr><td>1160 (+70)</td><td>Zandr Martin</td></tr>
        <tr><td>449 (-12)</td><td>minus</td></tr>
        <tr><td>311 (-54)</td><td>Christoph Gysin</td></tr>
        <tr><td>285 (+285)</td><td>D.B</td></tr>
        <tr><td>247 (-87)</td><td>Kevin Hamacher</td></tr>
        <tr><td>227 (-298)</td><td>Cole Mickens</td></tr>
        <tr><td>219 (+219)</td><td>David Eklov</td></tr>
    </tbody>
</table>
<p>Finally, I&rsquo;m the top contributor! I haven&rsquo;t been on top for over a year. Lots of
the top contributors are slowly having their lines of code reduced as lots of
new contributors are coming in and displacing them with refactorings and bug
fixes.</p>
<p>Here&rsquo;s the total <strong>number of commits per author</strong> for each of the top ten
committers:</p>
<table class="table">
    <tbody>
        <tr><td>1009</td><td> Drew DeVault</td></tr>
        <tr><td>245</td><td> Mikkel Oscar Lyderik</td></tr>
        <tr><td>153</td><td> taiyu</td></tr>
        <tr><td>97</td><td> Luminarys</td></tr>
        <tr><td>91</td><td> S. Christoffer Eliesen</td></tr>
        <tr><td>68</td><td> Zandr Martin</td></tr>
        <tr><td>58</td><td> Christoph Gysin</td></tr>
        <tr><td>45</td><td> D.B</td></tr>
        <tr><td>33</td><td> Taiyu</td></tr>
        <tr><td>32</td><td> minus</td></tr>
    </tbody>
</table>
<p>Most of what I do for Sway personally is reviewing and merging pull requests.
Here&rsquo;s the same figures using <strong>number of commits per author, excluding merge
commits</strong>, which changes my stats considerably:</p>
<table class="table">
    <tbody>
        <tr><td>479</td><td> Drew DeVault</td></tr>
        <tr><td>229</td><td> Mikkel Oscar Lyderik</td></tr>
        <tr><td>138</td><td> taiyu</td></tr>
        <tr><td>96</td><td> Luminarys</td></tr>
        <tr><td>91</td><td> S. Christoffer Eliesen</td></tr>
        <tr><td>58</td><td> Christoph Gysin</td></tr>
        <tr><td>56</td><td> Zandr Martin</td></tr>
        <tr><td>45</td><td> D.B</td></tr>
        <tr><td>32</td><td> Taiyu</td></tr>
        <tr><td>32</td><td> minus</td></tr>
    </tbody>
</table>
<p>These stats only cover the top ten in each, but there are more - check out the
<a href="https://github.com/SirCmpwn/sway/graphs/contributors">full list</a>.</p>
<p>Here&rsquo;s looking forward to sway 1.0 in 2017!</p>]]></description><pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate></item><item><title>A broad intro to networking</title><link>https://drewdevault.com/2016/12/06/A-broad-intro-to-networking.html</link><description><![CDATA[<p>Disclaimer: I am not a network engineer. That&rsquo;s the point of this blog post,
though - I want to share with non-networking people enough information about
networking to get by. Hopefully by the end of this post you&rsquo;ll know enough about
networking to keep up with a conversation on networking, or know what to search
for when something breaks, or know what tech to research more in-depth when you
are putting together something new.</p>
<h2 id="layers">Layers</h2>
<p>The <strong>OSI model</strong> is the standard model we describe networks with. There are 7
<strong>layers</strong>:</p>
<p>Layer 1, the physical layer, is the electrical engineering stuff.</p>
<p>Layer 2, the link layer, is how devices talk to each other.</p>
<p>Layer 3, the network layer, is what they talk about.</p>
<p>Layer 4, the transport layer, is where things like TCP and UDP live.</p>
<p>Layers 5 and 6 aren&rsquo;t very important.</p>
<p>Layer 7, the application layer, is where Minecraft lives.</p>
<p>When you hear some security guy talking about a &ldquo;layer 7 attack&rdquo;, he&rsquo;s
talking about a attack that focuses on flaws in the application layer. In
practice that means i.e. flooding the server with HTTP requests.</p>
<h2 id="1-physical-layer">1: Physical Layer</h2>
<p><em>Generally implemented by matter</em></p>
<p>Layer 1 is the hardware of a network. Commonly you&rsquo;ll find things here like your
computer&rsquo;s <strong>NIC</strong> (network interface controller), aka the network interface or
just the interface, which is the bit of silicon in your PC that you plug network
cables or WiFi signals into.</p>
<p>On Linux, network interfaces are assigned names like <em>eth0</em> or <em>eno1</em>. eth0 is
the traditional name for the 0th wired network interface. eno1 is the newer
&ldquo;consistent network device naming&rdquo; format popularized by tools like udev (which
manages hardware on many Linux systems) - this is a deterministic name based on
your network hardware, and won&rsquo;t change if you add more interfaces. You can
manage your interfaces with the <em>ip</em> command (<code>man 8 ip</code>), or the now-deprecated
<em>ifconfig</em> command. Some non-Linux Unix systems have not deprecated ifconfig.</p>
<p>This layer also has ownership over <strong>MAC addresses</strong>, in theory. A MAC address
is an allegedly unique identifier for a network device. In practice, software
at higher layers can use whatever MAC address they want. You can change your MAC
address with the ip command, which is often useful for dealing with annoying
public WiFi resource limits or for frustrating someone else on the network.</p>
<p>Other things you find at layer 1 include <strong>switches</strong>, which do network
multiplexing (they generally can be thought of as networking&rsquo;s version of a
power strip - they turn one Ethernet port into many). Also common are
<strong>routers</strong>, whose behaviors are better explained in other layers. You also have
hardware like <strong>firewalls</strong>, which filter network traffic, and <strong>load
balancers</strong>, which distribute a load among several nodes. Both firewalls and
load balancers can be done in software, depending on your needs.</p>
<h2 id="2-data-link-layer">2: Data link layer</h2>
<p><em>Generally implemented by network hardware</em></p>
<p>At this layer you have protocols that cover how nodes talk to one another. Here
the <strong>ethernet</strong> protocol is almost certainly the most common - the protocol
that goes over your network cables. Said network cables are probably <strong>Cat 5</strong>
cables, or &ldquo;category 5&rdquo; cables.</p>
<p>Other protocols here include tunnels, which allow you to indirectly access a
network. A common example is a <strong>VPN</strong>, or virtual private network, which allows
you to participate in another network remotely. Tunnels can also be useful for
getting around firewalls, or for setting up a secure means to access resources
on another network.</p>
<h2 id="3-network-layer">3: Network layer</h2>
<p><em>Generally implemented by the kernel</em></p>
<p>As a software guy, this is where the fun really starts. The other layers are how
computers talk to each other - this layer is what they talk about. Computers are
often connected via a <strong>LAN</strong>, or local area network - a <em>local</em> network of
computers. Computers are also often connected to a <strong>WAN</strong>, or wide area
network - the internet is one such network.</p>
<p>The most common protocol at this layer is IP, or Internet Protocol. There are
two versions that matter: IPv4, and IPv6. Both of them use <strong>IP addresses</strong> to
identify nodes on their networks, and they carry <strong>packets</strong> between them. The
major difference between IPv4 and IPv6 is the size of their respective <strong>address
spaces</strong>. IPv4 uses 32 bit addresses, supporting a total of 4.3 billion possible
addresses, which on the public internet are quickly becoming a sparse resource.
IPv6 uses 128-bit addresses, which allows for a zillion unique addresses.</p>
<p>Ranges of IP addresses can be described with a <strong>subnet mask</strong>. Such a range of
IP addresses constitutes a <strong>subnetwork</strong>, or subnet. Though you&rsquo;re probably
used to seeing an IPv4 address encoded like <code>10.20.30.40</code>, remember that it can
also just be represented as one 32-bit number - in this case 169090600, or
0xA141E28, and you can do bitwise math against these numbers. You generally
represent a subnet with CIDR notation, such as <code>192.168.1.0/24</code>. In this case, the
first 24 bits are meaningful, and all possible values for the remaining 8 bits
constitute the range of addresses represented by this mask.</p>
<p>IPv4 has several subnets reserved for this and that. Some important ones are:</p>
<ul>
<li><code>0.0.0.0/8</code> - current network. On many systems, you can treat <code>0.0.0.0</code> as all
IP addresses assigned to your device</li>
<li><code>127.0.0.0/8</code> - loopback network. These addresses refer to yourself.</li>
<li><code>10.0.0.0/8</code>, <code>172.16.0.0/12</code>, and <code>192.168.0.0/16</code> are reserved for private
networks - you can allocate these addresses on a LAN.</li>
</ul>
<p>An IPv4 packet includes, among other things: a <strong>time to live</strong>, or TTL, which
limits how long the packet can live for; the <strong>protocol</strong>, such as TCP; the
<strong>source</strong> and <strong>destination</strong> addresses; a header checksum; and the
<strong>payload</strong>, which is specific to the higher level protocol in use.</p>
<p>Given the limited size of the IPv4 space, most networks are designed with an
isolated LAN that uses <strong>NAT</strong>, or network address translation, to translate IP
addresses from the WAN. Basically, a router or similar component will translate
internal IP addresses (allocated from the private subnets) to its own external
IP address, and vice versa, when passing communications along to the WAN. With
IPv6 there are so many IP addresses that you don&rsquo;t need to use NAT. If you&rsquo;re
wondering whether or not we&rsquo;ll ever run out of IPv6 addresses - leave that to
someone else to solve tens of millions of years from now.</p>
<p>IPv6 addresses are 128-bits long and are described with strings like
<code>2001:0db8:0000:0000:0000:ff00:0042:8329</code>. Luckily the people who designed it
were kind enough to realize people don&rsquo;t want to write that, so it can be
shortened to <code>2001:db8::ff00:42:8329</code> by removing leading zeros and removing
sections entirely composed of zeros. Where colons are reserved for another
purpose, you&rsquo;ll typically add brackets around the IPv6 address, such as
<code>http://[2607:f8b0:400d:c03::64]</code>. The IPv6 loopback address (localhost) is
<code>::1</code>, and IPv6 subnets are written the same way as in IPv4. Given how many
IPv6 addresses there are, it&rsquo;s common to be allocated lots of them in cases when
you might have expected to only receive one IPv4 address. Typically these blocks
will be anywhere from /48 to /56 - which contains more addresses than the entire
IPv4 space.</p>
<p>IP addresses are often <strong>static</strong>, which means the node connecting to the
network already knows its IP address and starts using it right away. They may
also be <strong>dynamic</strong>, and are allocated by some computer on the network with the
<strong>DHCP</strong> protocol.</p>
<p>IPsec also lives in layer 3.</p>
<h2 id="4-transport-layer">4: Transport Layer</h2>
<p><em>Generally implemented by the kernel</em></p>
<p>The transport layer is where you have higher level protocols, through which much
of the work gets done. Protocols here include TCP, UDP, ICMP (used for ping),
and others. These protocols are used to power application-layer protocols.</p>
<p><strong>TCP</strong>, or the transmission control protocol, is probably the most popular
transport layer protocol out there. It turns the unreliable internet protocol
into a reliable byte stream. TCP (tries to) make four major guarantees: data
will arrive, will arrive exactly once, will arrive in the correct order, and
will be the correct data.</p>
<p>TCP takes a stream of bytes and breaks it up into <strong>segments</strong>. Each segment is
then stuck into an IP packet and sent on its way. A TCP segment includes the
source and destination <strong>ports</strong>, which are used to distinguish between
different application-layer protocols in use and to distinguish between
different applications using the protocol on the same host; a <strong>sequence
number</strong>, which is used to order the packet; an <strong>ACK number</strong>, which is used to
inform the other end that it has received some packet and it can stop retrying;
a checksum; and the data itself. The protocol also includes a handshake process
and other housekeeping processes that the application needn&rsquo;t be aware of.
Generally speaking, the overhead of TCP is significant for real-time
applications.</p>
<p>Most TCP servers will <strong>bind</strong> to a certain port to <strong>listen</strong> for incoming
connections, via the operating system&rsquo;s <strong>socket</strong> implementation. Many TCP
<strong>clients</strong> can connect to one server.</p>
<p>Ports are a 16 bit unsigned integer. Most applications have a default port
they&rsquo;re known to use, such as 80 for HTTP. Originally these numbers were
allocated by the internet police, but this has fallen out of practice. On most
systems, ports less than 1024 require elevated permissions to listen to.</p>
<p><strong>UDP</strong>, or the user datagram protocol, is the second most popular transport
layer protocol, and is the lighter of the two. UDP is a paper thin layer on top
of IP. A UDP packet contains a source port, destination port, checksum, and a
payload. This protocol is fast and lightweight, but makes none of the promises
TCP makes - UDP &ldquo;<strong>datagrams</strong>&rdquo; may arrive multiple or zero times, in a
different order than they were sent, and possibly with data errors. Many people
who use UDP will implement these guarantees themselves in a some lighter-weight
fashion than TCP. Importantly, UDP source IPs can be spoofed and the destination
has no means of knowing where it really came from - TCP avoids this by doing a
handshake before exchanging any data.</p>
<p>UDP can also issue broadcasts, which are datagrams that are sent to every node
on the network. Such datagrams should be addressed to <code>255.255.255.255</code>. There&rsquo;s
also multicast, which specifies a subset of all nodes to send the datagram to.
Note that both of these have limited support in real-world networks.</p>
<h2 id="5--6-session-and-presentation">5 &amp; 6: Session and presentation</h2>
<p>Think of these as extensions of layer 7, the application layer. Technically
things like SSL, compression, etc are done here, but in practice it doesn&rsquo;t
have any important technical implications.</p>
<h2 id="7-application-layer">7: Application layer</h2>
<p><em>Generally implemented by end-user software</em></p>
<p>The application layer is the uppermost layer of the network and it&rsquo;s what all
the other layers are there for. At this layer you have all of the hundreds of
thousands of application-specific protocols out there.</p>
<p><strong>DNS</strong>, or the domain name system, is a protocol for mapping domain names (i.e.
google.com) to IP addresses (i.e. 209.85.201.100), among other features. DNS
servers keep track of DNS records, which associate names with records of various
types. Common records include A, which maps a name to an IPv4 address, AAAA for
IPv6, CNAME for aliases, and MX for email records. The most popular DNS server
is bind, which you can run on your own network to operate a private name system.</p>
<p>Some other UDP protocols: NTP, the network time protocol; DHCP, which assigns
dynamic IP addresses on networks; and nearly all real-time video and audio
streaming protocols (like VoIP). Many video games also use UDP for their
multiplayer networking.</p>
<p>TCP is more popular than UDP and powers many, many, many applications, due
largely to the fact that it simplifies the complex intricacies of networking.
You&rsquo;re probably familiar with HTTP, which is used by web browsers use to fetch
resources. Email applications often communicate over TCP with IMAP to retrieve
the contents of your inbox, and SMTP to send emails to other servers. SSH (the
secure shell), FTP (file transfer protocol), IRC (internet relay chat), and
countless other protocols also use TCP.</p>
<hr>
<p>Hopefully this article helps you gain a general understanding of how computers
talk to each other. In my own experience, I&rsquo;ve used a broad understanding of the
entire stack and a deep understanding of levels 3 and up. I expect most
programmers today need a broad understanding of the entire stack and a deep
understanding of level 7, and I hope that most programmers would seek a deep
understanding of level 4 as well.</p>
<p>Please leave some feedback if you appreciated this article - I may do more
similar articles in the future, giving a broad introduction to other topics. The
next topics I have in mind are security and encryption (as separate posts).</p>]]></description><pubDate>Tue, 6 Dec 2016 00:00:00 +0000</pubDate></item><item><title>Electron considered harmful</title><link>https://drewdevault.com/2016/11/24/Electron-considered-harmful.html</link><description><![CDATA[<p>Yeah, I know that &ldquo;considered harmful&rdquo; essays are allegedly <a href="http://meyerweb.com/eric/comment/chech.html">considered
harmful</a>. If it surprises you that
I&rsquo;m writing one, though, you must be a new reader. Welcome! Let&rsquo;s get started.
If you&rsquo;re unfamiliar with Electron, it&rsquo;s some hot new tech that lets you make
desktop applications with HTML+CSS+JavaScript. It&rsquo;s basically a chromeless web
browser with a Node.js backend and a Chromium-based frontend. What follows is
the rant of a pissed off Unix hacker, you&rsquo;ve been warned.</p>
<p>As software engineers we have a responsibility to pick the <em>right</em> tools for the
job. In fact, that&rsquo;s the <em>most important</em> choice we have to make when we start a
project. When you choose Electron you get:</p>
<ul>
<li>An entire copy of Chromium you&rsquo;ll be shipping with your app</li>
<li>An interface that looks and feels nothing like the rest of the user&rsquo;s OS</li>
<li>One of the slowest, least memory efficient, and most inelegant GUI application
platforms out there (remember, we <em>tolerate</em> frontend web development because
we have no choice, not because it is by any means <em>good</em>)</li>
</ul>
<p>Let&rsquo;s go over some case studies.</p>
<p><strong><a href="https://github.com/mifi/lossless-cut">lossless-cut</a></strong> is an Electron app that
gives you a graphical UI for <em>two ffmpeg flags</em>. Seriously, the flags in
question are -ss and -t. No really, that&rsquo;s <em><a href="https://github.com/mifi/lossless-cut/blob/master/src/ffmpeg.js#L46">literally all it
does</a></em>. It
doesn&rsquo;t even use ffmpeg to decode the video preview in the app, it&rsquo;s limited to
the codecs chromium supports. It also ships its own ffmpeg, so it has the
industry standard video decoding tool <em>right there</em> and doesn&rsquo;t use it to render
video. For the price of 200 extra MiB of disk space and an entire Chromium process
in RAM and on your CPU, you get a less capable GUI that saves you from having to
type the -ss and -t flags yourself.</p>
<p><strong><a href="http://1clipboard.io/">1Clipboard</a></strong> is a clipboard manager. In Electron. A
<em>clipboard manager</em>. In order to show you <em>a list of things you&rsquo;ve copied</em>, it
uses <em>an entire bundled copy of Chromium</em>. Also note that despite the promises
of Electron making cross platform development easy, it doesn&rsquo;t support Linux.</p>
<p><strong><a href="https://getcollectie.com/">Collectie</a></strong> is a&hellip; fancy bookmark manager, I
guess? Another one that fails to get the cross platform value add from Electron,
this only supports OS X (or is it macOS). For only $10 bucks you get to organize
your shit into folders. Or you could just open the Finder for free and get a
native UX to boot.</p>
<p>This is a <a href="https://hyper.is/">terminal</a> written with Electron. On the landing
page they say &ldquo;# A terminal emulator 100% based on JavaScript, HTML, and CSS&rdquo;
like they&rsquo;re proud of it. They&rsquo;ve taken one of the most lightweight and
essential tools on your computer and bloated it by orders of magnitude. Why the
fuck would you want to render Google in your god damn terminal emulator? Bonus:
also not cross platform.</p>
<p>This is not to mention the dozens of companies that have taken their websites
and crammed them into a shitty electron app and called it their desktop app.
Come on guys!</p>
<p>By the way, if you&rsquo;re the guy who&rsquo;s going to leave a comment about how this blog
post introduced you to a bunch of interesting apps you&rsquo;re going to install now,
I hate you.</p>
<h2 id="electron-enables-lazy-developers-to-write-garbage">Electron enables lazy developers to write garbage</h2>
<p>Let me be clear about this: JavaScript sucks. It&rsquo;s not the worst, but it&rsquo;s also
not by any means good. ES6 is a really great step forward and I&rsquo;m thrilled about
how much easier it&rsquo;s going to be to write JavaScript, but it&rsquo;s still JavaScript
underneath the syntactic sugar. We use it because we have no choice (people who
know more than just JavaScript know this). The object model is whack and the
loose typing is whack and the DOM is super whack.</p>
<p>When Node.js happened, a bunch of developers who never bothered to learn more
than JavaScript for their frontend work suddenly could write their crappy code
on the backend, too. Now this is happening to desktop applications. The reason
people choose Electron is because they are <em>too lazy</em> to learn the right tools
for the job. This is the <em>worst</em> quality a developer can have. You&rsquo;re an
engineer, for the love of God! Fucking act like one! Do they build square
airplanes so they don&rsquo;t have to learn about aerodynamics, then just throw on an
extra ten engines to make up for it? NO!</p>
<p>For the love of God, learn something else. Learn how to use GTK or Qt. Maybe Xwt
is more up your alley. How about GNOME&rsquo;s Vala thing? <em>Learn another programming
language</em>. Learn Python or C/C++ or C#. Fun fact: it&rsquo;ll make your JavaScript
better, and once you have it in your toolbox you can make more educated
decisions on the appropriate tool to use when you face your next problem. Hint:
it&rsquo;s not Electron.</p>
<h2 id="some-electron-apps-dont-suck">Some Electron apps don&rsquo;t suck</h2>
<p>For some use-cases Electron is a reasonable choice.</p>
<ul>
<li><a href="https://code.visualstudio.com/">Visual Studio Code</a>, because it&rsquo;s a full
blown IDE with a debugger and plugins and more. It&rsquo;s already gonna be
bloated.</li>
<li><a href="http://www.soundnodeapp.com/">Soundnode</a>, because it&rsquo;s not like any other
music service&rsquo;s app obeys your OS&rsquo;s UI conventions</li>
</ul>
<p>Uh, that&rsquo;s it. That&rsquo;s the entire list.</p>]]></description><pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate></item><item><title>Getting on without Google</title><link>https://drewdevault.com/2016/11/16/Getting-on-without-Google.html</link><description><![CDATA[<p><img src="https://sr.ht/d718.png" alt=""></p>
<p>I used Google for a long time, but have waned myself off of it over the past
few years, and I finally deleted my account a little over a month ago. I feel so
much better about my privacy now that I&rsquo;ve removed Google from the equation, and
self hosting my things affords me a lot of flexibility and useful customizations.</p>
<h2 id="mailcmpwncom">mail.cmpwn.com</h2>
<p>This one was the most difficult and time consuming to set up, but it was <em>very</em>
worth it. I&rsquo;ve intended for a while to make a new mail server software suite
that&rsquo;s less terrible to set up, so hopefully that situation will improve in the
future. I want to flesh out <a href="https://github.com/SirCmpwn/aerc">aerc</a> some more
first. A personal mail server was one of the earliest things I set up in my
post-Google life - I&rsquo;ve operated it for about two years now.</p>
<ul>
<li>Postfix to handle incoming and outgoing mail</li>
<li>Dovecot to handle mail delivery, filtering, and IMAP</li>
<li>Postfixadmin to provide a nice interface for managing accounts</li>
<li>mutt to read and compose my emails on the desktop</li>
<li>K9 to read and compose my emails on Android</li>
<li>Roundcube for when it&rsquo;s occasionally necessary to read an HTML email</li>
</ul>
<p>With my mail server provides a lot of side benefits, too. For one, all of my
email-sending software now uses it. Once Mandrill went kaput, it was easy to
switch everything over to it. I can be sending and receiving email from a new
domain in less than 5 minutes now. Using sieve scripts for filtering emails is
also a lot more flexible than what Google offered - I now have filtering set up
to organize several mailing lists, alerts and notifications sent by my software
and servers, RSS feeds, and more.</p>
<p>My strategy for defeating spam is to use a combination of the spamhaus
blocklist, greylisting, and blacklisting with sieve. I see about 3-5 spam emails
per week on average with this setup. To ensure my own emails get delivered, I&rsquo;ve
set up SPF and DKIM, reverse DNS, and appealed to have my IP address removed
from blocklists. A great tool in figuring all this out has been
<a href="http://mail-tester.com">mail-tester.com</a>.</p>
<h2 id="youtube">YouTube</h2>
<p>For YouTube, I &ldquo;subscribe&rdquo; to channels by adding their RSS feeds to
<a href="http://www.allthingsrss.com/rss2email/">rss2email</a>, combined with sieve scripts
that filter them into a specific folder. I then have a keybinding in mutt that,
when pressed, pulls the YouTube URL out of an email and feeds it to mpv, a
desktop video player. It&rsquo;s so much easier to access YouTube this way than
through the web browser - no ads, familiar keybindings, remote control support,
and a no-nonsense feed of your videos.</p>
<h2 id="music">Music</h2>
<p>Instead of Google Music, Spotify, or anything else, I run an internet radio
with my friends. We all keep our music collections (mostly lossless) on NFS
servers, and we mounted these servers on a streaming server that shuffles the
entire thing and keeps a searchable database of music. We have an API that I
pull from to integrate desktop keybindings and a status line on my taskbar, and
an IRC bot for searching the database and requesting songs. I can also stream to
my phone with VLC, as well as use scripts to maintain an offline archive of my
favorite songs. This setup is <em>way</em> nicer than any commercial service I&rsquo;ve used
in the past. We&rsquo;ll be open sourcing version 2 to provide a turnkey solution for
this type of self-hosted music service.</p>
<h2 id="web-search">Web search</h2>
<p><a href="https://duckduckgo.com/">DuckDuckGo</a>. Even if you think the search results
aren&rsquo;t up to snuff (you get used to just being a bit more specific anyway), the
bangs feature is absolutely indispensable. I recently patched Chromium for
Android to support DuckDuckGo as a search engine as well:
<a href="https://sr.ht/h4bZ.patch">here&rsquo;s the patch</a>.</p>
<h2 id="file-hosting">File hosting</h2>
<p>Instead of using Google Drive, I&rsquo;m using a number of different solutions
depending on what&rsquo;s most convenient at the time. I operate
<a href="https://sr.ht">sr.ht</a> for me and my friends, which allows me to just have a
place to drop a file and get a link to share. I have scripts and keybindings set
up to make uploading files here second nature, as well as an Android app someone
wrote. I also keep a 128G flash drive on my keychain now that comes in handy all
the time, and a big-ass file server on OVH that I keep mounted with NFS or sshfs
depending on the scenario, and sometimes I just stash files on a random server
with rsync. sr.ht is <a href="https://gogs.sr.ht/SirCmpwn/sr.ht">open source</a>, by the
way.</p>
<h2 id="cyanogenmod">CyanogenMod</h2>
<p>On Android, I use CyanogenMod without Google Play Services, and I use F-Droid to
get apps. When I used Google Now, I found that I most often just asked it for
reminders, which I now do via an open source app called Notable Plus. I also
have open source apps for reading HN, downloading torrents, blocking ads,
connecting to IRC, two factor authentication, YouTube, password management,
Twitter, and more.</p>
<h2 id="notably-missing-docs">Notably missing: Docs</h2>
<p>Hopefully the new LibreOffice thing will do the trick once it&rsquo;s ready. I&rsquo;m
looking forward to that.</p>
<h2 id="things-i-self-host-that-google-doesnt-offer">Things I self host that Google doesn&rsquo;t offer</h2>
<p>I use ZNC to operate an IRC bouncer, which is great because I use IRC <em>a lot</em>.
It keeps logs for me, keeps me always connected, and gives me a number of nice
features to work with. I also host a number of simple websites related to IRC to
do things like channel stats and rules.</p>
<p>To all sr.ht users I offer access to <a href="https://gogs.sr.ht">gogs.sr.ht</a>, which I
personally use to host many private repositories as well as a number of small
projects, and as a kind of staging area for repositories that aren&rsquo;t quite ready
for GitHub yet.</p>
<p>For passwords, I use a tool called <a href="https://www.passwordstore.org/">pass</a>, which
encrypts passwords with my PGP key and stores them in a git repository I keep on
gogs.sr.ht, with desktop keybindings to make grabbing them convenient.</p>
<h2 id="help-me-do-this">Help me do this!</h2>
<p>Well, that covers most of my major self hosted services. If you&rsquo;re interested in
more detail about how any of this works so you might set something up yourself,
feel free to reach out to me by <a href="mailto:sir@cmpwn.com">email</a>,
<a href="https://cmpwn.com/@sir">Mastodon</a>, or IRC (SirCmpwn on any network). I&rsquo;d
be happy to help!</p>]]></description><pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate></item><item><title>I&apos;m losing faith in America</title><link>https://drewdevault.com/2016/11/05/Losing-faith-in-America.html</link><description><![CDATA[<p>I recently quit my job at Linode and started looking for something else to do.
For the first time in my career, I&rsquo;m seriously considering opportunities abroad.
Sorry for the politically charged post - I promise to get back to tech stuff
right away.</p>
<p><img src="https://imgs.xkcd.com/comics/canada.png" alt=""></p>
<p>On November 8th, I&rsquo;m going to step into the voting booth and will be presented
with the following options:</p>
<ul>
<li>A criminal who cheated her way into a spot on the ballot</li>
<li>An egotistical racist maniac</li>
</ul>
<p>The next president of the United States will probably be Hillary Clinton. I&rsquo;m
sure I don&rsquo;t have to tell you how ridiculous this is. This is a person who has
pulled all of the stops to get her name on the ballot, including <em>voter fraud</em>
and disturbing amounts of corruption within the Democratic party.  Not to
mention that she&rsquo;s probably going to start a war with Syria, mess with the
already fragile geopolitical relationship we have with Russia, and likely
deserves to be incarcerated for mishandling classified information. Say what you
will about the Republican party - at least Trump won his nomination fair and
square. Bonus: not voting for Hillary is sexist.</p>
<p>Not that I&rsquo;d prefer it if Trump wins. I have a free sandwich waiting for me at
the deli nearby if he doesn&rsquo;t win. He got his nomination fairly, but that
doesn&rsquo;t mean he deserves it. This is a guy with little political clout who is
incapable of handling international relations or commanding our military. He
staunchly advocates committing war crimes to deal with ISIS. He makes racist,
sweeping generalizations about anyone different from him. He&rsquo;s a misogynist.
Even worse, he&rsquo;s all of these things and seems to actually represent a fair
portion of his supporters.</p>
<p>Neither of the independents are serious contenders, so I won&rsquo;t bother with why I
don&rsquo;t like them. They haven&rsquo;t earned my vote, either.</p>
<p>Congress is composed of many of the same sort of people. Corrupt politicians who
answer to the checkbooks of lobbyists who work against the interests of the
American people for the sake of their own. We&rsquo;re facing climate change and our
politicians are taking money from rich fossil fuel lobbyists and damning our
species to extinction. The wealth gap between the rich and the poor grows deeper
and deeper as absurdly rich people get absurdly richer at the expense of the
poor and middle class - through the support of the politicians whose pockets
they&rsquo;ve greased. Their excess wealth could pay for programs to improve our
failing infrastructure and provide hundreds of thousands of jobs in doing so. We
could provide free healthcare for all Americans too, if it wasn&rsquo;t for the
ongoing debate about whether or not being alive and healthy is a fundamental
human right - many thanks to the pharmaceutical interests for shaping this
debate to maximize their profits. It&rsquo;d be less of a problem if many companies
weren&rsquo;t getting rich off of the ever widening waistlines of Americans, too.</p>
<p>Mass surveillance remains in full effect even years after Snowden&rsquo;s revelations.
The ridiculous war on drugs keeps putting people behind bars for lifetimes for
victimless crimes to support the financial needs of private prisons and local
police departments, who themselves are now better armed than most militaries,
based on drug policies that have no basis in reality. 97% of trails end in plea
bargains instead of justice, and minimum sentences ensure these people spend
ridiculous amounts of time in prisons that punish them rather than rehabilitate
them into productive citizens. A judge will hold a defendant indefinitely in
prison without a conviction for refusing to disclose their disk encryption
password in accordance with their 5th amendment rights - though if many
political players had their way, encryption would be illegal anyway.</p>
<p>There&rsquo;s a word for what America is: <strong>corrupt</strong>. What the fuck is going on in
this country? We aren&rsquo;t a representative democracy by any stretch of the
imagination. We have become an oligarchy. We are ruled by money.</p>
<p>I love America, honestly. My whole family is here and I connect most with the
American people. We have an incredibly rich land and great cities full of great
innovators and interesting people. I hate that it&rsquo;s become what it is today. I
don&rsquo;t expect anywhere else to be perfect, but we should be ashamed of how we
look next to some other countries out there.</p>]]></description><pubDate>Sat, 5 Nov 2016 00:00:00 +0000</pubDate></item><item><title>Using the right tool for the job</title><link>https://drewdevault.com/2016/09/17/Use-the-right-tool.html</link><description><![CDATA[<p>One of the most important choices you&rsquo;ll make for the software you write is what
you write it in, what frameworks you use, the design methodologies to subscribe
to, and so on. This choice doesn&rsquo;t seem to get the respect it&rsquo;s due. These are
some of the only choices you&rsquo;ll make that <em>you cannot change</em>. Or, at least,
these choices are among the most difficult ones to change.</p>
<p>People often question why TrueCraft is written in C# next to projects like Sway
in C, alongside KnightOS in Assembly or sr.ht in Python. It would certainly be
easier from the outset if I made every project in a language I&rsquo;m comfortable
with, using tools and libraries I&rsquo;m comfortable with, and there&rsquo;s certainly
something to be had for that. That&rsquo;s far from being the only concern, though.</p>
<p>A new project is a <em>great</em> means of learning a new language or framework - the
only effective means, in fact. However, the inspiration and drive for new
projects doesn&rsquo;t come often. I think that the opportunity for learning is more
important than the short term results of producing working code more quickly.
Making a choice that&rsquo;s more well suited to the problem at the expense of comfort
will also help your codebase in the long run. Why squander the opportunity to
choose something unfamiliar when you have the rare opportunity to start working
on a new project?</p>
<p>I&rsquo;m not advocating for you to use something new for every project, though. I&rsquo;m
suggesting that you detatch your familiarity with your tools from the
decision-making process. I often reach for old tools when starting a new
project, but I have learned enough about new tools that I can judge what
projects are a good use-case for them. Sometimes this doesn&rsquo;t work out, too - I
just threw away and rewrote a prototype in C after deciding that it wasn&rsquo;t a
good candidate for Rust.</p>
<p>Often it does work out, though. I&rsquo;m glad I chose to learn Python for MediaCrush
despite having no experience with it (thanks again for the help with that,
Jose!). Today I still know it was the correct choice and knowing it has hugely
expanded my programming skills, and without that choice there probably wouldn&rsquo;t
have been a Kerbal Stuff or a sr.ht or likely even the new API we&rsquo;re working on
at Linode. I&rsquo;m glad I chose to learn C for z80e, though I had previously written
emulators in C#. Without it there wouldn&rsquo;t be many other great tools in the
KnightOS ecosystem written in C, and there wouldn&rsquo;t be a Sway or an aerc. I&rsquo;m
glad I learned ES6 and React instead of falling back on the familiar Knockout.js
when building prototypes for the new Linode manager as well.</p>
<p>Today, I have a mental model of the benefits and drawbacks of a lot of
languages, frameworks, libraries, and platforms I don&rsquo;t know how to use. I&rsquo;m
sort of waiting for projects that would be well suited to things like Rust or
Django or Lisp or even Plan 9. Remember, the skills you already know make for a
great hammer, but you shouldn&rsquo;t nail screws to the wall.</p>]]></description><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate></item><item><title>What motivates the authors of the software you use?</title><link>https://drewdevault.com/2016/09/09/What-motivates-the-authors-of-the-software-you-use.html</link><description><![CDATA[<p>We face an important choice in our lives as technophiles, hackers, geeks: the
choice between proprietary software and free/open source software. What
platforms we choose to use are important. We have a choice between Windows, OS
X, and Linux (not to mention the several less popular choices). We choose
between Android or iOS. We choose hardware that requires nonfree drivers or ones
that don&rsquo;t. We choose to store our data in someone else&rsquo;s cloud or in our own.
How do we make the right choice?</p>
<p>I think it&rsquo;s important to consider the basic motivations behind the software you
choose to use. Why did the author write it? What are their goals? How might that
influence the future (or present) direction of this software?</p>
<p>In the case of most proprietary software, the motivations are to make money.
They make decisions that benefit the company rather than the user. If you&rsquo;re
paying for the software, they might use vendor lock-in strategies to prevent you
from having ownership of your data. If you don&rsquo;t pay for the software, they
might place ads on it, sell your personal information, etc. When Cloud Storage
Incorporated is sold to Somewhat Less Trustworthy Business, who&rsquo;s to say that
your data is in good hands?</p>
<p>In the case of most open source<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> software, however, things are different.
The decisions the developers make are generally working in the interests of the
user. In open source, people work as people, not as companies. You can find the
name and email address of the person who wrote a particular feature and send
them bugs and questions.</p>
<p>An open source Facebook wouldn&rsquo;t be rearranging and filtering your timeline to
best suit their advertisers interests. An open source iCloud would include
import and export tools so you can take your data elsewhere if you so choose. An
open source phone wouldn&rsquo;t be loaded with unremovable crapware, and even if it
was, you could patch it.</p>
<p>When you install software on Linux, you get cryptographically verified packages
from individuals you can trust. You can look up who packaged your software and
get to know them personally, or even help them out! You can download the files
necessary to build the package from scratch and do so, adding any tweaks and
customizations as you wish. You don&rsquo;t have a human point of contact for Facebook
or GMail.</p>
<p>Yes, there is a usability tradeoff. It is often more difficult to use open
source software. However, it&rsquo;s also often more powerful, tweakable, flexible,
and hackable.</p>
<p>Next time you decide what software <em>you</em> should use, ask yourself: does this
software serve my interests or someone else&rsquo;s?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I&rsquo;m certain some readers will take offense at my language choice in this article with respect to free/libre/open source software - I chose my words intentionally. I&rsquo;ll talk more about my opinions on the free software movement in a later post.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 9 Sep 2016 00:00:00 +0000</pubDate></item><item><title>[VIDEO] Arch Linux with full disk encryption in (about) 15 minutes</title><link>https://drewdevault.com/2016/08/18/Arch-Linux-with-full-disk-encryption-in-15-minutes.html</link><description><![CDATA[<link rel="stylesheet" href="https://drewdevault.com/css/video-js.css">
<script>
window.HELP_IMPROVE_VIDEOJS = false;
</script>
<script src="https://drewdevault.com/js/video.js"></script>
<p>After my <a href="https://drewdevault.com/2016/06/29/Privacy-as-a-hobby.html">blog post</a> emphasizing the
importance of taking control of your privacy, I&rsquo;ve decided to make a few more
posts going over detailed instructions on how to actually do so. Today we have a
video that goes over the process of installing Arch Linux with full disk
encryption.</p>
<p>This is my first go at publishing videos on my blog, so please provide some
feedback in the comments of this article. I&rsquo;d prefer to use my blog instead of
YouTube for publishing technical videos, since it&rsquo;s all open source, ad-free,
and DRM-free. Let me know if you&rsquo;d like to see more content like this on my
blog and which topics you&rsquo;d like covered - I intend to at least release another
video going over this process for Ubuntu as well.</p>
<video class="video-js vjs-16-9" data-setup="{}" controls>
  <source src="https://sr.ht/archlinux.webm" type="video/webm">
  <p>Your browser does not support HTML5 video.</p>
</video>
<p><a class="pull-right" href="https://sr.ht/archlinux.webm">Download video (WEBM)</a></p>
<div class="clearfix"></div>
<p>The video goes into detail on each of these steps, but here&rsquo;s the high level
overview of how to do this. Always check the latest version of the <a href="https://wiki.archlinux.org/index.php/Installation_guide">Install
Guide</a> and the
<a href="https://wiki.archlinux.org/index.php/Dm-crypt">dm-crypt</a> page on the Arch Wiki
for the latest procedure.</p>
<ol>
<li>Partition your disks with gdisk and be sure to set aside a partition for
/boot</li>
<li>Create a filesystem on /boot</li>
<li>(optional) Securely erase all of the existing data on your disks with <code>dd if=/dev/zero of=/dev/sdXY bs=4096</code> - <em>note: this is a correction from the
command mentioned in the video</em></li>
<li>Set up encryption for your encrypted partitions with <code>cryptsetup luksFormat /dev/sdXX</code></li>
<li>Open the encrypted volumes with <code>cryptsetup open /dev/sdXX [name]</code></li>
<li>Create filesystems on /dev/mapper/[names]</li>
<li>Mount all of the filesystems on /mnt</li>
<li>Perform the base install with <code>pacstrap /mnt base [extra packages...]</code></li>
<li><code>genfstab -p /mnt &gt;&gt; /mnt/etc/fstab</code></li>
<li><code>arch-chroot /mnt /usr/bin/bash</code></li>
<li><code>ln -s /usr/share/zoneinfo/[region]/[zone] /etc/localtime</code></li>
<li><code>hwclock --systohc --utc</code></li>
<li>Edit /etc/locale.gen to your liking and run <code>locale-gen</code></li>
<li><code>locale &gt; /etc/locale.conf</code> - note this only works for en_US users, adjust if
necessary</li>
<li>Edit /etc/hostname to your liking</li>
<li>Reconfigure the network</li>
<li>Edit /etc/mkinitcpio.conf and ensure that the <code>keyboard</code> and <code>encrypt</code> hooks
run before the <code>filesystems</code> hook</li>
<li><code>mkinitcpio -p linux</code></li>
<li>Set the root password with <code>passwd</code></li>
<li>Configure /etc/crypttab with any non-root encrypted disks you need. You can
get partition UUIDs with <code>ls -l /dev/disk/by-partuuid</code></li>
<li>Configure your kernel command line to include
<code>cryptdevice=PARTUUID=[...]:[name] root=/dev/mapper/[name] rw</code></li>
<li>Install your bootloader and reboot!</li>
</ol>]]></description><pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate></item><item><title>Sway 0.9 &amp; One year of Sway</title><link>https://drewdevault.com/2016/08/02/Sway-0.9-in-retro.html</link><description><![CDATA[<p>Today marks one year since the <a href="https://github.com/SirCmpwn/sway/commit/6a33e1e3cddac31b762e4376e29c03ccf8f92107">initial
commit</a>
of Sway. Over the year since, we&rsquo;ve written 1,823 commits by 54 authors,
totalling 16,601 lines of C (and 1,866 lines of header files). This was written
over the course of 515 pull requests and 300 issues. Today, most i3 features are
supported. In fact, as of last week, all of the features from the i3
configuration I used before I started working on Sway are now supported by Sway.
Today, Sway looks like this (click to expand):</p>
<p><a href="https://sr.ht/ICd5.png"><img src="https://sr.ht/ICd5.png" alt=""></a></p>
<p>For those who are new to the project, <a href="http://swaywm.org">Sway</a> is an
i3-compatible Wayland compositor. That is, your existing <a href="http://i3wm.org/">i3</a>
configuration file will work as-is on Sway, and your keybindings and colors and
fonts and for_window rules and so on will all be the same. It&rsquo;s i3, but for
Wayland, plus it&rsquo;s got some bonus features. Here&rsquo;s a quick rundown of what&rsquo;s
happened since the <a href="https://drewdevault.com/2016/04/20/State-of-sway.html">previous state of Sway</a>:</p>
<ul>
<li>Stacked &amp; tabbed layouts</li>
<li>Customizable input acceleration</li>
<li>Mouse support for swaybar</li>
<li>Experimental HiDPI support</li>
<li>New features for swaylock and swaybg</li>
<li>Support for more i3 IPC features</li>
<li>Tracking of the workspace new windows should arrive on</li>
<li>Improved compatibility with i3</li>
<li>Many improvements to the documentation</li>
<li>Hundreds of bug fixes and small improvements</li>
</ul>
<p>Since the last State of Sway, we&rsquo;ve also seen packages land in the official
repositories of Gentoo, OpenSUSE Tumbleweed, and NixOS (though the last group
warn me that it&rsquo;s experimental). And now for some updated stats. Here&rsquo;s the
breakdown of <strong>lines of code per author</strong> for the top ten authors (with the
change from the previous state of Sway in parens):</p>
<table class="table">
    <tbody>
        <tr><td>4659 (+352)</td><td>Mikkel Oscar Lyderik</td></tr>
        <tr><td>3024 (-35)</td><td>Drew DeVault</td></tr>
        <tr><td>2232 (+53)</td><td>taiyu</td></tr>
        <tr><td>1786 (-40)</td><td>S. Christoffer Eliesen</td></tr>
        <tr><td>1090 (+1090)</td><td>Zandr Martin</td></tr>
        <tr><td>619 (-63)</td><td>Luminarys</td></tr>
        <tr><td>525 (-19)</td><td>Cole Mickens</td></tr>
        <tr><td>461 (-54)</td><td>minus</td></tr>
        <tr><td>365 (-20)</td><td>Christoph Gysin</td></tr>
        <tr><td>334 (-11)</td><td>Kevin Hamacher</td></tr>
    </tbody>
</table>
<p>Notably, Zandr Martin has started regular contributions to Sway and brought
himself right up to 5th place in a short time, and while he&rsquo;s still learning C to
boot. Not included here are his recent forays into contributing to our
dependencies as well. Thanks man! This time around, I also lost a much more
respectable line count - only 35 compared to 457 from the last update.</p>
<p>Here&rsquo;s the total <strong>number of commits per author</strong> for each of the top ten
committers:</p>
<table class="table">
    <tbody>
        <tr><td>842</td><td> Drew DeVault</td></tr>
        <tr><td>239</td><td> Mikkel Oscar Lyderik</td></tr>
        <tr><td>186</td><td> taiyu</td></tr>
        <tr><td>97</td><td> Luminarys</td></tr>
        <tr><td>91</td><td> S. Christoffer Eliesen</td></tr>
        <tr><td>58</td><td> Christoph Gysin</td></tr>
        <tr><td>48</td><td> Zandr Martin</td></tr>
        <tr><td>30</td><td> minus</td></tr>
        <tr><td>25</td><td> David Eklov</td></tr>
        <tr><td>24</td><td> Mykyta Holubakha</td></tr>
    </tbody>
</table>
<p>Most of what I do for Sway personally is reviewing and merging pull requests.
Here&rsquo;s the same figures using <strong>number of commits per author, excluding merge
commits</strong>, which changes my stats considerably:</p>
<table class="table">
    <tbody>
        <tr><td>383</td><td> Drew DeVault</td></tr>
        <tr><td>224</td><td> Mikkel Oscar Lyderik</td></tr>
        <tr><td>170</td><td> taiyu</td></tr>
        <tr><td>96</td><td> Luminarys</td></tr>
        <tr><td>91</td><td> S. Christoffer Eliesen</td></tr>
        <tr><td>58</td><td> Christoph Cysin</td></tr>
        <tr><td>38</td><td> Zandr Martin</td></tr>
        <tr><td>30</td><td> minus</td></tr>
        <tr><td>25</td><td> David Eklov</td></tr>
        <tr><td>24</td><td> Mykyta Holubakha</td></tr>
    </tbody>
</table>
<p>These stats only cover the top ten in each, but there are more - check out the
<a href="https://github.com/SirCmpwn/sway/graphs/contributors">full list</a>.</p>
<p>Sway is still going very strong, and continues developing at a fast pace. I&rsquo;ve
updated <a href="http://swaywm.org/roadmap">the roadmap</a> with our plans for Sway 1.0.
You might notice a few features have been reprioritized here, which increases
the scope of Sway 1.0. It&rsquo;ll be worth it, though, to make sure we have a solid
1.0 release. Hopefully we&rsquo;ll see that and more within the year ahead!</p>]]></description><pubDate>Tue, 2 Aug 2016 00:00:00 +0000</pubDate></item><item><title>Using -Wl,--wrap for mocking in C</title><link>https://drewdevault.com/2016/07/19/Using-Wl-wrap-for-mocking-in-C.html</link><description><![CDATA[<p>One of the comforts I&rsquo;ve grown used to in higher level languages when testing
my code is mocking. The idea is that in order to test some code in isolation,
you should &ldquo;mock&rdquo; the behavior of things it depends on. Let&rsquo;s see a (contrived)
example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">read_to_end</span><span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nf">feof</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">l</span> <span class="o">=</span> <span class="nf">fread</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span> <span class="o">+=</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">buf</span> <span class="o">+=</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>If we want to test this function without mocking, we would need to actually open
a specially crafted file and provide a <code>FILE*</code> to the function. However, with
the linker <code>--wrap</code> flag, we can define a wrapper function. Using <code>-Wl,[flag]</code>
in your C compiler command line will pass <code>[flag]</code> to the linker. Gold (GNU) and
lld (LLVM) both support the wrap flag, which specifies a function to be
&ldquo;wrapped&rdquo;. If I use <code>-Wl,--wrap=fread</code>, then the code above will be compiled
like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">read_to_end</span><span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nf">feof</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">l</span> <span class="o">=</span> <span class="nf">__wrap_fread</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span> <span class="o">+=</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">buf</span> <span class="o">+=</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>And if I add <code>-Wl,--wrap=feof</code> we&rsquo;ll get this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">read_to_end</span><span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nf">__wrap_feof</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">l</span> <span class="o">=</span> <span class="nf">__wrap_fread</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span> <span class="o">+=</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">buf</span> <span class="o">+=</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Now, we can define some functions that do the behavior we need to test instead
of invoking fread directly:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">feof_return_value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">__wrap_feof</span><span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">(</span><span class="n">f</span> <span class="o">==</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x1234</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">feof_return_value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">test_read_to_end_eof</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">feof_return_value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">read_to_end</span><span class="p">((</span><span class="n">FILE</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x1234</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>Using <code>--wrap</code> also conveniently defines <code>__real_feof</code> and <code>__real_fread</code> if we
need them.</p>
<p>Unfortunately, you can&rsquo;t have two different wrappers for the same function in
an executable. This could lead to having to write several executables for each,
or making your wrapper function smart enough to have several configurable
outcomes.</p>
<p>Eventually I intend to write my own test framework for C, which will use
wrappers to support mocking. I want wrappers to be done automatically and have
it behave something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">fake_fread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">size_t</span> <span class="n">nmemb</span><span class="p">,</span> <span class="n">FILE</span> <span class="o">*</span><span class="n">stream</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">hello</span> <span class="o">=</span> <span class="s">&#34;Hello world!&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">memcpy</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">hello</span><span class="p">,</span> <span class="nf">strlen</span><span class="p">(</span><span class="n">hello</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nf">strlen</span><span class="p">(</span><span class="n">hello</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">test_read_to_end</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">FILE</span> <span class="o">*</span><span class="n">test</span> <span class="o">=</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x1234</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span> <span class="o">=</span> <span class="kt">char</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">mock_t</span> <span class="o">*</span><span class="n">mock_feof</span> <span class="o">=</span> <span class="nf">configure_mock</span><span class="p">(</span><span class="n">feof</span><span class="p">,</span> <span class="s">&#34;p&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mock_feof</span><span class="o">-&gt;</span><span class="nf">call</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">returns</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mock_feof</span><span class="o">-&gt;</span><span class="nf">returns</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// pzzp is pointer, size_t, size_t, pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Tells us what the fread arguments look like
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">mock_t</span> <span class="o">*</span><span class="n">mock_fread</span> <span class="o">=</span> <span class="nf">configure_mock</span><span class="p">(</span><span class="n">fread</span><span class="p">,</span> <span class="s">&#34;pzzp&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mock_fread</span><span class="o">-&gt;</span><span class="nf">exec</span><span class="p">(</span><span class="n">fake_fread</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">read_to_end</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">(</span><span class="n">mock_feof</span><span class="o">-&gt;</span><span class="n">call_count</span> <span class="o">==</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">((</span><span class="n">FILE</span><span class="o">*</span><span class="p">)</span><span class="n">mock_feof</span><span class="o">-&gt;</span><span class="nf">call</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">args</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="n">test</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">(</span><span class="n">mock_fread</span><span class="o">-&gt;</span><span class="n">call_count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">((</span><span class="n">FILE</span><span class="o">*</span><span class="p">)</span><span class="n">mock_fread</span><span class="o">-&gt;</span><span class="nf">call</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">args</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="n">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">((</span><span class="n">FILE</span><span class="o">*</span><span class="p">)</span><span class="n">mock_fread</span><span class="o">-&gt;</span><span class="nf">call</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">args</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="n">test</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">(</span><span class="nf">strcmp</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">&#34;Hello world!&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></description><pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate></item><item><title>Life, liberty, and the pursuit of privacy</title><link>https://drewdevault.com/2016/06/29/Privacy-as-a-hobby.html</link><description><![CDATA[<p>Privacy is my hobby, and should be a hobby of every technically competent
American. Within the eyes of the law I have a right to secure the privacy of my
information. At least that&rsquo;s the current law - many officials are <a href="http://www.apple.com/customer-letter/">trying to
subvert that right</a>. I figure that we&rsquo;d
better exercise that right while we have it, so that we know how to keep
exercising it once it&rsquo;s illegal and all the information about it dries up.</p>
<p>One particularly annoying coworker often brings up, &ldquo;what do you have to hide?&rdquo;
Though it would defeat the purpose to explain what I&rsquo;m hiding, let&rsquo;s assume that
what I&rsquo;m hiding is benign, at least legally speaking. I&rsquo;m sure you can
understand why I don&rsquo;t want <code>~/Porn</code> to be public information should my
equipment be seized after I publish this blog post and an incompetent (or angry)
investigator leaks it. Building secure facilities for housing secrets is fun!
That&rsquo;s true even if there aren&rsquo;t a lot of interesting secrets to hide there.</p>
<p>But the porn folder brings up an interesting point. I&rsquo;m not ashamed to admit I
have one, but I would be uncomfortable with everyone being able to see it. Or
maybe I&rsquo;m having an affair (a scandalous proposition for a single guy, I know)
and there are relevant texts are on my cell phone. Perhaps I suck at managing my
finances and the spreadsheets in my documents would tell you so. Maybe I have
embarrassing home videos of bedroom activities on my hard drive<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Maybe
there&rsquo;s evidence that I&rsquo;m a recovering alcoholic in my files. Maybe I&rsquo;m a
closeted homosexual and my files prove it, and 10 years from now the homophobes
win and suddenly the country is more hostile to that. Maybe all of this is true
at once!</p>
<p>Keeping these things secret is an important right, and one I intend to exercise.
I don&rsquo;t want to be accused of some crime and have my equipment seized and then
mishandled by incompetent officials and made public. I don&rsquo;t want a jury chosen
to decide if I really stole that pack of gum when I was 8 and then have
unfavorable secrets leaked. Human nature might lead them to look on my case
unfavorably if they found out about all the tentacle porn or erotic Harry
Potter fanfics I&rsquo;ve been secretly writing. Maybe an investigator finds something
they don&rsquo;t understand, like a private key, and it ends up being exposed through
the proceedings. Maybe this private key proves that I&rsquo;m Satoshi Nakamoto<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and
my life is threatened when the case is closed because of it.</p>
<p>To the government: <strong>stay the fuck out of my right to encrypt</strong>, or, as I
like to think of it, my right to use math. They will try, again and again, to
take it from us. They must never win.</p>
<p>The second act of this blog post is advice on how to go about securing your
privacy. The crucial bit of advice is that you must strive to understand the
systems you use for privacy and security. Look for their weak spots and be aware
of them. Don&rsquo;t deceive yourself about how secure your systems are.</p>
<p>I try to identify pain points in my security model. Some of them will be hard
to swallow. The first one was Facebook - delete your account<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. I did
this years ago. The second one was harder still - Google. I use an Android
phone running CyanogenMod without Google Play Services. I also don&rsquo;t use GMail
or any Google services (I search with DuckDuckGo and add !sp to use StartPage if
necessary). Another one was not using Windows or OS X. This is easy for me but a
lot of people will bitch and moan about it. A valid privacy &amp; security model
does not include Windows. OS X is an improvement but you&rsquo;d be better off on
Linux. Even your non-technical family can surely figure out how to use Xubuntu
to surf the web.</p>
<p>I also use browser extensions to subvert tracking and ads. Ad networks have
severely fucked themselves by this point - I absolutely never trust any ads on
the web, and never will, period. Use software like
<a href="https://github.com/gorhill/uBlock">uBlock</a> to get rid of trackers (and speed
up the web, bonus!). I also block lots of trackers in my /etc/hosts file -
<a href="https://github.com/StevenBlack/hosts">check this out</a>. Also check out
<a href="https://free-software-for-android.github.io/AdAway/">AdAway</a> for Android.</p>
<p>These changes help to remove your need to trust that corporate interests will
be good stewards of your private information. This is very important - no amount
of encryption will help you if you give Google a GPS map of your every move<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>
and your search history<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> and information about basically every page on the
internet you visit<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>. And all of your emails and contacts and appointments on
your calendar. Google can be subpoenaed or subverted<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup> and many other
companies won&rsquo;t even try<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup> to keep your data secret even when they aren&rsquo;t
legally compelled to. I like this image from Maciej Cegłowski&rsquo;s excellent
talk<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> on website obesity about the state of most websites:</p>
<p><img src="https://sr.ht/ks75.jpg" alt=""></p>
<p>When you give all of this information to Google, Facebook, and others, you&rsquo;re
basically waiving your fifth amendment<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup> rights.</p>
<p>Once you do have control of your information, there are steps you should take to
keep it secure. The answer is encryption. I use
<a href="https://wiki.archlinux.org/index.php/Dm-crypt">dm-crypt</a> which allows me to
encrypt my entire hard drive on Linux. I&rsquo;m prompted for a password on boot and
then everything proceeds (and I&rsquo;ve never noticed any performance issues, for the
record).</p>
<p>I also do most of my mobile computing on a laptop running libreboot<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup> with
100% open source software. The weak point here is that if your hardware is
compromised and you don&rsquo;t know it, they could steal your password. One possible
solution is keeping your boot partition and perhaps another key on a flash
drive, but this doesn&rsquo;t fully solve the problem. I suggest looking into things
like case intrusion detection and working on being aware of it when your
hardware is messed with.</p>
<p>I mentioned earlier that my phone is running CyanogenMod without any of the
Google apps. The weak point here is the radio, which is very insecure and likely
riddled with vulnerabilities. I intend to build my own phone soon with a
Raspberry Pi, where I can have more control over this - things like being able
to disconnect power to the radio or disconnect the microphone when not in use
will help.</p>
<p>I also self host my email, which was a huge pain in the ass to set up, but is
lovely now that I have it. At some point I intend to write a better mail server
to make this easier. I use opportunistic PGP encryption for my emails, but I
send depressingly few encrypted emails like this due to poor adoption (follow me
on <a href="https://keybase.io/sircmpwn">keybase</a>? I&rsquo;ll give you an invitation if you
send me an encrypted email asking for one!)</p>
<p>If you have any questions about how to implement any of this, help identifying
the weaknesses in your setup, or anything else, please feel free to reach out to
me via email (<a href="mailto:sir@cmpwn.com">sir@cmpwn.com</a>+<a href="https://drewdevault.com/publickey.txt">F4EA1B88</a>)
or <a href="https://twitter.com/sircmpwn">Twitter</a> or whatever. Good luck sticking it to
the man!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://en.wikipedia.org/wiki/ICloud_leaks_of_celebrity_photos">ICloud leaks of celebrity photos</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>The secretive inventor of Bitcoin. I&rsquo;m not Satoshi, if you were wondering.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://www.facebook.com/help/delete_account?rdrhc">Click this</a> to do so&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>&ldquo;But I liiiiike Facebook and it let&rsquo;s me keep up with my frieeeends&hellip;&rdquo; There&rsquo;s no privacy model that includes Facebook and works. Give up. <a href="https://stallman.org/facebook.html">Read this</a> and try to ignore the childish language and see the tangible evidence instead.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>If you have location services enabled on your phone, <a href="https://maps.google.com/locationhistory/">here&rsquo;s a map of everywhere you&rsquo;ve been</a>. Enjoy!&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://myactivity.google.com/myactivity">Here&rsquo;s all of your searches</a>. You can delete the history here, supposedly. I bet it doesn&rsquo;t unfeed that history to your personal advertising neural network at Google.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Google Adsense and Google Analytics are present on basically every website. I&rsquo;m positive they&rsquo;re writing it down somewhere when you hit a page with those on it. Facebook certainly is, too.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>Remember <a href="https://en.wikipedia.org/wiki/PRISM">PRISM</a>?&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p><a href="http://www.pbs.org/newshour/rundown/report-att-cooperated-extensively-nsa-sharing-billions-phone-email-records/">Like AT&amp;T, for example</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p><a href="http://idlewords.com/talks/website_obesity.htm">The Website Obesity Crisis</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>That&rsquo;s the right to remain silent. Come on, you should know this.&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p><a href="https://libreboot.org/">libreboot</a> is an open source BIOS. I got my laptop from <a href="https://minifree.org/">minifree</a>, which directly supports the libreboot project with their profits.&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate></item><item><title>Understanding pointers</title><link>https://drewdevault.com/2016/05/28/Understanding-pointers.html</link><description><![CDATA[<style>
table {
  border-spacing: 0;
  width: 100%;
}

th, td {
  border-bottom: 1px solid black;
}
</style>
<p>I was recently chatting with a new contributor to Sway who is using the project
as a means of learning C, and he had some questions about what <code>void**</code> meant
when he found some in the code. It became apparent that this guy only has a
basic grasp on pointers at this point in his learning curve, and I figured it
was time for another blog post - so today, I&rsquo;ll explain pointers.</p>
<p>To understand pointers, you must first understand how memory works. Your RAM is
basically a flat array of
<a href="https://en.wikipedia.org/wiki/Octet_(computing)">octets</a>. Your compiler
describes every data structure you use as a series of octets. For the context of
this article, let&rsquo;s consider the following memory:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">0x0000</th>
          <th style="text-align: left">0x0001</th>
          <th style="text-align: left">0x0002</th>
          <th style="text-align: left">0x0003</th>
          <th style="text-align: left">0x0004</th>
          <th style="text-align: left">0x0005</th>
          <th style="text-align: left">0x0006</th>
          <th style="text-align: left">0x0007</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x08</td>
          <td style="text-align: left">0x42</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x00</td>
      </tr>
  </tbody>
</table>
<p>We can refer to each element of this array by its index, or address. For
example, the value at address 0x0004 is 0x08. On this system, we&rsquo;re using 16-bit
addresses to refer to 8-bit values. On an i686 (32-bit) system, we use 32-bit
addresses to refer to 8-bit values. On an amd64 (64-bit) system, we use 64-bit
addresses to refer to 8-bit values. On Notch&rsquo;s imaginary DCPU-16 system, we use
16-bit addresses to refer to 16-bit values.</p>
<p>To refer to the value at 0x0004, we can use a pointer. Let&rsquo;s declare it like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint8_t</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0004</span><span class="p">;</span>
</span></span></code></pre></div><p>Here we&rsquo;re declaring a variable named value, whose type is <code>uint8_t*</code>. The *
indicates that it&rsquo;s a pointer. Now, because this is a 16-bit system, the size of
a pointer is 16 bits. If we do this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
</span></span></code></pre></div><p>It will print 2, because it takes 16-bits (or 2 bytes) to refer to an address on
this system, even though the value there is 8 bits. On your system it would
probably print 8, or maybe 4 if you&rsquo;re on a 32-bit system. We could also do this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="n">address</span> <span class="o">=</span> <span class="mh">0x0004</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">uint8_t</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span><span class="p">)</span><span class="n">address</span><span class="p">;</span>
</span></span></code></pre></div><p>In this case we&rsquo;re not casting the <code>uint16_t</code> value 0x0004 to a <code>uint8_t</code>, which
would truncate the integer. No, instead, we&rsquo;re casting it to a <code>uint8_t*</code>, which
is the size required to represent a pointer on this system. All pointers are the
same size.</p>
<h2 id="dereferencing-pointers">Dereferencing pointers</h2>
<p>We can refer to the value at the other end of this pointer by <em>dereferencing</em> it.
The pointer is said to contain a <em>reference</em> to a value in memory. By
<em>dereferencing</em> it, we can obtain that value. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint8_t</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0004</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">value</span><span class="p">);</span> <span class="c1">// prints 8
</span></span></span></code></pre></div><h2 id="working-with-multi-byte-values">Working with multi-byte values</h2>
<p>Even though memory is basically a big array of <code>uint8_t</code>, thankfully we can work
with other kinds of data structures inside of it. For example, say we wanted to
store the value 0x1234 in memory. This doesn&rsquo;t fit in 8 bits, so we need to
store it at two different addresses. For example, we could store it at 0x0006
and 0x0007:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">0x0000</th>
          <th style="text-align: left">0x0001</th>
          <th style="text-align: left">0x0002</th>
          <th style="text-align: left">0x0003</th>
          <th style="text-align: left">0x0004</th>
          <th style="text-align: left">0x0005</th>
          <th style="text-align: left">0x0006</th>
          <th style="text-align: left">0x0007</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x08</td>
          <td style="text-align: left">0x42</td>
          <td style="text-align: left">0x34</td>
          <td style="text-align: left">0x12</td>
      </tr>
  </tbody>
</table>
<p>*0x0007 makes up the first byte of the value, and *0x0006 makes up the second
byte of the value.</p>
<div class="well">
    Why not the other way around? Well, most systems these days use the "little
    endian" notation for storing multi-byte integers in memory, which stores the
    least significant byte first. The least significant byte is the one with the
    smallest order of magnitude (in base sixteen). To get the final number, we
    use (0x12 * 0x100) + (0x34 * 0x1), which gives us 0x1234. Read more about
    endianness <a href="https://en.wikipedia.org/wiki/Endianness">here</a>.
</div>
<p>C allows us to use pointers that refer to these sorts of composite values, like
so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0006</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;0x%X</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">value</span><span class="p">);</span> <span class="c1">// Prints 0x1234
</span></span></span></code></pre></div><p>Here, we&rsquo;ve declared a pointer to a value whose type is <code>uint16_t</code>. Note that the
size of this pointer is the same size of the <code>uint8_t*</code> pointer - 16 bits, or
two bytes. The value it <em>references</em>, though, is a different type than
<code>uint8_t*</code> references.</p>
<h2 id="indirect-pointers">Indirect pointers</h2>
<p>Here comes the crazy part - you can work with pointers to pointers. The address
of the <code>uint16_t</code> pointer we&rsquo;ve been talking about is 0x0006, right? Well, we
can store that number in memory as well. If we store it at 0x0002, our memory
looks like this:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">0x0000</th>
          <th style="text-align: left">0x0001</th>
          <th style="text-align: left">0x0002</th>
          <th style="text-align: left">0x0003</th>
          <th style="text-align: left">0x0004</th>
          <th style="text-align: left">0x0005</th>
          <th style="text-align: left">0x0006</th>
          <th style="text-align: left">0x0007</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x06</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x08</td>
          <td style="text-align: left">0x42</td>
          <td style="text-align: left">0x34</td>
          <td style="text-align: left">0x12</td>
      </tr>
  </tbody>
</table>
<p>The question might then become, how do we get it out again? Well, we can use a
pointer <em>to that pointer</em>! Check out this code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="o">**</span><span class="n">pointer_to_a_pointer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint16_t</span><span class="o">**</span><span class="p">)</span><span class="mh">0x0002</span><span class="p">;</span>
</span></span></code></pre></div><p>This code just declared a variable whose type is <code>uint16_t**</code>, which a pointer
whose value is a <code>uint16_t*</code>, which itself points to a value that is a
<code>uint16_t</code>. Pretty cool, huh?  We can dereference this too:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="o">**</span><span class="n">pointer_to_a_pointer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint16_t</span><span class="o">**</span><span class="p">)</span><span class="mh">0x0002</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="o">*</span><span class="n">pointer_to_a_pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;0x%X</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer</span><span class="p">);</span> <span class="c1">// Prints 0x1234
</span></span></span></code></pre></div><p>We don&rsquo;t actually even need the intermediate variable. This works too:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="o">**</span><span class="n">pointer_to_a_pointer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint16_t</span><span class="o">**</span><span class="p">)</span><span class="mh">0x0002</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;0x%X</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">**</span><span class="n">pointer_to_a_pointer</span><span class="p">);</span> <span class="c1">// Prints 0x1234
</span></span></span></code></pre></div><h2 id="void-pointers">Void pointers</h2>
<p>The next question that would come up to your average C programmer would be,
&ldquo;well, what is a <code>void*</code>?&rdquo; Well, remember earlier when I said that all pointers,
regardless of the type of value they reference, are just fixed size integers?
In the imaginary system we&rsquo;ve been talking about, pointers are 16-bit addresses,
or indexes, that refer to places in RAM. On the system you&rsquo;re reading this
article on, it&rsquo;s probably a 64-bit integer. Well, we don&rsquo;t actually need to
specify the type to be able to manipulate pointers if they&rsquo;re just a fixed size
integer - so we don&rsquo;t have to. A <code>void*</code> stores an arbitrary address without
bringing along any type information. You can later <em>cast</em> this variable to a
specific kind of pointer to dereference it. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0006</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">uint8_t</span> <span class="o">*</span><span class="n">uintptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span><span class="p">)</span><span class="n">pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;0x%X&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">uintptr</span><span class="p">);</span> <span class="c1">// prints 0x34
</span></span></span></code></pre></div><p>Take a closer look at this code, and recall that 0x0006 refers to a 16-bit value
from the previous section. Here, though, we&rsquo;re treating it as an 8-bit value -
the <code>void*</code> contains no assumptions about what kind of data is there. The result
is that we end up treating it like an 8-bit integer, which ends up being the
least significant byte of 0x1234;</p>
<h2 id="dereferencing-structures">Dereferencing structures</h2>
<p>In C, we often work with structs. Let&rsquo;s describe one to play with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">coordinates</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uint16_t</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">coordinates</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Our structure describes a linked list of coordinates. X and Y are the
coordinates, and next is a pointer to the next set of coordinates in our list.
I&rsquo;m going to drop two of these in memory:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">0x0000</th>
          <th style="text-align: left">0x0001</th>
          <th style="text-align: left">0x0002</th>
          <th style="text-align: left">0x0003</th>
          <th style="text-align: left">0x0004</th>
          <th style="text-align: left">0x0005</th>
          <th style="text-align: left">0x0006</th>
          <th style="text-align: left">0x0007</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">0xAD</td>
          <td style="text-align: left">0xDE</td>
          <td style="text-align: left">0xEF</td>
          <td style="text-align: left">0xBE</td>
          <td style="text-align: left">0x06</td>
          <td style="text-align: left">0x00</td>
          <td style="text-align: left">0x34</td>
          <td style="text-align: left">0x12</td>
      </tr>
  </tbody>
</table>
<p>Let&rsquo;s write some C code to reason about this memory with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">coordinates</span> <span class="o">*</span><span class="n">coords</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">coords</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">coordinates</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0000</span><span class="p">;</span>
</span></span></code></pre></div><p>If we look at this structure in memory, you might already be able to pick out
the values. C is going to store the fields of this struct in order. So, we can
expect the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;0x%X, 0x%X&#34;</span><span class="p">,</span> <span class="n">coords</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">,</span> <span class="n">coords</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">);</span>
</span></span></code></pre></div><p>To print out &ldquo;0xDEAD, 0xBEEF&rdquo;. Note that we&rsquo;re using the structure dereferencing
operator here, <code>-&gt;</code>. This allows us to dereference values <em>inside</em> of a
structure we have a pointer to. The other case is this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;0x%X, 0x-X&#34;</span><span class="p">,</span> <span class="n">coords</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">coords</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span></span></code></pre></div><p>Which only works if <code>coords</code> is not a pointer. We also have a pointer within
this structure named next. You can see in the memory I included above that its
address is 0x0004 and its value is 0x0006 - meaning that there&rsquo;s another <code>struct coordinates</code> that lives at 0x0006 in memory. If you look there, you can see the
first part of it. It&rsquo;s X coordinate is 0x1234.</p>
<h2 id="pointer-arithmetic">Pointer arithmetic</h2>
<p>In C, we can use math on pointers. For example, we can do this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint8_t</span> <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span><span class="p">)</span><span class="mh">0x1000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">addr</span><span class="o">++</span><span class="p">;</span>
</span></span></code></pre></div><p>Which would make the value of <code>addr</code> 0x1001. But this is only true for pointers
whose type is 1 byte in size. Consider this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint16_t</span><span class="o">*</span><span class="p">)</span><span class="mh">0x1000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">addr</span><span class="o">++</span><span class="p">;</span>
</span></span></code></pre></div><p>Here, <code>addr</code> becomes 0x1002! This is because ++ on a pointer actually adds
<code>sizeof(type)</code> to the actual address stored. The idea is that if we only added
one, we&rsquo;d be referring to an address that is <em>in the middle</em> of a uint16_t,
rather than the next uint16_t in memory that we meant to refer to. This is also
how arrays work. The following two code snippets are equivalent:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint16_t</span><span class="o">*</span><span class="p">)</span><span class="mh">0x1000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">addr</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint16_t</span><span class="o">*</span><span class="p">)</span><span class="mh">0x1000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">addr</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span></code></pre></div><h2 id="null-pointers">NULL pointers</h2>
<p>Sometimes you need to work with a pointer that points to something that may not
exist yet, or a resource that has been freed. In this case, we use a NULL
pointer. In the examples you&rsquo;ve seen so far, 0x0000 is a valid address. This is
just for simplicity&rsquo;s sake. In practice, pretty much no modern computer has
any reason to refer to the value at address 0. For that reason, we use NULL to
refer to an uninitialized pointer. Dereferencing a NULL pointer is generally a
Bad Thing and will lead to segfaults. As a fun side effect, since NULL is 0, we
can use it in an if statement:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="p">...;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ptr is valid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ptr is not valid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>I hope you found this article useful! If you&rsquo;d
like something fun to read next, read about <a href="http://c2.com/cgi/wiki?ThreeStarProgrammer">&ldquo;three star
programmers&rdquo;</a>, or programmers who
have variables like <code>void***</code>.</p>]]></description><pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate></item><item><title>In Memoriam - Mozilla</title><link>https://drewdevault.com/2016/05/11/In-Memoriam-Mozilla.html</link><description><![CDATA[<p>Today we look back to the life of Mozilla, a company that was best known for
creating the Firefox web browser. I remember a company that made the web better
and more open by providing a browser that was faster and more customizable than
anyone had ever seen, and by making that browser free and open source.</p>
<p>I expect many of my readers will be older than I am, but my first memories of
Firefox are back in high school with Firefox 3. I fondly remember my discovery
of it. Mozilla gave us a faster and more powerful web browser to use on school
computers. The other choice was Internet Explorer 6 - but with a flash drive we
could run a &ldquo;portable&rdquo; version of Firefox instead. Using tabbed web browsing was
a clear improvement for usability and I loved installing all sorts of cool
add-ons and I&rsquo;m sure I&rsquo;ve spent at least a few hours of my life browsing persona
themes.</p>
<p>Mozilla continued to improve their web browser, and I loved it. As I grew up and
learned more about techology and started making my way into programming I loved
it even more. I remember a time when I would tell my friends that I&rsquo;d gladly
appoint Mozilla as the steward of the open internet over the W3C. Firefox
continued to evolve and allow for even more customiziability. Firefox truly
became a <a href="http://www.catb.org/~esr/jargon/html/H/hacker.html">hacker</a>&rsquo;s web
browser.</p>
<p>Eventually a new player called Chrome arrived on the scene. It was slick and new
and very, very fast. Firefox, on the other hand, appeared to become stagnant.
I made the switch to Chrome for a few years. However, to my eventual delight,
Mozilla didn&rsquo;t quit. They kept making Firefox better and faster and continued to
win on customizability and continued to fight for the best internet possible.
One day I tried Firefox again and I found it to be just as friendly and hackable
as it once was, only now it was a speed demon on par with Chrome. I returned to
Firefox for several happy years.</p>
<p>Chrome adopted a versioning scheme that made Mozilla nervous. They didn&rsquo;t like
being Firefox 4 next to Chrome 11. They made the first of many compromises when
they switched to bumping the major version with each release. Mozilla died in
April of 2011.</p>
<p>In Mozilla&rsquo;s place, a new company appeared and started to build a new browser.
This new company had good intentions, but has completely lost the spirit of
Mozilla. This new browser is a stain on Mozilla&rsquo;s legacy - it ships with
unremovable nonfree add-ons, removes huge swaths of the original add-on API,
includes a cryptographically walled garden for add-ons, and apparently now
includes an instant messaging and video conferencing platform.</p>
<p>The new company has been suffering as well. They have sunk enormous time and
effort into projects that are doomed from the start. They tried to make a mobile
phone OS whose UI was powered by technology that&rsquo;s been proven to produce an
inferior mobile experience (HTML+CSS+JS) using the slowest rendering engine on
the market (gecko) on the lowest powered phones on the market. When this
predictably failed, they turned their sights towards running it on even lower
powered IoT devices. This new company has also announced several times that they
are killing off another well established and well loved project (Thunderbird)
from the old Mozilla. They also recently struck a deal with another dying
company, Yahoo, to make their search engine the default for this &ldquo;neo-Firefox&rdquo;.</p>
<p>To the new company that calls itself Mozilla: you do an injustice to the memory
of Mozilla. I hope that one day we&rsquo;ll see the Mozilla of the past return.</p>]]></description><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate></item><item><title>State of Sway - April 2016</title><link>https://drewdevault.com/2016/04/20/State-of-sway-April-2016.html</link><description><![CDATA[<p>Since the previous <a href="https://drewdevault.com/2015/12/20/State-of-sway.html">State of Sway</a>, we have
accomplished quite a bit. We are now shipping versioned releases of sway, which
include support for window borders, input device configuration, more new
features, and many bug fixes and stability improvements. I&rsquo;m also happy to say
that Sway 0.5 has landed in the Arch Linux community repository and I&rsquo;m starting
to hear rumors of it landing in other Linux distros as well. Here&rsquo;s a quick
rundown of what&rsquo;s happened in the past four months:</p>
<ul>
<li>Window borders work now</li>
<li>Input devices are configurable</li>
<li>swaybar is much more mature, including support for i3status and i3blocks</li>
<li>swaylock has reached a similar level of maturity</li>
<li>New <code>include</code> config command to include sub-configs</li>
<li>We have a <a href="https://github.com/SirCmpwn/sway/blob/master/assets/Sway_Wallpaper_Blue_1920x1080.png">default wallpaper</a> and a logo now</li>
<li>musl libc support has been added</li>
<li>More features of the i3 IPC protocol have been implemented</li>
<li>18 more i3 commands have been implemented</li>
<li>Many improvements to documentation</li>
<li>Hundreds of bug fixes and small improvements</li>
</ul>
<p>I&rsquo;m a particularly big fan of the new include command, which allows me to add
this to my config file:</p>
<pre><code>include ~/.config/sway/config.d/`hostname`/*
</code></pre>
<p>The net of this is that it includes a set of configs specific to each machine I
run Sway on, which each have a unique output device &amp; input device configuration
and several other details, but I can include them all under
<a href="https://gogs.sr.ht/SirCmpwn/dotfiles">version control</a> to keep my dotfiles
synced between computers.</p>
<p>Today, sway looks like this:</p>
<p><a href="https://sr.ht/me1j.png"><img src="https://sr.ht/me1j.png" alt=""></a></p>
<p>We&rsquo;re now making our way towards Sway 1.0. I have put together a roadmap of the
things we have done and the things that remain to do for Sway 1.0, which is
available on the improved website <a href="http://swaywm.org/roadmap">here</a>. We are
still now moving forward on many of these features, including the most asked for
feature: the stacked &amp; tabbed window layouts, which is under development from
Mikkel Oscar Lyderik. He&rsquo;s given me this screenshot to tease you with:</p>
<p><img src="https://sr.ht/0CkR.png" alt=""></p>
<p>All of this is only possible thanks to the hard work of dozens of contributors.
Here&rsquo;s the breakdown of <strong>lines of code per author</strong> for the top ten authors
(with the difference from the previous State of Sway in parenthesis):</p>
<table class="table">
    <tbody>
        <tr><td>4307 (+3180)</td><td>Mikkel Oscar Lyderik</td></tr>
        <tr><td>3059 (-457)</td><td>Drew DeVault</td></tr>
        <tr><td>2285 (+115)</td><td>taiyu</td></tr>
        <tr><td>1826 (+40)</td><td>S. Christoffer Eliesen</td></tr>
        <tr><td>682 (-38)</td><td>Luminarys</td></tr>
        <tr><td>544 (+544)</td><td>Cole Mickens</td></tr>
        <tr><td>515 (-19)</td><td>minus</td></tr>
        <tr><td>385 (+185)</td><td>Christoph Gysin</td></tr>
        <tr><td>345 (+266)</td><td>Kevin Hamacher</td></tr>
        <tr><td>166 (+45)</td><td>crondog</td></tr>
    </tbody>
</table>
<p>Once again, I&rsquo;m no longer the author of the most lines of code. Sway now
has a grand total of 15,422 lines of C and 2,787 lines of headers. Here&rsquo;s the
total <strong>number of commits per author</strong> for each of the top 10
committers:</p>
<table class="table">
    <tbody>
        <tr><td>688</td><td> Drew DeVault</td></tr>
        <tr><td>212</td><td> Mikkel Oscar Lyderik</td></tr>
        <tr><td>191</td><td> taiyu</td></tr>
        <tr><td>109</td><td> S. Christoffer Eliesen</td></tr>
        <tr><td>97</td><td> Luminarys</td></tr>
        <tr><td>58</td><td> Christoph Gysin</td></tr>
        <tr><td>34</td><td> minus</td></tr>
        <tr><td>18</td><td> crondog</td></tr>
        <tr><td>13</td><td> Yacine Hmito</td></tr>
        <tr><td>12</td><td> progandy</td></tr>
    </tbody>
</table>
<p>As the maintainer of sway, <em>a lot</em> of what I do is reviewing and merging
contributions from others. So these statistics change a bit if we use <strong>number
of commits per author, excluding merge commits</strong>:</p>
<table class="table">
    <tbody>
        <tr><td>343</td><td> Drew DeVault</td></tr>
        <tr><td>201</td><td> Mikkel Oscar Lyderik</td></tr>
        <tr><td>175</td><td> taiyu</td></tr>
        <tr><td>109</td><td> S. Christoffer Eliesen</td></tr>
        <tr><td>96</td><td> Luminarys</td></tr>
        <tr><td>58</td><td> Christoph Gysin</td></tr>
        <tr><td>34</td><td> minus</td></tr>
        <tr><td>18</td><td> crondog</td></tr>
        <tr><td>13</td><td> Yacine Hmito</td></tr>
        <tr><td>12</td><td> progandy</td></tr>
    </tbody>
</table>
<p>These stats only cover the top ten in each, but there are more - check out the
<a href="https://github.com/SirCmpwn/sway/graphs/contributors">full list</a>. Hopefully
next time I write a blog post like this, we&rsquo;ll be well into the lifetime of Sway
1.0!</p>]]></description><pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate></item><item><title>How to write a better bloom filter in C</title><link>https://drewdevault.com/2016/04/12/How-to-write-a-better-bloom-filter-in-C.html</link><description><![CDATA[<p>This is in response to
<a href="http://blog.michaelschmatz.com/2016/04/11/how-to-write-a-bloom-filter-cpp/">How to write a bloom filter in C++</a>,
which has good intentions, but is ultimately a less than ideal bloom filter
implementation. I put together a better one in C in a few minutes, and I&rsquo;ll
explain the advantages of it.</p>
<p>The important differences are:</p>
<ul>
<li>You bring your own hashing functions</li>
<li>You can add arbitrary data types, not just bytes</li>
<li>It uses bits directly instead of relying on the <code>std::vector&lt;bool&gt;</code>
being space effecient</li>
</ul>
<p>I chose C because (1) I prefer it over C++ and (2) I just think it&rsquo;s a better
choice for implementing low level data types, and C++ is better used in high
level code.</p>
<p>I&rsquo;m not going to explain the mechanics of a bloom filter or most of the details
of why the code looks this way, since I think the original post did a fine job
of that. I&rsquo;ll just present my alternate implementation:</p>
<h2 id="header">Header</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#ifndef _BLOOM_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#define _BLOOM_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stddef.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdbool.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">hash_function</span><span class="p">)(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">bloom_filter</span> <span class="o">*</span> <span class="kt">bloom_t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Creates a new bloom filter with no hash functions and size * 8 bits. */</span>
</span></span><span class="line"><span class="cl"><span class="kt">bloom_t</span> <span class="nf">bloom_create</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Frees a bloom filter. */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bloom_free</span><span class="p">(</span><span class="kt">bloom_t</span> <span class="n">filter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Adds a hashing function to the bloom filter. You should add all of the
</span></span></span><span class="line"><span class="cl"><span class="cm"> * functions you intend to use before you add any items. */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bloom_add_hash</span><span class="p">(</span><span class="kt">bloom_t</span> <span class="n">filter</span><span class="p">,</span> <span class="n">hash_function</span> <span class="n">func</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Adds an item to the bloom filter. */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bloom_add</span><span class="p">(</span><span class="kt">bloom_t</span> <span class="n">filter</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">item</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Tests if an item is in the bloom filter.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Returns false if the item has definitely not been added before. Returns true
</span></span></span><span class="line"><span class="cl"><span class="cm"> * if the item was probably added before. */</span>
</span></span><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">bloom_test</span><span class="p">(</span><span class="kt">bloom_t</span> <span class="n">filter</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">item</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></div><h2 id="implementation">Implementation</h2>
<p>The implementation of this is pretty straightfoward. First, here&rsquo;s the actual
structs behind the opaque bloom_t type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">bloom_hash</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">hash_function</span> <span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">bloom_hash</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">bloom_filter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">bloom_hash</span> <span class="o">*</span><span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="o">*</span><span class="n">bits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>The hash functions are a linked list, but this isn&rsquo;t important. You can make
that anything you want. Otherwise we have a bit of memory called &ldquo;bits&rdquo; and the
size of it. Now, for the easy functions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">bloom_t</span> <span class="nf">bloom_create</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">bloom_t</span> <span class="n">res</span> <span class="o">=</span> <span class="nf">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">bloom_filter</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="n">res</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">res</span><span class="o">-&gt;</span><span class="n">bits</span> <span class="o">=</span> <span class="nf">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bloom_free</span><span class="p">(</span><span class="kt">bloom_t</span> <span class="n">filter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">filter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="p">(</span><span class="n">filter</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">struct</span> <span class="n">bloom_hash</span> <span class="o">*</span><span class="n">h</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">filter</span><span class="o">-&gt;</span><span class="n">func</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="nf">free</span><span class="p">(</span><span class="n">h</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nf">free</span><span class="p">(</span><span class="n">filter</span><span class="o">-&gt;</span><span class="n">bits</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nf">free</span><span class="p">(</span><span class="n">filter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>These should be fairly self explanatory. The first interesting function is here:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bloom_add_hash</span><span class="p">(</span><span class="kt">bloom_t</span> <span class="n">filter</span><span class="p">,</span> <span class="n">hash_function</span> <span class="n">func</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">bloom_hash</span> <span class="o">*</span><span class="n">h</span> <span class="o">=</span> <span class="nf">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">bloom_hash</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="n">h</span><span class="o">-&gt;</span><span class="n">func</span> <span class="o">=</span> <span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">bloom_hash</span> <span class="o">*</span><span class="n">last</span> <span class="o">=</span> <span class="n">filter</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="n">last</span> <span class="o">&amp;&amp;</span> <span class="n">last</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">last</span> <span class="o">=</span> <span class="n">last</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">last</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">last</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">filter</span><span class="o">-&gt;</span><span class="n">func</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Given a hashing function from the user, this just adds it to our linked list of
hash functions. There&rsquo;s a slightly different code path if we&rsquo;re adding the first
function. The functions so far don&rsquo;t really do anything specific to bloom
filters. The first one that does is this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bloom_add</span><span class="p">(</span><span class="kt">bloom_t</span> <span class="n">filter</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">bloom_hash</span> <span class="o">*</span><span class="n">h</span> <span class="o">=</span> <span class="n">filter</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="o">*</span><span class="n">bits</span> <span class="o">=</span> <span class="n">filter</span><span class="o">-&gt;</span><span class="n">bits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="nf">func</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">hash</span> <span class="o">%=</span> <span class="n">filter</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">*</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">bits</span><span class="p">[</span><span class="n">hash</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">hash</span> <span class="o">%</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">h</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This iterates over each of the hash functions the user has provided and computes
the hash of the data for that function (modulo the size of our bloom filter),
then it adds this to the bloom filter with this line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">bits</span><span class="p">[</span><span class="n">hash</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">hash</span> <span class="o">%</span> <span class="mi">8</span><span class="p">;</span>
</span></span></code></pre></div><p>This just sets the nth bit of the filter where n is the hash. Finally, we have
the test function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">bloom_test</span><span class="p">(</span><span class="kt">bloom_t</span> <span class="n">filter</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">bloom_hash</span> <span class="o">*</span><span class="n">h</span> <span class="o">=</span> <span class="n">filter</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="o">*</span><span class="n">bits</span> <span class="o">=</span> <span class="n">filter</span><span class="o">-&gt;</span><span class="n">bits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="nf">func</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">hash</span> <span class="o">%=</span> <span class="n">filter</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">*</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">bits</span><span class="p">[</span><span class="n">hash</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">hash</span> <span class="o">%</span> <span class="mi">8</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">h</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This function is extremely similar, but instead of setting the nth bit, it
checks the nth bit and returns if it&rsquo;s 0:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">bits</span><span class="p">[</span><span class="n">hash</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">hash</span> <span class="o">%</span> <span class="mi">8</span><span class="p">))</span> <span class="p">{</span>
</span></span></code></pre></div><p>That&rsquo;s it! You have a bloom filter with arbitrary data types for insert and
user-supplied hash functions. I wrote up some simple test code to demonstrate
this, after googling for a couple of random hash functions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;bloom.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">djb2</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_str</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="n">_str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="mi">5381</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="o">*</span><span class="n">str</span><span class="o">++</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">hash</span> <span class="o">=</span> <span class="p">((</span><span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="n">hash</span><span class="p">)</span> <span class="o">+</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">hash</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">jenkins</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_str</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="n">_str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hash</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">hash</span> <span class="o">+=</span> <span class="o">*</span><span class="n">key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">hash</span> <span class="o">+=</span> <span class="p">(</span><span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">hash</span> <span class="o">^=</span> <span class="p">(</span><span class="n">hash</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">key</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">hash</span> <span class="o">+=</span> <span class="p">(</span><span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">hash</span> <span class="o">^=</span> <span class="p">(</span><span class="n">hash</span> <span class="o">&gt;&gt;</span> <span class="mi">11</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">hash</span> <span class="o">+=</span> <span class="p">(</span><span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">15</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">hash</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">bloom_t</span> <span class="n">bloom</span> <span class="o">=</span> <span class="nf">bloom_create</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">bloom_add_hash</span><span class="p">(</span><span class="n">bloom</span><span class="p">,</span> <span class="n">djb2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">bloom_add_hash</span><span class="p">(</span><span class="n">bloom</span><span class="p">,</span> <span class="n">jenkins</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Should be 0: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="nf">bloom_test</span><span class="p">(</span><span class="n">bloom</span><span class="p">,</span> <span class="s">&#34;hello world&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="nf">bloom_add</span><span class="p">(</span><span class="n">bloom</span><span class="p">,</span> <span class="s">&#34;hello world&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Should be 1: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="nf">bloom_test</span><span class="p">(</span><span class="n">bloom</span><span class="p">,</span> <span class="s">&#34;hello world&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Should (probably) be 0: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="nf">bloom_test</span><span class="p">(</span><span class="n">bloom</span><span class="p">,</span> <span class="s">&#34;world hello&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The full code is available <a href="https://git.sr.ht/~sircmpwn/bloom/">here</a>.</p>]]></description><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate></item><item><title>Please use text/plain for email</title><link>https://drewdevault.com/2016/04/11/Please-use-text-plain-for-emails.html</link><description><![CDATA[<p>A lot of people have come to hate email, and not without good reason. I don&rsquo;t
hate using email, and I attribute this to better email habits. Unfortunately,
most email clients these days lead users into bad habits that probably
contribute to the sad state of email in 2016. The biggest problem with email is
the widespread use of HTML email.</p>
<p>Compare email to snail mail. You probably throw out most of the mail you get -
it&rsquo;s all junk, ads. Think about the difference between snail mail you read and
snail mail you throw out. Chances are, the mail you throw out is flashy flyers
and spam that&rsquo;s carefully laid out by a designer and full of eye candy (kind of
like many HTML emails). However, if you receive a letter from a friend it&rsquo;s
probably going to be a lot less flashy - just text on a page. Reading letters
like this is pleasant and welcome. Emails should be more like this.</p>
<p>I consider this the basic argument for plaintext emails - they make email
better. There are more specific problems with HTML emails that I can give,
though (not to mention the fact that I read emails <a href="https://drewdevault.com/2016/03/22/Integrating-a-VT220-into-my-life.html">on
this</a>
now).</p>
<h2 id="whats-wrong-with-html-email">What&rsquo;s wrong with HTML email</h2>
<p><strong>Tracking images</strong> are images that are included in HTML emails with &lt;img
/&gt; tags. These images have URLs with unique IDs in them that hit remote
servers and let them know that you opened the email, along with various details
about your mail client and such. This is a form of tracking, which many people
go to great lengths to prevent with tools like
<a href="https://github.com/gorhill/uBlock">uBlock</a>. Most email clients recognize this,
and actually <em>block</em> images from being shown without explicit user consent. If
your images aren&rsquo;t even being shown, then why include them? Tracking users is
evil.</p>
<p>Many <strong>vulnerabilities</strong> in mail clients also stem from rendering HTML email.
Luckily, no mail clients have JavaScript enabled on their HTML email renderers.
However, security issues related to HTML emails are still found quite often in
mail clients. I don&rsquo;t want to view this crap (and I don&rsquo;t).</p>
<p>HTML email also makes <strong>phishing</strong> much easier. I&rsquo;ve often received HTML emails
with links that hide their true intent by using a different href than their text
would suggest (and almost always with a tracking code added, ugh). They are also
<strong>incompatible</strong> with many email-based workflows, such as inline quoting,
mailing list participation, and sending &amp; working with source code patches.</p>
<h2 id="good-habits-for-plaintext-emails">Good habits for plaintext emails</h2>
<p>Some nice things are possible when you choose to use plaintext emails. Remember
before when I was comparing emails to snail mail letters? Well, let&rsquo;s continue
those comparisons. Popular email clients of 2016 have thoroughly bastardized
email, but here&rsquo;s what it once was and perhaps what it could be today.</p>
<p>The common mail client today uses the abhorrent &ldquo;<a href="https://en.wikipedia.org/wiki/Posting_style#Top-posting">top
posting</a>&rdquo; format, where
the entire previous message is dumped underneath your reply. As the usual quote
goes:</p>
<blockquote>
<p>A: Because it messes up the order in which people normally read text.</p>
<p>Q: Why is top-posting such a bad thing?</p>
<p>A: Top-posting.</p>
<p>Q: What is the most annoying thing in e-mail?</p></blockquote>
<p>A better way to write emails is the same way you write a letter to send via
snail mail. Would you photocopy the entire history of your correspondence and
staple it to your response? After a while you would start paying more for the
weight! Though bandwidth seems cheap now, the habit is still silly. Instead of
copying the entire conversation into your email, quote only the relevant parts
and respond to them inline. For example, let&rsquo;s say I receive this email:</p>
<pre><code>Hi Drew!

Could you take a look at the server this afternoon? I think it's having some
issues with nginx.

I also took care of the upgrades you asked for last night. Sorry it took so
long!

--
John Doe
</code></pre>
<p>The best way to respond to this would be:</p>
<pre><code>Hi John!

&gt;Could you take a look at the server this afternoon? I think it's having some
&gt;issues with nginx.

No problem. I just had a quick look now and nginx was busted. Should be
working now.

&gt;I also took care of the upgrades you asked for last night. Sorry it took so
&gt;long!

Thanks!

--
Drew DeVault
</code></pre>
<p>John might follow up with this:</p>
<pre><code>&gt;Should be working now.

Yep, seems to be up. Thanks!

--
John Doe
</code></pre>
<p>Much better if you ask me. This works particularly well on mailing lists for
open source projects, where you send a patch and reviewers will respond by
quoting specific parts of your patch and leaving feedback. Just treat emails
like letters!</p>
<h2 id="multipart-emails">Multipart emails</h2>
<p>I think there are nothing but negatives to HTML email. I use
<a href="http://www.mutt.org/">mutt</a> to read email, which doesn&rsquo;t even render HTML
emails and allows me to compose emails with Vim. But if you absolutely insist on
using HTML emails, please use <a href="https://en.wikipedia.org/wiki/MIME#Multipart_messages">multipart
emails</a>. If you&rsquo;re
sending automated emails, your programming language likely contains a mechanism
to facilitate this. The idea is that you send an alternative text/plain body for
your email. Be sure that this body contains all of the information of the HTML
version. If you do this, I will at least be willing to read your emails.</p>
<h2 id="how-do-i-use-plaintext-emails">How do I use plaintext emails?</h2>
<p>Your mail client should have an option for composing emails with plaintext. Look
through your settings for it and it&rsquo;ll change the default. Then you&rsquo;re free!
Tell your friends to do the same, and your email life will be happier.</p>]]></description><pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate></item><item><title>Integrating a VT220 into my life</title><link>https://drewdevault.com/2016/03/22/Integrating-a-VT220-into-my-life.html</link><description><![CDATA[<p>I bought a DEC VT220 terminal a while ago, and put it next to my desk at work. I
use it to read emails on mutt now, and it&rsquo;s actually quite pleasant. There was
some setup involved in making it as comfortable as possible, though.</p>
<p><a href="https://sr.ht/BnAH.jpg"><img src="https://sr.ht/BnAH.jpg" alt="My desk at work"></a></p>
<p>Here&rsquo;s the terminal up close:</p>
<p><a href="https://sr.ht/TnC6.jpg"><img src="https://sr.ht/TnC6.jpg" alt="The terminal itself"></a></p>
<h2 id="hardware">Hardware</h2>
<p>First, I have several pieces of hardware involved in this:</p>
<ul>
<li>VT220 terminal</li>
<li>LK201 keyboard (later made obsolete)</li>
<li><a href="http://amzn.com/B00IDSM6BW">USB to serial adapter</a></li>
<li><a href="http://amzn.com/B00066HL50">DB9-&gt;DB29 null modem cable</a></li>
</ul>
<p>It took a while to get all of these things, but I was able to get a nice
refurbished terminal and a couple of crappy LK201 keyboards. Luckily I was able
to eventually remove the need for the keyboard.</p>
<h2 id="basic-setup">Basic Setup</h2>
<p>Getting this working on Linux is actually pretty simple thanks to decades of
backwards compatability. Plug all of the cords together, turn on the machine,
and (on Arch, at least) run:</p>
<pre><code>systemctl start serial-agetty@ttyUSB0.service
</code></pre>
<p>This will start up a getty for you to log into on your terminal. For a while I
would use the LK201 to log in to this getty and spin up a mail cilent.</p>
<p>I did have to make a couple of changes to serial-agetty@.service, though:</p>
<pre><code>ExecStart=-/sbin/agetty -h -L 19200 %I vt220
</code></pre>
<p>This specifies the TERM variable as &ldquo;vt220&rdquo; and sets the baud rate to 19200. I
had to also set the baud rate in the terminal&rsquo;s settings to 19200 baud as well,
to get the fastest possible terminal.</p>
<p>I eventually got into the habit of logging into the terminal with the LK201,
then running tmux and attaching to tmux from my desktop session. I would then
hide this tmux terminal in the upper left corner of my display, and move my
mouse over to it when I wanted to interact with the terminal. This let me use
the same keyboard I used for the rest of my computer experience to interact with
the VT220, instead of trying to use the LK201 as well. This was a bit annoying,
so eventually I did some more customization.</p>
<h2 id="removing-the-keyboard">Removing the keyboard</h2>
<p>I wanted to be able to make everything automatic, so I could just boot my
computer and log in normally and treat the VT220 almost like a fourth monitor. I
started by automating the process of logging in and running tmux.</p>
<p>First, I created a user for the terminal:</p>
<pre><code>useradd vt220
</code></pre>
<p>Then, I wrote a shell script that would serve as the user&rsquo;s login shell and
would start tmux:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span> <span class="o">[[</span> <span class="nv">$TERM</span> <span class="o">==</span> <span class="s2">&#34;screen&#34;</span> <span class="o">]]</span>
</span></span><span class="line"><span class="cl"><span class="k">then</span>
</span></span><span class="line"><span class="cl">	sudo /usr/local/bin/login-sircmpwn
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">	tmux -S /var/tmux/vt220.sock
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>I made that directory, <code>/var/tmux/</code>, and made sure both the vt220 user and my
normal user had access to it. I also edited my sudoers file so that vt220 could
run that command as root:</p>
<pre><code>vt220 ALL=(ALL) NOASSWD: /usr/local/bin/login-sircmpwn
</code></pre>
<p>I put the script into <code>/usr/local/bin</code> and added it to <code>/etc/shells</code>, then made
it the login shell for the vt220 user with <code>chsh</code>. I then moved to my own
systemd unit for starting the getty on ttyUSB0, this time with autologin:</p>
<pre><code>#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

[Unit]
Description=Serial Getty on %I
Documentation=man:agetty(8) man:systemd-getty-generator(8)
Documentation=http://0pointer.de/blog/projects/serial-console.html
BindsTo=dev-%i.device
After=dev-%i.device systemd-user-sessions.service plymouth-quit-wait.service

# If additional gettys are spawned during boot then we should make
# sure that this is synchronized before getty.target, even though
# getty.target didn't actually pull it in.
Before=getty.target
IgnoreOnIsolate=yes

[Service]
ExecStart=-/sbin/agetty -a vt220 -h -L 19200 %I vt220
Type=idle
Restart=always
UtmpIdentifier=%I
TTYPath=/dev/%I
TTYReset=yes
TTYVHangup=yes
KillMode=process
IgnoreSIGPIPE=no
SendSIGHUP=yes

[Install]
WantedBy=getty.target
</code></pre>
<p>The only difference here is that it invokes agetty with <code>-a vt220</code> to autologin
as that user. <code>systemctl enable vtgetty@ttyUSB0.service</code> makes it so that on
boot, the getty would run on ttyUSB0 and autologin as vt220. Then the script
from earlier will run tmux, and within tmux will run <code>sudo /usr/local/bin/login-sircmpwn</code>, which is this shell script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">until</span> who <span class="p">|</span> grep sircmpwn 2&gt;<span class="p">&amp;</span><span class="m">1</span> &gt;/dev/null
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">	sleep <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">sudo -iu sircmpwn
</span></span></code></pre></div><p>What this does is pretty straightforward - it loops until I log in as sircmpwn,
then enters an interactive session with sudo as sircmpwn.</p>
<p>The net of all of this is that now, I can boot up my machine, and when I log in,
the VT220 starts up with tmux running and logged in as me. Then I went back to
the old way of attaching to this tmux session with a terminal on my desktop
session hidden in a corner of the screen. And now I could ditch the clunky old
LK201 keyboard!</p>
<h2 id="treating-the-terminal-as-another-output">Treating the terminal as another output</h2>
<p>I said earlier that my goal was to treat the terminal as a fake &ldquo;output&rdquo; that I
could switch to from my desktop session just like I switch between my three
graphical outputs. I run <a href="https://github.com/SirCmpwn/sway">sway</a>, of course, so
I decided to add a fake output in sway and see where that went. I made a
somewhat complicated <a href="https://github.com/SirCmpwn/sway/compare/vt220">branch</a>
for this purpose, but the important change is here:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gh">diff --git a/sway/handlers.c b/sway/handlers.c
</span></span></span><span class="line"><span class="cl"><span class="gh">index cec6319..60f8406 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/sway/handlers.c
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/sway/handlers.c
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -704,6 +704,21 @@ static void handle_wlc_ready(void) {
</span></span></span><span class="line"><span class="cl"><span class="gu"></span> 		free(line);
</span></span><span class="line"><span class="cl"> 		list_del(config-&gt;cmd_queue, 0);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"><span class="gi">+	// VT220 stuff
</span></span></span><span class="line"><span class="cl"><span class="gi">+	// Adds a made up output that we can use for a tmux window
</span></span></span><span class="line"><span class="cl"><span class="gi">+	// connected to my vt220
</span></span></span><span class="line"><span class="cl"><span class="gi">+	swayc_t *output = new_swayc(C_OUTPUT);
</span></span></span><span class="line"><span class="cl"><span class="gi">+	output-&gt;name = &#34;VT220&#34;;
</span></span></span><span class="line"><span class="cl"><span class="gi">+	output-&gt;handle = UINTPTR_MAX;
</span></span></span><span class="line"><span class="cl"><span class="gi">+	output-&gt;width = 1000;
</span></span></span><span class="line"><span class="cl"><span class="gi">+	output-&gt;height = 1000;
</span></span></span><span class="line"><span class="cl"><span class="gi">+	output-&gt;unmanaged = create_list();
</span></span></span><span class="line"><span class="cl"><span class="gi">+	output-&gt;bg_pid = -1;
</span></span></span><span class="line"><span class="cl"><span class="gi">+	add_child(&amp;root_container, output);
</span></span></span><span class="line"><span class="cl"><span class="gi">+	output-&gt;x = -1000;
</span></span></span><span class="line"><span class="cl"><span class="gi">+	output-&gt;y = 0;
</span></span></span><span class="line"><span class="cl"><span class="gi">+	new_workspace(output, &#34;__VT220&#34;);
</span></span></span><span class="line"><span class="cl"><span class="gi">+	// End VT220 stuff
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> }
</span></span></code></pre></div><p>This creates a fake output and puts it to the far left, then adds a workspace to
it called __VT220. I assigned it the output handle of UINTPTR_MAX and everywhere
in sway that it would try to use the output handle to manipulate a real output,
I changed to to avoid doing so if the handle is UINTPTR_MAX. Then I added this
to my sway config:</p>
<pre><code>for_window [title=&quot;__VT220&quot;] move window to workspace __VT220 
</code></pre>
<p>And run this command when sway starts:</p>
<pre><code>urxvt -T &quot;__VT220&quot; -e tmux -S /var/tmux/vt220.sock a
</code></pre>
<p>Which spawns a terminal whose window title is __VT220 running tmux attached to
the session running on the terminal. The for_window rule I added to my sway
config automatically moves this to the VT220 fake output and tada! It works. Now
I have a nice and comfortable way to use my terminal to read emails at work. Now
if only I could convince people to stop sending me HTML emails! I just bought a
second VT220 for use at home, too. Life&rsquo;s good~</p>
<p><a href="https://news.ycombinator.com/item?id=11339909">Discussion on Hacker News</a></p>]]></description><pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate></item><item><title>State of Sway - December 2015</title><link>https://drewdevault.com/2015/12/20/State-of-sway-December-2015.html</link><description><![CDATA[<p>I wrote sway&rsquo;s <a href="https://github.com/SirCmpwn/sway/commit/6a33e1e3cddac31b762e4376e29c03ccf8f92107">initial commit</a>
4 months ago, on August 4th. At the time of writing, there are now 1,070 commits
from 29 different authors, totalling 10,682 lines of C (and 1,176 lines of
header files). This has been done over the course of 256 pull requests and 118
issues. Of the 73 <a href="https://github.com/SirCmpwn/sway/issues/2">i3 features we&rsquo;re
tracking</a>, 51 are now supported, and
I&rsquo;ve been using sway as my daily driver for a while now. Today, sway looks like
this:</p>
<p><a href="https://sr.ht/NCx_.png"><img src="https://sr.ht/NCx_.png" alt=""></a></p>
<p>For those who are new to the project, <a href="https://github.com/SirCmpwn/sway">sway</a>
is an i3-compatible Wayland compositor. That is, your existing
<a href="http://i3wm.org/">i3</a> configuration file will work as-is on sway, and your
keybindings will be the same and the colors and font configuration will be the
same, and so on. It&rsquo;s i3, but on Wayland.</p>
<p>Sway initially made the rounds on <a href="https://redd.it/3he5hn">/r/linux</a> and
<a href="https://redd.it/3he48j">/r/i3wm</a> and
<a href="https://www.phoronix.com/scan.php?page=news_item&amp;px=Wayland-i3-Sway-Tiling">Phoronix</a>
on August 17th, 13 days after the initial commit. I was already dogfooding it by
then, but now I&rsquo;m actually using it 100% of the time, and I hear others have
started to as well. What&rsquo;s happened since then? Well:</p>
<ul>
<li>Floating windows</li>
<li>Multihead support</li>
<li>XDG compliant config</li>
<li>Fullscreen windows</li>
<li>gaps</li>
<li>IPC</li>
<li>Window criteria</li>
<li>58 i3 commands and 1 command unique to sway</li>
<li>Wallpaper support</li>
<li>Resizing/moving tiled windows with the mouse</li>
<li>swaymsg, swaylock, <strong>swaybar</strong> as in i3-msg, i3lock, i3bar</li>
<li>Hundreds of bug fixes and small improvements</li>
</ul>
<p>Work on sway has also driven improvements in our dependencies, such as
<a href="https://github.com/Cloudef/wlc">wlc</a>, which now has improved xwayland support,
support for Wayland protocol extensions (which makes swaybg and swaylock and
swaybar possible), and various bugfixes and small features added at the bequest
of sway. Special thanks to Cloudef for helping us out with so many things!</p>
<p>All of this is only possible thanks to the hard work of dozens of contributors.
Here&rsquo;s the breakdown of <strong>lines of code per author</strong> for the top ten authors:</p>
<table class="table">
    <tbody>
        <tr><td>3516</td><td>Drew DeVault</td></tr>
        <tr><td>2400</td><td>taiyu</td></tr>
        <tr><td>1786</td><td>S. Christoffer Eliesen</td></tr>
        <tr><td>1127</td><td>Mikkel Oscar Lyderik</td></tr>
        <tr><td>720</td><td>Luminarys</td></tr>
        <tr><td>534</td><td>minus</td></tr>
        <tr><td>200</td><td>Christoph Gysin</td></tr>
        <tr><td>121</td><td>Yacine Hmito</td></tr>
        <tr><td>79</td><td>Kevin Hamacher</td></tr>
    </tbody>
</table>
<p>And here&rsquo;s the total <strong>number of commits per author</strong> for each of the top 10
committers:</p>
<table class="table">
    <tbody>
        <tr><td>514</td><td> Drew DeVault</td></tr>
        <tr><td>191</td><td> taiyu</td></tr>
        <tr><td>102</td><td> S. Christoffer Eliesen</td></tr>
        <tr><td>97</td><td> Luminarys</td></tr>
        <tr><td>56</td><td> Mikkel Oscar Lyderik</td></tr>
        <tr><td>46</td><td> Christoph Gysin</td></tr>
        <tr><td>34</td><td> minus</td></tr>
        <tr><td>9</td><td> Ben Boeckel</td></tr>
        <tr><td>6</td><td> Half-Shot</td></tr>
        <tr><td>6</td><td> jdiez17</td></tr>
    </tbody>
</table>
<p>As the maintainer of sway, <em>a lot</em> of what I do is reviewing and merging
contributions from others. So these statistics change a bit if we use <strong>number
of commits per author, excluding merge commits</strong>:</p>
<table class="table">
    <tbody>
        <tr><td>279</td><td> Drew DeVault</td></tr>
        <tr><td>175</td><td> taiyu</td></tr>
        <tr><td>102</td><td> S. Christoffer Eliesen</td></tr>
        <tr><td>96</td><td> Luminarys</td></tr>
        <tr><td>56</td><td> Mikkel Oscar Lyderik</td></tr>
        <tr><td>46</td><td> Christoph Gysin</td></tr>
        <tr><td>34</td><td> minus</td></tr>
        <tr><td>9</td><td> Ben Boeckel</td></tr>
        <tr><td>6</td><td> jdiez17</td></tr>
        <tr><td>5</td><td> Yacine Hmito</td></tr>
    </tbody>
</table>
<p>These stats only cover the top ten in each, but there are more - check out the
<a href="https://github.com/SirCmpwn/sway/graphs/contributors">full list</a>.</p>
<p>So, what does this all mean for sway? Well, it&rsquo;s going very well. If you&rsquo;d like
to live on the edge, you can use sway right now and have a productive workflow.
The important features that are missing include stacking and tabbed layouts,
window borders, and some features on the bar. I&rsquo;m looking at starting up a beta
when these features are finished. Come try out sway! Test it with us, open
GitHub issues with your gripes and desires, and <a href="http://webchat.freenode.net/?channels=sway&amp;uio=d4">chat
with us on IRC</a>.</p>
<p><em>This blog post was composed from sway.</em></p>]]></description><pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate></item><item><title>Bring more Tor into your life</title><link>https://drewdevault.com/2015/11/11/Bring-more-tor-into-your-life.html</link><description><![CDATA[<p><a href="https://www.torproject.org/">Tor</a> is a project that improves your privacy
online by encrypting and bouncing your connection through several nodes before
leaving for the outside world. It makes it much more difficult for someone
spying on you to know who you&rsquo;re talking to online and what you&rsquo;re saying to
them. Many people use it with the Tor Browser (a fork of Firefox) and only use
it with HTTP.</p>
<p>What some people do not know is that Tor works at the TCP level, and can be used
for any kind of traffic. There is a glaring issue with using Tor for your daily
browsing - it&rsquo;s significantly slower. That being said, there are several things
you run on your computer where speed is not quite as important. I am personally
using Tor for several things (this list is incomplete):</p>
<ul>
<li>IRC (chat)</li>
<li>Email client</li>
<li>DNS lookups (systemwide)</li>
<li>Downloading system updates</li>
</ul>
<p>Anything that supports downloading through a SOCKS proxy can be used through
Tor. You can also use programs like
<a href="https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO">torify</a> to
transparently wrap syscalls in Tor for any program (this is how I got my email
to use Tor).</p>
<p>Of course, Tor can&rsquo;t help you if you compromise yourself. You should not use
bittorrent over Tor, and you should check your other applications. You should
also be using SSL/TLS/etc on top of Tor, so that exit nodes can&rsquo;t be evil with
your traffic.</p>
<h2 id="orbot">Orbot</h2>
<p>I also use Tor on my phone. I run all of my phone&rsquo;s traffic through Tor, since I
don&rsquo;t use the internet on my phone much. I have whitelisted apps that need to
stream video or audio, though, for the sake of speed. You can do this, too - set
up a black or whitelist of apps on your phone whose networking will be done
through Tor. The app for this is
<a href="https://guardianproject.info/apps/orbot/">here</a>.</p>
<h2 id="why-bother">Why bother?</h2>
<p>The easy answer is &ldquo;secure everything&rdquo;. If you don&rsquo;t have a good reason to
remain insecure, you should default to secure. That argument doesn&rsquo;t work on
everyone, though, so here are some others.</p>
<ul>
<li>Securing trivial traffic makes more noise to hide the things you care about</li>
<li>You can have more peace of mind about using public WiFi networks if you&rsquo;re
using Tor.</li>
<li>ISPs can&rsquo;t inject extra ads and tracking into things you&rsquo;re using over Tor.</li>
<li>The NSA targets people who use Tor. If you &ldquo;have nothing to hide&rdquo;, then you
can help defend those who do by adding more noise and giving agencies that
engage in illegal spying a bigger haystack. Bonus: Tor helps make sure that
even though you&rsquo;re being looked at, you&rsquo;re secure.</li>
</ul>]]></description><pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate></item><item><title>Please don&apos;t use Slack for FOSS projects</title><link>https://drewdevault.com/2015/11/01/Please-stop-using-slack.html</link><description><![CDATA[<p>I&rsquo;ve noticed that more and more projects are using things like Slack as the chat
medium for their open source projects. In the past couple of days alone, I&rsquo;ve
been directed to Slack for Babel and Bootstrap. I&rsquo;d like to try and curb this
phenomenon before it takes off any more.</p>
<h2 id="problems-with-slack">Problems with Slack</h2>
<p>Slack&hellip;</p>
<ul>
<li>is closed source</li>
<li>has only one client (<em>update: errata at the bottom of this article</em>)</li>
<li>is a walled garden</li>
<li>requires users to have a different tab open for each project they want to be
involved in</li>
<li>requires that Heroku hack to get open registration</li>
</ul>
<p>The last one is a real stinker. Slack is not a tool built for open source
projects to use for communication with their userbase. It&rsquo;s a tool built for
teams and it is ill-suited to this use-case. In fact, Slack has gone on record
as saying that it <em>cannot</em> support this sort of use-case: &ldquo;it’s great that
people are putting Slack to good use&rdquo; but unfortunately &ldquo;these communities are
not something we have the capacity to support given the growth in our existing
business.&rdquo; <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<h2 id="what-is-irc">What is IRC?</h2>
<p>IRC, or Internet Relay Chat&hellip;</p>
<ul>
<li>is a standardized and well-supported protocol <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
<li>has hundreds of open source clients, servers, and bots <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></li>
<li>is a distributed design with several networks</li>
<li>allows several projects to co-exist on the same network</li>
<li>has no hacks for registration and is designed to be open</li>
</ul>
<h3 id="no-irc-is-not-dead">No, IRC is not dead</h3>
<p>I often hear that IRC is dead. Even my dad pokes fun at me for using a 30 year
old protocol, but not after I pointed out that he still uses HTTP. Despite the
usual shtick from the valley, old is not necessarily a synonym for bad.</p>
<p>IRC has been around since forever. You may think that it&rsquo;s not popular anymore,
but there are still tons of people using it. There are 87,762 users <em>currently
online</em> (at time of writing) on Freenode. There are 10,293 people on OFTC.
22,384 people on Rizon. In other words, it&rsquo;s still going strong, and I put a lot
more faith in something that&rsquo;s been going full speed ahead since the 80s than in
a Silicon Valley fad startup.</p>
<h2 id="problems-with-irc-that-slack-solves">Problems with IRC that Slack solves</h2>
<p>There are several things Slack tries to solve about IRC. They are:</p>
<p><strong>Code snippets</strong>: Slack has built-in support for them. On IRC you&rsquo;re just asked
to use a pastebin like Gist.</p>
<p><strong>File transfers</strong>: Slack does them. IRC also does them through XDCC, but this
can be difficult to get working.</p>
<p><strong>Persistent sessions</strong>: Slack makes it so that you can see what you missed when
you return. With IRC, you don&rsquo;t have this. If you want it, you can set up an IRC
bouncer like <a href="http://znc.in/">ZNC</a>.</p>
<p><strong>Integrations</strong>: with things like build bots. This was never actually a problem
with IRC. IRC has always been significantly better at this than Slack. There is
<em>definitely</em> an IRC client library for your favorite programming language, and
you can write your own client from scratch in a matter of minutes anyway.
There&rsquo;s an <a href="https://github.com/nandub/hubot-irc">IRC</a> backend for Hubot, too.
GitHub has a built-in hook for announcing repository activity in an IRC channel.</p>
<h2 id="other-projects-are-using-irc">Other projects are using IRC</h2>
<p>Here&rsquo;s a short, incomplete list of important FOSS projects using IRC:</p>
<ul>
<li>Debian</li>
<li>Docker</li>
<li>Django</li>
<li>jQuery</li>
<li>Angular</li>
<li>ReactJS</li>
<li>NeoVim</li>
<li>Node.js</li>
<li>everyone else</li>
</ul>
<p>The list goes on for a while. Just fill in another few hundred bullet points
with your imagination. Seriously, just join <code>#&lt;project-name&gt;</code> on Freenode. It
probably exists.</p>
<h2 id="irc-is-better-for-your-company-too">IRC is better for your company, too</h2>
<p>We use IRC at <a href="https://www.linode.com/">Linode</a>, even for non-technical people.
It works great. If you want to reduce the barrier to entry for non-technicals,
set up something like <a href="https://github.com/erming/shout">shout</a> instead. You can
also have a pretty no-brainer link to webchat on almost every network, <a href="http://webchat.esper.net/?nick=&amp;channels=truecraft">like
this</a>. If you need file
hosting, you can deploy an instance of
<a href="https://github.com/SirCmpwn/sr.ht/">sr.ht</a> or something like it. You can also
host IRC servers on your own infrastructure, which avoids leaving sensitive
conversations on someone else&rsquo;s servers.</p>
<h2 id="please-use-irc">Please use IRC</h2>
<p>In short, I&rsquo;d really appreciate it if we all quit using Slack like this. It&rsquo;s
not appropriate for FOSS projects. I would much rather join your channel with
the client I already have running. That way, I&rsquo;m more likely to stick around
after I get help with whatever issue I came to you for, and contribute back by
helping others as I idle in your channel until the end of time. On Slack, I
leave as soon as I&rsquo;m done getting help because tabs in my browser are precious
real estate.</p>
<p><a href="https://news.ycombinator.com/item?id=10486541">First discussion on Hacker News</a></p>
<p><a href="https://news.ycombinator.com/item?id=11013136">Second discussion on Hacker News</a></p>
<h2 id="updates">Updates</h2>
<p>Addressing feedback on this article.</p>
<p><strong>Slack IRC bridge</strong>: Slack provides an IRC bridge that lets you connect to
Slack with an IRC client. I&rsquo;ve used it - it&rsquo;s a bit of a pain in the ass to set
up, and once you have it, it&rsquo;s not ideal. They did put some effort into it,
though, and it&rsquo;s usable. I&rsquo;m not suggesting that Slack as a product is worse
than IRC - I&rsquo;m just saying that it&rsquo;s not better than IRC for FOSS projects, and
probably not that much better for companies.</p>
<p><strong>Clients</strong>: Slack has several clients that use the API. That being said, there
are fewer of them and for fewer platforms than IRC clients, and there are more
libraries around IRC than there are for Slack. Also, the bigger issue is that I
already have an IRC client, which I use for the hundreds of FOSS projects that
use IRC, and I don&rsquo;t want to add a Slack client for one or two projects.</p>
<p><strong>Gitter</strong>: Gitter is bad for many of the same reasons Slack is. Please don&rsquo;t
use it over IRC.</p>
<p><strong>ircv3</strong>: Check it out: <a href="http://ircv3.net">ircv3.net</a></p>
<p><strong>irccloud</strong>: Is really cool and solves all of the problems. <a href="https://www.irccloud.com/">irccloud.com</a></p>
<p><strong>2018-03-12</strong>: Slack is shutting down the IRC and XMPP gateways.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="http://thenextweb.com/insider/2015/03/24/slack-is-quietly-unintentionally-killing-irc/">Slack is quietly, unintentionally killing IRC - The Next Web</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://www.rfc-editor.org/rfc/rfc1459.txt">RFC 1459</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/search?o=desc&amp;q=irc&amp;s=stars&amp;type=Repositories&amp;utf8=%E2%9C%93">Github search for IRC</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 1 Nov 2015 00:00:00 +0000</pubDate></item><item><title>A practical understanding of Flux</title><link>https://drewdevault.com/2015/07/20/A-practical-understanding-of-Flux.html</link><description><![CDATA[<p><a href="https://facebook.github.io/react/">React.js</a> and the
<a href="https://facebook.github.io/flux/">Flux</a> are shaping up to be some of the most
important tools for web development in the coming years. The MVC model was
strong on the server when we decided to take the frontend seriously, and it was
shoehorned into the frontend since we didn&rsquo;t know any better. React and Flux
challenge that and I like where it&rsquo;s going very much. That being said, it was
very difficult for me to get into. I put together this blog post to serve as a
more <em>practical</em> guide - the upstream documentation tells you a lot of concepts
and expects you to put them together yourself. Hopefully at the end of this
blog post you can confidently start writing things with React+Flux instead of
reading brain-melting docs for a few hours like I did.</p>
<p>At the core of it, React and Flux are very simple and elegant. Far more simple
than the voodoo sales pitch upstream would have you believe. To be clear,
<strong>React</strong> is a framework-ish that lets you describe your UI through reusable
components, and includes <em>jsx</em> for describing HTML elements directly in your
JavaScript code. <strong>Flux</strong> is an <em>optional</em> architectural design philosophy that
you can adopt to help structure your applications. I have been using
<a href="https://babeljs.io/">Babel</a> to compile my React+Flux work, which gives me
ES6/ES7 support - I strongly suggest you do the same. This blog post assumes
you&rsquo;re doing so. For a crash course on ES6, <a href="http://git.io/es6features">read this entire
page</a>. Crash course for ES7 is omitted here for
brevity, but <a href="https://gist.github.com/SirCmpwn/2e8e455c91494b7c3713">click this</a>
if you&rsquo;re interested.</p>
<h2 id="flux-overview">Flux overview</h2>
<p>Flux is based on a unidirectional data flow. The direction is: dispatcher ➜
stores ➜ views, and the data is actions. At the stores or views level, you can
give actions to the dispatcher, which passes them down the line.</p>
<p>Let&rsquo;s explain exactly what piece is, and how it fits in to your application.
After this I&rsquo;ll tell you some specific details and I have a starter kit prepared
for you to grab as well.</p>
<h3 id="dispatcher">Dispatcher</h3>
<p>The dispatcher is very simple. Anything can register to receive a callback when
an &ldquo;action&rdquo; happens. There is one dispatcher and one set of callbacks, and
everything that registers for it will receive every action given to the
dispatcher, and can do with this as it pleases. Generally speaking you will only
have the stores listen to this. The kind of actions you will send along may look
something like this:</p>
<ul>
<li>Add a record</li>
<li>Delete a record</li>
<li>Fetch a record with a given ID</li>
<li>Refresh a store</li>
</ul>
<p>Anything that would change data is going to be given to the dispatcher and
passed along to the actions. Since everything receives every action you give to
the dispatcher, you have to encode something into each action that describes
what it&rsquo;s for. I use objects that look something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;STORE_NAME.ACTION_TYPE.ETC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Where <code>...</code> is whatever extra data you need to include (the ID of the record
to fetch, the contents of the record to be added, the property that needs to
change, etc). Here&rsquo;s an example payload:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;ACCOUNTS.CREATE.USER&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;username&#34;</span><span class="p">:</span> <span class="s2">&#34;SirCmpwn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;sir@cmpwn.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;hunter2&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The Accounts store is listening for actions that start with <code>ACCOUNTS.</code> and when
it sees <code>CREATE.USER</code>, it knows a new user needs to be created with these
details.</p>
<h3 id="stores">Stores</h3>
<p>The stores just have ownership of data and handle any changes that happen to
that data. When the data changes, they raise events that the views can subscribe
to to let them know what&rsquo;s up. There&rsquo;s nothing magic going on here (I initially
thought there was magic). Here&rsquo;s a really simple store:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Dispatcher</span> <span class="nx">from</span> <span class="s2">&#34;whatever&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">class</span> <span class="nx">UserStore</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">_users</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">action</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">action</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Dispatcher</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">action</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">get</span> <span class="nx">Users</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_users</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">action</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">switch</span> <span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="s2">&#34;ACCOUNTS.CREATE.USER&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">_users</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> 
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;username&#34;</span><span class="o">:</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;email&#34;</span><span class="o">:</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;password&#34;</span><span class="o">:</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">password</span>
</span></span><span class="line"><span class="cl">            <span class="p">});</span>
</span></span><span class="line"><span class="cl">            <span class="nx">raiseChangeEvent</span><span class="p">();</span> <span class="c1">// Exercise for the reader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserStore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">UserStore</span><span class="p">();</span>
</span></span></code></pre></div><p>Yeah, that&rsquo;s all there is to it. Each store should be a singleton. You use it
like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserStore</span> <span class="nx">from</span> <span class="s2">&#34;whatever/UserStore&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">UserStore</span><span class="p">.</span><span class="nx">Users</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">UserStore</span><span class="p">.</span><span class="nx">registerChangeEvent</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">UserStore</span><span class="p">.</span><span class="nx">Users</span><span class="p">);</span> <span class="c1">// This has changed now
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">});</span>
</span></span></code></pre></div><p>Stores end up having a lot of boilerplate. I haven&rsquo;t quite figured out the best
way to address that yet.</p>
<h3 id="views">Views</h3>
<p>Views are react components. What makes React components interesting is that they
re-render the whole thing when you call <code>setState</code>. If you want to change the
way it appears on the page for any reason, a call to <code>setState</code> will need to
happen. And here are the two circumstances under which they will change:</p>
<ul>
<li>In response to user input to change non-semantic view state</li>
<li>In response to a change event from a store</li>
</ul>
<p>The first bullet here means that you can call <code>setState</code> to change view states,
but not data. The second bullet is for when the data changes. When you change
view states, this refers to things like &ldquo;click button to reveal form&rdquo;. When you
change data, this refers to things like &ldquo;a new record was created, show it&rdquo;, or
even &ldquo;a single property of a record changed, show that change&rdquo;.</p>
<p><strong>Wrong way</strong>: you have a text box that updates the &ldquo;name&rdquo; of a record. When the
user presses the &ldquo;Apply&rdquo; key, the view will re-render itself with the new name.</p>
<p><strong>Right way</strong>: When you press &ldquo;Apply&rdquo;, the view sends an action to the
dispatcher to apply the change. The relevant store picks up the action, applies
the change to its own data store, and raises an event. Your view hears that
event and re-renders itself.</p>
<p><img src="https://facebook.github.io/flux/img/flux-simple-f8-diagram-1300w.png" alt=""></p>
<p><img src="https://facebook.github.io/flux/img/flux-simple-f8-diagram-with-client-action-1300w.png" alt=""></p>
<h3 id="why-bother">Why bother?</h3>
<ul>
<li>Easy to have stores depend on each other</li>
<li>All views that depend on the same stores are updated when it changes</li>
<li>It follows that all cross-store dependencies are updated in a similar fashion</li>
<li>Single source of truth for data</li>
<li>Easy as pie to pick up and maintain with little knowledge of the codebase</li>
</ul>
<h2 id="practical-problems">Practical problems</h2>
<p>Here are some problems I ran into, and the fluxy solution to each.</p>
<h3 id="need-to-load-data-async">Need to load data async</h3>
<p>You have a list of DNS records to show the user, but they&rsquo;re hanging out on the
server instead of in JavaScript objects. Here&rsquo;s how you accomodate for this:</p>
<ul>
<li>When you use a store, call <code>Store.fetchIfNecessary()</code> first.</li>
<li>When you pull data from the store, expect <code>null</code> and handle this elegantly.</li>
<li>When the initial fetch finishes in the store, raise a change event.</li>
</ul>
<p>From <code>fetchIfNecessary</code> in the store, go do the request unless it&rsquo;s in progress or
done. On the view side, show a loading spinner or something if you get <code>null</code>.
When the change event happens, whatever code set the state of your component
initially will be re-run, and this time it won&rsquo;t get <code>null</code> - deal with it
appropriately (show the actual UI).</p>
<p>This works for more than things that are well-defined at dev time. If you need
to, for example, fetch data for an arbitrary ID:</p>
<ul>
<li>View calls <code>Store.userById(10)</code> and gets <code>null</code>, renders lack of data
appropriately</li>
<li>Store is like &ldquo;my bad&rdquo; and fetches it from the server</li>
<li>Store raises change event when it arrives and the view re-renders</li>
</ul>
<h3 id="batteries-not-included">Batteries not included</h3>
<p>Upstream, in terms of actual usable code, flux just gives you a dispatcher. You
also need something to handle your events. This is easy to roll yourself, or you
can grab one of a bazillion things online that will do it for you. There is also
no base Store class for you, so make one of those. You should probably just
include some shared code for raising events and consuming actions. Mine looks
something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">UserStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">super</span><span class="p">(</span><span class="s2">&#34;USER&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">_users</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">        <span class="kr">super</span><span class="p">.</span><span class="nx">action</span><span class="p">(</span><span class="s2">&#34;CREATE.USER&#34;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">userCreated</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">userCreated</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">_users</span><span class="p">.</span><span class="nx">push</span><span class="p">(...);</span>
</span></span><span class="line"><span class="cl">        <span class="kr">super</span><span class="p">.</span><span class="nx">raiseChangeEvent</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">get</span> <span class="nx">Users</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_users</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Do what works best for you.</p>
<h2 id="starter-kit">Starter Kit</h2>
<p>If you want something with the batteries in and a base to build from, I&rsquo;ve got
you covered. Head over to
<a href="https://github.com/SirCmpwn/react-starter-kit">SirCmpwn/react-starter-kit</a> on
Github.</p>
<h2 id="conclusion">Conclusion</h2>
<p>React and Flux are going to be big. This feels like the right way to build a
frontend. Hopefully I saved you from all the headache I went through trying to
&ldquo;get&rdquo; this stuff, and I hope it serves you well in the future. I&rsquo;m going to be
pushing pretty hard for this model at my new gig, so I may be writing more blog
posts as I explore it in a large-scale application - stay tuned.</p>]]></description><pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate></item><item><title>osu!web - WebGL &amp; Web Audio</title><link>https://drewdevault.com/2015/06/14/osuweb.html</link><description><![CDATA[<script src="https://drewdevault.com/js/underscore-min.js"></script>
<p>I&rsquo;ve taken a liking to a video game called <a href="https://osu.ppy.sh">osu!</a> over the
past few months. It&rsquo;s a rhythm game where you use move your mouse to circles
that appear with the beat, and click (or press a key) at the right time. It
looks something like this:</p>
<iframe src="https://www.youtube.com/embed/qdaZnQQAPqQ" frameborder="0" allowfullscreen></iframe>
<p>The key of this game is that the &ldquo;beatmaps&rdquo; (a song plus notes to hit) are
user-submitted. There are thousands of them, and the difficulty curve is very
long - I&rsquo;ve been playing for 10 months and I&rsquo;m only maybe 70% of the way up the
difficulty curve. It&rsquo;s also a competitive game, which leads to a lot more fun,
where each user tries to complete maps a little bit better than everyone else
can. You can see on the left in that video - this is a very good player who
earned the #1 rank during this play.</p>
<p>In my tendency to start writing code related to every game I play, I&rsquo;ve been
working on a cool project called <a href="http://www.drewdevault.com/osuweb">osu!web</a>.
This is a Javascript project that can:</p>
<ul>
<li>Decompress osu beatmap archives</li>
<li>Decode the music with Web Audio</li>
<li>Decode the osu! beatmap format</li>
<li>Play the map!</li>
</ul>
<p>In case you don&rsquo;t have any osz files hanging around, try out <a href="https://sr.ht/f30.osz">this
one</a>, which is the one from the video above.</p>
<p><img src="https://sr.ht/044.png" alt=""></p>
<h2 id="osuweb-and-the-future">osu!web and the future</h2>
<p>This part of the blog post is for non-technical readers, mostly osu players.
osu!web is pretty cool, and I want to make it even better. My current plans are
just to make it a beatmap viewer, and I&rsquo;m working now on achieving that goal. I
have to finish sliders and add spinners, and eventually work on things like
storyboards. Playing background videos is not in the cards because of
limitations with HTML5 video.</p>
<p>Eventually, I&rsquo;d like to make it possible to link to a certain time in a certain
map, or in a certain replay. Oh yeah, I want to make it support replays, too.
If I get replays working, though, then I don&rsquo;t see any reason not to let players
try the maps out in their web browsers, too. Keep an eye out!</p>
<h2 id="technical-details">Technical Details</h2>
<p>This project is only possible thanks to a whole bunch of new web technologies
that have been stabilizing in the past year or so. The source code is <a href="https://github.com/SirCmpwn/osuweb">on
Github</a> if you want to check it out.</p>
<h3 id="loading-beatmaps">Loading beatmaps</h3>
<p>When the user <a href="https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/scenes/need-files.js#L8-L41">drags and
drops</a>
an osz file, we use <a href="https://github.com/gildas-lormeau/zip.js">zip.js</a> and
create a virtual filesystem of sorts to browse through the archive. In this
archive we have several things:</p>
<ul>
<li>A number of &ldquo;tracks&rdquo; - osu files that define notes and such for various
difficulties</li>
<li>The song (mp3) and optionally a video background (avi)</li>
<li>Assets - a background image and optionally a skin (like a Minecraft texture
pack)</li>
</ul>
<p><img src="https://sr.ht/ce6.png" alt=""></p>
<p>We then load the *.osu files and decode them. They look similar to ini files or
Unix config files. Here&rsquo;s a snippet:</p>
<pre><code>[General]
AudioFilename: MuryokuP - Sweet Sweet Cendrillon Drug.mp3
AudioLeadIn: 1000
PreviewTime: 69853

# snip

[Metadata]
Title:Sweet Sweet Cendrillon Drug
TitleUnicode:Sweet Sweet Cendrillon Drug
Artist:MuryokuP
ArtistUnicode:MuryokuP
Creator:Smoothie
Version:Cendrillon

# snip

[HitObjects]
104,308,1246,5,0,0:0:0:0:
68,240,1553,1,0,0:0:0:0:
68,164,1861,1,0,0:0:0:0:
104,96,2169,1,0,0:0:0:0:
172,60,2476,2,0,P|256:48|340:60,1,170,0|0,0:0|0:0,0:0:0:0:
404,104,3399,5,0,0:0:0:0:

# snip
</code></pre>
<p>This is decoded by
<a href="https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/osu.js">osu.js</a>. For
some sections (like <code>[Metadata]</code>), it just puts each entry into a dict that you
can pull from later. It does more for things like hit objects, and understands
which of these lines is a slider versus a hit circle versus a spinner and so on.</p>
<p>I sneakily loaded a beatmap in the background in your browser as you were
reading. If you want to check it out, open up your console and play with the
<code>track</code> object. Ignore all the disqus errors, they&rsquo;re irrelevant.</p>
<p><img src="https://sr.ht/a81.png" alt=""></p>
<h2 id="enter-stage-web-audio">Enter stage: Web Audio</h2>
<p>Web Audio had a bit of a rocky development cycle, what with Chrome thinking it&rsquo;s
special and implementing a completely different standard from everyone else.
Things have <a href="http://caniuse.com/#feat=audio-api">settled</a> by now, and I can
start playing with it 😁 Bonus: Mozilla finally added mp3 support to all
platforms, including Linux (which my dev machine runs).</p>
<p>The osz file includes an mp3, which we
<a href="https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/osu.js#L209-L224">extract</a>
into an ArrayBuffer, and
<a href="https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/osu-audio.js">load</a>
into a Web Audio context. This is super cool and totally would not have been
possible even a few months ago - kudos to the teams implementing all this
exciting stuff in the browsers.</p>
<p>That&rsquo;s about all we&rsquo;re doing with Web Audio right now. I do add a gain node so
that you can control the volume with your mouse wheel. In the future, we can get
more creative by:</p>
<ul>
<li>Adding support for HT/DT mods</li>
<li>Adding support for NC</li>
</ul>
<h2 id="enter-stage-pixi">Enter stage: PIXI</h2>
<p>Once we&rsquo;ve decoded the beatmap and loaded the audio, we can play it. After
briefly showing the user a difficulty selection, we jump into rendering the map.
For this, I&rsquo;ve decided to use <a href="http://pixijs.com/">PIXI.js</a>, which gives us a
really nice API to use on top of WebGL with a canvas fallback for when WebGL is
not available. I was originally just using canvas, but it wasn&rsquo;t very
performant, so I went looking for a 2D WebGL framework and found PIXI. It&rsquo;s
pretty cool.</p>
<p>First, we iterate over all of the hit objects on the beatmap and generate
sprites for them:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">populateHit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">hit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Creates PIXI objects for a given hit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="nx">hit</span><span class="p">.</span><span class="nx">score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="s2">&#34;circle&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="nx">self</span><span class="p">.</span><span class="nx">createHitCircle</span><span class="p">(</span><span class="nx">hit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="s2">&#34;slider&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="nx">self</span><span class="p">.</span><span class="nx">createSlider</span><span class="p">(</span><span class="nx">hit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">populateHit</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hits</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="c1">// Prepare sprites and such
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>This is all done before we start playing. We consider the timestamp in the music
that the hit is scheduled for, and then we place <em>all</em> of the hit objects into
an array and start the song. See code for
<a href="https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/scenes/playback.js#L88-L143">createHitCircle</a>,
which puts together a bunch of sprites for each hit cirlce and sets their alpha
to zero. See also
<a href="https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/scenes/playback.js#L145-L228">createSlider</a>,
which is more complicated (I&rsquo;ll go into detail later).</p>
<p>Each frame, we get the current time from the Web Audio layer, and we run a
function that updates a list of upcoming hit objects:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">updateUpcoming</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">timestamp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Cache the next ten seconds worth of hit objects
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">&lt;</span> <span class="nx">self</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">length</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="nx">futuremost</span> <span class="o">&lt;</span> <span class="nx">timestamp</span> <span class="o">+</span> <span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="nx">TIME_CONSTANT</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">hit</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">hits</span><span class="p">[</span><span class="nx">current</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">self</span><span class="p">.</span><span class="nx">game</span><span class="p">.</span><span class="nx">stage</span><span class="p">.</span><span class="nx">addChildAt</span><span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">self</span><span class="p">.</span><span class="nx">upcomingHits</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">hit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">time</span> <span class="o">&gt;</span> <span class="nx">futuremost</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">futuremost</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">time</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">self</span><span class="p">.</span><span class="nx">upcomingHits</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">hit</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">upcomingHits</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">time</span> <span class="o">-</span> <span class="nx">timestamp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">despawn</span> <span class="o">=</span> <span class="nx">NOTE_DESPAWN</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">&#34;slider&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">despawn</span> <span class="o">-=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTimeTotal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&lt;</span> <span class="nx">despawn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">self</span><span class="p">.</span><span class="nx">upcomingHits</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nx">i</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">self</span><span class="p">.</span><span class="nx">game</span><span class="p">.</span><span class="nx">stage</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="nx">o</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">});</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I adopted this pattern early on for performance reasons. During each frame&rsquo;s
rendering step, we only have the sprites and such loaded for hit objects in the
near future. This saves a lot of time. PIXI has all of these sprites loaded and
draws them for us each frame. During each frame, all we have to do is update
them:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">updateHitObjects</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">time</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">self</span><span class="p">.</span><span class="nx">updateUpcoming</span><span class="p">(</span><span class="nx">time</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">upcomingHits</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">hit</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">upcomingHits</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">switch</span> <span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s2">&#34;circle&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="nx">self</span><span class="p">.</span><span class="nx">updateHitCircle</span><span class="p">(</span><span class="nx">hit</span><span class="p">,</span> <span class="nx">time</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s2">&#34;slider&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="nx">self</span><span class="p">.</span><span class="nx">updateSlider</span><span class="p">(</span><span class="nx">hit</span><span class="p">,</span> <span class="nx">time</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s2">&#34;spinner&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1">//self.updateSpinner(hit, time); // TODO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This is passed in the current timestamp in the song, and based on this we are
able to do some simple math to calculate how much alpha each note should have,
as well as the scale of the approach circle (which tells you when to click the
note):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">updateHitCircle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">hit</span><span class="p">,</span> <span class="nx">time</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">time</span> <span class="o">-</span> <span class="nx">time</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&lt;=</span> <span class="nx">NOTE_APPEAR</span> <span class="o">&amp;&amp;</span> <span class="nx">diff</span> <span class="o">&gt;</span> <span class="nx">NOTE_FULL_APPEAR</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alpha</span> <span class="o">=</span> <span class="nx">diff</span> <span class="o">/</span> <span class="nx">NOTE_APPEAR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alpha</span> <span class="o">-=</span> <span class="mf">0.5</span><span class="p">;</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="o">-</span><span class="nx">alpha</span><span class="p">;</span> <span class="nx">alpha</span> <span class="o">+=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&lt;=</span> <span class="nx">NOTE_FULL_APPEAR</span> <span class="o">&amp;&amp;</span> <span class="nx">diff</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&gt;</span> <span class="nx">NOTE_DISAPPEAR</span> <span class="o">&amp;&amp;</span> <span class="nx">diff</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alpha</span> <span class="o">=</span> <span class="nx">diff</span> <span class="o">/</span> <span class="nx">NOTE_DISAPPEAR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alpha</span> <span class="o">-=</span> <span class="mf">0.5</span><span class="p">;</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="o">-</span><span class="nx">alpha</span><span class="p">;</span> <span class="nx">alpha</span> <span class="o">+=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&lt;=</span> <span class="nx">NOTE_APPEAR</span> <span class="o">&amp;&amp;</span> <span class="nx">diff</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">approach</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="p">((</span><span class="nx">diff</span> <span class="o">/</span> <span class="nx">NOTE_APPEAR</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">approach</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="p">((</span><span class="nx">diff</span> <span class="o">/</span> <span class="nx">NOTE_APPEAR</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">approach</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span> <span class="nx">o</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="nx">alpha</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I&rsquo;ve left out sliders, which again are pretty complicated. We&rsquo;ll get to them
after you look at this screenshot again:</p>
<p><img src="https://sr.ht/044.png" alt=""></p>
<p>All of these hit objects are having their alpha and approach circle scale
adjusted each frame by the above method. Since we&rsquo;re basing this on the
timestamp of the map, a convenient side effect is that we can pass in any time
to see what the map should look like at that time.</p>
<h2 id="curves">Curves</h2>
<p>The hardest thing so far has been rendering sliders, which are hit objects that
you&rsquo;re meant to click and hold as you move across the &ldquo;slider&rdquo;. They look like
this:</p>
<p><img src="https://sr.ht/c97.png" alt=""></p>
<p>The golden circle is the area you need to keep your mouse in if you want to pass
this slider. Sliders are defined as a series of curves. There are a few kinds:</p>
<ul>
<li>Linear sliders (not curves)</li>
<li>Catmull sliders</li>
<li>Bezier sliders</li>
</ul>
<p>For now I&rsquo;ve only done bezier sliders. I give many thanks to
<a href="https://github.com/itdelatrisu/opsu">opsu</a>, which I learned a lot of useful
stuff about sliders from. Each slider is currently generated using the
now-deprecated &ldquo;peppysliders&rdquo; method, where the sprite is repeated along the
curve several times. If you look carefully as a slider fades out, you can notice
that this is the case.</p>
<p><img src="https://sr.ht/787.png" alt=""></p>
<p>The newer style of sliders involves rendering them with a custom shader. This
should be possible with PIXI, but I haven&rsquo;t done any research on them yet.
Again, I expect to be able to draw a lot of knowledge from reading the opsu
source code.</p>
<p>I left out the initializer for sliders earlier, because it&rsquo;s long and
complicated. I&rsquo;ll include it here so you can see how this goes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">createSlider</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">hit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">lastFrame</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">keyframes</span><span class="p">[</span><span class="nx">hit</span><span class="p">.</span><span class="nx">keyframes</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">timing</span> <span class="o">=</span> <span class="nx">track</span><span class="p">.</span><span class="nx">timingPoints</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">track</span><span class="p">.</span><span class="nx">timingPoints</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">track</span><span class="p">.</span><span class="nx">timingPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">offset</span> <span class="o">&lt;</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">time</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">timing</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTime</span> <span class="o">=</span> <span class="nx">timing</span><span class="p">.</span><span class="nx">millisecondsPerBeat</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">pixelLength</span> <span class="o">/</span> <span class="nx">track</span><span class="p">.</span><span class="nx">difficulty</span><span class="p">.</span><span class="nx">SliderMultiplier</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTimeTotal</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTime</span> <span class="o">*</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">repeat</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// TODO: Other sorts of curves besides LINEAR and BEZIER
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// TODO: Something other than shit peppysliders
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">hit</span><span class="p">.</span><span class="nx">curve</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinearBezier</span><span class="p">(</span><span class="nx">hit</span><span class="p">,</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">SLIDER_LINEAR</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">curve</span><span class="p">.</span><span class="nx">curve</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">curve</span><span class="p">.</span><span class="nx">curve</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">base</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PIXI</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="nx">Resources</span><span class="p">[</span><span class="s2">&#34;hitcircle.png&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">base</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">base</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">base</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">xoffset</span> <span class="o">+</span> <span class="nx">c</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">base</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">yoffset</span> <span class="o">+</span> <span class="nx">c</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">base</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">base</span><span class="p">.</span><span class="nx">tint</span> <span class="o">=</span> <span class="nx">combos</span><span class="p">[</span><span class="nx">hit</span><span class="p">.</span><span class="nx">combo</span> <span class="o">%</span> <span class="nx">combos</span><span class="p">.</span><span class="nx">length</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">base</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">self</span><span class="p">.</span><span class="nx">createHitCircle</span><span class="p">({</span> <span class="c1">// Far end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">time</span><span class="o">:</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">time</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">combo</span><span class="o">:</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">combo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">index</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">x</span><span class="o">:</span> <span class="nx">lastFrame</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">y</span><span class="o">:</span> <span class="nx">lastFrame</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">objects</span><span class="o">:</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="nx">self</span><span class="p">.</span><span class="nx">createHitCircle</span><span class="p">(</span><span class="nx">hit</span><span class="p">);</span> <span class="c1">// Near end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Add follow circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">follow</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">follow</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="nx">PIXI</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="nx">Resources</span><span class="p">[</span><span class="s2">&#34;sliderfollowcircle.png&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">follow</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">follow</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">follow</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">follow</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">follow</span><span class="p">.</span><span class="nx">manualAlpha</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">follow</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Add follow ball
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">ball</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">ball</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PIXI</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="nx">Resources</span><span class="p">[</span><span class="s2">&#34;sliderb0.png&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ball</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ball</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ball</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ball</span><span class="p">.</span><span class="nx">tint</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ball</span><span class="p">.</span><span class="nx">manualAlpha</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ball</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">repeat</span> <span class="o">!==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Add reverse symbol
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">var</span> <span class="nx">reverse</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">reverse</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="k">new</span> <span class="nx">PIXI</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="nx">Resources</span><span class="p">[</span><span class="s2">&#34;reversearrow.png&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">reverse</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">xoffset</span> <span class="o">+</span> <span class="nx">lastFrame</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">yoffset</span> <span class="o">+</span> <span class="nx">lastFrame</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">reverse</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mf">0.8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">tint</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// This makes the arrow point back towards the start of the slider
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// TODO: Make it point at the previous keyframe instead
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">var</span> <span class="nx">deltaX</span> <span class="o">=</span> <span class="nx">lastFrame</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">deltaY</span> <span class="o">=</span> <span class="nx">lastFrame</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">rotation</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">deltaY</span><span class="p">,</span> <span class="nx">deltaX</span><span class="p">)</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reverse</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">repeat</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Add another reverse symbol
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">var</span> <span class="nx">reverse</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">reverse_b</span>
</span></span><span class="line"><span class="cl">            <span class="o">=</span> <span class="k">new</span> <span class="nx">PIXI</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="nx">Resources</span><span class="p">[</span><span class="s2">&#34;reversearrow.png&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">reverse</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">xoffset</span> <span class="o">+</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">yoffset</span> <span class="o">+</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">reverse</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mf">0.8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">tint</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">deltaX</span> <span class="o">=</span> <span class="nx">lastFrame</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">deltaY</span> <span class="o">=</span> <span class="nx">lastFrame</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">reverse</span><span class="p">.</span><span class="nx">rotation</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">deltaY</span><span class="p">,</span> <span class="nx">deltaX</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Only visible when it&#39;s the next end to hit:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">reverse</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reverse</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>As you can see, there are many more moving pieces here. The important part is
the curve:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">hit</span><span class="p">.</span><span class="nx">curve</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinearBezier</span><span class="p">(</span><span class="nx">hit</span><span class="p">,</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">SLIDER_LINEAR</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">curve</span><span class="p">.</span><span class="nx">curve</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">curve</span><span class="p">.</span><span class="nx">curve</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">base</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PIXI</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="nx">Resources</span><span class="p">[</span><span class="s2">&#34;hitcircle.png&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">base</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">base</span><span class="p">.</span><span class="nx">anchor</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">base</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">xoffset</span> <span class="o">+</span> <span class="nx">c</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">base</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">yoffset</span> <span class="o">+</span> <span class="nx">c</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">base</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">base</span><span class="p">.</span><span class="nx">tint</span> <span class="o">=</span> <span class="nx">combos</span><span class="p">[</span><span class="nx">hit</span><span class="p">.</span><span class="nx">combo</span> <span class="o">%</span> <span class="nx">combos</span><span class="p">.</span><span class="nx">length</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">base</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>In the <a href="https://github.com/SirCmpwn/osuweb/tree/gh-pages/scripts/curves">curve
code</a>, a
series of points along each curve are generated for us to place sprites at.
These are precomputed like all other hit objects to save time during playback.
However, the render updater is still quite complicated:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">updateSlider</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">hit</span><span class="p">,</span> <span class="nx">time</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">time</span> <span class="o">-</span> <span class="nx">time</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&lt;=</span> <span class="nx">NOTE_APPEAR</span> <span class="o">&amp;&amp;</span> <span class="nx">diff</span> <span class="o">&gt;</span> <span class="nx">NOTE_FULL_APPEAR</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Fade in (before hit)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">alpha</span> <span class="o">=</span> <span class="nx">diff</span> <span class="o">/</span> <span class="nx">NOTE_APPEAR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alpha</span> <span class="o">-=</span> <span class="mf">0.5</span><span class="p">;</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="o">-</span><span class="nx">alpha</span><span class="p">;</span> <span class="nx">alpha</span> <span class="o">+=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">approach</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="p">((</span><span class="nx">diff</span> <span class="o">/</span> <span class="nx">NOTE_APPEAR</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">approach</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="p">((</span><span class="nx">diff</span> <span class="o">/</span> <span class="nx">NOTE_APPEAR</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&lt;=</span> <span class="nx">NOTE_FULL_APPEAR</span> <span class="o">&amp;&amp;</span> <span class="nx">diff</span> <span class="o">&gt;</span> <span class="o">-</span><span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTimeTotal</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// During slide
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&gt;</span> <span class="nx">NOTE_DISAPPEAR</span> <span class="o">-</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTimeTotal</span> <span class="o">&amp;&amp;</span> <span class="nx">diff</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Fade out (after slide)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">alpha</span> <span class="o">=</span> <span class="nx">diff</span> <span class="o">/</span> <span class="p">(</span><span class="nx">NOTE_DISAPPEAR</span> <span class="o">-</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTimeTotal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alpha</span> <span class="o">-=</span> <span class="mf">0.5</span><span class="p">;</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="o">-</span><span class="nx">alpha</span><span class="p">;</span> <span class="nx">alpha</span> <span class="o">+=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Update approach circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">approach</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="p">((</span><span class="nx">diff</span> <span class="o">/</span> <span class="nx">NOTE_APPEAR</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">approach</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="p">((</span><span class="nx">diff</span> <span class="o">/</span> <span class="nx">NOTE_APPEAR</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&gt;</span> <span class="nx">NOTE_DISAPPEAR</span> <span class="o">-</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTimeTotal</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">approach</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">follow</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">follow</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">ball</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">ball</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Update ball and follow circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="o">-</span><span class="nx">diff</span> <span class="o">/</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTimeTotal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">at</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">curve</span><span class="p">.</span><span class="nx">pointAt</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">at_next</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">curve</span><span class="p">.</span><span class="nx">pointAt</span><span class="p">(</span><span class="nx">t</span> <span class="o">+</span> <span class="mf">0.01</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">follow</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">at</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">xoffset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">follow</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">at</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">height</span> <span class="o">+</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">yoffset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">at</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">xoffset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">at</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">height</span> <span class="o">+</span> <span class="nx">gfx</span><span class="p">.</span><span class="nx">yoffset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">deltaX</span> <span class="o">=</span> <span class="nx">at</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">at_next</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">deltaY</span> <span class="o">=</span> <span class="nx">at</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">at_next</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">at</span><span class="p">.</span><span class="nx">x</span> <span class="o">!==</span> <span class="nx">at_next</span><span class="p">.</span><span class="nx">x</span> <span class="o">||</span> <span class="nx">at</span><span class="p">.</span><span class="nx">y</span> <span class="o">!==</span> <span class="nx">at_next</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">hit</span><span class="p">.</span><span class="nx">ball</span><span class="p">.</span><span class="nx">rotation</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">deltaY</span><span class="p">,</span> <span class="nx">deltaX</span><span class="p">)</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&gt;</span> <span class="o">-</span><span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTimeTotal</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">sliderTime</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">hit</span><span class="p">.</span><span class="nx">ball</span><span class="p">.</span><span class="nx">texture</span> <span class="o">=</span> <span class="nx">Resources</span><span class="p">[</span><span class="s2">&#34;sliderb&#34;</span> <span class="o">+</span> <span class="nx">index</span> <span class="o">+</span> <span class="s2">&#34;.png&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">reverse</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">reverse</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">reverse</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">diff</span> <span class="o">%</span> <span class="mi">300</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.001</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">reverse_b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hit</span><span class="p">.</span><span class="nx">reverse_b</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">hit</span><span class="p">.</span><span class="nx">reverse_b</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">diff</span> <span class="o">%</span> <span class="mi">300</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.001</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">hit</span><span class="p">.</span><span class="nx">objects</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">_manualAlpha</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">o</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="nx">alpha</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Much of this is the same as the hit circle updater, since we have a similar hit
circle at the start of the slider that needs to update in a similar fashion.
However, we also have to move the rolling ball and the follow circle along the
slider as the song progresses. This involves calling out to the curve code to
figure out what point is (<code>current_time / slider_end</code>) along the length of the
slider. We put the ball there, and we also ask for the point at (<code>(current_time + 0.01) / slider_end</code>) and make the ball rotate to face that direction.</p>
<h2 id="conclusions">Conclusions</h2>
<p>That&rsquo;s the bulk of the work neccessary to make an osu renderer. I&rsquo;ll have to add
spinners once I feel like the slider code is complete, and a friend is working
on adding hit sounds (sound effects that play when you correctly hit a note).
The biggest problem he&rsquo;s facing is that Web Audio has no good solution for
low-latency audio playback. On my side of things, though, everything is going
great. PIXI was a really good choice - it&rsquo;s an easy to use API and the WebGL
frontend is fast as hell. osu!web plays a map with performance that compares to
the performance of osu! native.</p>
<script src="https://drewdevault.com/js/osu.js"></script>
<script>
var xhr = new XMLHttpRequest();
xhr.open("GET", "/example.osu");
xhr.onload = function() {
    window.track = new Track(xhr.responseText);
    window.track.decode();
};
xhr.send();
</script>]]></description><pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate></item><item><title>Hooks - running stuff on Github hooks</title><link>https://drewdevault.com/2015/04/19/Hooks.html</link><description><![CDATA[<p>I found myself in need of a simple tool for deploying a project on every git
commit, but I didn&rsquo;t have a build server set up. This led to Hooks - a very
simple tool that allows you to run arbitrary commands when Github&rsquo;s hooks
execute.</p>
<p>The configuration is very simple. In <code>/etc/hooks.conf</code>, write:</p>
<pre><code>[truecraft]
repository=SirCmpwn/TrueCraft
branch=master
command=systemctl restart hooks
valid_ips=204.232.175.64/27,192.30.252.0/22,127.0.0.1
</code></pre>
<p>You may include any number of hooks. The <code>valid_ips</code> entry in that example
allows you to accept hooks from Github and from localhost. Then you run Hooks
itself, it will execute your command when you push a commit to your repository.</p>
<p>This allows you to do continuous deployment on the cheap and easy. I hope you
find it useful. <a href="https://github.com/SirCmpwn/hooks">Hooks</a>.</p>]]></description><pubDate>Sun, 19 Apr 2015 00:00:00 +0000</pubDate></item><item><title>Porting an assembler, debugger, and more to WebAssembly</title><link>https://drewdevault.com/2014/11/30/Porting-an-entire-toolchain-to-the-browser-with-emscripten.html</link><description><![CDATA[<p>WebAssembly is pretty cool! It lets you write portable C and cross-compile it to
JavaScript so it&rsquo;ll run in a web browser. As the maintainer of
<a href="http://www.knightos.org">KnightOS</a>, I looked to WASM as a potential means
of reducing the cost of entry for new developers hoping to target the OS.</p>
<noscript>
Note: this article uses JavaScript to run all of this stuff in your web browser.
I don't use any third-party scripts, tracking, or anything else icky.
</noscript>
<h2 id="rationale-for-wasm">Rationale for WASM</h2>
<p>There are several pieces of software in the toolchain that are required to write
and test software for KnightOS:</p>
<ul>
<li><a href="https://github.com/KnightOS/scas">scas</a> - a z80 assembler</li>
<li><a href="https://github.com/KnightOS/genkfs">genkfs</a> - generates KFS filesystem images</li>
<li><a href="https://github.com/KnightOS/kpack">kpack</a> - packaging tool, like makepkg on Arch Linux</li>
<li><a href="https://github.com/KnightOS/z80e">z80e</a> - a z80 calculator emulator</li>
</ul>
<p>You also need a copy of the latest kernel and any of your dependencies from
<a href="https://packages.knightos.org">packages.knightos.org</a>. Getting all of this is
not straightforward. On Linux and Mac, there are no official packages for any of
these tools. On Windows, there are still no official packages, and you have to
use Cygwin on top of that. The first step to writing KnightOS programs is to
manually compile and install several tools, which is a lot to ask of someone who
just wants to experiment.</p>
<p>All of the tools in our toolchain are written in C. We saw WASM as an
opportunity to reduce all of this effort into simply firing up your web browser.
It works, too! Here&rsquo;s what was involved.</p>
<blockquote>
<p><strong>Note</strong>: Click the screen on the emulator to the left to give it your
keyboard. Click away to take it back. You can use your arrow keys, F1-F5,
enter, and escape (as MODE).</p></blockquote>
<h2 id="the-final-product">The final product</h2>
<p>Let&rsquo;s start by showing you what we&rsquo;ve accomplished. It&rsquo;s now possible for
curious developers to try out KnightOS programming in their web browser. Of
course, they still have to do it in assembly, but we&rsquo;re <a href="https://github.com/KnightOS/kcc">working on
that</a> 😉. Here&rsquo;s a &ldquo;hello world&rdquo; you can run in
your web browser:</p>
<div class="demo">
    <div class="editor"
        data-source="/sources/helloworld.asm"
        data-file="main.asm"></div>
    <div class="calculator-wrapper">
        <div class="calculator">
            <canvas width="385" height="256" class="emulator-screen"></canvas>
        </div>
    </div>
</div>
<p>We can also install new dependencies on the fly and use them in our programs.
Here&rsquo;s another program that draws the &ldquo;hello world&rdquo; message in a window. You
should install <code>core/corelib</code> first:</p>
<input type="text" id="package-name" value="core/corelib" />
<input type="button" id="install-package" value="Install" />
<div class="demo">
    <div class="editor" data-source="/sources/corelib-hello.asm" data-file="main.asm"></div>
    <div class="calculator-wrapper">
        <div class="calculator">
            <canvas width="385" height="256" class="emulator-screen"></canvas>
        </div>
    </div>
</div>
<p>You can find more packages to try out on
<a href="https://packages.knightos.org">packages.knightos.org</a>. Here&rsquo;s another example,
this one launches the file manager. You&rsquo;ll have to install a few packages for it
to work:</p>
<p>Install:
<input type="button" class="install-package-button" data-package="extra/fileman" value="extra/fileman" />
<input type="button" class="install-package-button" data-package="core/configlib" value="core/configlib" />
<input type="button" class="install-package-button" data-package="core/corelib" value="core/corelib" /></p>
<div class="demo">
    <div class="editor" data-source="/sources/fileman.asm" data-file="main.asm"></div>
    <div class="calculator-wrapper">
        <div class="calculator">
            <canvas width="385" height="256" class="emulator-screen"></canvas>
        </div>
    </div>
</div>
<p>Feel free to edit any of these examples! You can run them again with the Run
button. These resources might be useful if you want to play with this some more:</p>
<p><a href="http://www.z80.info/z80-op.txt">z80 instruction set</a> - <a href="http://tutorials.eeems.ca/ASMin28Days/lesson/toc.html">z80 assembly tutorial</a> - <a href="http://www.knightos.org/documentation/reference">KnightOS reference documentation</a></p>
<p>Note: our toolchain has some memory leaks, so eventually WASM is going to
run out of memory and then you&rsquo;ll have to refresh. Sorry!</p>
<h2 id="how-all-of-the-pieces-fit-together">How all of the pieces fit together</h2>
<p>When you
loaded this page, a bunch of things happened. First, the <a href="https://github.com/KnightOS/kernel/releases">latest
release</a> of the <a href="https://github.com/KnightOS/kernel">KnightOS
kernel</a> was downloaded. Then all of the
WASM ports of the toolchain were downloaded and loaded. Some virtual filesystems
were set up, and two KnightOS packages were downloaded and installed:
<a href="https://packages.knightos.org/core/init"><code>core/init</code></a>, and
<a href="https://packages.knightos.org/core/kernel-headers"><code>core/kernel-headers</code></a>,
respectively necessary for booting the system and compiling code against the
kernel API.  Extracting those packages involves copying them into kpack&rsquo;s
virtual filesystem and running <code>kpack -e path/to/package root/</code>.</p>
<p>When you click &ldquo;Run&rdquo; on one of these text boxes, the contents of the text box is
written to <code>/main.asm</code> in the assembler&rsquo;s virtual filesystem. The package
installation process extracts headers to <code>/include/</code>, and scas itself is run
with <code>/main.asm -I/include -o /executable</code>, which assembles the program and
writes the output to <code>/executable</code>.</p>
<p>Then we copy the executable into the genkfs filesystem (this is the tool that
generates filesystem images). We also copy the empty kernel into this
filesystem, as well as any of the packages we&rsquo;ve installed. We then run <code>genkfs /kernel.rom /root</code>, which creates a filesystem image from <code>/root</code> and bakes it
into <code>kernel.rom</code>. This produces a ready-to-emulate ROM image that we can load
into the z80e emulator on the left.</p>
<h2 id="the-wasm-details">The WASM details</h2>
<p>Porting all this stuff to WASM wasn&rsquo;t straightforward. The easiest part
was cross-compiling all of them to JavaScript:</p>
<pre><code>cd build
emconfigure cmake ..
emmake make
</code></pre>
<p>The process was basically that simple for each piece of software. There were
<a href="https://github.com/KnightOS/genkfs/commit/c4eefa87a3b5bdbafcc6d971654608c594f779a1">a</a>
<a href="https://github.com/KnightOS/scas/commit/d2044e7d7586a946422ce6493cc6dff01127d1c2">few</a>
<a href="https://github.com/KnightOS/scas/commit/8bc31af28e8419a9fa6c421147ea522935bd0df4">changes</a>
made to some of the tools to fix a few problems. The hard part
came when I wanted to run all of them on the same page. WASM compiled code
assumes that it will be the only WASM module on the page at any given
time, so this was a bit challenging and involved editing the generated JS.</p>
<p>The first thing I did was wrap all of the modules in isolated AMD loaders<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
You can see how some of this ended up looking by visiting the actual scripts
(warning, big files):</p>
<ul>
<li><a href="https://drewdevault.com/tools/scas.js">scas.js</a></li>
<li><a href="https://drewdevault.com/tools/kpack.js">kpack.js</a></li>
<li><a href="https://drewdevault.com/tools/genkfs.js">genkfs.js</a></li>
</ul>
<p>That was enough to make it so that they could all run. These are part of a
toolchain, though, so somehow they needed to share files. Emscripten&rsquo;s <a href="http://kripken.github.io/emscripten-site/docs/api_reference/Filesystem-API.html">FS
object</a>
cannot be shared between modules, so the solution was to write a little JS:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-coffeescript" data-lang="coffeescript"><span class="line"><span class="cl"><span class="nv">copy_between_systems = </span><span class="nf">(fs1, fs2, from, to, encoding) -&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">f</span> <span class="k">in</span> <span class="nx">fs1</span><span class="p">.</span><span class="nx">readdir</span><span class="p">(</span><span class="nx">from</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">continue</span> <span class="k">if</span> <span class="nx">f</span> <span class="k">in</span> <span class="p">[</span><span class="s">&#39;.&#39;</span><span class="p">,</span> <span class="s">&#39;..&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">fs1p = </span><span class="nx">from</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">f</span>
</span></span><span class="line"><span class="cl">    <span class="nv">fs2p = </span><span class="nx">to</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">f</span>
</span></span><span class="line"><span class="cl">    <span class="nv">s = </span><span class="nx">fs1</span><span class="p">.</span><span class="nx">stat</span><span class="p">(</span><span class="nx">fs1p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">(</span><span class="s">&#34;Writing </span><span class="si">#{</span><span class="nx">fs1p</span><span class="si">}</span><span class="s"> to </span><span class="si">#{</span><span class="nx">fs2p</span><span class="si">}</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">fs1</span><span class="p">.</span><span class="nx">isDir</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">mode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">try</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fs2</span><span class="p">.</span><span class="nx">mkdir</span><span class="p">(</span><span class="nx">fs2p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">catch</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># pass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">copy_between_systems</span><span class="p">(</span><span class="nx">fs1</span><span class="p">,</span> <span class="nx">fs2</span><span class="p">,</span> <span class="nx">fs1p</span><span class="p">,</span> <span class="nx">fs2p</span><span class="p">,</span> <span class="nx">encoding</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fs2</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">fs2p</span><span class="p">,</span> <span class="nx">fs1</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">fs1p</span><span class="p">,</span> <span class="p">{</span> <span class="nv">encoding: </span><span class="nx">encoding</span> <span class="p">}),</span> <span class="p">{</span> <span class="nv">encoding: </span><span class="nx">encoding</span> <span class="p">})</span>
</span></span></code></pre></div><p>With this, we can extract packages in the kpack filesystem and copy them to the
genkfs filesystem:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-coffeescript" data-lang="coffeescript"><span class="line"><span class="cl"><span class="nv">install_package = </span><span class="nf">(repo, name, callback) -&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">full_name = </span><span class="nx">repo</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">name</span>
</span></span><span class="line"><span class="cl">  <span class="nx">log</span><span class="p">(</span><span class="s">&#34;Downloading &#34;</span> <span class="o">+</span> <span class="nx">full_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nv">xhr = </span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="s">&#34;https://packages.knightos.org/&#34;</span> <span class="o">+</span> <span class="nx">full_name</span> <span class="o">+</span> <span class="s">&#34;/download&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nv">xhr.responseType = </span><span class="s">&#39;arraybuffer&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">xhr.onload = </span><span class="nf">() -&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">(</span><span class="s">&#34;Installing &#34;</span> <span class="o">+</span> <span class="nx">full_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">file_name = </span><span class="s">&#39;/packages/&#39;</span> <span class="o">+</span> <span class="nx">repo</span> <span class="o">+</span> <span class="s">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s">&#39;.pkg&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">data = </span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">response</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">toolchain</span><span class="p">.</span><span class="nx">kpack</span><span class="p">.</span><span class="nx">FS</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">file_name</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="p">{</span> <span class="nv">encoding: </span><span class="s">&#39;binary&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nx">toolchain</span><span class="p">.</span><span class="nx">kpack</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">callMain</span><span class="p">([</span><span class="s">&#39;-e&#39;</span><span class="p">,</span> <span class="nx">file_name</span><span class="p">,</span> <span class="s">&#39;/pkgroot&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="nx">copy_between_systems</span><span class="p">(</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">kpack</span><span class="p">.</span><span class="nx">FS</span><span class="p">,</span> <span class="nx">toolchain</span><span class="p">.</span><span class="nx">scas</span><span class="p">.</span><span class="nx">FS</span><span class="p">,</span> <span class="s">&#34;/pkgroot/include&#34;</span><span class="p">,</span> <span class="s">&#34;/include&#34;</span><span class="p">,</span> <span class="s">&#34;utf8&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">copy_between_systems</span><span class="p">(</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">kpack</span><span class="p">.</span><span class="nx">FS</span><span class="p">,</span> <span class="nx">toolchain</span><span class="p">.</span><span class="nx">genkfs</span><span class="p">.</span><span class="nx">FS</span><span class="p">,</span> <span class="s">&#34;/pkgroot&#34;</span><span class="p">,</span> <span class="s">&#34;/root&#34;</span><span class="p">,</span> <span class="s">&#34;binary&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">(</span><span class="s">&#34;Package installed.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">callback</span><span class="p">()</span> <span class="k">if</span> <span class="nx">callback</span><span class="o">?</span>
</span></span><span class="line"><span class="cl">  <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">()</span>
</span></span></code></pre></div><p>And this puts all the pieces in place for us to actually pass an assembly file
through our toolchain:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-coffeescript" data-lang="coffeescript"><span class="line"><span class="cl"><span class="nv">run_project = </span><span class="nf">(main) -&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Assemble
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nb">window</span><span class="p">.</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">scas</span><span class="p">.</span><span class="nx">FS</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s">&#39;/main.asm&#39;</span><span class="p">,</span> <span class="nx">main</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">log</span><span class="p">(</span><span class="s">&#34;Calling assembler...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nv">ret = </span><span class="nb">window</span><span class="p">.</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">scas</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">callMain</span><span class="p">([</span><span class="s">&#39;/main.asm&#39;</span><span class="p">,</span> <span class="s">&#39;-I/include/&#39;</span><span class="p">,</span> <span class="s">&#39;-o&#39;</span><span class="p">,</span> <span class="s">&#39;executable&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">ret</span> <span class="k">if</span> <span class="nx">ret</span> <span class="o">!=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="nx">log</span><span class="p">(</span><span class="s">&#34;Assembly done!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Build filesystem
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nv">executable = </span><span class="nb">window</span><span class="p">.</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">scas</span><span class="p">.</span><span class="nx">FS</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s">&#34;/executable&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nv">encoding: </span><span class="s">&#39;binary&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nb">window</span><span class="p">.</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">genkfs</span><span class="p">.</span><span class="nx">FS</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s">&#34;/root/bin/executable&#34;</span><span class="p">,</span> <span class="nx">executable</span><span class="p">,</span> <span class="p">{</span> <span class="nv">encoding: </span><span class="s">&#39;binary&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nb">window</span><span class="p">.</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">genkfs</span><span class="p">.</span><span class="nx">FS</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s">&#34;/root/etc/inittab&#34;</span><span class="p">,</span> <span class="s">&#34;/bin/executable&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">window</span><span class="p">.</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">genkfs</span><span class="p">.</span><span class="nx">FS</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s">&#34;/kernel.rom&#34;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">kernel_rom</span><span class="p">),</span> <span class="p">{</span> <span class="nv">encoding: </span><span class="s">&#39;binary&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nb">window</span><span class="p">.</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">genkfs</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">callMain</span><span class="p">([</span><span class="s">&#34;/kernel.rom&#34;</span><span class="p">,</span> <span class="s">&#34;/root&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">  <span class="nv">rom = </span><span class="nb">window</span><span class="p">.</span><span class="nx">toolchain</span><span class="p">.</span><span class="nx">genkfs</span><span class="p">.</span><span class="nx">FS</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s">&#34;/kernel.rom&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nv">encoding: </span><span class="s">&#39;binary&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">log</span><span class="p">(</span><span class="s">&#34;Loading your program into the emulator!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">current_emulator</span> <span class="o">!=</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">    <span class="nx">current_emulator</span><span class="p">.</span><span class="nx">cleanup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="nv">current_emulator = </span><span class="k">new</span> <span class="nx">toolchain</span><span class="p">.</span><span class="nx">ide_emu</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s">&#39;screen&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="nx">current_emulator</span><span class="p">.</span><span class="nx">load_rom</span><span class="p">(</span><span class="nx">rom</span><span class="p">.</span><span class="nx">buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span>
</span></span></code></pre></div><p>This was fairly easy to put together once we got all the tools to cooperate.
After all, these are all command-line tools. Invoking them is as simple as
calling <code>main</code> and then fiddling with the files that come out. Porting z80e, on
the other hand, was not nearly as simple.</p>
<h2 id="porting-z80e-to-the-browser">Porting z80e to the browser</h2>
<p><a href="https://github.com/KnightOS/z80e">z80e</a> is our calculator emulator. It&rsquo;s also
written in C, but needs to interact much more closely with the user. We need to
be able to render the display to a canvas, and to receive input from the user.
This isn&rsquo;t nearly as simple as just calling <code>main</code> and playing with some files.</p>
<p>To accomplish this, we&rsquo;ve put together
<a href="https://github.com/KnightOS/OpenTI">OpenTI</a>, a set of JavaScript bindings to
z80e. This is mostly the work of my friend puckipedia, but I can explain a bit
of what is involved. The short of it is that we needed to map native structs to
JavaScript objects and pass JavaScript code as function pointers to z80e&rsquo;s
hooks. So far as I know, the KnightOS team is the only group to have attempted
something with this deep of integration between WASM and JavaScript - because we
had to do a ton of the work ourselves.</p>
<p>OpenTI contains a
<a href="https://github.com/KnightOS/OpenTI/blob/master/webui/js/OpenTI/wrap.js">wrap</a>
module that is capable of wrapping structs and pointers in JavaScript objects.
This is a tedious procedure, because we have to know the offset and size of each
field in native code. An example of a wrapped object is given here:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">define</span><span class="p">([</span><span class="s2">&#34;../wrap&#34;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Wrap</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">Registers</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pointer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">pointer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">throw</span> <span class="s2">&#34;This object can only be instantiated with a memory region predefined!&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">pointer</span> <span class="o">=</span> <span class="nx">pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;AF&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;F&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">flags</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">,</span>  <span class="nx">pointer</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s2">&#34;N&#34;</span><span class="p">,</span>  <span class="nx">pointer</span><span class="p">,</span>  <span class="mi">64</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s2">&#34;PV&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">,</span>  <span class="mi">32</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s2">&#34;3&#34;</span><span class="p">,</span>  <span class="nx">pointer</span><span class="p">,</span>  <span class="mi">16</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s2">&#34;H&#34;</span><span class="p">,</span>  <span class="nx">pointer</span><span class="p">,</span>   <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s2">&#34;5&#34;</span><span class="p">,</span>  <span class="nx">pointer</span><span class="p">,</span>   <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s2">&#34;Z&#34;</span><span class="p">,</span>  <span class="nx">pointer</span><span class="p">,</span>   <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">flags</span><span class="p">,</span> <span class="s2">&#34;S&#34;</span><span class="p">,</span>  <span class="nx">pointer</span><span class="p">,</span>   <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pointer</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;BC&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pointer</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;DE&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;E&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;D&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pointer</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;HL&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;L&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;H&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pointer</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;_AF&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;_BC&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;_DE&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;_HL&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">6</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pointer</span> <span class="o">+=</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;PC&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;SP&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pointer</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;IX&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;IXL&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;IXH&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pointer</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt16</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;IY&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;IYL&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;IYH&#34;</span><span class="p">,</span> <span class="nx">pointer</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pointer</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;I&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="o">++</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Wrap</span><span class="p">.</span><span class="nx">UInt8</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&#34;R&#34;</span><span class="p">,</span> <span class="nx">pointer</span><span class="o">++</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 2 dummy bytes needed for 4-byte alignment
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">Registers</span><span class="p">.</span><span class="nx">sizeOf</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">26</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">Registers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>The result of that effort is that you can find out what the current value of a
register is from some nice clean JavaScript: <code>asic.cpu.registers.PC</code> (it&rsquo;s <code
id="register-pc"></code>, by the way). Pop open your JavaScript console and play
around with the <code>current_asic</code> global!</p>
<h2 id="conclusions">Conclusions</h2>
<p>I&rsquo;ve put all of this together on <a href="http://try.knightos.org">try.knightos.org</a>.
The source is available on
<a href="https://github.com/KnightOS/try.knightos.org">GitHub</a>. It&rsquo;s entirely
client-side, so it can be hosted on GitHub Pages. I&rsquo;m hopeful that this will
make it easier for people to get interested in KnightOS development, but it&rsquo;ll
be a lot better once I can get more documentation and tutorials written. It&rsquo;d be
pretty cool if we could have interactive tutorials like this!</p>
<p>If you, reader, are interested in working on some pretty cool shit, there&rsquo;s a
place for you! We have things to do in Assembly, C, JavaScript, Python, and a
handful of other things. Maybe you have a knack for design and want to help
improve it. Whatever the case may be, if you have interest in this stuff, come
hang out with us on IRC: <a href="http://webchat.freenode.net/?channels=knightos&amp;uio=d4">#knightos on
irc.freenode.net</a>.</p>
<hr>
<p><img src="https://sr.ht/zhRB.jpg" alt=""></p>
<p><strong>2018-08-31</strong>: This article was updated to fix some long-broken scripts and
adjust everything to fit into the since-updated blog theme. The title was also
changed from &ldquo;Porting an entire desktop toolchain to the browser with
Emscripten&rdquo; and some minor editorial corrections were made. References to
Emscripten were replaced with WebAssembly - WASM is the standard API that
browsers have implemented to replace asm.js, and the Emscripten toolchain and
JavaScript API remained compatible throughout the process.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>AMD was an early means of using modules with JavaScript, which was popular at the time this article was written (2014). Today, a different form of modules has become part of the JavaScript language standard.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate></item><item><title>On the profitability of image hosting websites</title><link>https://drewdevault.com/2014/10/10/The-profitability-of-online-services.html</link><description><![CDATA[<p>I&rsquo;ve been doing a lot of thought about whether or not it&rsquo;s even possible to both
run a simple website <em>and</em> turn a profit from it <em>and</em> maintain a high quality
of service. In particular, I&rsquo;m thinking about image hosts, considering that I
run one (a rather unprofitable one, too), but I would
think that my thoughts on this matter apply to more kinds of websites. That
being said, I&rsquo;ll just talk about media hosting because that&rsquo;s where I have
tangible expertise.</p>
<p>I think that all image hosts suffer from the same sad pattern of eventual
failure. That pattern is:</p>
<ol>
<li>Create a great image hosting website (you should stop here)</li>
<li>Decide to monetize it</li>
<li>Add advertising</li>
<li>Stop allowing hotlinking</li>
<li>Add more advertising</li>
<li>Add social tools like comments, voting - attempt build a community to look at
your ads</li>
</ol>
<p>Monetization is a poison. You start realizing that you wrote a shitty website in
PHP on shared hosting and it can&rsquo;t handle the traffic. You spend more money on
it and realize you don&rsquo;t like spending your money on it, so you decide to
monetize, and now the poison has got you. There&rsquo;s an extremely fine line to walk
with monetization. You start wanting to make enough money to support your
servers, but then you think to yourself &ldquo;well, I worked hard for this, maybe I
should make a living from it!&rdquo; This introduces several problems.</p>
<p>First of all, you made an image hosting website. It&rsquo;s already perfect. Almost
anything you can think of adding will only make it worse. If you suddenly decide
that you need to spend more time on it to justify taking money from it, then you
have a lot of time to get things wrong. You eventually run out of the good
features and start implementing the bad ones.</p>
<p>More importantly, though, you realize that you should be making <em>more</em> money.
Maybe you can turn this into a nice job working on your own website! And that
means you should start a business and assign yourself a salary and start making
a profit and hire new people. The money has to come from somewhere. So you make
even more compromises. Eventually, people stop using your service. People start
to <em>detest</em> your service. It can get so bad that people will refuse to click on
any link that leads to your website. Your users will be harassed for continuing
to use your site. <strong>You fail, and everyone hates you.</strong></p>
<p>This trend is observable with PhotoBucket, ImageShack, TinyPic, the list goes
on. The conclusion I&rsquo;ve drawn from this is that <strong>it is impossible to run a
profitable image hosting service without sacrificing what makes your service
worthwhile</strong>. We have arrived at a troubling place with the case of Imgur,
however.  MrGrim (the creator of Imgur) also identified this trend and decided
to put a stop to it by building a simple image hosting service for Reddit. It
had great intentions, check out the old archive.org mirror of it<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.  With
these great intentions and a great service, Imgur rose to become the 46th most
popular website globally<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and 18th in the United States alone, on the
shoulders of Reddit, which now ranks 47th. I&rsquo;m going to expand upon this here,
particularly with respect to Reddit, but I included the ranks here to dissuade
anyone who says &ldquo;there&rsquo;s more than Reddit out there&rdquo; in response to this post.
Reddit is a <em>huge</em> deal.</p>
<p>Other image hosts died down when people recognized their problems. Imgur has
reached a critical mass where that will not happen. 20% of all new Reddit posts
are Imgur, and most users just don&rsquo;t know better than to use anything else. That
being said, Imgur shows the signs of the image hosting poison. They stopped
being an image hosting website and became their own community. They added
advertising, which is fine on its own, but then they started redirecting direct
links<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> to pages with ads. And still, their userbase is just as strong,
despite better alternatives appearing.</p>
<p>I&rsquo;m not sure what to do about Imgur. I don&rsquo;t like that they&rsquo;ve won the mindshare
with a staggering margin. I do know that I&rsquo;ve tried to make my own service
immune to the image hosting poison. We run it incredibly lean - we handle over
10 million HTTP requests per day on a single server that also does transcoding
and storage for $200 per month. We get about $20-$30 in monthly revenue from our
Project Wonderful<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> ads, and a handful of donations that usually amount to
less than $20. Fortunately, $150ish isn&rsquo;t a hard number to pay out of our own
pockets every month, and we&rsquo;ve made a damn good website that&rsquo;s extremely
scalable to keep our costs low. We haven&rsquo;t taken seed money, and we&rsquo;re not
really the sort to fix problems by throwing more money at it. We also won&rsquo;t be
hiring any paid staff any time soon, so our costs are pretty much constant. On
top of that, if we do fall victim to the image hosting poison, 100% of our code
is open source, so the next service can skip R&amp;D and start being awesome
immediately. Even with all of that, though, all I can think of doing is sticking
around until people realize that Imgur really does suck.</p>
<p><em>2017-03-07 update</em></p>
<ul>
<li>mediacru.sh shut down (out of money)</li>
<li>pomf.se shut down (out of money)</li>
<li>minus.com shut down after going down the decline described in this post</li>
</ul>
<p>I have started a private service called <a href="https://sr.ht">sr.ht</a>, which I aim to
use to fix the problem by only letting my friends and I use it. It has
controlled growth and won&rsquo;t get too big and too expensive. It&rsquo;s on Github if you
want to <a href="https://github.com/SirCmpwn/sr.ht">use it</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://web.archive.org/web/20090225014924/http://imgur.com/">Original Imgur home page</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="http://www.alexa.com/siteinfo/imgur.com">Imgur on Alexa</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://dillpickle.github.io/imgur-please-dont-be-the-next-tinypic-or-imageshack.html">Imgur redirects &ldquo;direct&rdquo; links based on referrals</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://www.projectwonderful.com/">Project Wonderful, an advertising service that doesn&rsquo;t suck</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description><pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate></item><item><title>Process scheduling and multitasking in KnightOS</title><link>https://drewdevault.com/2014/09/02/Process-scheduling-in-KnightOS.html</link><description><![CDATA[<p>I&rsquo;m going to do some blogging about technical decisions made with
<a href="http://knightos.org">KnightOS</a>. It&rsquo;s an open-source project I&rsquo;ve been working
on for the past four years to build an open-source Unix-like kernel for TI
calculators (in assembly). It&rsquo;s been a cool platform on top of which I can
research low level systems concepts and I thought I&rsquo;d share some of my findings
with the world.</p>
<p>So, first of all, what is scheduling? For those who are completely out of the
loop, I&rsquo;ll explain what exactly it is and why it&rsquo;s neccessary. Computers run on
a CPU, which executes a series of instructions in order. Each core is not
capable of running several instructions concurrently. However, you can run
hundreds of processes at once on your computer (and you probably are doing so
as you read this article). There are a number of ways of accomplishing, but the
one that suits the most situations is <em>preemtive multitasking</em>. This is what
KnightOS uses. You see, a CPU can only execute one instruction after another,
but you can &ldquo;raise an interrupt&rdquo;. This will halt execution and move to some
other bit of code for a moment. This can be used to handle various events (for
example, the GameBoy raises an interrupt when a button is pressed). One of
these events is often a timer, which raises an interrupt at a fixed interval.
This is the mechanism by which preemptive multitasking is accomplished.</p>
<p>Let&rsquo;s say for a moment that you have two programs loaded into memory and
running, at addresses 0x1000 and 0x2000. Your kernel has an interrupt handler
at 0x100. So if program A is running and an interrupt fires, the following
happens:</p>
<ol>
<li>0x1000 is pushed to the stack as the return address</li>
<li>The program counter is set to 0x100 and the interrupt runs</li>
<li>The interrupt concludes and returns, which pops 0x1000 from the stack and
into the program counter.</li>
</ol>
<p>Once the interrput handler runs, however, the kernel has a chance to be sneaky:</p>
<ol>
<li>0x1000 is pushed to the stack as the return address</li>
<li>The program counter is set to 0x100 and the interrupt runs</li>
<li>The interrupt removes 0x1000 from the stack and puts 0x2000 there instead</li>
<li>The interrupt concludes and returns, which pops 0x2000 from the stack and
into the program counter.</li>
</ol>
<p>Now the interrupt has switched the CPU from program A to program B. And the
next time an interrupt occurs, the kernel can switch from program B to program
A. This event is called a &ldquo;context switch&rdquo;.  This is the basis of preemptive
multitasking. On top of this, however, there are lots of ideas around which
processes should get CPU time and when. Some systems have more complex
schedulers, but KnightOS runs on limited hardware and I wanted the context
switch to be short and sweet so that the running processes get as much of the
CPU as possible. I&rsquo;ll explain the simple KnightOS scheduling algorithm here.
First, its goals:</p>
<ul>
<li>Short and simple context switches</li>
<li>Ability to suspend processes when not in foreground</li>
<li>Ability to run background processes</li>
</ul>
<p>What KnightOS uses is a simple round robin with the ability to suspend threads.
That is, we have a list of processes and then some flags, among which is
whether or not the processes is currently suspended. So say we have this list
of processes in memory:</p>
<ul>
<li>1: PC=0x2000, not suspended</li>
<li>2: PC=0x2000, not suspended</li>
<li>3: PC=0x2000, suspended</li>
<li>4: PC=0x2000, not suspended</li>
</ul>
<p>As process 1 is running and an interrupt fires, the kernel looks at this table
and picks the next non-suspended process to run - process 2. On the next
interrupt, it does it again, skipping process 3 and giving time to process 4.</p>
<p>To actually implement this, we have to think about the stack. KnightOS runs on
z80 processors, which have a single stack and a shared memory space. The CPU
uses the PC register to keep track of which address the current instruction is
at. That is, say you compile this code:</p>
<pre tabindex="0"><code>ld a, 10
inc a
ld (hl), a
</code></pre><p>This compiles to the machine code 3E 0A 3C 77. Say we load this program at
0x8000 - then 0x8000 will point to <code>ld a, 10</code>. When the CPU finishes executing
this instruction, it advances PC to 0x8002 (since <code>ld a, 10</code> is a two-byte
instruction). The next instruction it executes will be <code>inc a</code>, and then PC
advances to 0x8003.</p>
<p>The stack is used for a lot of things. It can be used to save values, and it is
used to call subroutines. It is also used for interrupts. It&rsquo;s like the same
stacks you use in higher level applications, but it&rsquo;s at a very low level. When
an interrupt fires, the current value of PC is pushed to the stack. Then PC is
set to the interrupt routine, and then when that&rsquo;s done the top of the stack is
removed and placed into PC (effectively returning control to the original
location). However, since the stack is used for much more than that, we have
additional things to consider.</p>
<p>In KnightOS, when a new process starts, it&rsquo;s allocated a stack in memory and
the CPU&rsquo;s stack pointer (SP) is set to its address. When an interrupt happens,
we need to change the stack to point at some other process so it has time to
run (since that&rsquo;s where its PC is). However, we need to make sure that the
first processes stack is left intact. Since we allocate a new stack for the
next process, we can simply change SP to that processes stack. This will leave
behind the value of PC that was pushed during the interrupt for the previous
process, and lo and behlod a similar value of PC is waiting on top of the other
processes stack.</p>
<p>So that&rsquo;s it! We do a simple round robin, skipping suspended processes and
following the procedure outlined above to switch between them. This is how
KnightOS shares one CPU with several &ldquo;concurrent&rdquo; processes. Operating systems
like Linux use more complicated schedulers with more interesting theory if
you&rsquo;d like some additional reading. And of course, since KnightOS is open
source, you may enjoy reading all of our code for handling this stuff (in
assembly):</p>
<p><a href="https://github.com/KnightOS/kernel/blob/master/src/00/interrupt.asm">Context switching</a></p>
<p><a href="https://github.com/KnightOS/kernel/blob/master/src/00/thread.asm#L72">Stack allocation during process creation</a></p>
<p>We&rsquo;re hanging out on #knightos on Freenode if you want to chat about cool
low-level stuff like scheduling and memory management.</p>]]></description><pubDate>Tue, 2 Sep 2014 00:00:00 +0000</pubDate></item><item><title>Python&apos;s datetime sucks</title><link>https://drewdevault.com/2014/06/28/Python-datetime-sucks.html</link><description><![CDATA[<p>I&rsquo;ve been playing with Python for about a year now, and I like pretty much
everything about it. There&rsquo;s one thing that&rsquo;s really rather bad and really should
not be that bad, however - date &amp; time support. It&rsquo;s ridiculous how bad it is in
Python. This is what you get with the standard datetime module:</p>
<ul>
<li>The current time and strftime, with a reasonable set of properties</li>
<li>Time deltas with days, seconds, and microseconds and nothing else</li>
<li>Acceptable support for parsing dates and times</li>
</ul>
<p>What you don&rsquo;t get is:</p>
<ul>
<li>Meaningful time deltas</li>
<li>Useful arithmetic</li>
</ul>
<p>Date and time support is a rather tricky thing to do and it&rsquo;s something that the
standard library should support well enough to put it in the back of your mind
instead of making you do all the work.</p>
<p>We&rsquo;ll be comparing it to C# and .NET.</p>
<p>Let&rsquo;s say I want to get the total hours between two <code>datetime</code>s.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="c1">// C#</span>
</span></span><span class="line"><span class="cl"><span class="n">DateTime</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">double</span> <span class="n">hours</span> <span class="p">=</span> <span class="p">(</span><span class="n">b</span> <span class="p">-</span> <span class="n">a</span><span class="p">).</span><span class="n">TotalHours</span><span class="p">;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Python</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">hours</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">-</span> <span class="n">a</span><span class="p">)</span><span class="o">.</span><span class="n">seconds</span> <span class="o">/</span> <span class="mi">60</span> <span class="o">/</span> <span class="mi">60</span>
</span></span></code></pre></div><p>That&rsquo;s not so bad. How about getting the time exactly one month in the future:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddMonths</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">date</span><span class="o">.</span><span class="n">now</span><span class="p">()</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
</span></span></code></pre></div><p>Well, that&rsquo;s not ideal. In C#, if you add one month to Janurary 30th, you get
Feburary 28th (or leap day if appropriate). In Python, you could write a janky
function to do this for you, or you could use the crappy alternative I wrote
above.</p>
<p>How about if I want to take a delta between dates and show it somewhere, like a
countdown? Say an event is happening at some point in the future and I want to
print &ldquo;3 days, 5 hours, 12 minutes, 10 seconds left&rdquo;. This is distinct from the
first example, which could give you &ldquo;50 hours&rdquo;, whereas this example would give
you &ldquo;2 days, 2 hours&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="n">DateTime</span> <span class="n">future</span> <span class="p">=</span> <span class="p">...;</span>
</span></span><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">delta</span> <span class="p">=</span> <span class="n">future</span> <span class="p">-</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;{0} days, {1} hours, {2} minutes, {3} seconds left&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">delta</span><span class="p">.</span><span class="n">Days</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">delta</span><span class="p">.</span><span class="n">Hours</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">delta</span><span class="p">.</span><span class="n">Minutes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">delta</span><span class="p">.</span><span class="n">Seconds</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ...mess of math you have to implement yourself omitted...</span>
</span></span></code></pre></div><p>Maybe I have a website where users can set their locale?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="line"><span class="cl"><span class="n">DateTime</span> <span class="n">a</span> <span class="p">=</span> <span class="p">...;</span>
</span></span><span class="line"><span class="cl"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s">&#34;some format string&#34;</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Locale</span><span class="p">));</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">locale</span><span class="o">.</span><span class="n">setlocale</span><span class="p">(</span><span class="n">locale</span><span class="o">.</span><span class="n">LC_TIME</span><span class="p">,</span> <span class="s2">&#34;sv_SE&#34;</span><span class="p">)</span> <span class="c1"># Global!</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;some format string&#34;</span><span class="p">))</span>
</span></span></code></pre></div><p>By the way, that Python one doesn&rsquo;t work on Windows. It uses system locales names
which are different on Windows than on Linux or OS X. Mono (cross-platform .NET)
handles this for you on any system.</p>
<p>And a few other cases that are easy in .NET and not in Python:</p>
<ul>
<li>Days since the start of this year</li>
<li>Constants like the days in every month</li>
<li>Is it currently DST in this timezone?</li>
<li>Is this a leap year?</li>
</ul>
<p>In short, Python&rsquo;s datetime module could really use a lot of fleshing out. This
is common stuff and easy for a naive programmer to do wrong.</p>]]></description><pubDate>Sat, 28 Jun 2014 00:00:00 +0000</pubDate></item><item><title>Go&apos;s error handling doesn&apos;t sit right with me</title><link>https://drewdevault.com/2014/06/07/Why-Go-error-handling-doesnt-sit-right-with-me.html</link><description><![CDATA[<p>I&rsquo;ll open up by saying that I am not a language designer, and I do like a lot of
things about Go. I just recently figured out how to describe why Go&rsquo;s error
handling mechanics don&rsquo;t sit right with me.</p>
<p>If you aren&rsquo;t familiar with Go, here&rsquo;s an example of how Go programmers might do
error handling:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">result</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nf">SomethingThatMightGoWrong</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Handle error</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Proceed</span><span class="w">
</span></span></span></code></pre></div><p>Let&rsquo;s extrapolate this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span><span class="w"> </span><span class="nf">MightFail</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">result</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nf">doStuffA</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Error handling omitted</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">result</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nf">doStuffB</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Error handling omitted</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">result</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nf">doStuffC</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Error handling omitted</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nx">result</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nf">doStuffD</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Error handling omitted</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Go has good intentions by removing exceptions. They add a lot of overhead and
returning errors isn&rsquo;t a bad thing in general. However, I spend a lot of my time
writing assembly. Assembly can use similar mechanics, but I&rsquo;m spoiled by it (I
know, spoiled by assembly?) and I can see how Go could have done better. In
assembly, <code>goto</code> (or instructions like it) are the only means you have of
branching. It&rsquo;s not like other languages where it&rsquo;s taboo - you pretty much <em>have</em>
to use it. Most assembly also makes it fancy and conditional. For example:</p>
<pre><code>goto condition, label
</code></pre>
<p>This would jump to <code>label</code> given that <code>condition</code> is met. Like Go, assembly
generally doesn&rsquo;t have exceptions or anything similar. In my own personal flavor
of assembly, I have my functions return error codes as well.  Here&rsquo;s how it&rsquo;s
different, though. Let&rsquo;s look at some code:</p>
<pre tabindex="0"><code>call somethingThatMightFail
jp nz, errorHandler
call somethingThatMightFailB
jp nz, errorHandler
call somethingThatMightFailC
jp nz, errorHandler
call somethingThatMightFailD
jp nz, errorHandler
</code></pre><p>The difference here is that all functions return errors in the same way - by
resetting the Z flag. If that flag is set, we do a quick branch (the <code>jp</code>
instruction is short for <code>jump</code>) to the error handler. It&rsquo;s not clear from looking
at this snippet, but the error code is stored in the A register, which the
<code>errorHandler</code> recognizes as an error code and shows an appropriate message for.
We can have one error handler for an entire procedure, and it feels natural.</p>
<p>In Go, you have to put an if statement here. Each error caught costs you three
lines of code in the middle of your important logic flow. With languages that
throw exceptions, you have all the logic in a readable procedure, and some error
handling at the end of it all. With Go, you have to throw a bunch of
3-line-minimum error handlers all over the middle of your procedure.</p>
<p>In my examples, you can still return errors like this, but you can do so with a
lot less visual clutter. One line of error handling is better than 3 lines, if you
ask me. Also, no one gives a damn how you format assembly code, so if you wanted
to do something like this you&rsquo;d be fine:</p>
<pre tabindex="0"><code>call somethingThatMightFail
  jp nz, errorHandler
call somethingThatMightFailB
  jp nz, errorHandler
call somethingThatMightFailC
  jp nz, errorHandler
call somethingThatMightFailD
  jp nz, errorHandler
</code></pre><p>Or something like this:</p>
<pre tabindex="0"><code>call somethingThatMightFail  \ jp nz, errorHandler
call somethingThatMightFailB \ jp nz, errorHandler
call somethingThatMightFailC \ jp nz, errorHandler
call somethingThatMightFailD \ jp nz, errorHandler
</code></pre><p>The point is, I think Go&rsquo;s error handling stuff make your code harder to read and
more tedious to write. The basic idea - return errors instead of throwing them -
has good intentions. It&rsquo;s just that how they&rsquo;ve done it isn&rsquo;t so great.</p>]]></description><pubDate>Sat, 7 Jun 2014 00:00:00 +0000</pubDate></item><item><title>Hacking on your TI calculator</title><link>https://drewdevault.com/2014/02/25/Hacking-on-your-TI-calculator.html</link><description><![CDATA[<p>I&rsquo;ve built the <a href="https://github.com/KnightOS/kernel">KnightOS kernel</a>, an open-source OS that runs on
several TI calculator models, including the popular TI-83+ family, and recently the new TI-84+ Color
Silver Edition. I have published some information on how to build your own operating sytsems for these
devices, but I&rsquo;ve learned a lot since then and I&rsquo;m writing this blog post to include the lessons I&rsquo;ve
learned from other attempts.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Coming into this, you should be comforable with z80 assembly. It&rsquo;s possible to write an OS for these
devices in C (and perhaps other high-level languages), but proficiency in z80 assembly is still
required. Additionally, I don&rsquo;t consider C a viable choice for osdev on these devices when you
consider that the available compliers do not optimize the result very well, and these devices have
very limited resources.</p>
<p>You will also have to be comfortable (though not neccessarily expert-level) with these tools:</p>
<ul>
<li>make</li>
<li>The assembler of your choice</li>
<li>The toolchain of your choice</li>
</ul>
<p>I&rsquo;m going to gear this post from the perspective of a Linux user, but Windows users should be able to
do fine with cygwin. If you&rsquo;re looking for a good assembler, I suggest
<a href="https://github.com/KnightOS/sass">sass</a>, the assembler KnightOS uses. I built it myself to address
the needs of the kernel, and it includes several nice features that make it easier to maintain such a
large and complex codebase. Other good choices include
<a href="https://wabbit.codeplex.com/releases/view/45088">spasm</a> and
<a href="https://code.google.com/p/brass-assembler/">brass</a>.</p>
<p>For your toolchain, there are a few options, but I&rsquo;ve built custom tools that work well for KnightOS
and should fit into your project as well. You need to accomplish a couple of tasks:</p>
<ul>
<li><a href="https://github.com/KnightOS/MakeROM">Create ROM files from assembler output</a></li>
<li><a href="https://github.com/KnightOS/CreateUpgrade">Create OS upgrades from ROM files</a></li>
</ul>
<p>You also need the <a href="http://brandonw.net/calculators/keys/">cryptographic signing keys</a> for any of the
calculators you intend to support. There are ways to get around using these (which you&rsquo;ll need to
research for the TI-84+ CSE, for example) that you may want to look into. These keys will allow you
to add a cryptographic signature on your OS upgrades that will make your calculator think it&rsquo;s an
official Texas Instruments operating system, and you will be able to send it to the device. The
CreateUpgrade tool linked above produces signed upgrade files for you, but if you choose to use other
tools you may need to find a seperate signing tool.</p>
<p>Additonally, if you target devices with a newer boot code, you&rsquo;ll have to reflash your boot code or
use a tool like <a href="http://brandonw.net/calcstuff/uosrecv.zip">UOSRECV</a> to send your OS to an actual
device.</p>
<h2 id="what-youre-getting-into">What you&rsquo;re getting into</h2>
<p>You will be replacing everything on the calculator with your own system (though if you want to retain
compatability with TIOS like <a href="http://brandonw.net/calculators/OS2/">OS2</a> tried to, feel free). You&rsquo;ll
need to do <em>everything</em>, including common things like providing your own multiplication functions, or
drawing functions, or anything else. You&rsquo;ll also be responsible for initializing the calculator and
all of the hardware you want to use (such as the LCD or keypad).</p>
<p>That being said, you can take some code from projects like the KnightOS kernel to help you out. The
KnightOS kernel is open sourced under the MIT license, which means you&rsquo;re free to take any code from
it and use it in your own project. I also strongly suggest using it as a reference for when you get
stuck.</p>
<p>The advantage to taking on this task is that you can leverage the full potential of these devices.
What you&rsquo;re building for is a 6/15 MHz z80 with 32K or more of RAM, plus plenty of Flash and all
sorts of fun hardware. You can also build something that frees your device of proprietary code, if
that is what you are interested in (though the proprietary boot code would remain - but that&rsquo;s a
story for another day).</p>
<p>If you plan on making a full blown operating systems that can run arbituary programs and handle all
sorts of fun things, you&rsquo;ll want to make sure you have a strong understanding of programming in
general, as well as solid algorithmic knowledge and low-level knowledge. If you don&rsquo;t know how to
use pointers or bit math, or don&rsquo;t fully understand the details of the device, you may want to try
again when you do. That being said, I didn&rsquo;t know a lot when I started KnightOS (as the community was
happy to point out), and now I feel much more secure in my skills.</p>
<h2 id="building-the-basic-os">Building the basic OS</h2>
<p>We&rsquo;ll build a simple OS here to get you started, including booting the thing up and showing a
simple sprite on the screen. First, we&rsquo;ll create a simple Makefile. This OS will run on the
TI-73, TI-83+, TI-83+ SE, TI-84+, TI-84+ SE, and TI-84+ CSE, as well as the French variations
on these devices.</p>
<p><a href="https://drewdevault.com/demo_os.tar.gz">Grab this tarball</a> with the basic OS to get started. It looks like this:</p>
<pre><code>.
├── build
│   ├── CreateUpgrade.exe
│   ├── MakeROM.exe
│   └── sass.exe
├── inc
│   └── platforms.inc
├── Makefile
└── src
    ├── 00
    │   ├── base.asm
    │   ├── boot.asm
    │   ├── display.asm
    │   └── header.asm
    └── boot
        └── base.asm
</code></pre>
<p>If you grab this, run <code>make all</code> and you&rsquo;ll get a bunch of ROM files in the <code>bin</code> directory.
I&rsquo;ll explain a little bit about how it works. The important file here is <code>boot.asm</code>, but I
encourage you to read whatever else you feel like - especially the Makefile.</p>
<h3 id="miscellaneous-files">Miscellaneous Files</h3>
<p>Here is the purpose of each file, save for boot.asm (which gets its own section later):</p>
<ul>
<li>The makefile is like a script for building the OS. You should probably learn how these work
if you don&rsquo;t already.</li>
<li>Everything in build/ is part of the suggested toolchain.</li>
<li>The inc folder can be #included to, and includes <code>platforms.inc</code>, which defines a bunch of
useful constants for you.</li>
<li><code>base.asm</code> is just a bunch of #include statements, for linking without a linker</li>
<li><code>display.asm</code> has some useful display code I pulled out of KnightOS</li>
<li><code>header.asm</code> contains the OS header and RST list</li>
</ul>
<h3 id="bootasm">boot.asm</h3>
<p>The real juciy stuff is boot.asm. This file initializes everything and draws a smiley face
in the middle of the screen. Here&rsquo;s what it does (in order):</p>
<ol>
<li>Disable interrupts</li>
<li>Set up memory mappings</li>
<li>Create a stack and set SP accordingly</li>
<li>Initialize the LCD (B&amp;W or color)</li>
<li>Draw a smiley face</li>
</ol>
<p>I&rsquo;m sure your OS will probably want to do more interesting things. The KnightOS kernel, for
example, adds on top of this a bunch of kernel state initialization, filesystem initialization,
and loads up a boot program.</p>
<p><code>boot.asm</code> is well-commented and I encourage you to read through it to get an idea of what
needs to be done. The most complicated and annoying bit is the color LCD initialization, which is
mostly in <code>display.asm</code>.</p>
<p>I encourage you to spend some time playing with this. Bring in more things and try to build
something simple. Remember, you have no bcalls here. You need to build everything yourself.</p>
<h2 id="resources">Resources</h2>
<p>There are several things you might want to check out. The first and most obvious is
<a href="http://wikiti.brandonw.net/index.php?title=Calculator_Documentation">WikiTI</a>. I don&rsquo;t use much
here except for the documentation on I/O ports, and you&rsquo;ll find it useful, too.</p>
<p>The rest of the resources here are links to code in the KnightOS kernel.</p>
<p>The <a href="https://github.com/KnightOS/kernel/blob/master/src/00/interrupt.asm#L19">interrupt handler</a>
is a good reference for anyone wanting to work with interrupts to do things like handle the ON
button, link activity, or timers. One good use case here (and what KnightOS uses it for) is
preemptive multitasking. Note that you might want to use <code>exx</code> and <code>ex af, af'</code> instead of
pushing all the registers like KnightOS does. Take special note of how we handle USB activity.</p>
<p>You might want to consider offering some sort of color LCD compatabilty mode like KnightOS does.
This allows you to treat it like a black &amp; white screen. The relevant code is
<a href="https://github.com/KnightOS/kernel/blob/master/src/00/display-color.asm">here</a>.</p>
<p>If you want to interact with the keyboard, you&rsquo;ll probably want to reference the KnightOS
keyboard code <a href="https://github.com/KnightOS/kernel/blob/master/src/00/keyboard.asm">here</a>. You
might also consider working out an interrupt-based keyboard driver.</p>
<p>If you&rsquo;d like to manipulate Flash, you need to run most of it from RAM. You will probably want
to reference the <a href="https://github.com/KnightOS/kernel/blob/master/src/00/flash.asm">KnightOS Flash driver</a>.</p>
<h2 id="skipping-to-the-good-part">Skipping to the good part</h2>
<p>It&rsquo;s entirely possible to avoid writing an entire system by yourself. If you want to dive right
in and start immediately making something cool, you might consider grabbing the KnightOS kernel.
Right off the bat, you&rsquo;ll get:</p>
<ul>
<li>A tree-based filesystem</li>
<li>Multitasking and IPC</li>
<li>Memory management</li>
<li>A standard library (math, sorting, etc)</li>
<li>Library support</li>
<li>Hardware drivers for the keyboard, displays, etc</li>
<li>Color and monochrome graphics (and a compatability layer)</li>
<li>A font and text rendering</li>
<li><a href="http://www.knightos.org/documentation.html">Great documentation</a></li>
<li>Full support for 9 calculator models</li>
</ul>
<p>The kernel is standalone and open-source, and it runs great without the KnightOS userspace.
If you&rsquo;re interested in that, you can get started <a href="https://github.com/KnightOS/kernel">on GitHub</a>.
We&rsquo;d also love some contributors, if you want to help make the kernel even better.</p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>I hope to see a few cool OSes come into being in the TI world. It&rsquo;s unfortunately sparse in that
regard. If you run into any problems, feel free to drop by #knightos on irc.freenode.net, where
I&rsquo;m sure myself or someone else can help answer your questions. Good luck!</p>]]></description><pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate></item><item><title>The bug that hides from breakpoints</title><link>https://drewdevault.com/2014/02/02/The-worst-bugs.html</link><description><![CDATA[<p>This is the story of the most difficult bug I ever had to solve. See if you can
figure it out before the conclusion.</p>
<h3 id="background">Background</h3>
<p>For some years now, I&rsquo;ve worked on a kernel for Texas
Instruments calculators called <a href="https://github.com/KnightOS/kernel">KnightOS</a>.
This kernel is written entirely in assembly, and targets the old-school z80
processor from back in 1976. This classic processor was built without any
concept of protection rings. It&rsquo;s an 8-bit processor, with 150-some instructions
and (in this application) 32K of RAM and 32K of Flash. This stuff is so old, I
ended up writing most of the KnightOS toolchain from scratch rather than try to
get archaic assemblers and compilers running on modern systems.</p>
<p>When you&rsquo;re working in an enviornment like this, there&rsquo;s no seperation between
kernel and userland. All &ldquo;userspace&rdquo; programs run as root, and crashing the entire
system is a simple task. All the memory my kernel sets aside for the
process table, or memory ownership, file handles, stacks, any other executing
process - any program can modify this freely. Of course, we have to rely on the
userland to play nice, and it usually does. But when there are bugs, they can be a
real pain in the ass to hunt down.</p>
<h3 id="the-elusive-bug">The elusive bug</h3>
<p>The original bug report: <strong>When running the counting demo and switching between
applications, the thread list graphics become corrupted.</strong></p>
<p>I can reproduce this problem, so I settle into my development enviornment and I
set a breakpoint near the thread list&rsquo;s graphical code. I fire up the emulator and
repeat the steps&hellip; but it doesn&rsquo;t happen. This happened consistently: <strong>the bug
was not reproduceable when a breakpoint was set</strong>. Keep in mind, I&rsquo;m running this
in a z80 emulator, so the enviornment is supposedly no different. There&rsquo;s no
debugger attached here.</p>
<p>Though this is quite strange, I don&rsquo;t immediately despair. I try instead setting a
&ldquo;breakpoint&rdquo; by dropping an infinite loop in the code, instead of a formal
breakpoint. I figure that I can halt the program flow manually and open the
debugger to inspect the problem. However, the bug wouldn&rsquo;t be tamed quite so
easily. The bug was unreproducable when I had this psuedo-breakpoint in place,
too.</p>
<p>At this point, I started to get a little frustrated. How do I debug a problem that
disappears when you debug it? I decided to try and find out what caused it after
it had taken place, by setting the breakpoint to be hit only after the graphical
corruption happened. Here, I gained some ground. I was able to reproduce it, and
<em>then</em> halt the machine, and I could examine memory and such after the bug was
given a chance to have its way over the system.</p>
<p>I discovered the reason the graphics were being corrupted. The kernel kept the
length of the process table at a fixed address. The thread list, in order to draw
the list of active threads, looks to this value to determine how many threads it
should draw. Well, when the bug occured, the value was too high! The thread list
was drawing threads that did not exist, and the text rendering puked non-ASCII
characters all over the display. But why was that value being corrupted?</p>
<p>It was an oddly specific address to change. None of the surrounding memory was
touched. Making it even more odd was the very specific conditions this happened
under - only when the counting demo was running. I asked myself, &ldquo;what makes the
counting demo unique?&rdquo; It hit me after a moment of thought. The counting demo
existed to demonstrate non-supsendable threads. The kernel would stop executing
threads (or &ldquo;suspend&rdquo; them) when they lost focus, in an attempt to keep the
system&rsquo;s very limited resources available. The counting demo was marked as
non-suspendable, a feature that had been implemented a few months prior. It
showed a number on the screen that counted up forever, and the idea was that you
could go give some other application focus, come back, and the number would have
been counting up while you were away. A background task, if you will.</p>
<p>A more accurate description of the bug emerged: &ldquo;the length of the kernel process
table gets corrupted when launching the thread list when a non-suspendable thread
is running&rdquo;. What followed was hours and hours of crawling through the hundreds of
lines of assembly between summoning the thread list, and actually seeing it. I&rsquo;ll
spare you the details, because they are very boring. We&rsquo;ll pick the story back up
at the point where I had isolated the area in which it occured: applib.</p>
<p>The KnightOS userland offered &ldquo;applib&rdquo;, a library of common functions applications
would need to get the general UX of the system. Among these was the function
<code>applibGetKey</code>, which was a wrapper around the kernel&rsquo;s <code>getKey</code> function. The
idea was that it would work the same way (return the last key pressed), but for
special keys, it would do the appropriate action for you. For example, if you
pressed the F5 key, it would suspend the current thread and launch the thread
list. This is the mechanism with which most applications transfer control out of
their own thread and into the thread list.</p>
<p>Eager that I had found the source of the issue, I placed a breakpoint nearby. That
same issue from before struck again - the bug vanished when the breakpoint was
set. I tried a more creative approach: instead of using a proper breakpoint, I
asked the emulator to halt whenever that address was written to. Even still - the
bug hid itself whenever this happened.</p>
<p>I decided to dive into the kernel&rsquo;s getKey function. Here&rsquo;s the start of the
function, as it appeared at the time:</p>
<pre tabindex="0"><code>getKey:
    call hasKeypadLock
    jr _
    xor a
    ret
_:  push bc
; ...
</code></pre><p>I started going through this code line-by-line, trying to see if there was
anything here that could concievably touch the thread table. I noticed a minor
error here, and corrected it without thinking:</p>
<pre tabindex="0"><code>getKey:
    call hasKeypadLock
    jr z, _
    xor a
    ret
_:  push bc
; ...
</code></pre><p>The simple error I had corrected: getKey was pressing forward, even when the
current thread didn&rsquo;t have control of the keyboard hardware. This was a silly
error - only two characters were omitted.</p>
<p>A moment after I fixed that issue, the answer set in - this was the source of the
entire problem. Confirming it, I booted up the emulator with this change applied
and the bug was indeed resolved.</p>
<p>Can you guess what happened here? Here&rsquo;s the other piece of the puzzle to help you
out, translated more or less into C for readability:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">applibGetKey</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="nf">getKey</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">KEY_F5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">launch_threadlist</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nf">suspend_thread</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Two more details you might not have picked up on:</p>
<ul>
<li>applibGetKey is non-blocking</li>
<li>suspend_thread suspends the current thread immediately, so it doesn&rsquo;t return until the
thread resumes.</li>
</ul>
<h3 id="the-bug-uncovered">The bug, uncovered</h3>
<p>Here&rsquo;s what actually happened. For most threads (the suspendable kind), that
thread stops processing when <code>suspend_thread()</code> is called. The usually
non-blocking applibGetKey function blocks until the thread is resumed in this
scenario. However, the counting demo was <em>non-suspendable</em>. The suspend_thread
function has no effect, by design. So, suspend_thread did not block, and the
keypress was returned straight away. By this point, the thread list had launched
properly and it was given control of the keyboard.</p>
<p>However, the counting demo went back into its main loop, and started calling
applibGetKey again. Since the average user&rsquo;s finger remained pressed against the
button for a few moments more, applibGetKey <em>continued to launch the thread list,
over and over</em>. The thread list itself is a special thread, and it doesn&rsquo;t
actually have a user-friendly name. It was designed to ignore itself when it drew
the active threads. However, it was <em>not</em> designed to ignore other instances of
itself, the reason being that there would never be two of them running at once.
When attempting to draw these other instances, the thread list started rendering
text that wasn&rsquo;t there, causing the corruption.</p>
<p>This bug vanished whenever I set a breakpoint because it would halt the system&rsquo;s
keyboard processing logic. I lifted my finger from the key before allowing it to
move on.</p>
<p>The solution was to make the kernel&rsquo;s getKey function respect hardware locks by
fixing that simple, two-character typo. That way, the counting demo, which had no
right to know what keys were being pressed, would not know that they key was still
being pressed.</p>
<p>The debugging described by this blog post took approximately three weeks.</p>
<p><a href="https://news.ycombinator.com/item?id=7688700">Discussion on Hacker News</a></p>]]></description><pubDate>Sun, 2 Feb 2014 00:00:00 +0000</pubDate></item><item><title>Custom Music Syncing on Android</title><link>https://drewdevault.com/2013/08/24/Music-syncing-on-Android.html</link><description><![CDATA[<p>I have an HTC One, with CyanogenMod installed. I usually use Spotify, but I&rsquo;ve been wanting to move away from it for a while.
The biggest thing keeping me there was the ease of syncing up with my phone - I added music on my PC and it just showed up
on my phone.</p>
<p>So, I finally decided to make it work on my phone without Spotify. You might have success if you aren&rsquo;t using CyanogenMod,
but you definitely need to be rooted and you need to access a root shell on your phone. I was using <code>adb shell</code> to start with,
but it has poor terminal emulation. Instead, I ended up installing an SSH daemon on the phone and just using that. Easier to
use vim in such an enviornment.</p>
<p>The end result is that a cronjob kicks off each hour on my phone and runs a script that uses rsync to sync up my phone&rsquo;s music
with my desktop&rsquo;s music. That&rsquo;s another thing - a prerequisite of this working is that you have to expose your music to the
outside world on an SSH server somewhere.</p>
<p>I&rsquo;ll tell you how I got it working, then you can see if it works for you. It might take some effort on your part to tweak
these instructions to fit your requirements.</p>
<h2 id="sanity-checks">Sanity checks</h2>
<p>Get into your phone&rsquo;s shell and make sure you have basic things installed. You&rsquo;ll need to make sure you have:</p>
<ul>
<li>bash</li>
<li>cron</li>
<li>ssh</li>
<li>rsync</li>
</ul>
<p>If you don&rsquo;t have them, you can probably get them by installing busybox.</p>
<h2 id="setting-up-ssh">Setting up SSH</h2>
<p>We need to generate a key. I tried using ssh-keygen before, but it had problems with rsync on Android. Instead, we use
dropbearkey. Generate your key with <code>dropbearkey -t rsa -f /data/.ssh/id_rsa</code>. You&rsquo;ll see the public key echoed to stdout.
It&rsquo;s not saved anywhere for you, so grab it out of your shell and put it somewhere - namely, in the authorized_keys file
on the SSH server you plan to pull music from.</p>
<p>At this point, you can probably SSH into the server you want to pull from. Run <code>ssh -i /data/.ssh/id_rsa &lt;your server here&gt;</code>
to double check. Note that this isn&rsquo;t just for fun - you need to do this to get your server into known_hosts, so we can
non-interactively access it.</p>
<h2 id="making-android-more-sane">Making Android more sane</h2>
<p>Now that this is working, we need to clean up a little before cron will run right. Android is only a &ldquo;Linux&rdquo; system in the
sense that <code>uname</code> outputs &ldquo;Linux&rdquo;. It grossly ignores the FHS and you need to fix it a little. Figure out how to do a
nice init.d script on your phone. For my CyanogenMod install, I can add scripts to <code>/data/local/userlocal.d/</code> and they&rsquo;ll
be run at boot. Here&rsquo;s my little script for making Android a little more sane:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/system/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># Making /system rw isn&#39;t strictly needed</span>
</span></span><span class="line"><span class="cl">mount -o remount,rw /system
</span></span><span class="line"><span class="cl">mount -o remount,rw /
</span></span><span class="line"><span class="cl">ln -s /data/var /var
</span></span><span class="line"><span class="cl">ln -s /system/bin /bin
</span></span><span class="line"><span class="cl">ln -s /data/.ssh /.ssh
</span></span><span class="line"><span class="cl">crond
</span></span></code></pre></div><h2 id="update-script-and-initial-import">Update script and initial import</h2>
<p>The following is the script we&rsquo;ll use to update your phone&rsquo;s music library.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/system/xbin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># Syncs music between a remote computer and this phone</span>
</span></span><span class="line"><span class="cl"><span class="nv">RHOST</span><span class="o">=</span>&lt;remote hostname&gt;
</span></span><span class="line"><span class="cl"><span class="nv">EHOST</span><span class="o">=</span>&lt;fallback, I use this <span class="k">for</span> connecting from outside my LAN&gt;
</span></span><span class="line"><span class="cl"><span class="nv">RPORT</span><span class="o">=</span><span class="m">22</span>
</span></span><span class="line"><span class="cl"><span class="nv">RUSER</span><span class="o">=</span>&lt;username&gt;
</span></span><span class="line"><span class="cl"><span class="nv">ID</span><span class="o">=</span>/data/.ssh/id_rsa
</span></span><span class="line"><span class="cl"><span class="nv">RPATH</span><span class="o">=</span>/path/to/your/remote/music
</span></span><span class="line"><span class="cl"><span class="c1"># Omit the final directory. On my setup, this goes to /sdcard/Music, and my remote is /home/sircmpwn/Music</span>
</span></span><span class="line"><span class="cl"><span class="nv">LPATH</span><span class="o">=</span>/sdcard
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="k">$(</span>date<span class="k">)</span> &gt;&gt; /var/log/update-music.log
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">rsync -ruvL --delete --rsh<span class="o">=</span><span class="s2">&#34;ssh -p </span><span class="nv">$RPORT</span><span class="s2"> -i </span><span class="nv">$ID</span><span class="s2">&#34;</span> <span class="nv">$RUSER</span>@<span class="nv">$RHOST</span>:<span class="nv">$RPATH</span> <span class="nv">$LPATH</span> &gt;&gt; /var/log/update-music-rsync-so.log 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    rsync -ruvL --delete --rsh<span class="o">=</span><span class="s2">&#34;ssh -p </span><span class="nv">$RPORT</span><span class="s2"> -i </span><span class="nv">$ID</span><span class="s2">&#34;</span> <span class="nv">$RUSER</span>@<span class="nv">$EHOST</span>:<span class="nv">$RPATH</span> <span class="nv">$LPATH</span> &gt;&gt; /var/log/update-music-rsync-so.log 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>Save this script to <code>/data/updateMusic</code>, make it executable with <code>chmod +x /data/updateMusic</code>, then run the initial import
with <code>/data/updateMusic</code>. After a while, you&rsquo;ll have all your computer&rsquo;s music on your phone. Now, we just need to make it
update automatically.</p>
<p>Note: I set up a couple of logs for you. <code>/var/log/update-music.log</code> has the timestamp of every time it did an update. Also,
<code>/var/log/update-music-rsync-so.log</code> has the output of rsync from each run.</p>
<h2 id="cron">Cron</h2>
<p>Finally, we need to set up a cronjob. If you followed the instructions so far (and if you&rsquo;re lucky), you should have everything
ready for cron. The biggest pain in my ass was getting cron to coorperate, but the init script earlier should take care of
that. Run <code>crontab -e</code> and write your crontab:</p>
<pre><code>0 * * * * /data/updateMusic
</code></pre>
<p>Nice and simple. Your phone will now sync up your music every hour, on the hour, with your home computer. Here are some
possible points for improvement:</p>
<ul>
<li>Check wlan0 and only sync if it&rsquo;s up</li>
<li>Log cron somewhere</li>
<li>Alter the update script to do a little bit better about the &ldquo;fallback&rdquo;</li>
<li>Sync more than just music</li>
</ul>
<p>After all of this, I now have a nice setup that syncs music to my phone so I can listen to it with Apollo. I might switch
away from Apollo, though, it&rsquo;s pretty buggy. <a href="mailto:sir@cmpwn.com">Let me know</a> if you can suggest an alternative music
player, or if you get stuck working through this procedure yourself.</p>]]></description><pubDate>Sat, 24 Aug 2013 00:00:00 +0000</pubDate></item><item><title>You don&apos;t need jQuery</title><link>https://drewdevault.com/2013/08/19/You-dont-need-jQuery.html</link><description><![CDATA[<p>It&rsquo;s true. You really don&rsquo;t need jQuery. Modern web browsers can do most of what you want from jQuery,
without jQuery.</p>
<p>For example, take <a href="https://mediacru.sh">MediaCrush</a>. It&rsquo;s a website I spent some time working on with a friend.
It&rsquo;s actually quite sophisticated - drag-and-drop uploading, uploading via a hidden form, events wired up to
links and dynamically generated content, and ajax requests/file uploads, the whole she-bang. It does all of
that without jQuery. It&rsquo;s <a href="https://github.com/MediaCrush/MediaCrush">open source</a>, if you&rsquo;re looking for a good
example of how all of this can be used in the wild.</p>
<p>Let&rsquo;s walk through some of the things you like jQuery for, and I&rsquo;ll show you how to do it without.</p>
<h2 id="document-querying-with-css-selectors">Document Querying with CSS Selectors</h2>
<p>You like jQuery for selecting content. I don&rsquo;t blame you - it&rsquo;s really cool. Here&rsquo;s some code using jQuery:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.article p&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p>Now, here&rsquo;s how you can do it on vanilla JS:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;div.article p&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">items</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p>Documentation: <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document.querySelectorAll">querySelectorAll</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/element.classList">classList</a></p>
<p>This is, of course, a little more verbose. However, it&rsquo;s probably a lot simpler than you expected. Works in
IE 8 and newer - except for classList, which works in IE 10 and newer. You can instead use className, which is
a little less flexible, but still pretty easy to work with.</p>
<h2 id="ajax">Ajax</h2>
<p>You want to make requests in JavaScript. This is how you POST with jQuery:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/path/to/endpoint&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">parameter</span><span class="o">:</span> <span class="nx">value</span>
</span></span><span class="line"><span class="cl">    <span class="nx">otherParameter</span><span class="o">:</span> <span class="nx">otherValue</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">alert</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>Here&rsquo;s the same code, without jQuery:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span> <span class="c1">// A little deceptively named
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;/path/to/endpoint&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">formData</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormData</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">formData</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;parameter&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">formData</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;otherParameter&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">formData</span><span class="p">);</span>
</span></span></code></pre></div><p>Documentation: <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a></p>
<p>Also a bit more verbose than jQuery, but much simpler than you might&rsquo;ve expected. Now here&rsquo;s the real kicker:
It works in IE 7, and IE 5 with a little effort. IE actually pioneered XHR.</p>
<h2 id="animations">Animations</h2>
<p>This is where it starts to get more subjective and breaks backwards compatability. Here&rsquo;s my opinion on the
matter of transitions: dropping legacy browser support for fancy animations is acceptable. I don&rsquo;t think it&rsquo;s
a problem if your website isn&rsquo;t pretty and animated on older browsers. Keep that in mind as we move on.</p>
<p>I want to animate the opacity of a <code>.foobar</code> when you hover over it. With jQuery:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foobar&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mouseenter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">opacity</span><span class="o">:</span> <span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mouseleave&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">opacity</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>Without jQuery, I wouldn&rsquo;t do this in Javascript. I&rsquo;d use the magic of CSS animations:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">foobar</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">transition</span><span class="p">:</span> <span class="k">opacity</span> <span class="mi">2</span><span class="kt">s</span> <span class="kc">linear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">foobar</span><span class="p">:</span><span class="nd">hover</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">opacity</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p class="foobar">Hover over this text</p>
<style>.foobar{transition:opacity 2s linear;font-weight:bold;}.foobar:hover{opacity:0.5;}</style>
<p>Documentation: <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_animations">CSS animations</a></p>
<p>Much better, eh? Works in IE 10+. You can do much more complicated animations with CSS, but I can&rsquo;t think of
a good demo, so that&rsquo;s an exercise left to the reader.</p>
<h2 id="tree-traversal">Tree traversal</h2>
<p>jQuery lets you navigate a tree pretty easily. Let&rsquo;s say you want to find the container of a button and remove
all .foobar elements underneath it, upon clicking the button.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#mybutton&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;.foobar&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>Nice and succinct. I&rsquo;m sure you can tell the theme so far - the main advantage of jQuery is a less verbose
syntax. Here&rsquo;s how it&rsquo;s done without jQuery:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;mybutton&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">foobars</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.foobar&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">foobars</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">foobars</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span></span></code></pre></div><p>A little wordier, but not so bad. Works in IE 9+ (8+ if you don&rsquo;t use addEventListener).</p>
<h2 id="in-conclusion">In conclusion</h2>
<p>jQuery is, of course, based on JavaScript, and as a result, anything jQuery can do can be done without jQuery.
Feel free to <a href="mailto:sir@cmpwn.com">ask me</a> if you&rsquo;re curious about how I&rsquo;d do something else without jQuery.</p>
<p>I feel like adding jQuery is one of the first things a web developer does to their shiny new website. It just
isn&rsquo;t really necessary in this day and age. That extra request, 91kb, and load time are probably negligible,
but it&rsquo;s still a little less clean than it could be. There&rsquo;s no need to go back and rid all of your projects of
jQuery, but I&rsquo;d suggest that for your next one, you try to do without. Keep MDN open in the next tab over and
I&rsquo;m sure you&rsquo;ll get through it fine.</p>]]></description><pubDate>Mon, 19 Aug 2013 00:00:00 +0000</pubDate></item></channel></rss>